{
"version":3,
"file":"/Users/hlolli/csound/csound/wasm/browser/dist/csound.js",
"lineCount":431,
"mappings":"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",
"sources":["src/com/google/javascript/jscomp/js/base.js","./node_modules/google-closure-library/closure/goog/base.js","node_modules/comlink/src/comlink.ts","./node_modules/lines-logger/lib/index.js","./src/logger.js","./src/modules/instantiation.js","./src/utils/text-encoders.js","./src/utils/trim-null.js","./src/utils/string-pointers.js","./src/modules/performance.js","./src/utils/native-sizes.js","./src/utils/structure-buffer-to-object.js","./src/structures.js","./src/modules/attributes.js","./src/modules/rtaudio.js","./node_modules/rambda/dist/rambda.esm.js","./src/modules/rtmidi.js","./src/modules/control-events.js","./src/modules/general-io.js","./src/modules/extra.js","./src/modules/score-handling.js","./src/modules/table.js","./src/filesystem/worker-fs.js","./src/libcsound.js","./src/utils.js","./src/mains/messages.main.js","./src/utils/clear-array.js","./src/utils/event-promises.js","./node_modules/eventemitter3/umd/eventemitter3.min.js","./src/events.js","./dist/__compiled.vanilla.worker.inline.js","./src/mains/vanilla.main.js","./node_modules/unmute-ios-audio/index.js","./src/constants.js","./dist/__compiled.sab.worker.inline.js","./src/mains/sab.main.js","./src/utils/request-midi.js","./dist/__compiled.worklet.worker.inline.js","./src/mains/worklet.main.js","./src/mains/io.utils.js","./dist/__compiled.old-spn.worker.inline.js","./src/mains/old-spn.main.js","./src/filesystem/constants.js","./node_modules/google-closure-library/closure/goog/debug/error.js","./node_modules/google-closure-library/closure/goog/dom/nodetype.js","./node_modules/google-closure-library/closure/goog/asserts/asserts.js","./node_modules/google-closure-library/closure/goog/array/array.js","./node_modules/google-closure-library/closure/goog/dom/asserts.js","./node_modules/google-closure-library/closure/goog/functions/functions.js","./node_modules/google-closure-library/closure/goog/string/typedstring.js","./node_modules/google-closure-library/closure/goog/string/const.js","./node_modules/google-closure-library/closure/goog/i18n/bidi.js","./node_modules/google-closure-library/closure/goog/html/trustedtypes.js","./node_modules/google-closure-library/closure/goog/html/safescript.js","./node_modules/google-closure-library/closure/goog/fs/url.js","./node_modules/google-closure-library/closure/goog/fs/blob.js","./node_modules/google-closure-library/closure/goog/html/trustedresourceurl.js","./node_modules/google-closure-library/closure/goog/string/internal.js","./node_modules/google-closure-library/closure/goog/html/safeurl.js","./node_modules/google-closure-library/closure/goog/html/safestyle.js","./node_modules/google-closure-library/closure/goog/object/object.js","./node_modules/google-closure-library/closure/goog/html/safestylesheet.js","./node_modules/google-closure-library/closure/goog/dom/htmlelement.js","./node_modules/google-closure-library/closure/goog/dom/tagname.js","./node_modules/google-closure-library/closure/goog/labs/useragent/useragent.js","./node_modules/google-closure-library/closure/goog/labs/useragent/util.js","./node_modules/google-closure-library/closure/goog/labs/useragent/highentropy/highentropyvalue.js","./node_modules/google-closure-library/closure/goog/labs/useragent/highentropy/highentropydata.js","./node_modules/google-closure-library/closure/goog/labs/useragent/browser.js","./node_modules/google-closure-library/closure/goog/dom/tags.js","./node_modules/google-closure-library/closure/goog/html/safehtml.js","./node_modules/google-closure-library/closure/goog/html/uncheckedconversions.js","./node_modules/google-closure-library/closure/goog/dom/safe.js","./node_modules/google-closure-library/closure/goog/string/string.js","./node_modules/google-closure-library/closure/goog/string/path.js","./src/filesystem/wasi.js","./src/zlib/zlib.js","./src/zlib/util.js","./src/zlib/adler32.js","./src/zlib/huffman.js","./src/zlib/rawinflate.js","./src/zlib/inflate.js","./src/module.js","./src/dlinit.js","./src/utils/message-port-state.js","./src/mains/spn.main.js","./dist/__compiled.worklet.singlethread.worker.inline.js","./src/mains/worklet.singlethread.main.js","./dist/__csound_wasm.inline.js","./src/index.js"],
"sourcesContent":["/*\n * Copyright 2012 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview The base namespace for code injected by the compiler\n * at compile-time.\n */\n\n/** @const */\nvar $jscomp = $jscomp || {};\n\n/** @const Locals for goog.scope */\n$jscomp.scope = {};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will attempt to load Closure's deps file, unless\n * the global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects\n * to include their own deps file(s) from different locations.\n *\n * Avoid including base.js more than once. This is strictly discouraged and not\n * supported. goog.require(...) won't work properly in that case.\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n/**\n * Reference to the global object.\n * https://www.ecma-international.org/ecma-262/9.0/index.html#sec-global-object\n *\n * More info on this implementation here:\n * https://docs.google.com/document/d/1NAeW4Wk7I7FV0Y2tcUFvQdGMc89k2vdgSXInw8_nvCI/edit\n *\n * @const\n * @suppress {undefinedVars} self won't be referenced unless `this` is falsy.\n * @type {!Global}\n */\ngoog.global =\n    // Check `this` first for backwards compatibility.\n    // Valid unless running as an ES module or in a function wrapper called\n    //   without setting `this` properly.\n    // Note that base.js can't usefully be imported as an ES module, but it may\n    // be compiled into bundles that are loadable as ES modules.\n    this ||\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n    // For in-page browser environments and workers.\n    self;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, `CLOSURE_UNCOMPILED_DEFINES` may be defined before\n * loading base.js.  If a key is defined in `CLOSURE_UNCOMPILED_DEFINES`,\n * `goog.define` will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * Currently the Closure Compiler will only recognize very simple definitions of\n * this value when looking for values to apply to compiled code and ignore all\n * other references.  Specifically, it looks the value defined at the variable\n * declaration, as with the example above.\n *\n * TODO(user): Improve the recognized definitions.\n *\n * @type {!Object<string, (string|number|boolean)>|null|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name The name of the object that this file defines.\n * @param {*=} object The object to expose at the end of the path.\n * @param {boolean=} overwriteImplicit If object is set and a previous call\n *     implicitly constructed the namespace given by name, this parameter\n *     controls whether object should overwrite the implicitly constructed\n *     namespace or be merged into it. Defaults to false.\n * @param {?Object=} objectToExportTo The object to add the path to; if this\n *     field is not specified, its value defaults to `goog.global`.\n * @private\n */\ngoog.exportPath_ = function(name, object, overwriteImplicit, objectToExportTo) {\n  var parts = name.split('.');\n  var cur = objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && typeof cur.execScript != 'undefined') {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && object !== undefined) {\n      if (!overwriteImplicit && goog.isObject(object) &&\n          goog.isObject(cur[part])) {\n        // Merge properties on object (the input parameter) with the existing\n        // implicitly defined namespace, so as to not clobber previously\n        // defined child namespaces.\n        for (var prop in object) {\n          if (object.hasOwnProperty(prop)) {\n            cur[part][prop] = object[prop];\n          }\n        }\n      } else {\n        // Either there is no existing implicit namespace, or overwriteImplicit\n        // is set to true, so directly assign object (the input parameter) to\n        // the namespace.\n        cur[part] = object;\n      }\n    } else if (cur[part] && cur[part] !== Object.prototype[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler options or the\n * value set in the CLOSURE_DEFINES object. Returns the defined value so that it\n * can be used safely in modules. Note that the value type MUST be either\n * boolean, number, or string.\n *\n * @param {string} name The distinguished name to provide.\n * @param {T} defaultValue\n * @return {T} The defined value.\n * @template T\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    var uncompiledDefines = goog.global.CLOSURE_UNCOMPILED_DEFINES;\n    var defines = goog.global.CLOSURE_DEFINES;\n    if (uncompiledDefines &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (uncompiledDefines).nodeType === undefined &&\n        Object.prototype.hasOwnProperty.call(uncompiledDefines, name)) {\n      value = uncompiledDefines[name];\n    } else if (\n        defines &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        /** @type {?} */ (defines).nodeType === undefined &&\n        Object.prototype.hasOwnProperty.call(defines, name)) {\n      value = defines[name];\n    }\n  }\n  return value;\n};\n\n\n/**\n * @define {number} Integer year indicating the set of browser features that are\n * guaranteed to be present.  This is defined to include exactly features that\n * work correctly on all \"modern\" browsers that are stable on January 1 of the\n * specified year.  For example,\n * ```js\n * if (goog.FEATURESET_YEAR >= 2019) {\n *   // use APIs known to be available on all major stable browsers Jan 1, 2019\n * } else {\n *   // polyfill for older browsers\n * }\n * ```\n * This is intended to be the primary define for removing\n * unnecessary browser compatibility code (such as ponyfills and workarounds),\n * and should inform the default value for most other defines:\n * ```js\n * const ASSUME_NATIVE_PROMISE =\n *     goog.define('ASSUME_NATIVE_PROMISE', goog.FEATURESET_YEAR >= 2016);\n * ```\n *\n * The default assumption is that IE9 is the lowest supported browser, which was\n * first available Jan 1, 2012.\n *\n * TODO(user): Reference more thorough documentation when it's available.\n */\ngoog.FEATURESET_YEAR = goog.define('goog.FEATURESET_YEAR', 2012);\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production. It can be easily stripped\n * by specifying --define goog.DEBUG=false to the Closure Compiler aka\n * JSCompiler. For example, most toString() methods should be declared inside an\n * \"if (goog.DEBUG)\" conditional because they are generally used for debugging\n * purposes and it is difficult for the JSCompiler to statically determine\n * whether they are used.\n */\ngoog.DEBUG = goog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as a compiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he).\n *\n */\ngoog.LOCALE = goog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * This method is intended to be used for bookkeeping purposes.  We would\n * like to distinguish uses of goog.LOCALE used for code stripping purposes\n * and uses of goog.LOCALE for other uses (such as URL parameters).\n *\n * This allows us to ban direct uses of goog.LOCALE and to ensure that all\n * code has been transformed to our new localization build scheme.\n *\n * @return {string}\n *\n */\ngoog.getLocale = function() {\n  return goog.LOCALE;\n};\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the compiler.\n */\ngoog.TRUSTED_SITE = goog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.DISALLOW_TEST_ONLY_CODE =\n    goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING =\n    goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * deprecated Use goog.module (see b/159289405)\n */\ngoog.provide = function(name) {\n  if (goog.isInModuleLoader_()) {\n    throw new Error('goog.provide cannot be used within a module.');\n  }\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw new Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {?Object=} object The object to embed in the namespace.\n * @param {boolean=} overwriteImplicit If object is set and a previous call\n *     implicitly constructed the namespace given by name, this parameter\n *     controls whether opt_obj should overwrite the implicitly constructed\n *     namespace or be merged into it. Defaults to false.\n * @private\n */\ngoog.constructNamespace_ = function(name, object, overwriteImplicit) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, object, overwriteImplicit);\n};\n\n\n/**\n * According to the CSP3 spec a nonce must be a valid base64 string.\n * @see https://www.w3.org/TR/CSP3/#grammardef-base64-value\n * @private @const\n */\ngoog.NONCE_PATTERN_ = /^[\\w+/_-]+[=]{0,2}$/;\n\n\n/**\n * Returns CSP nonce, if set for any script tag.\n * @param {?Window=} opt_window The window context used to retrieve the nonce.\n *     Defaults to global context.\n * @return {string} CSP nonce or empty string if no nonce is present.\n * @private\n */\ngoog.getScriptNonce_ = function(opt_window) {\n  var doc = (opt_window || goog.global).document;\n  var script = doc.querySelector && doc.querySelector('script[nonce]');\n  if (script) {\n    // Try to get the nonce from the IDL property first, because browsers that\n    // implement additional nonce protection features (currently only Chrome) to\n    // prevent nonce stealing via CSS do not expose the nonce via attributes.\n    // See https://github.com/whatwg/html/issues/2369\n    var nonce = script['nonce'] || script.getAttribute('nonce');\n    if (nonce && goog.NONCE_PATTERN_.test(nonce)) {\n      return nonce;\n    }\n  }\n  return '';\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n * @return {void}\n */\ngoog.module = function(name) {\n  if (typeof name !== 'string' || !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw new Error('Invalid module identifier');\n  }\n  if (!goog.isInGoogModuleLoader_()) {\n    throw new Error(\n        'Module ' + name + ' has been loaded incorrectly. Note, ' +\n        'modules cannot be loaded as normal scripts. They require some kind of ' +\n        'pre-processing step. You\\'re likely trying to load a module via a ' +\n        'script tag or as a part of a concatenated bundle without rewriting the ' +\n        'module. For more info see: ' +\n        'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw new Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw new Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (name in goog.loadedModules_) {\n      return goog.loadedModules_[name].exports;\n    } else if (!goog.implicitNamespaces_[name]) {\n      var ns = goog.getObjectByName(name);\n      return ns != null ? ns : null;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Types of modules the debug loader can load.\n * @enum {string}\n */\ngoog.ModuleType = {\n  ES6: 'es6',\n  GOOG: 'goog'\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareLegacyNamespace:boolean,\n *   type: ?goog.ModuleType\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module or an es6 module is currently being\n *     initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();\n};\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInGoogModuleLoader_ = function() {\n  return !!goog.moduleLoaderState_ &&\n      goog.moduleLoaderState_.type == goog.ModuleType.GOOG;\n};\n\n\n/**\n * @private\n * @return {boolean} Whether an es6 module is currently being initialized.\n */\ngoog.isInEs6ModuleLoader_ = function() {\n  var inLoader = !!goog.moduleLoaderState_ &&\n      goog.moduleLoaderState_.type == goog.ModuleType.ES6;\n\n  if (inLoader) {\n    return true;\n  }\n\n  var jscomp = goog.global['$jscomp'];\n\n  if (jscomp) {\n    // jscomp may not have getCurrentModulePath if this is a compiled bundle\n    // that has some of the runtime, but not all of it. This can happen if\n    // optimizations are turned on so the unused runtime is removed but renaming\n    // and Closure pass are off (so $jscomp is still named $jscomp and the\n    // goog.provide/require calls still exist).\n    if (typeof jscomp.getCurrentModulePath != 'function') {\n      return false;\n    }\n\n    // Bundled ES6 module.\n    return !!jscomp.getCurrentModulePath();\n  }\n\n  return false;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInGoogModuleLoader_()) {\n    throw new Error(\n        'goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw new Error(\n        'goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Associates an ES6 module with a Closure module ID so that is available via\n * goog.require. The associated ID  acts like a goog.module ID - it does not\n * create any global names, it is merely available via goog.require /\n * goog.module.get / goog.forwardDeclare / goog.requireType. goog.require and\n * goog.module.get will return the entire module as if it was import *'d. This\n * allows Closure files to reference ES6 modules for the sake of migration.\n *\n * @param {string} namespace\n * @suppress {missingProvide}\n */\ngoog.declareModuleId = function(namespace) {\n  if (!COMPILED) {\n    if (!goog.isInEs6ModuleLoader_()) {\n      throw new Error(\n          'goog.declareModuleId may only be called from ' +\n          'within an ES6 module');\n    }\n    if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName) {\n      throw new Error(\n          'goog.declareModuleId may only be called once per module.');\n    }\n    if (namespace in goog.loadedModules_) {\n      throw new Error(\n          'Module with namespace \"' + namespace + '\" already exists.');\n    }\n  }\n  if (goog.moduleLoaderState_) {\n    // Not bundled - debug loading.\n    goog.moduleLoaderState_.moduleName = namespace;\n  } else {\n    // Bundled - not debug loading, no module loader state.\n    var jscomp = goog.global['$jscomp'];\n    if (!jscomp || typeof jscomp.getCurrentModulePath != 'function') {\n      throw new Error(\n          'Module with namespace \"' + namespace +\n          '\" has been loaded incorrectly.');\n    }\n    var exports = jscomp.require(jscomp.getCurrentModulePath());\n    goog.loadedModules_[namespace] = {\n      exports: exports,\n      type: goog.ModuleType.ES6,\n      moduleId: namespace\n    };\n  }\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw new Error(\n        'Importing test-only code into non-debug environment' +\n        (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n * Before using goog.forwardDeclare, please read the documentation at\n * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to\n * understand the options and tradeoffs when working with forward declarations.\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n * @deprecated See go/noforwarddeclaration, Use `goog.requireType` instead.\n */\ngoog.forwardDeclare = function(name) {};\n\n\n/**\n * Forward declare type information. Used to assign types to goog.global\n * referenced object that would otherwise result in unknown type references\n * and thus block property disambiguation.\n */\ngoog.forwardDeclare('Document');\ngoog.forwardDeclare('HTMLScriptElement');\ngoog.forwardDeclare('XMLHttpRequest');\n\n\nif (!COMPILED) {\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] && goog.getObjectByName(name) != null);\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var i = 0; i < parts.length; i++) {\n    cur = cur[parts[i]];\n    if (cur == null) {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean|!Object<string>=} opt_loadFlags Parameters indicating\n *     how the file must be loaded.  The boolean 'true' is equivalent\n *     to {'module': 'goog'} for backwards-compatibility.  Valid properties\n *     and values include {'module': 'goog'} and {'lang': 'es6'}.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_loadFlags) {\n  if (!COMPILED && goog.DEPENDENCIES_ENABLED) {\n    goog.debugLoader_.addDependency(relPath, provides, requires, opt_loadFlags);\n  }\n};\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n//\n// User-defined namespaces may need their own deps file. For a reference on\n// creating a deps file, see:\n// Externally: https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work was done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.ENABLE_DEBUG_LOADER = goog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system.\n *\n * Note that all calls to goog.require will be stripped by the compiler.\n *\n * @see goog.provide\n * @param {string} namespace Namespace (as was given in goog.provide,\n *     goog.module, or goog.declareModuleId) in the form\n *     \"goog.package.part\".\n * @return {?} If called within a goog.module or ES6 module file, the associated\n *     namespace or module otherwise null.\n */\ngoog.require = function(namespace) {\n  if (!COMPILED) {\n    // Might need to lazy load on old IE.\n    if (goog.ENABLE_DEBUG_LOADER) {\n      goog.debugLoader_.requested(namespace);\n    }\n\n    // If the object already exists we do not need to do anything.\n    if (goog.isProvided_(namespace)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(namespace);\n      }\n    } else if (goog.ENABLE_DEBUG_LOADER) {\n      var moduleLoaderState = goog.moduleLoaderState_;\n      goog.moduleLoaderState_ = null;\n      try {\n        goog.debugLoader_.load_(namespace);\n      } finally {\n        goog.moduleLoaderState_ = moduleLoaderState;\n      }\n    }\n\n    return null;\n  }\n};\n\n\n/**\n * Requires a symbol for its type information. This is an indication to the\n * compiler that the symbol may appear in type annotations, yet it is not\n * referenced at runtime.\n *\n * When called within a goog.module or ES6 module file, the return value may be\n * assigned to or destructured into a variable, but it may not be otherwise used\n * in code outside of a type annotation.\n *\n * Note that all calls to goog.requireType will be stripped by the compiler.\n *\n * @param {string} namespace Namespace (as was given in goog.provide,\n *     goog.module, or goog.declareModuleId) in the form\n *     \"goog.package.part\".\n * @return {?}\n */\ngoog.requireType = function(namespace) {\n  // Return an empty object so that single-level destructuring of the return\n  // value doesn't crash at runtime when using the debug loader. Multi-level\n  // destructuring isn't supported.\n  return {};\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to attempt to load Closure's deps file. By default, when uncompiled,\n * deps files will attempt to be loaded.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The first parameter the script source, which is a relative URI. The second,\n * optional parameter is the script contents, in the event the script needed\n * transformation. It should return true if the script was imported, false\n * otherwise.\n * @type {(function(string, string=): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n * @deprecated use '()=>{}' or 'function(){}' instead.\n */\ngoog.nullFunction = function() {};\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n * @deprecated Use \"@abstract\" annotation instead of goog.abstractMethod in new\n *     code. See\n *     https://github.com/google/closure-compiler/wiki/@abstract-classes-and-methods\n */\ngoog.abstractMethod = function() {\n  throw new Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a `getInstance` static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n * @suppress {missingProperties} 'instance_' isn't a property on 'Function'\n *     but we don't have a better type to use here.\n */\ngoog.addSingletonGetter = function(ctor) {\n  // instance_ is immediately set to prevent issues with sealed constructors\n  // such as are encountered when a constructor is returned as the export object\n  // of a goog.module in unoptimized code.\n  // Delcare type to avoid conformance violations that ctor.instance_ is unknown\n  /** @type {undefined|!Object} @suppress {underscore} */\n  ctor.instance_ = undefined;\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    // Cast to avoid conformance violations that ctor.instance_ is unknown\n    return /** @type {!Object|undefined} */ (ctor.instance_) = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the `goog.testing.singleton` module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using `eval` when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of `eval` is banned\n * so we provide an alternative.\n */\ngoog.LOAD_MODULE_USING_EVAL = goog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.SEAL_MODULE_EXPORTS = goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * The module identifier or path to module exports map.\n * @private @const {!Object<string, {exports:?,type:string,moduleId:string}>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if the debug loader enabled and used.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\n/**\n * @define {string} How to decide whether to transpile.  Valid values\n * are 'always', 'never', and 'detect'.  The default ('detect') is to\n * use feature detection to determine which language levels need\n * transpilation.\n */\n// NOTE(sdh): we could expand this to accept a language level to bypass\n// detection: e.g. goog.TRANSPILE == 'es5' would transpile ES6 files but\n// would leave ES3 and ES5 files alone.\ngoog.TRANSPILE = goog.define('goog.TRANSPILE', 'detect');\n\n/**\n * @define {boolean} If true assume that ES modules have already been\n * transpiled by the jscompiler (in the same way that transpile.js would\n * transpile them - to jscomp modules). Useful only for servers that wish to use\n * the debug loader and transpile server side. Thus this is only respected if\n * goog.TRANSPILE is \"never\".\n */\ngoog.ASSUME_ES_MODULES_TRANSPILED =\n    goog.define('goog.ASSUME_ES_MODULES_TRANSPILED', false);\n\n\n/**\n * @define {string} If a file needs to be transpiled what the output language\n * should be. By default this is the highest language level this file detects\n * the current environment supports. Generally this flag should not be set, but\n * it could be useful to override. Example: If the current environment supports\n * ES6 then by default ES7+ files will be transpiled to ES6, unless this is\n * overridden.\n *\n * Valid values include: es3, es5, es6, es7, and es8. Anything not recognized\n * is treated as es3.\n *\n * Note that setting this value does not force transpilation. Just if\n * transpilation occurs this will be the output. So this is most useful when\n * goog.TRANSPILE is set to 'always' and then forcing the language level to be\n * something lower than what the environment detects.\n */\ngoog.TRANSPILE_TO_LANGUAGE = goog.define('goog.TRANSPILE_TO_LANGUAGE', '');\n\n\n/**\n * @define {string} Path to the transpiler.  Executing the script at this\n * path (relative to base.js) should define a function $jscomp.transpile.\n */\ngoog.TRANSPILER = goog.define('goog.TRANSPILER', 'transpile.js');\n\n\n/**\n * @define {string} Trusted Types policy name. If non-empty then Closure will\n * use Trusted Types.\n */\ngoog.TRUSTED_TYPES_POLICY_NAME =\n    goog.define('goog.TRUSTED_TYPES_POLICY_NAME', 'goog');\n\n\n/**\n * @package {?boolean}\n * Visible for testing.\n */\ngoog.hasBadLetScoping = null;\n\n\n/**\n * @param {function(?):?|string} moduleDef The module definition.\n */\ngoog.loadModule = function(moduleDef) {\n  // NOTE: we allow function definitions to be either in the from\n  // of a string to eval (which keeps the original source intact) or\n  // in a eval forbidden environment (CSP) we allow a function definition\n  // which in its body must call `goog.module`, and return the exports\n  // of the module.\n  var previousState = goog.moduleLoaderState_;\n  try {\n    goog.moduleLoaderState_ = {\n      moduleName: '',\n      declareLegacyNamespace: false,\n      type: goog.ModuleType.GOOG\n    };\n    var origExports = {};\n    var exports = origExports;\n    if (typeof moduleDef === 'function') {\n      exports = moduleDef.call(undefined, exports);\n    } else if (typeof moduleDef === 'string') {\n      exports = goog.loadModuleFromSource_.call(undefined, exports, moduleDef);\n    } else {\n      throw new Error('Invalid module definition');\n    }\n\n    var moduleName = goog.moduleLoaderState_.moduleName;\n    if (typeof moduleName === 'string' && moduleName) {\n      // Don't seal legacy namespaces as they may be used as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        // Whether exports was overwritten via default export assignment.\n        // This is important for legacy namespaces as it dictates whether\n        // previously a previously loaded implicit namespace should be clobbered\n        // or not.\n        var isDefaultExport = origExports !== exports;\n        goog.constructNamespace_(moduleName, exports, isDefaultExport);\n      } else if (\n          goog.SEAL_MODULE_EXPORTS && Object.seal &&\n          typeof exports == 'object' && exports != null) {\n        Object.seal(exports);\n      }\n\n      var data = {\n        exports: exports,\n        type: goog.ModuleType.GOOG,\n        moduleId: goog.moduleLoaderState_.moduleName\n      };\n      goog.loadedModules_[moduleName] = data;\n    } else {\n      throw new Error('Invalid module name \\\"' + moduleName + '\\\"');\n    }\n  } finally {\n    goog.moduleLoaderState_ = previousState;\n  }\n};\n\n\n/**\n * @private @const\n */\ngoog.loadModuleFromSource_ =\n    /** @type {function(!Object, string):?} */ (function(exports) {\n      // NOTE: we avoid declaring parameters or local variables here to avoid\n      // masking globals or leaking values into the module definition.\n      'use strict';\n      eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(arguments[1]));\n      return exports;\n    });\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (\n        i && components[i] == '..' && components[i - 1] &&\n        components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Provides a hook for loading a file when using Closure's goog.require() API\n * with goog.modules.  In particular this hook is provided to support Node.js.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_LOAD_FILE_SYNC;\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {?string} File contents, or null if load failed.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    try {\n      /** @type {XMLHttpRequest} */\n      var xhr = new goog.global['XMLHttpRequest']();\n      xhr.open('get', src, false);\n      xhr.send();\n      // NOTE: Successful http: requests have a status of 200, but successful\n      // file: requests may have a status of zero.  Any other status, or a\n      // thrown exception (particularly in case of file: requests) indicates\n      // some sort of error, which we treat as a missing or unavailable file.\n      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;\n    } catch (err) {\n      // No need to rethrow or log, since errors should show up on their own.\n      return null;\n    }\n  }\n};\n\n\n/**\n * Lazily retrieves the transpiler and applies it to the source.\n * @param {string} code JS code.\n * @param {string} path Path to the code.\n * @param {string} target Language level output.\n * @return {string} The transpiled code.\n * @private\n */\ngoog.transpile_ = function(code, path, target) {\n  var jscomp = goog.global['$jscomp'];\n  if (!jscomp) {\n    goog.global['$jscomp'] = jscomp = {};\n  }\n  var transpile = jscomp.transpile;\n  if (!transpile) {\n    var transpilerPath = goog.basePath + goog.TRANSPILER;\n    var transpilerCode = goog.loadFileSync_(transpilerPath);\n    if (transpilerCode) {\n      // This must be executed synchronously, since by the time we know we\n      // need it, we're about to load and write the ES6 code synchronously,\n      // so a normal script-tag load will be too slow. Wrapped in a function\n      // so that code is eval'd in the global scope.\n      (function() {\n        (0, eval)(transpilerCode + '\\n//# sourceURL=' + transpilerPath);\n      }).call(goog.global);\n      // Even though the transpiler is optional, if $gwtExport is found, it's\n      // a sign the transpiler was loaded and the $jscomp.transpile *should*\n      // be there.\n      if (goog.global['$gwtExport'] && goog.global['$gwtExport']['$jscomp'] &&\n          !goog.global['$gwtExport']['$jscomp']['transpile']) {\n        throw new Error(\n            'The transpiler did not properly export the \"transpile\" ' +\n            'method. $gwtExport: ' + JSON.stringify(goog.global['$gwtExport']));\n      }\n      // transpile.js only exports a single $jscomp function, transpile. We\n      // grab just that and add it to the existing definition of $jscomp which\n      // contains the polyfills.\n      goog.global['$jscomp'].transpile =\n          goog.global['$gwtExport']['$jscomp']['transpile'];\n      jscomp = goog.global['$jscomp'];\n      transpile = jscomp.transpile;\n    }\n  }\n  if (!transpile) {\n    // The transpiler is an optional component.  If it's not available then\n    // replace it with a pass-through function that simply logs.\n    var suffix = ' requires transpilation but no transpiler was found.';\n    transpile = jscomp.transpile = function(code, path) {\n      // TODO(sdh): figure out some way to get this error to show up\n      // in test results, noting that the failure may occur in many\n      // different ways, including in loadModule() before the test\n      // runner even comes up.\n      goog.logToConsole_(path + suffix);\n      return code;\n    };\n  }\n  // Note: any transpilation errors/warnings will be logged to the console.\n  return transpile(code, path, target);\n};\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {?} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n\n  if (s != 'object') {\n    return s;\n  }\n\n  if (!value) {\n    return 'null';\n  }\n\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. Note that for this function neither strings nor functions are\n * considered \"array-like\".\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into `getUid`. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n  return Object.prototype.hasOwnProperty.call(obj, goog.UID_PROPERTY_) &&\n      obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using `goog.getUid` in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if (obj !== null && 'removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (typeof obj.clone === 'function') {\n      return obj.clone();\n    }\n    if (typeof Map !== 'undefined' && obj instanceof Map) {\n      return new Map(obj);\n    } else if (typeof Set !== 'undefined' && obj instanceof Set) {\n      return new Set(obj);\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function goog.bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n * @deprecated use `=> {}` or Function.prototype.bind instead.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like goog.bind(), except that a 'this object' is not required. Useful when\n * the target function is already bound.\n *\n * Usage:\n * var g = goog.partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function goog.partial()\n *     was invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(/** @type {?} */ (this), newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n *\n * NOTE: Some have advocated for the use of goog.mixin to setup classes\n * with multiple inheritence (traits, mixins, etc).  However, as it simply\n * uses \"for in\", this is not compatible with ES6 classes whose methods are\n * non-enumerable.  Changing this, would break cases where non-enumerable\n * properties are not expected.\n *\n * @param {Object} target Target.\n * @param {Object} source Source.\n * @deprecated Prefer Object.assign\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n * @deprecated Use Date.now\n */\ngoog.now = function() {\n  return Date.now();\n};\n\n\n/**\n * Evals JavaScript in the global scope.\n *\n * Throws an exception if neither execScript or eval is defined.\n * @param {string|!TrustedScript} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  (0, eval)(script);\n};\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n\n/**\n * A hook for modifying the default behavior goog.getCssName. The function\n * if present, will receive the standard output of the goog.getCssName as\n * its input.\n *\n * @type {(function(string):string)|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAP_FN;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x = 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  // String() is used for compatibility with compiled soy where the passed\n  // className can be non-string objects.\n  if (String(className).charAt(0) == '.') {\n    throw new Error(\n        'className passed in goog.getCssName must not start with \".\".' +\n        ' You passed: ' + className);\n  }\n\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename =\n        goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  var result =\n      opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);\n\n  // The special CLOSURE_CSS_NAME_MAP_FN allows users to specify further\n  // processing of the class name.\n  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {\n    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);\n  }\n\n  return result;\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --process_closure_primitives flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * This function produces a string which should be treated as plain text. Use\n * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to\n * produce SafeHtml.\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @param {{html: (boolean|undefined),\n *         unescapeHtmlEntities: (boolean|undefined)}=} opt_options Options:\n *     html: Escape '<' in str to '&lt;'. Used by Closure Templates where the\n *     generated code size and performance is critical which is why {@link\n *     goog.html.SafeHtmlFormatter} is not used. The value must be literal true\n *     or false.\n *     unescapeHtmlEntities: Unescape common html entities: &gt;, &lt;, &apos;,\n *     &quot; and &amp;. Used for messages not in HTML context, such as with\n *     `textContent` property.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values, opt_options) {\n  if (opt_options && opt_options.html) {\n    // Note that '&' is not replaced because the translation can contain HTML\n    // entities.\n    str = str.replace(/</g, '&lt;');\n  }\n  if (opt_options && opt_options.unescapeHtmlEntities) {\n    // Note that \"&amp;\" must be the last to avoid \"creating\" new entities.\n    str = str.replace(/&lt;/g, '<')\n              .replace(/&gt;/g, '>')\n              .replace(/&apos;/g, '\\'')\n              .replace(/&quot;/g, '\"')\n              .replace(/&amp;/g, '&');\n  }\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] :\n                                                         match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {?Object=} objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, objectToExportTo) {\n  goog.exportPath_(\n      publicPath, object, /* overwriteImplicit= */ true, objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {!Function} childCtor Child class.\n * @param {!Function} parentCtor Parent class.\n * @suppress {strictMissingProperties} superClass_ and base is not defined on\n *    Function.\n * @deprecated Use ECMAScript class syntax instead.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {}\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n * @deprecated Use goog.module instead.\n */\ngoog.scope = function(fn) {\n  if (goog.isInModuleLoader_()) {\n    throw new Error('goog.scope is not supported within a module.');\n  }\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n * @deprecated Use ECMAScript class syntax instead.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw new Error(\n          'cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {{\n *   constructor: (!Function|undefined),\n *   statics: (Object|undefined|function(Function):void)\n * }}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by goog.defineClass should\n *     be sealed when possible.\n *\n * When sealing is disabled the constructor function will not be wrapped by\n * goog.defineClass, making it incompatible with ES6 class methods.\n */\ngoog.defineClass.SEAL_CLASS_INSTANCES =\n    goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {\n    // Do now wrap the constructor when sealing is disabled. Angular code\n    // depends on this for injection to work properly.\n    return ctr;\n  }\n\n  // NOTE: The sealing behavior has been removed\n\n  /**\n   * @this {Object}\n   * @return {?}\n   */\n  var wrappedCtr = function() {\n    // Don't seal an instance of a subclass when it calls the constructor of\n    // its super class as there is most likely still setup to do.\n    var instance = ctr.apply(this, arguments) || this;\n    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n\n    return instance;\n  };\n\n  return wrappedCtr;\n};\n\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',\n  'toLocaleString', 'toString', 'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n/**\n * Returns the parameter.\n * @param {string} s\n * @return {string}\n * @private\n */\ngoog.identity_ = function(s) {\n  return s;\n};\n\n\n/**\n * Creates Trusted Types policy if Trusted Types are supported by the browser.\n * The policy just blesses any string as a Trusted Type. It is not visibility\n * restricted because anyone can also call trustedTypes.createPolicy directly.\n * However, the allowed names should be restricted by a HTTP header and the\n * reference to the created policy should be visibility restricted.\n * @param {string} name\n * @return {?TrustedTypePolicy}\n */\ngoog.createTrustedTypesPolicy = function(name) {\n  var policy = null;\n  var policyFactory = goog.global.trustedTypes;\n  if (!policyFactory || !policyFactory.createPolicy) {\n    return policy;\n  }\n  // trustedTypes.createPolicy throws if called with a name that is already\n  // registered, even in report-only mode. Until the API changes, catch the\n  // error not to break the applications functionally. In such case, the code\n  // will fall back to using regular Safe Types.\n  // TODO(koto): Remove catching once createPolicy API stops throwing.\n  try {\n    policy = policyFactory.createPolicy(name, {\n      createHTML: goog.identity_,\n      createScript: goog.identity_,\n      createScriptURL: goog.identity_\n    });\n  } catch (e) {\n    goog.logToConsole_(e.message);\n  }\n  return policy;\n};\n\n// There's a bug in the compiler where without collapse properties the\n// Closure namespace defines do not guard code correctly. To help reduce code\n// size also check for !COMPILED even though it redundant until this is fixed.\nif (!COMPILED && goog.DEPENDENCIES_ENABLED) {\n\n\n  /**\n   * Tries to detect whether the current browser is Edge, based on the user\n   * agent. This matches only pre-Chromium Edge.\n   * @see https://docs.microsoft.com/en-us/microsoft-edge/web-platform/user-agent-string\n   * @return {boolean} True if the current browser is Edge.\n   * @private\n   */\n  goog.isEdge_ = function() {\n    var userAgent = goog.global.navigator && goog.global.navigator.userAgent ?\n        goog.global.navigator.userAgent :\n        '';\n    var edgeRe = /Edge\\/(\\d+)(\\.\\d)*/i;\n    return !!userAgent.match(edgeRe);\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    /** @type {!Document} */\n    var doc = goog.global.document;\n    return doc != null && 'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * We'd like to check for if the document readyState is 'loading'; however\n   * there are bugs on IE 10 and below where the readyState being anything other\n   * than 'complete' is not reliable.\n   * @return {boolean}\n   * @private\n   */\n  goog.isDocumentLoading_ = function() {\n    // attachEvent is available on IE 6 thru 10 only, and thus can be used to\n    // detect those browsers.\n    /** @type {!HTMLDocument} */\n    var doc = goog.global.document;\n    return doc.attachEvent ? doc.readyState != 'complete' :\n                             doc.readyState == 'loading';\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH != undefined &&\n        // Anti DOM-clobbering runtime check (b/37736576).\n        typeof goog.global.CLOSURE_BASE_PATH === 'string') {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    /** @type {!Document} */\n    var doc = goog.global.document;\n    // If we have a currentScript available, use it exclusively.\n    var currentScript = doc.currentScript;\n    if (currentScript) {\n      var scripts = [currentScript];\n    } else {\n      var scripts = doc.getElementsByTagName('SCRIPT');\n    }\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n  goog.findBasePath_();\n\n  /** @struct @constructor @final */\n  goog.Transpiler = function() {\n    /** @private {?Object<string, boolean>} */\n    this.requiresTranspilation_ = null;\n    /** @private {string} */\n    this.transpilationTarget_ = goog.TRANSPILE_TO_LANGUAGE;\n  };\n  /**\n   * Returns a newly created map from language mode string to a boolean\n   * indicating whether transpilation should be done for that mode as well as\n   * the highest level language that this environment supports.\n   *\n   * Guaranteed invariant:\n   * For any two modes, l1 and l2 where l2 is a newer mode than l1,\n   * `map[l1] == true` implies that `map[l2] == true`.\n   *\n   * Note this method is extracted and used elsewhere, so it cannot rely on\n   * anything external (it should easily be able to be transformed into a\n   * standalone, top level function).\n   *\n   * @private\n   * @return {{\n   *   target: string,\n   *   map: !Object<string, boolean>\n   * }}\n   */\n  goog.Transpiler.prototype.createRequiresTranspilation_ = function() {\n    var transpilationTarget = 'es3';\n    var /** !Object<string, boolean> */ requiresTranspilation = {'es3': false};\n    var transpilationRequiredForAllLaterModes = false;\n\n    /**\n     * Adds an entry to requiresTranspliation for the given language mode.\n     *\n     * IMPORTANT: Calls must be made in order from oldest to newest language\n     * mode.\n     * @param {string} modeName\n     * @param {function(): boolean} isSupported Returns true if the JS engine\n     *     supports the given mode.\n     */\n    function addNewerLanguageTranspilationCheck(modeName, isSupported) {\n      if (transpilationRequiredForAllLaterModes) {\n        requiresTranspilation[modeName] = true;\n      } else if (isSupported()) {\n        transpilationTarget = modeName;\n        requiresTranspilation[modeName] = false;\n      } else {\n        requiresTranspilation[modeName] = true;\n        transpilationRequiredForAllLaterModes = true;\n      }\n    }\n\n    /**\n     * Does the given code evaluate without syntax errors and return a truthy\n     * result?\n     */\n    function /** boolean */ evalCheck(/** string */ code) {\n      try {\n        return !!eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(code));\n      } catch (ignored) {\n        return false;\n      }\n    }\n\n    // Identify ES3-only browsers by their incorrect treatment of commas.\n    addNewerLanguageTranspilationCheck('es5', function() {\n      return evalCheck('[1,].length==1');\n    });\n    addNewerLanguageTranspilationCheck('es6', function() {\n      // Edge has a non-deterministic (i.e., not reproducible) bug with ES6:\n      // https://github.com/Microsoft/ChakraCore/issues/1496.\n      if (goog.isEdge_()) {\n        // The Reflect.construct test below is flaky on Edge. It can sometimes\n        // pass or fail on 40 15.15063, so just exit early for Edge and treat\n        // it as ES5. Until we're on a more up to date version just always use\n        // ES5. See https://github.com/Microsoft/ChakraCore/issues/3217.\n        return false;\n      }\n      // Test es6: [FF50 (?), Edge 14 (?), Chrome 50]\n      //   (a) default params (specifically shadowing locals),\n      //   (b) destructuring, (c) block-scoped functions,\n      //   (d) for-of (const), (e) new.target/Reflect.construct\n      var es6fullTest =\n          'class X{constructor(){if(new.target!=String)throw 1;this.x=42}}' +\n          'let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof ' +\n          'String))throw 1;for(const a of[2,3]){if(a==2)continue;function ' +\n          'f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()' +\n          '==3}';\n\n      return evalCheck('(()=>{\"use strict\";' + es6fullTest + '})()');\n    });\n    // ** and **= are the only new features in 'es7'\n    addNewerLanguageTranspilationCheck('es7', function() {\n      return evalCheck('2**3==8');\n    });\n    // async functions are the only new features in 'es8'\n    addNewerLanguageTranspilationCheck('es8', function() {\n      return evalCheck('async()=>1,1');\n    });\n    addNewerLanguageTranspilationCheck('es9', function() {\n      return evalCheck('({...rest}={}),1');\n    });\n    // optional catch binding, unescaped unicode paragraph separator in strings\n    addNewerLanguageTranspilationCheck('es_2019', function() {\n      return evalCheck('let r;try{r=\"\\u2029\"}catch{};r');\n    });\n    // optional chaining, nullish coalescing\n    // untested/unsupported: bigint, import meta\n    addNewerLanguageTranspilationCheck('es_2020', function() {\n      return evalCheck('null?.x??1');\n    });\n    addNewerLanguageTranspilationCheck('es_next', function() {\n      return false;  // assume it always need to transpile\n    });\n    return {target: transpilationTarget, map: requiresTranspilation};\n  };\n\n\n  /**\n   * Determines whether the given language needs to be transpiled.\n   * @param {string} lang\n   * @param {string|undefined} module\n   * @return {boolean}\n   */\n  goog.Transpiler.prototype.needsTranspile = function(lang, module) {\n    if (goog.TRANSPILE == 'always') {\n      return true;\n    } else if (goog.TRANSPILE == 'never') {\n      return false;\n    } else if (!this.requiresTranspilation_) {\n      var obj = this.createRequiresTranspilation_();\n      this.requiresTranspilation_ = obj.map;\n      this.transpilationTarget_ = this.transpilationTarget_ || obj.target;\n    }\n    if (lang in this.requiresTranspilation_) {\n      if (this.requiresTranspilation_[lang]) {\n        return true;\n      } else if (\n          goog.inHtmlDocument_() && module == 'es6' &&\n          !('noModule' in goog.global.document.createElement('script'))) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      throw new Error('Unknown language mode: ' + lang);\n    }\n  };\n\n\n  /**\n   * Lazily retrieves the transpiler and applies it to the source.\n   * @param {string} code JS code.\n   * @param {string} path Path to the code.\n   * @return {string} The transpiled code.\n   */\n  goog.Transpiler.prototype.transpile = function(code, path) {\n    // TODO(johnplaisted): We should delete goog.transpile_ and just have this\n    // function. But there's some compile error atm where goog.global is being\n    // stripped incorrectly without this.\n    return goog.transpile_(code, path, this.transpilationTarget_);\n  };\n\n\n  /** @private @final {!goog.Transpiler} */\n  goog.transpiler_ = new goog.Transpiler();\n\n  /**\n   * Rewrites closing script tags in input to avoid ending an enclosing script\n   * tag.\n   *\n   * @param {string} str\n   * @return {string}\n   * @private\n   */\n  goog.protectScriptTag_ = function(str) {\n    return str.replace(/<\\/(SCRIPT)/ig, '\\\\x3c/$1');\n  };\n\n\n  /**\n   * A debug loader is responsible for downloading and executing javascript\n   * files in an unbundled, uncompiled environment.\n   *\n   * This can be custimized via the setDependencyFactory method, or by\n   * CLOSURE_IMPORT_SCRIPT/CLOSURE_LOAD_FILE_SYNC.\n   *\n   * @struct @constructor @final @private\n   */\n  goog.DebugLoader_ = function() {\n    /** @private @const {!Object<string, !goog.Dependency>} */\n    this.dependencies_ = {};\n    /** @private @const {!Object<string, string>} */\n    this.idToPath_ = {};\n    /** @private @const {!Object<string, boolean>} */\n    this.written_ = {};\n    /** @private @const {!Array<!goog.Dependency>} */\n    this.loadingDeps_ = [];\n    /** @private {!Array<!goog.Dependency>} */\n    this.depsToLoad_ = [];\n    /** @private {boolean} */\n    this.paused_ = false;\n    /** @private {!goog.DependencyFactory} */\n    this.factory_ = new goog.DependencyFactory(goog.transpiler_);\n    /** @private @const {!Object<string, !Function>} */\n    this.deferredCallbacks_ = {};\n    /** @private @const {!Array<string>} */\n    this.deferredQueue_ = [];\n  };\n\n  /**\n   * @param {!Array<string>} namespaces\n   * @param {function(): undefined} callback Function to call once all the\n   *     namespaces have loaded.\n   */\n  goog.DebugLoader_.prototype.bootstrap = function(namespaces, callback) {\n    var cb = callback;\n    function resolve() {\n      if (cb) {\n        goog.global.setTimeout(cb, 0);\n        cb = null;\n      }\n    }\n\n    if (!namespaces.length) {\n      resolve();\n      return;\n    }\n\n    var deps = [];\n    for (var i = 0; i < namespaces.length; i++) {\n      var path = this.getPathFromDeps_(namespaces[i]);\n      if (!path) {\n        throw new Error('Unregonized namespace: ' + namespaces[i]);\n      }\n      deps.push(this.dependencies_[path]);\n    }\n\n    var require = goog.require;\n    var loaded = 0;\n    for (var i = 0; i < namespaces.length; i++) {\n      require(namespaces[i]);\n      deps[i].onLoad(function() {\n        if (++loaded == namespaces.length) {\n          resolve();\n        }\n      });\n    }\n  };\n\n\n  /**\n   * Loads the Closure Dependency file.\n   *\n   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base\n   * loaded, setDependencyFactory called, and then this called. i.e. allows\n   * custom loading of the deps file.\n   */\n  goog.DebugLoader_.prototype.loadClosureDeps = function() {\n    // Circumvent addDependency, which would try to transpile deps.js if\n    // transpile is set to always.\n    var relPath = 'deps.js';\n    this.depsToLoad_.push(this.factory_.createDependency(\n        goog.normalizePath_(goog.basePath + relPath), relPath, [], [], {},\n        false));\n    this.loadDeps_();\n  };\n\n\n  /**\n   * Notifies the debug loader when a dependency has been requested.\n   *\n   * @param {string} absPathOrId Path of the dependency or goog id.\n   * @param {boolean=} opt_force\n   */\n  goog.DebugLoader_.prototype.requested = function(absPathOrId, opt_force) {\n    var path = this.getPathFromDeps_(absPathOrId);\n    if (path &&\n        (opt_force || this.areDepsLoaded_(this.dependencies_[path].requires))) {\n      var callback = this.deferredCallbacks_[path];\n      if (callback) {\n        delete this.deferredCallbacks_[path];\n        callback();\n      }\n    }\n  };\n\n\n  /**\n   * Sets the dependency factory, which can be used to create custom\n   * goog.Dependency implementations to control how dependencies are loaded.\n   *\n   * @param {!goog.DependencyFactory} factory\n   */\n  goog.DebugLoader_.prototype.setDependencyFactory = function(factory) {\n    this.factory_ = factory;\n  };\n\n\n  /**\n   * Travserses the dependency graph and queues the given dependency, and all of\n   * its transitive dependencies, for loading and then starts loading if not\n   * paused.\n   *\n   * @param {string} namespace\n   * @private\n   */\n  goog.DebugLoader_.prototype.load_ = function(namespace) {\n    if (!this.getPathFromDeps_(namespace)) {\n      var errorMessage = 'goog.require could not find: ' + namespace;\n      goog.logToConsole_(errorMessage);\n    } else {\n      var loader = this;\n\n      var deps = [];\n\n      /** @param {string} namespace */\n      var visit = function(namespace) {\n        var path = loader.getPathFromDeps_(namespace);\n\n        if (!path) {\n          throw new Error('Bad dependency path or symbol: ' + namespace);\n        }\n\n        if (loader.written_[path]) {\n          return;\n        }\n\n        loader.written_[path] = true;\n\n        var dep = loader.dependencies_[path];\n        for (var i = 0; i < dep.requires.length; i++) {\n          if (!goog.isProvided_(dep.requires[i])) {\n            visit(dep.requires[i]);\n          }\n        }\n\n        deps.push(dep);\n      };\n\n      visit(namespace);\n\n      var wasLoading = !!this.depsToLoad_.length;\n      this.depsToLoad_ = this.depsToLoad_.concat(deps);\n\n      if (!this.paused_ && !wasLoading) {\n        this.loadDeps_();\n      }\n    }\n  };\n\n\n  /**\n   * Loads any queued dependencies until they are all loaded or paused.\n   *\n   * @private\n   */\n  goog.DebugLoader_.prototype.loadDeps_ = function() {\n    var loader = this;\n    var paused = this.paused_;\n\n    while (this.depsToLoad_.length && !paused) {\n      (function() {\n        var loadCallDone = false;\n        var dep = loader.depsToLoad_.shift();\n\n        var loaded = false;\n        loader.loading_(dep);\n\n        var controller = {\n          pause: function() {\n            if (loadCallDone) {\n              throw new Error('Cannot call pause after the call to load.');\n            } else {\n              paused = true;\n            }\n          },\n          resume: function() {\n            if (loadCallDone) {\n              loader.resume_();\n            } else {\n              // Some dep called pause and then resume in the same load call.\n              // Just keep running this same loop.\n              paused = false;\n            }\n          },\n          loaded: function() {\n            if (loaded) {\n              throw new Error('Double call to loaded.');\n            }\n\n            loaded = true;\n            loader.loaded_(dep);\n          },\n          pending: function() {\n            // Defensive copy.\n            var pending = [];\n            for (var i = 0; i < loader.loadingDeps_.length; i++) {\n              pending.push(loader.loadingDeps_[i]);\n            }\n            return pending;\n          },\n          /**\n           * @param {goog.ModuleType} type\n           */\n          setModuleState: function(type) {\n            goog.moduleLoaderState_ = {\n              type: type,\n              moduleName: '',\n              declareLegacyNamespace: false\n            };\n          },\n          /** @type {function(string, string, string=)} */\n          registerEs6ModuleExports: function(\n              path, exports, opt_closureNamespace) {\n            if (opt_closureNamespace) {\n              goog.loadedModules_[opt_closureNamespace] = {\n                exports: exports,\n                type: goog.ModuleType.ES6,\n                moduleId: opt_closureNamespace || ''\n              };\n            }\n          },\n          /** @type {function(string, ?)} */\n          registerGoogModuleExports: function(moduleId, exports) {\n            goog.loadedModules_[moduleId] = {\n              exports: exports,\n              type: goog.ModuleType.GOOG,\n              moduleId: moduleId\n            };\n          },\n          clearModuleState: function() {\n            goog.moduleLoaderState_ = null;\n          },\n          defer: function(callback) {\n            if (loadCallDone) {\n              throw new Error(\n                  'Cannot register with defer after the call to load.');\n            }\n            loader.defer_(dep, callback);\n          },\n          areDepsLoaded: function() {\n            return loader.areDepsLoaded_(dep.requires);\n          }\n        };\n\n        try {\n          dep.load(controller);\n        } finally {\n          loadCallDone = true;\n        }\n      })();\n    }\n\n    if (paused) {\n      this.pause_();\n    }\n  };\n\n\n  /** @private */\n  goog.DebugLoader_.prototype.pause_ = function() {\n    this.paused_ = true;\n  };\n\n\n  /** @private */\n  goog.DebugLoader_.prototype.resume_ = function() {\n    if (this.paused_) {\n      this.paused_ = false;\n      this.loadDeps_();\n    }\n  };\n\n\n  /**\n   * Marks the given dependency as loading (load has been called but it has not\n   * yet marked itself as finished). Useful for dependencies that want to know\n   * what else is loading. Example: goog.modules cannot eval if there are\n   * loading dependencies.\n   *\n   * @param {!goog.Dependency} dep\n   * @private\n   */\n  goog.DebugLoader_.prototype.loading_ = function(dep) {\n    this.loadingDeps_.push(dep);\n  };\n\n\n  /**\n   * Marks the given dependency as having finished loading and being available\n   * for require.\n   *\n   * @param {!goog.Dependency} dep\n   * @private\n   */\n  goog.DebugLoader_.prototype.loaded_ = function(dep) {\n    for (var i = 0; i < this.loadingDeps_.length; i++) {\n      if (this.loadingDeps_[i] == dep) {\n        this.loadingDeps_.splice(i, 1);\n        break;\n      }\n    }\n\n    for (var i = 0; i < this.deferredQueue_.length; i++) {\n      if (this.deferredQueue_[i] == dep.path) {\n        this.deferredQueue_.splice(i, 1);\n        break;\n      }\n    }\n\n    if (this.loadingDeps_.length == this.deferredQueue_.length &&\n        !this.depsToLoad_.length) {\n      // Something has asked to load these, but they may not be directly\n      // required again later, so load them now that we know we're done loading\n      // everything else. e.g. a goog module entry point.\n      while (this.deferredQueue_.length) {\n        this.requested(this.deferredQueue_.shift(), true);\n      }\n    }\n\n    dep.loaded();\n  };\n\n\n  /**\n   * @param {!Array<string>} pathsOrIds\n   * @return {boolean}\n   * @private\n   */\n  goog.DebugLoader_.prototype.areDepsLoaded_ = function(pathsOrIds) {\n    for (var i = 0; i < pathsOrIds.length; i++) {\n      var path = this.getPathFromDeps_(pathsOrIds[i]);\n      if (!path ||\n          (!(path in this.deferredCallbacks_) &&\n           !goog.isProvided_(pathsOrIds[i]))) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n\n  /**\n   * @param {string} absPathOrId\n   * @return {?string}\n   * @private\n   */\n  goog.DebugLoader_.prototype.getPathFromDeps_ = function(absPathOrId) {\n    if (absPathOrId in this.idToPath_) {\n      return this.idToPath_[absPathOrId];\n    } else if (absPathOrId in this.dependencies_) {\n      return absPathOrId;\n    } else {\n      return null;\n    }\n  };\n\n\n  /**\n   * @param {!goog.Dependency} dependency\n   * @param {!Function} callback\n   * @private\n   */\n  goog.DebugLoader_.prototype.defer_ = function(dependency, callback) {\n    this.deferredCallbacks_[dependency.path] = callback;\n    this.deferredQueue_.push(dependency.path);\n  };\n\n\n  /**\n   * Interface for goog.Dependency implementations to have some control over\n   * loading of dependencies.\n   *\n   * @record\n   */\n  goog.LoadController = function() {};\n\n\n  /**\n   * Tells the controller to halt loading of more dependencies.\n   */\n  goog.LoadController.prototype.pause = function() {};\n\n\n  /**\n   * Tells the controller to resume loading of more dependencies if paused.\n   */\n  goog.LoadController.prototype.resume = function() {};\n\n\n  /**\n   * Tells the controller that this dependency has finished loading.\n   *\n   * This causes this to be removed from pending() and any load callbacks to\n   * fire.\n   */\n  goog.LoadController.prototype.loaded = function() {};\n\n\n  /**\n   * List of dependencies on which load has been called but which have not\n   * called loaded on their controller. This includes the current dependency.\n   *\n   * @return {!Array<!goog.Dependency>}\n   */\n  goog.LoadController.prototype.pending = function() {};\n\n\n  /**\n   * Registers an object as an ES6 module's exports so that goog.modules may\n   * require it by path.\n   *\n   * @param {string} path Full path of the module.\n   * @param {?} exports\n   * @param {string=} opt_closureNamespace Closure namespace to associate with\n   *     this module.\n   */\n  goog.LoadController.prototype.registerEs6ModuleExports = function(\n      path, exports, opt_closureNamespace) {};\n\n\n  /**\n   * Sets the current module state.\n   *\n   * @param {goog.ModuleType} type Type of module.\n   */\n  goog.LoadController.prototype.setModuleState = function(type) {};\n\n\n  /**\n   * Clears the current module state.\n   */\n  goog.LoadController.prototype.clearModuleState = function() {};\n\n\n  /**\n   * Registers a callback to call once the dependency is actually requested\n   * via goog.require + all of the immediate dependencies have been loaded or\n   * all other files have been loaded. Allows for lazy loading until\n   * require'd without pausing dependency loading, which is needed on old IE.\n   *\n   * @param {!Function} callback\n   */\n  goog.LoadController.prototype.defer = function(callback) {};\n\n\n  /**\n   * @return {boolean}\n   */\n  goog.LoadController.prototype.areDepsLoaded = function() {};\n\n\n  /**\n   * Basic super class for all dependencies Closure Library can load.\n   *\n   * This default implementation is designed to load untranspiled, non-module\n   * scripts in a web broswer.\n   *\n   * For transpiled non-goog.module files {@see goog.TranspiledDependency}.\n   * For goog.modules see {@see goog.GoogModuleDependency}.\n   * For untranspiled ES6 modules {@see goog.Es6ModuleDependency}.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   */\n  goog.Dependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    /** @const */\n    this.path = path;\n    /** @const */\n    this.relativePath = relativePath;\n    /** @const */\n    this.provides = provides;\n    /** @const */\n    this.requires = requires;\n    /** @const */\n    this.loadFlags = loadFlags;\n    /** @private {boolean} */\n    this.loaded_ = false;\n    /** @private {!Array<function()>} */\n    this.loadCallbacks_ = [];\n  };\n\n\n  /**\n   * @return {string} The pathname part of this dependency's path if it is a\n   *     URI.\n   */\n  goog.Dependency.prototype.getPathName = function() {\n    var pathName = this.path;\n    var protocolIndex = pathName.indexOf('://');\n    if (protocolIndex >= 0) {\n      pathName = pathName.substring(protocolIndex + 3);\n      var slashIndex = pathName.indexOf('/');\n      if (slashIndex >= 0) {\n        pathName = pathName.substring(slashIndex + 1);\n      }\n    }\n    return pathName;\n  };\n\n\n  /**\n   * @param {function()} callback Callback to fire as soon as this has loaded.\n   * @final\n   */\n  goog.Dependency.prototype.onLoad = function(callback) {\n    if (this.loaded_) {\n      callback();\n    } else {\n      this.loadCallbacks_.push(callback);\n    }\n  };\n\n\n  /**\n   * Marks this dependency as loaded and fires any callbacks registered with\n   * onLoad.\n   * @final\n   */\n  goog.Dependency.prototype.loaded = function() {\n    this.loaded_ = true;\n    var callbacks = this.loadCallbacks_;\n    this.loadCallbacks_ = [];\n    for (var i = 0; i < callbacks.length; i++) {\n      callbacks[i]();\n    }\n  };\n\n\n  /**\n   * Whether or not document.written / appended script tags should be deferred.\n   *\n   * @private {boolean}\n   */\n  goog.Dependency.defer_ = false;\n\n\n  /**\n   * Map of script ready / state change callbacks. Old IE cannot handle putting\n   * these properties on goog.global.\n   *\n   * @private @const {!Object<string, function(?):undefined>}\n   */\n  goog.Dependency.callbackMap_ = {};\n\n\n  /**\n   * @param {function(...?):?} callback\n   * @return {string}\n   * @private\n   */\n  goog.Dependency.registerCallback_ = function(callback) {\n    var key = Math.random().toString(32);\n    goog.Dependency.callbackMap_[key] = callback;\n    return key;\n  };\n\n\n  /**\n   * @param {string} key\n   * @private\n   */\n  goog.Dependency.unregisterCallback_ = function(key) {\n    delete goog.Dependency.callbackMap_[key];\n  };\n\n\n  /**\n   * @param {string} key\n   * @param {...?} var_args\n   * @private\n   * @suppress {unusedPrivateMembers}\n   */\n  goog.Dependency.callback_ = function(key, var_args) {\n    if (key in goog.Dependency.callbackMap_) {\n      var callback = goog.Dependency.callbackMap_[key];\n      var args = [];\n      for (var i = 1; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n      callback.apply(undefined, args);\n    } else {\n      var errorMessage = 'Callback key ' + key +\n          ' does not exist (was base.js loaded more than once?).';\n      throw Error(errorMessage);\n    }\n  };\n\n\n  /**\n   * Starts loading this dependency. This dependency can pause loading if it\n   * needs to and resume it later via the controller interface.\n   *\n   * When this is loaded it should call controller.loaded(). Note that this will\n   * end up calling the loaded method of this dependency; there is no need to\n   * call it explicitly.\n   *\n   * @param {!goog.LoadController} controller\n   */\n  goog.Dependency.prototype.load = function(controller) {\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    if (!goog.inHtmlDocument_()) {\n      goog.logToConsole_(\n          'Cannot use default debug loader outside of HTML documents.');\n      if (this.relativePath == 'deps.js') {\n        // Some old code is relying on base.js auto loading deps.js failing with\n        // no error before later setting CLOSURE_IMPORT_SCRIPT.\n        // CLOSURE_IMPORT_SCRIPT should be set *before* base.js is loaded, or\n        // CLOSURE_NO_DEPS set to true.\n        goog.logToConsole_(\n            'Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, ' +\n            'or setting CLOSURE_NO_DEPS to true.');\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    /** @type {!HTMLDocument} */\n    var doc = goog.global.document;\n\n    // If the user tries to require a new symbol after document load,\n    // something has gone terribly wrong. Doing a document.write would\n    // wipe out the page. This does not apply to the CSP-compliant method\n    // of writing script tags.\n    if (doc.readyState == 'complete' &&\n        !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n      // Certain test frameworks load base.js multiple times, which tries\n      // to write deps.js each time. If that happens, just fail silently.\n      // These frameworks wipe the page between each load of base.js, so this\n      // is OK.\n      var isDeps = /\\bdeps.js$/.test(this.path);\n      if (isDeps) {\n        controller.loaded();\n        return;\n      } else {\n        throw Error('Cannot write \"' + this.path + '\" after document load');\n      }\n    }\n\n    var nonce = goog.getScriptNonce_();\n    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n        goog.isDocumentLoading_()) {\n      var key;\n      var callback = function(script) {\n        if (script.readyState && script.readyState != 'complete') {\n          script.onload = callback;\n          return;\n        }\n        goog.Dependency.unregisterCallback_(key);\n        controller.loaded();\n      };\n      key = goog.Dependency.registerCallback_(callback);\n\n      var defer = goog.Dependency.defer_ ? ' defer' : '';\n      var nonceAttr = nonce ? ' nonce=\"' + nonce + '\"' : '';\n      var script = '<script src=\"' + this.path + '\"' + nonceAttr + defer +\n          ' id=\"script-' + key + '\"><\\/script>';\n\n      script += '<script' + nonceAttr + '>';\n\n      if (goog.Dependency.defer_) {\n        script += 'document.getElementById(\\'script-' + key +\n            '\\').onload = function() {\\n' +\n            '  goog.Dependency.callback_(\\'' + key + '\\', this);\\n' +\n            '};\\n';\n      } else {\n        script += 'goog.Dependency.callback_(\\'' + key +\n            '\\', document.getElementById(\\'script-' + key + '\\'));';\n      }\n\n      script += '<\\/script>';\n\n      doc.write(\n          goog.TRUSTED_TYPES_POLICY_ ?\n              goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n              script);\n    } else {\n      var scriptEl =\n          /** @type {!HTMLScriptElement} */ (doc.createElement('script'));\n      scriptEl.defer = goog.Dependency.defer_;\n      scriptEl.async = false;\n\n      // If CSP nonces are used, propagate them to dynamically created scripts.\n      // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.\n      if (nonce) {\n        scriptEl.nonce = nonce;\n      }\n\n      scriptEl.onload = function() {\n        scriptEl.onload = null;\n        controller.loaded();\n      };\n\n      scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ?\n          goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) :\n          this.path;\n      doc.head.appendChild(scriptEl);\n    }\n  };\n\n\n  /**\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides Should be an empty array.\n   *     TODO(johnplaisted) add support for adding closure namespaces to ES6\n   *     modules for interop purposes.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   * @extends {goog.Dependency}\n   */\n  goog.Es6ModuleDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.Es6ModuleDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n  };\n  goog.inherits(goog.Es6ModuleDependency, goog.Dependency);\n\n\n  /**\n   * @override\n   * @param {!goog.LoadController} controller\n   */\n  goog.Es6ModuleDependency.prototype.load = function(controller) {\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n    if (!goog.inHtmlDocument_()) {\n      goog.logToConsole_(\n          'Cannot use default debug loader outside of HTML documents.');\n      controller.pause();\n      return;\n    }\n\n    /** @type {!HTMLDocument} */\n    var doc = goog.global.document;\n\n    var dep = this;\n\n    // TODO(johnplaisted): Does document.writing really speed up anything? Any\n    // difference between this and just waiting for interactive mode and then\n    // appending?\n    function write(src, contents) {\n      var nonceAttr = '';\n      var nonce = goog.getScriptNonce_();\n      if (nonce) {\n        nonceAttr = ' nonce=\"' + nonce + '\"';\n      }\n\n      if (contents) {\n        var script = '<script type=\"module\" crossorigin' + nonceAttr + '>' +\n            contents + '</' +\n            'script>';\n        doc.write(\n            goog.TRUSTED_TYPES_POLICY_ ?\n                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n                script);\n      } else {\n        var script = '<script type=\"module\" crossorigin src=\"' + src + '\"' +\n            nonceAttr + '></' +\n            'script>';\n        doc.write(\n            goog.TRUSTED_TYPES_POLICY_ ?\n                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n                script);\n      }\n    }\n\n    function append(src, contents) {\n      var scriptEl =\n          /** @type {!HTMLScriptElement} */ (doc.createElement('script'));\n      scriptEl.defer = true;\n      scriptEl.async = false;\n      scriptEl.type = 'module';\n      scriptEl.setAttribute('crossorigin', true);\n\n      // If CSP nonces are used, propagate them to dynamically created scripts.\n      // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.\n      var nonce = goog.getScriptNonce_();\n      if (nonce) {\n        scriptEl.nonce = nonce;\n      }\n\n      if (contents) {\n        scriptEl.text = goog.TRUSTED_TYPES_POLICY_ ?\n            goog.TRUSTED_TYPES_POLICY_.createScript(contents) :\n            contents;\n      } else {\n        scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ?\n            goog.TRUSTED_TYPES_POLICY_.createScriptURL(src) :\n            src;\n      }\n\n      doc.head.appendChild(scriptEl);\n    }\n\n    var create;\n\n    if (goog.isDocumentLoading_()) {\n      create = write;\n      // We can ONLY call document.write if we are guaranteed that any\n      // non-module script tags document.written after this are deferred.\n      // Small optimization, in theory document.writing is faster.\n      goog.Dependency.defer_ = true;\n    } else {\n      create = append;\n    }\n\n    // Write 4 separate tags here:\n    // 1) Sets the module state at the correct time (just before execution).\n    // 2) A src node for this, which just hopefully lets the browser load it a\n    //    little early (no need to parse #3).\n    // 3) Import the module and register it.\n    // 4) Clear the module state at the correct time. Guaranteed to run even\n    //    if there is an error in the module (#3 will not run if there is an\n    //    error in the module).\n    var beforeKey = goog.Dependency.registerCallback_(function() {\n      goog.Dependency.unregisterCallback_(beforeKey);\n      controller.setModuleState(goog.ModuleType.ES6);\n    });\n    create(undefined, 'goog.Dependency.callback_(\"' + beforeKey + '\")');\n\n    // TODO(johnplaisted): Does this really speed up anything?\n    create(this.path, undefined);\n\n    var registerKey = goog.Dependency.registerCallback_(function(exports) {\n      goog.Dependency.unregisterCallback_(registerKey);\n      controller.registerEs6ModuleExports(\n          dep.path, exports, goog.moduleLoaderState_.moduleName);\n    });\n    create(\n        undefined,\n        'import * as m from \"' + this.path + '\"; goog.Dependency.callback_(\"' +\n            registerKey + '\", m)');\n\n    var afterKey = goog.Dependency.registerCallback_(function() {\n      goog.Dependency.unregisterCallback_(afterKey);\n      controller.clearModuleState();\n      controller.loaded();\n    });\n    create(undefined, 'goog.Dependency.callback_(\"' + afterKey + '\")');\n  };\n\n\n  /**\n   * Superclass of any dependency that needs to be loaded into memory,\n   * transformed, and then eval'd (goog.modules and transpiled files).\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor @abstract\n   * @extends {goog.Dependency}\n   */\n  goog.TransformedDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.TransformedDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n    /** @private {?string} */\n    this.contents_ = null;\n\n    /**\n     * Whether to lazily make the synchronous XHR (when goog.require'd) or make\n     * the synchronous XHR when initially loading. On FireFox 61 there is a bug\n     * where an ES6 module cannot make a synchronous XHR (rather, it can, but if\n     * it does then no other ES6 modules will load after).\n     *\n     * tl;dr we lazy load due to bugs on older browsers and eager load due to\n     * bugs on newer ones.\n     *\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1477090\n     *\n     * @private @const {boolean}\n     */\n    this.lazyFetch_ = !goog.inHtmlDocument_() ||\n        !('noModule' in goog.global.document.createElement('script'));\n  };\n  goog.inherits(goog.TransformedDependency, goog.Dependency);\n\n\n  /**\n   * @override\n   * @param {!goog.LoadController} controller\n   */\n  goog.TransformedDependency.prototype.load = function(controller) {\n    var dep = this;\n\n    function fetch() {\n      dep.contents_ = goog.loadFileSync_(dep.path);\n\n      if (dep.contents_) {\n        dep.contents_ = dep.transform(dep.contents_);\n        if (dep.contents_) {\n          dep.contents_ += '\\n//# sourceURL=' + dep.path;\n        }\n      }\n    }\n\n    if (goog.global.CLOSURE_IMPORT_SCRIPT) {\n      fetch();\n      if (this.contents_ &&\n          goog.global.CLOSURE_IMPORT_SCRIPT('', this.contents_)) {\n        this.contents_ = null;\n        controller.loaded();\n      } else {\n        controller.pause();\n      }\n      return;\n    }\n\n\n    var isEs6 = this.loadFlags['module'] == goog.ModuleType.ES6;\n\n    if (!this.lazyFetch_) {\n      fetch();\n    }\n\n    function load() {\n      if (dep.lazyFetch_) {\n        fetch();\n      }\n\n      if (!dep.contents_) {\n        // loadFileSync_ or transform are responsible. Assume they logged an\n        // error.\n        return;\n      }\n\n      if (isEs6) {\n        controller.setModuleState(goog.ModuleType.ES6);\n      }\n\n      var namespace;\n\n      try {\n        var contents = dep.contents_;\n        dep.contents_ = null;\n        goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(contents));\n        if (isEs6) {\n          namespace = goog.moduleLoaderState_.moduleName;\n        }\n      } finally {\n        if (isEs6) {\n          controller.clearModuleState();\n        }\n      }\n\n      if (isEs6) {\n        // Due to circular dependencies this may not be available for require\n        // right now.\n        goog.global['$jscomp']['require']['ensure'](\n            [dep.getPathName()], function() {\n              controller.registerEs6ModuleExports(\n                  dep.path,\n                  goog.global['$jscomp']['require'](dep.getPathName()),\n                  namespace);\n            });\n      }\n\n      controller.loaded();\n    }\n\n    // Do not fetch now; in FireFox 47 the synchronous XHR doesn't block all\n    // events. If we fetched now and then document.write'd the contents the\n    // document.write would be an eval and would execute too soon! Instead write\n    // a script tag to fetch and eval synchronously at the correct time.\n    function fetchInOwnScriptThenLoad() {\n      /** @type {!HTMLDocument} */\n      var doc = goog.global.document;\n\n      var key = goog.Dependency.registerCallback_(function() {\n        goog.Dependency.unregisterCallback_(key);\n        load();\n      });\n\n      var nonce = goog.getScriptNonce_();\n      var nonceAttr = nonce ? ' nonce=\"' + nonce + '\"' : '';\n      var script = '<script' + nonceAttr + '>' +\n          goog.protectScriptTag_('goog.Dependency.callback_(\"' + key + '\");') +\n          '</' +\n          'script>';\n      doc.write(\n          goog.TRUSTED_TYPES_POLICY_ ?\n              goog.TRUSTED_TYPES_POLICY_.createHTML(script) :\n              script);\n    }\n\n    // If one thing is pending it is this.\n    var anythingElsePending = controller.pending().length > 1;\n\n    // Additionally if we are meant to defer scripts but the page is still\n    // loading (e.g. an ES6 module is loading) then also defer. Or if we are\n    // meant to defer and anything else is pending then defer (those may be\n    // scripts that did not need transformation and are just script tags with\n    // defer set to true, and we need to evaluate after that deferred script).\n    var needsAsyncLoading = goog.Dependency.defer_ &&\n        (anythingElsePending || goog.isDocumentLoading_());\n\n    if (needsAsyncLoading) {\n      // Note that we only defer when we have to rather than 100% of the time.\n      // Always defering would work, but then in theory the order of\n      // goog.require calls would then matter. We want to enforce that most of\n      // the time the order of the require calls does not matter.\n      controller.defer(function() {\n        load();\n      });\n      return;\n    }\n    // TODO(johnplaisted): Externs are missing onreadystatechange for\n    // HTMLDocument.\n    /** @type {?} */\n    var doc = goog.global.document;\n\n    var isInternetExplorerOrEdge = goog.inHtmlDocument_() &&\n        ('ActiveXObject' in goog.global || goog.isEdge_());\n\n    // Don't delay in any version of IE or pre-Chromium Edge. There's a bug\n    // around this that will cause out of order script execution. This means\n    // that on older IE ES6 modules will load too early (while the document is\n    // still loading + the dom is not available). The other option is to load\n    // too late (when the document is complete and the onload even will never\n    // fire). This seems to be the lesser of two evils as scripts already act\n    // like the former.\n    if (isEs6 && goog.inHtmlDocument_() && goog.isDocumentLoading_() &&\n        !isInternetExplorerOrEdge) {\n      goog.Dependency.defer_ = true;\n      // Transpiled ES6 modules still need to load like regular ES6 modules,\n      // aka only after the document is interactive.\n      controller.pause();\n      var oldCallback = doc.onreadystatechange;\n      doc.onreadystatechange = function() {\n        if (doc.readyState == 'interactive') {\n          doc.onreadystatechange = oldCallback;\n          load();\n          controller.resume();\n        }\n        if (typeof oldCallback === 'function') {\n          oldCallback.apply(undefined, arguments);\n        }\n      };\n    } else {\n      // Always eval on old IE.\n      if (!goog.inHtmlDocument_() || !goog.isDocumentLoading_()) {\n        load();\n      } else {\n        fetchInOwnScriptThenLoad();\n      }\n    }\n  };\n\n\n  /**\n   * @param {string} contents\n   * @return {string}\n   * @abstract\n   */\n  goog.TransformedDependency.prototype.transform = function(contents) {};\n\n\n  /**\n   * Any non-goog.module dependency which needs to be transpiled before eval.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @param {!goog.Transpiler} transpiler\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.TranspiledDependency = function(\n      path, relativePath, provides, requires, loadFlags, transpiler) {\n    goog.TranspiledDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n    /** @protected @const*/\n    this.transpiler = transpiler;\n  };\n  goog.inherits(goog.TranspiledDependency, goog.TransformedDependency);\n\n\n  /**\n   * @override\n   * @param {string} contents\n   * @return {string}\n   */\n  goog.TranspiledDependency.prototype.transform = function(contents) {\n    // Transpile with the pathname so that ES6 modules are domain agnostic.\n    return this.transpiler.transpile(contents, this.getPathName());\n  };\n\n\n  /**\n   * An ES6 module dependency that was transpiled to a jscomp module outside\n   * of the debug loader, e.g. server side.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.PreTranspiledEs6ModuleDependency = function(\n      path, relativePath, provides, requires, loadFlags) {\n    goog.PreTranspiledEs6ModuleDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n  };\n  goog.inherits(\n      goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency);\n\n\n  /**\n   * @override\n   * @param {string} contents\n   * @return {string}\n   */\n  goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(\n      contents) {\n    return contents;\n  };\n\n\n  /**\n   * A goog.module, transpiled or not. Will always perform some minimal\n   * transformation even when not transpiled to wrap in a goog.loadModule\n   * statement.\n   *\n   * @param {string} path Absolute path of this script.\n   * @param {string} relativePath Path of this script relative to goog.basePath.\n   * @param {!Array<string>} provides goog.provided or goog.module symbols\n   *     in this file.\n   * @param {!Array<string>} requires goog symbols or relative paths to Closure\n   *     this depends on.\n   * @param {!Object<string, string>} loadFlags\n   * @param {boolean} needsTranspile\n   * @param {!goog.Transpiler} transpiler\n   * @struct @constructor\n   * @extends {goog.TransformedDependency}\n   */\n  goog.GoogModuleDependency = function(\n      path, relativePath, provides, requires, loadFlags, needsTranspile,\n      transpiler) {\n    goog.GoogModuleDependency.base(\n        this, 'constructor', path, relativePath, provides, requires, loadFlags);\n    /** @private @const */\n    this.needsTranspile_ = needsTranspile;\n    /** @private @const */\n    this.transpiler_ = transpiler;\n  };\n  goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency);\n\n\n  /**\n   * @override\n   * @param {string} contents\n   * @return {string}\n   */\n  goog.GoogModuleDependency.prototype.transform = function(contents) {\n    if (this.needsTranspile_) {\n      contents = this.transpiler_.transpile(contents, this.getPathName());\n    }\n\n    if (!goog.LOAD_MODULE_USING_EVAL || goog.global.JSON === undefined) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' + contents +\n          '\\n' +  // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + this.path + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              contents + '\\n//# sourceURL=' + this.path + '\\n') +\n          ');';\n    }\n  };\n\n\n  /**\n   * @param {string} relPath\n   * @param {!Array<string>|undefined} provides\n   * @param {!Array<string>} requires\n   * @param {boolean|!Object<string>=} opt_loadFlags\n   * @see goog.addDependency\n   */\n  goog.DebugLoader_.prototype.addDependency = function(\n      relPath, provides, requires, opt_loadFlags) {\n    provides = provides || [];\n    relPath = relPath.replace(/\\\\/g, '/');\n    var path = goog.normalizePath_(goog.basePath + relPath);\n    if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {\n      opt_loadFlags = opt_loadFlags ? {'module': goog.ModuleType.GOOG} : {};\n    }\n    var dep = this.factory_.createDependency(\n        path, relPath, provides, requires, opt_loadFlags,\n        goog.transpiler_.needsTranspile(\n            opt_loadFlags['lang'] || 'es3', opt_loadFlags['module']));\n    this.dependencies_[path] = dep;\n    for (var i = 0; i < provides.length; i++) {\n      this.idToPath_[provides[i]] = path;\n    }\n    this.idToPath_[relPath] = path;\n  };\n\n\n  /**\n   * Creates goog.Dependency instances for the debug loader to load.\n   *\n   * Should be overridden to have the debug loader use custom subclasses of\n   * goog.Dependency.\n   *\n   * @param {!goog.Transpiler} transpiler\n   * @struct @constructor\n   */\n  goog.DependencyFactory = function(transpiler) {\n    /** @protected @const */\n    this.transpiler = transpiler;\n  };\n\n\n  /**\n   * @param {string} path Absolute path of the file.\n   * @param {string} relativePath Path relative to closure\u2019s base.js.\n   * @param {!Array<string>} provides Array of provided goog.provide/module ids.\n   * @param {!Array<string>} requires Array of required goog.provide/module /\n   *     relative ES6 module paths.\n   * @param {!Object<string, string>} loadFlags\n   * @param {boolean} needsTranspile True if the file needs to be transpiled\n   *     per the goog.Transpiler.\n   * @return {!goog.Dependency}\n   */\n  goog.DependencyFactory.prototype.createDependency = function(\n      path, relativePath, provides, requires, loadFlags, needsTranspile) {\n\n    if (loadFlags['module'] == goog.ModuleType.GOOG) {\n      return new goog.GoogModuleDependency(\n          path, relativePath, provides, requires, loadFlags, needsTranspile,\n          this.transpiler);\n    } else if (needsTranspile) {\n      return new goog.TranspiledDependency(\n          path, relativePath, provides, requires, loadFlags, this.transpiler);\n    } else {\n      if (loadFlags['module'] == goog.ModuleType.ES6) {\n        if (goog.TRANSPILE == 'never' && goog.ASSUME_ES_MODULES_TRANSPILED) {\n          return new goog.PreTranspiledEs6ModuleDependency(\n              path, relativePath, provides, requires, loadFlags);\n        } else {\n          return new goog.Es6ModuleDependency(\n              path, relativePath, provides, requires, loadFlags);\n        }\n      } else {\n        return new goog.Dependency(\n            path, relativePath, provides, requires, loadFlags);\n      }\n    }\n  };\n\n\n  /** @private @const */\n  goog.debugLoader_ = new goog.DebugLoader_();\n\n\n  /**\n   * Loads the Closure Dependency file.\n   *\n   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base\n   * loaded, setDependencyFactory called, and then this called. i.e. allows\n   * custom loading of the deps file.\n   */\n  goog.loadClosureDeps = function() {\n    goog.debugLoader_.loadClosureDeps();\n  };\n\n\n  /**\n   * Sets the dependency factory, which can be used to create custom\n   * goog.Dependency implementations to control how dependencies are loaded.\n   *\n   * Note: if you wish to call this function and provide your own implemnetation\n   * it is a wise idea to set CLOSURE_NO_DEPS to true, otherwise the dependency\n   * file and all of its goog.addDependency calls will use the default factory.\n   * You can call goog.loadClosureDeps to load the Closure dependency file\n   * later, after your factory is injected.\n   *\n   * @param {!goog.DependencyFactory} factory\n   */\n  goog.setDependencyFactory = function(factory) {\n    goog.debugLoader_.setDependencyFactory(factory);\n  };\n\n\n  /**\n   * Trusted Types policy for the debug loader.\n   * @private @const {?TrustedTypePolicy}\n   */\n  goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ?\n      goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + '#base') :\n      null;\n\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.debugLoader_.loadClosureDeps();\n  }\n\n\n  /**\n   * Bootstraps the given namespaces and calls the callback once they are\n   * available either via goog.require. This is a replacement for using\n   * `goog.require` to bootstrap Closure JavaScript. Previously a `goog.require`\n   * in an HTML file would guarantee that the require'd namespace was available\n   * in the next immediate script tag. With ES6 modules this no longer a\n   * guarantee.\n   *\n   * @param {!Array<string>} namespaces\n   * @param {function(): ?} callback Function to call once all the namespaces\n   *     have loaded. Always called asynchronously.\n   */\n  goog.bootstrap = function(namespaces, callback) {\n    goog.debugLoader_.bootstrap(namespaces, callback);\n  };\n}\n\n\nif (!COMPILED) {\n  var isChrome87 = false;\n  // Cannot run check for Chrome <87 bug in case of strict CSP environments.\n  // TODO(user): Remove once Chrome <87 bug is no longer a problem.\n  try {\n    isChrome87 = eval(goog.global.trustedTypes.emptyScript) !==\n        goog.global.trustedTypes.emptyScript;\n  } catch (err) {\n  }\n\n  /**\n   * Trusted Types for running dev servers.\n   *\n   * @private @const\n   */\n  goog.CLOSURE_EVAL_PREFILTER_ =\n      // Detect Chrome <87 bug with TT and eval.\n      goog.global.trustedTypes && isChrome87 &&\n          goog.createTrustedTypesPolicy('goog#base#devonly#eval') ||\n      {createScript: goog.identity_};\n}\n","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00af\\_(\u30c4)_/\u00af\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","\"use strict\";exports.__esModule=!0,exports.LoggerFactory=exports.logLevels=void 0,exports.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};var LoggerFactory=function(){function LoggerFactory(logLevel,mockConsole){if(void 0===logLevel&&(logLevel=\"log_with_warnings\"),void 0===mockConsole&&(mockConsole=null),this.logLevel=logLevel,!exports.logLevels[logLevel])throw Error(\"Invalid log level \"+logLevel+\" allowed: \"+JSON.stringify(exports.logLevels));this.mockConsole=mockConsole||console}return LoggerFactory.prototype.dummy=function(){},LoggerFactory.prototype.setLogWarnings=function(logWarnings){this.logLevel=logWarnings},LoggerFactory.prototype.getLogWarnings=function(){return this.logLevel},LoggerFactory.prototype.getSingleLoggerColor=function(name,color,fn){return this.getSingleLoggerStyle(name,this.getColorStyle(color),fn)},LoggerFactory.prototype.getSingleLogger=function(name,fn){var color=this.getRandomColor(name);return this.getSingleLoggerStyle(name,this.getColorStyle(color),fn)},LoggerFactory.prototype.getSingleLoggerStyle=function(name,style,fn,minLevel){var _this=this;return void 0===minLevel&&(minLevel=\"log_with_warnings\"),function(){for(var args1=[],_i=0;_i<arguments.length;_i++)args1[_i]=arguments[_i];if(exports.logLevels[_this.logLevel]>exports.logLevels[minLevel])return _this.dummy;for(var args=Array.prototype.slice.call(args1),parts=args.shift().split(\"{}\"),params=[_this.mockConsole,\"%c\"+name,style],i=0;i<parts.length;i++)params.push(parts[i]),void 0!==args[i]&&params.push(args[i]);if(parts.length-1!==args.length)if(\"log_with_warnings\"===_this.logLevel)_this.mockConsole.error(\"MissMatch amount of arguments\");else if(\"log_raise_error\"===_this.logLevel)throw new Error(\"MissMatch amount of arguments\");return Function.prototype.bind.apply(fn,params)}},LoggerFactory.prototype.getLoggerColor=function(name,color){return this.getLoggerStyle(name,this.getColorStyle(color))},LoggerFactory.prototype.getColorStyle=function(color){return\"color: white; background-color: \"+color+\"; padding: 2px 6px; border-radius: 2px; font-size: 10px\"},LoggerFactory.getHash=function(str,seed){void 0===seed&&(seed=0);for(var h1=3735928559^seed,h2=1103547991^seed,i=0,ch=void 0;i<str.length;i++)ch=str.charCodeAt(i),h1=Math.imul(h1^ch,2654435761),h2=Math.imul(h2^ch,1597334677);return h1=Math.imul(h1^h1>>>16,2246822507)^Math.imul(h2^h2>>>13,3266489909),4294967296*(2097151&(h2=Math.imul(h2^h2>>>16,2246822507)^Math.imul(h1^h1>>>13,3266489909)))+(h1>>>0)},LoggerFactory.prototype.getRandomColor=function(str){void 0===str&&(str=\"\");for(var hash=LoggerFactory.getHash(str),color=\"#\",i=0;i<3;i++)color+=(\"00\"+(8+(hash>>7*i&127)).toString(16)).substr(-2);return color},LoggerFactory.prototype.getLogger=function(name){return this.getLoggerColor(name,this.getRandomColor(name))},LoggerFactory.prototype.getLoggerStyle=function(name,style){return{trace:this.getSingleLoggerStyle(name,style,this.mockConsole.trace,\"trace\"),debug:this.getSingleLoggerStyle(name,style,this.mockConsole.debug,\"debug\"),log:this.getSingleLoggerStyle(name,style,this.mockConsole.log,\"info\"),warn:this.getSingleLoggerStyle(name,style,this.mockConsole.warn,\"warn\"),error:this.getSingleLoggerStyle(name,style,this.mockConsole.error,\"error\")}},LoggerFactory}();exports.LoggerFactory=LoggerFactory;","import LoggerFactoryNS from \"lines-logger/lib/index.js\";\n\nlet logWorkletMain,\n  logWorkletWorker,\n  logSABMain,\n  logSABWorker,\n  logVANMain,\n  logVANWorker,\n  logOldSpnMain,\n  logOldSpnWorker,\n  logIndex,\n  logSPNMainSingle,\n  logSinglethreadWorkletMain,\n  logSinglethreadWorkletWorker,\n  logCommonUtils,\n  logWasmModule,\n  logMidiRequest;\n\n/** @define {boolean} */\nconst isProd = goog.define(\"PRODUCTION\", false);\n\nif (isProd) {\n  /**\n   * @suppress {checkTypes}\n   */\n  logWorkletMain = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logWorkletWorker = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logSABMain = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logSABWorker = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logVANMain = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logVANWorker = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logOldSpnMain = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logOldSpnWorker = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logIndex = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logSPNMainSingle = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logSinglethreadWorkletMain = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logSinglethreadWorkletWorker = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logCommonUtils = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logWasmModule = (ignore1) => (ignore2) => {};\n  /**\n   * @suppress {checkTypes}\n   */\n  logMidiRequest = (ignore1) => (ignore2) => {};\n} else {\n  // catches chromium and chrome\n\n  const loggerFactory = new LoggerFactoryNS.LoggerFactory();\n\n  const indexLogger = loggerFactory.getLoggerColor(\"index.js\", \"#1E88E5\");\n  const workletMainLogger = loggerFactory.getLoggerColor(\"WorkletMain\", \"#6D4C41\");\n  const workletWorkerLogger = loggerFactory.getLoggerColor(\"WorkletWorker\", \"#D7CCC8\");\n  const sabMainLogger = loggerFactory.getLoggerColor(\"Sab_Main\", \"#000000\");\n  const sabWorkerLogger = loggerFactory.getLoggerColor(\"Sab_Worker\", \"#222222\");\n  const vanMainLogger = loggerFactory.getLoggerColor(\"Van_Main\", \"#F4511E\");\n  const vanWorkerLogger = loggerFactory.getLoggerColor(\"Van_Worker\", \"#FFAB91\");\n  const oldSpnMainLogger = loggerFactory.getLoggerColor(\"OldSpn_Main\", \"#8E24AA\");\n  const oldSpnWorkerLogger = loggerFactory.getLoggerColor(\"OldSpn_Worker\", \"#E1BEE7\");\n  const singleWorkletMainLogger = loggerFactory.getLoggerColor(\n    \"WorkletSinglethread_Main\",\n    \"#1E88E5\",\n  );\n  const singleWorkletWorkerLogger = loggerFactory.getLoggerColor(\n    \"WorkletSinglethread_Worker\",\n    \"#90CAF9\",\n  );\n  const commonUtilsLogger = loggerFactory.getLoggerColor(\"common.utils.js\", \"#FFD600\");\n  const wasmModuleLogger = loggerFactory.getLoggerColor(\"module.js\", \"#FFF59D\");\n  const midiRequestLogger = loggerFactory.getLoggerColor(\"utils/request-midi.js\", \"#FFD600\");\n\n  logWorkletMain = workletMainLogger.log;\n  logWorkletWorker = workletWorkerLogger.log;\n  logSABMain = sabMainLogger.log;\n  logSABWorker = sabWorkerLogger.log;\n  logVANMain = vanMainLogger.log;\n  logVANWorker = vanWorkerLogger.log;\n  logOldSpnMain = oldSpnMainLogger.log;\n  logOldSpnWorker = oldSpnWorkerLogger.log;\n  logIndex = indexLogger.log;\n  logSPNMainSingle =\n    (...argz) =>\n    () =>\n      console.log(...argz); // TODO\n  logSinglethreadWorkletMain = singleWorkletMainLogger.log;\n  logSinglethreadWorkletWorker = singleWorkletWorkerLogger.log;\n  logCommonUtils = commonUtilsLogger.log;\n  logWasmModule = wasmModuleLogger.log;\n  logMidiRequest = midiRequestLogger.log;\n}\n\n/**\n * @suppress {checkTypes}\n */\nexport default (ignore1) => (ignore2) => {};\n\nexport {\n  logWorkletMain,\n  logWorkletWorker,\n  logSABMain,\n  logSABWorker,\n  logVANMain,\n  logVANWorker,\n  logOldSpnMain,\n  logOldSpnWorker,\n  logIndex,\n  logSPNMainSingle,\n  logSinglethreadWorkletMain,\n  logSinglethreadWorkletWorker,\n  logCommonUtils,\n  logWasmModule,\n  logMidiRequest,\n};\n","/*\n   csound instantiation module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * creates Csound instance\n * (inferred in @csound/wasm/browser)\n */\nexport const csoundCreate = (wasm) => () => wasm.exports.csoundCreateWasi();\n\ncsoundCreate.toString = () => \"create = async () => undefined;\";\n\n/**\n * Destroys an instance of Csound and frees memory\n * @async\n * @function\n * @name destroy\n * @memberof CsoundObj\n * @return {Promise.<undefined>}\n */\nexport const csoundDestroy = (wasm) => (csound) => wasm.exports.csoundDestroy(csound);\n\ncsoundDestroy.toString = () => \"destroy = async () => undefined;\";\n\n/**\n * Returns the API version as int\n * @async\n * @function\n * @name getAPIVersion\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetAPIVersion = (wasm) => () => wasm.exports.csoundGetAPIVersion();\n\ncsoundGetAPIVersion.toString = () => \"getAPIVersion = async () => Number;\";\n\n/**\n * Returns the Csound version as int\n * @async\n * @function\n * @name getVersion\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetVersion = (wasm) => () => wasm.exports.csoundGetVersion();\n\ncsoundGetVersion.toString = () => \"getVersion = async () => Number;\";\n\n/**\n * Initialise Csound with specific flags.\n * This function is called internally by csoundCreate(),\n * so there is generally no need to use it explicitly\n * unless you need to avoid default initilization that\n * sets signal handlers and atexit() callbacks.\n * @async\n * @function\n * @name initialize\n * @memberof CsoundObj\n * @return {Promise.<number>} - Return value is zero on success,\n *     positive if initialisation was done already, and negative on error.\n */\nexport const csoundInitialize = (wasm) => (_, flags) => wasm.exports.csoundInitialize(flags);\n\ncsoundInitialize.toString = () => \"initialize = async () => Number;\";\n","/** @define {boolean} */\nconst WITH_TEXT_ENCODER_POLYFILL = goog.define(\"WITH_TEXT_ENCODER_POLYFILL\", false);\n\n/** @constructor */\nfunction TextEncoderPoly() {\n  this.encoding = \"utf8\";\n  return this;\n}\n\nTextEncoderPoly.prototype.encode = function (string_) {\n  if (typeof string_ !== \"string\") {\n    throw new TypeError(\"passed argument must be of type string \" + string_ + \" \" + typeof string_);\n  }\n  const binstr = unescape(encodeURIComponent(string_));\n  const array = new Uint8Array(binstr.length);\n  [...binstr].forEach(function (char, index) {\n    array[index] = char.codePointAt(0);\n  });\n  return array;\n};\n\n/** @constructor */\nfunction TextDecoderPoly() {\n  this.encoding = \"utf-8\";\n  this.ignoreBOM = false;\n\n  this.trimNull = (a) => {\n    const c = a.indexOf(\"\\0\");\n    if (c > -1) {\n      return a.slice(0, Math.max(0, c));\n    }\n    return a;\n  };\n\n  this.decode = function (view, options) {\n    if (typeof view === \"undefined\") {\n      return \"\";\n    }\n\n    const stream = typeof options !== \"undefined\" && \"stream\" in options ? options.stream : false;\n    if (typeof stream !== \"boolean\") {\n      throw new TypeError(\"stream option must be boolean\");\n    }\n\n    if (!ArrayBuffer.isView(view)) {\n      throw new TypeError(\"passed argument must be an array buffer view\");\n    } else {\n      const array = new Uint8Array(view.buffer, view.byteOffset, view.byteLength);\n      const charArray = Array.from({ length: array.length });\n      array.forEach(function (charcode, index) {\n        charArray[index] = String.fromCodePoint(charcode);\n      });\n      return this.trimNull(charArray.join(\"\"));\n    }\n  };\n}\n\nexport const decoder = WITH_TEXT_ENCODER_POLYFILL ? new TextDecoderPoly() : new TextDecoder(\"utf8\");\n\nexport const encoder = WITH_TEXT_ENCODER_POLYFILL ? new TextEncoderPoly() : new TextEncoder(\"utf8\");\n\nexport const uint2String = (uint) => decoder.decode(uint);\n","export const trimNull = (a) => {\n  const c = a.indexOf(\"\\0\");\n  if (c > -1) {\n    // eslint-disable-next-line unicorn/prefer-string-slice\n    return a.substr(0, c);\n  }\n  return a;\n};\n","import { encoder, uint2String } from \"./text-encoders.js\";\nimport { trimNull } from \"./trim-null.js\";\n\n/**\n * @param {WasmInst} wasm\n * @param {number} ptr\n */\nexport const freeStringPtr = (wasm, ptr) => {\n  wasm.exports.freeStringMem(ptr);\n};\n\nexport const ptr2string = (wasm, stringPtr) => {\n  const { buffer } = wasm.wasi.memory;\n  const intArray = new Uint8Array(buffer, stringPtr);\n  const result = uint2String(intArray);\n  return trimNull(result);\n};\n\nexport const string2ptr = (wasm, string) => {\n  if (typeof string !== \"string\") {\n    console.error(\"Expected string but got\", typeof string);\n    return;\n  }\n\n  const stringBuf = encoder.encode(string);\n  const offset = wasm.exports.allocStringMem(stringBuf.length);\n  const { buffer } = wasm.wasi.memory;\n  const outBuf = new Uint8Array(buffer, offset, stringBuf.length + 1);\n  outBuf.set(stringBuf);\n  return offset;\n};\n","import { freeStringPtr, string2ptr } from \"../utils/string-pointers.js\";\n\n/*\n   csound performance module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * Parses a csound orchestra string\n * @async\n * @function\n * @name parseOrc\n * @memberof CsoundObj\n * @param {string} orc\n * @return {Promise.<object>}\n */\nexport const csoundParseOrc = (wasm) => (csound, orc) => wasm.exports.csoundParseOrc(csound, orc);\n\ncsoundParseOrc.toString = () => \"parseOrc = async (orchestra) => Object;\";\n\n/**\n * Compiles AST tree\n * @async\n * @function\n * @name compileTree\n * @memberof CsoundObj\n * @param {object} tree\n * @return {Promise.<number>}\n */\nexport const csoundCompileTree = (wasm) => (csound, tree) =>\n  wasm.exports.csoundCompileTree(csound, tree);\n\ncsoundCompileTree.toString = () => \"compileTree = async (tree) => Number;\";\n\n// TODO\n// csoundDeleteTree (CSOUND *csound, TREE *tree)\n\n/**\n * Compiles a csound orchestra string\n * @async\n * @function\n * @name compileOrc\n * @memberof CsoundObj\n * @param {string} orc\n * @return {Promise.<number>}\n */\nexport const csoundCompileOrc = (wasm) => (csound, orc) => {\n  const stringPtr = string2ptr(wasm, orc);\n  const result = wasm.exports.csoundCompileOrc(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundCompileOrc.toString = () => \"compileOrc = async (orchestra) => Number;\";\n\n/**\n * Compiles a csound orchestra string\n * @async\n * @function\n * @name evalCode\n * @memberof CsoundObj\n * @param {string} orc\n * @return {Promise.<number>}\n */\nexport const csoundEvalCode = (wasm) => (csound, orc) => {\n  const stringPtr = string2ptr(wasm, orc);\n  const result = wasm.exports.csoundEvalCode(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundEvalCode.toString = () => \"csoundEvalCode = async (orchestra) => Number;\";\n\n// TODO\n// csoundInitializeCscore (CSOUND *, FILE *insco, FILE *outsco)\n\n// TODO\n// csoundCompileArgs (CSOUND *, int argc, const char **argv)\n\n/**\n * Prepares Csound for performance\n * @async\n * @function\n * @name start\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundStart = (wasm) => (csound) => wasm.exports.csoundStartWasi(csound);\n\ncsoundStart.toString = () => \"start = async () => Number;\";\n\n// TODO\n// csoundCompile (CSOUND *, int argc, const char **argv)\n\n/**\n * Compiles a Csound input file but does not perform it.\n * @async\n * @function\n * @name compileCsd\n * @memberof CsoundObj\n * @param {string} path\n * @return {Promise.<number>}\n */\nexport const csoundCompileCsd = (wasm) => (csound, path) => {\n  const stringPtr = string2ptr(wasm, path);\n\n  let result;\n  try {\n    result = wasm.exports.csoundCompileCsd(csound, stringPtr);\n  } catch (error) {\n    console.error(error);\n  }\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundCompileCsd.toString = () => \"compileCsd = async (path) => Number;\";\n\n/**\n * Compiles a CSD string but does not perform it.\n * @async\n * @function\n * @name compileCsdText\n * @memberof CsoundObj\n * @param {string} orc\n * @return {Promise.<number>}\n */\nexport const csoundCompileCsdText = (wasm) => (csound, orc) => {\n  const stringPtr = string2ptr(wasm, orc);\n  const result = wasm.exports.csoundCompileCsdText(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundCompileCsdText.toString = () => \"compileCsdText = async (csoundDocument) => Number;\";\n\n/**\n * Performs(plays) audio until end is reached\n * @async\n * @function\n * @name perform\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundPerform = (wasm) => (csound) => wasm.exports.csoundPerform(csound);\n\ncsoundPerform.toString = () => \"perform = async () => Number;\";\n\n/**\n * Performs(plays) 1 ksmps worth of sample(s)\n * @async\n * @function\n * @name performKsmps\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundPerformKsmps = (wasm) => (csound) => wasm.exports.csoundPerformKsmpsWasi(csound);\n\ncsoundPerformKsmps.toString = () => \"performKsmps = async (csound) => Number;\";\n\n/**\n * Performs(plays) 1 buffer worth of audio\n * @async\n * @function\n * @name performBuffer\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundPerformBuffer = (wasm) => (csound) => wasm.exports.csoundPerformBuffer(csound);\n\ncsoundPerformBuffer.toString = () => \"performBuffer = async (csound) => Number;\";\n\n/**\n * Stops a csoundPerform\n * @async\n * @function\n * @name stop\n * @memberof CsoundObj\n * @return {Promise.<undefined>}\n */\nexport const csoundStop = (wasm) => (csound) => wasm.exports.csoundStop(csound);\n\ncsoundStop.toString = () => \"stop = async () => undefined;\";\n\n/**\n * Prints information about the end of a performance,\n * and closes audio and MIDI devices.\n * @async\n * @function\n * @name cleanup\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundCleanup = (wasm) => (csound) => wasm.exports.csoundCleanup(csound);\n\ncsoundCleanup.toString = () => \"cleanup = async () => Number;\";\n\n/**\n * Prints information about the end of a performance,\n * and closes audio and MIDI devices.\n * @async\n * @function\n * @name reset\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundReset = (wasm) => (csound) => wasm.exports.csoundResetWasi(csound);\n\ncsoundReset.toString = () => \"reset = async () => Number;\";\n","export const sizeOfPrimitive = {\n  int: 4,\n  MYFLT: 4,\n  char: 1,\n};\n\nexport const sizeofStruct = (jsStruct) => {\n  const result = jsStruct.reduce((total, [_, primitive, ...rest]) => {\n    return (total +=\n      primitive === \"char\" ? sizeOfPrimitive[primitive] * rest[0] : sizeOfPrimitive[primitive]);\n  }, 0);\n  return result;\n};\n","import { sizeOfPrimitive } from \"./native-sizes.js\";\nimport { uint2String } from \"./text-encoders.js\";\nimport { trimNull } from \"./trim-null.js\";\n\nexport const structBufferToObject = (jsStruct, buffer) => {\n  const [result] = jsStruct.reduce(\n    ([parameters, offset], [parameterName, primitive, ...rest]) => {\n      const currentSize =\n        primitive === \"char\" ? sizeOfPrimitive[primitive] * rest[0] : sizeOfPrimitive[primitive];\n      const currentValue =\n        primitive === \"char\"\n          ? trimNull(uint2String(buffer.subarray(offset, currentSize))) || \"\"\n          : buffer[offset];\n      parameters[parameterName] = currentValue;\n      return [parameters, offset + currentSize];\n    },\n    [{}, 0],\n  );\n  return result;\n};\n","/**\n * @typedef CSOUND_PARAMS\n * @property {number} debug_mode\n * @property {number} buffer_frames\n * @property {number} hardware_buffer_frames\n * @property {number} displays\n * @property {number} ascii_graphs\n * @property {number} postscript_graphs\n * @property {number} message_level\n * @property {number} tempo\n * @property {number} ring_bell\n * @property {number} use_cscore\n * @property {number} terminate_on_midi\n * @property {number} heartbeat\n * @property {number} defer_gen01_load\n * @property {number} midi_key\n * @property {number} midi_key_cps\n * @property {number} midi_key_oct\n * @property {number} midi_key_pch\n * @property {number} midi_velocity\n */\nexport const CSOUND_PARAMS = [\n  /* debug mode, 0 or 1 */\n  [\"debug_mode\", \"int\"],\n  /* number of frames in in/out buffers */\n  [\"buffer_frames\", \"int\"],\n  /* number of frames in in/out hardware buffers */\n  [\"hardware_buffer_frames\", \"int\"],\n  /* graph displays, 0 or 1 */\n  [\"displays\", \"int\"],\n  /* use ASCII graphs, 0 or 1 */\n  [\"ascii_graphs\", \"int\"],\n  /* use postscript graphs, 0 or 1 */\n  [\"postscript_graphs\", \"int\"],\n  /* message printout control */\n  [\"message_level\", \"int\"],\n  /* tempo (sets Beatmode)  */\n  [\"tempo\", \"int\"],\n  /* bell, 0 or 1 */\n  [\"ring_bell\", \"int\"],\n  /* use cscore for processing */\n  [\"use_cscore\", \"int\"],\n  /* terminate performance at the end */\n  [\"terminate_on_midi\", \"int\"],\n  /* print heart beat, 0 or 1 */\n  [\"heartbeat\", \"int\"],\n  /* defer GEN01 load, 0 or 1 */\n  [\"defer_gen01_load\", \"int\"],\n  /* pfield to map midi key no */\n  [\"midi_key\", \"int\"],\n  /* pfield to map midi key no as cps */\n  [\"midi_key_cps\", \"int\"],\n  /* pfield to map midi key no as oct */\n  [\"midi_key_oct\", \"int\"],\n  /* pfield to map midi key no as pch */\n  [\"midi_key_pch\", \"int\"],\n  /* pfield to map midi velocity */\n  [\"midi_velocity\", \"int\"],\n  /* pfield to map midi velocity as amplitude */\n  [\"midi_velocity_amp\", \"int\"],\n  /* disable relative paths from files, 0 or 1 */\n  [\"no_default_paths\", \"int\"],\n  /* number of threads for multicore performance */\n  [\"number_of_threads\", \"int\"],\n  /* do not compile, only check syntax */\n  [\"syntax_check_only\", \"int\"],\n  /* csd line error reporting */\n  [\"csd_line_counts\", \"int\"],\n  /* deprecated, kept for backwards comp.  */\n  [\"compute_weights\", \"int\"],\n  /* use realtime priority mode, 0 or 1 */\n  [\"realtime_mode\", \"int\"],\n  /* use sample-level score event accuracy */\n  [\"sample_accurate\", \"int\"],\n  /* overriding sample rate */\n  [\"sample_rate_override\", \"MYFLT\"],\n  /* overriding control rate */\n  [\"control_rate_override\", \"MYFLT\"],\n  /* overriding number of out channels */\n  [\"nchnls_override\", \"int\"],\n  /* overriding number of in channels */\n  [\"nchnls_i_override\", \"int\"],\n  /* overriding 0dbfs */\n  [\"e0dbfs_override\", \"MYFLT\"],\n  /* daemon mode */\n  [\"daemon\", \"int\"],\n  /* ksmps override */\n  [\"ksmps_override\", \"int\"],\n  /* fft_lib */\n  [\"FFT_library\", \"int\"],\n];\n\n/**\n * @typedef CS_MIDIDEVICE Array<Array.<string | number>>>\n */\nexport const CS_MIDIDEVICE = [\n  /* debug mode, 0 or 1 */\n  [\"device_name\", \"char\", 64],\n  [\"interface_name\", \"char\", 64],\n  [\"device_id\", \"char\", 64],\n  [\"midi_module\", \"char\", 64],\n  [\"isOutput\", \"int\"],\n];\n","/* eslint-disable unicorn/prevent-abbreviations */\nimport { freeStringPtr, string2ptr } from \"../utils/string-pointers.js\";\nimport { structBufferToObject } from \"../utils/structure-buffer-to-object.js\";\nimport { sizeofStruct } from \"../utils/native-sizes.js\";\nimport { CSOUND_PARAMS } from \"../structures.js\";\n\n/*\n   csound attribute module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * Returns the sample rate from Csound instance\n * @async\n * @function\n * @name getSr\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetSr = (wasm) => (csound) => wasm.exports.csoundGetSr(csound);\n\ncsoundGetSr.toString = () => \"getSr = async () => Number;\";\n\n/**\n * Returns the control rate from Csound instance\n * @async\n * @function\n * @name getKr\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetKr = (wasm) => (csound) => wasm.exports.csoundGetKr(csound);\n\ncsoundGetKr.toString = () => \"getKr = async () => Number;\";\n\n/**\n * Returns the ksmps value (kr/sr) from Csound instance\n * @async\n * @function\n * @name getKsmps\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetKsmps = (wasm) => (csound) => wasm.exports.csoundGetKsmps(csound);\n\ncsoundGetKsmps.toString = () => \"getKsmps = async () => Number;\";\n\n/**\n * Returns the number of output channels from Csound instance\n * @async\n * @function\n * @name getNchnls\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetNchnls = (wasm) => (csound) => wasm.exports.csoundGetNchnls(csound);\n\ncsoundGetNchnls.toString = () => \"getNchnls = async () => Number;\";\n\n/**\n * Returns the number of input channels from Csound instance\n * @async\n * @function\n * @name getNchnlsInput\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetNchnlsInput = (wasm) => (csound) => wasm.exports.csoundGetNchnlsInput(csound);\n\ncsoundGetNchnlsInput.toString = () => \"getNchnlsInput = async () => Number;\";\n\n/**\n * Returns the value of csoundGet0dBFS\n * @async\n * @function\n * @name get0dBFS\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGet0dBFS = (wasm) => (csound) => wasm.exports.csoundGet0dBFS(csound);\n\ncsoundGet0dBFS.toString = () => \"get0dBFS = async () => Number;\";\n\n/**\n * Returns the A4 frequency reference\n * @async\n * @function\n * @name getA4\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetA4 = (wasm) => (csound) => wasm.exports.csoundGetA4(csound);\n\ncsoundGetA4.toString = () => \"getA4 = async () => Number;\";\n\n/**\n * Return the current performance time in samples\n * @async\n * @function\n * @name getCurrentTimeSamples\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetCurrentTimeSamples = (wasm) => (csound) =>\n  wasm.exports.csoundGetCurrentTimeSamples(csound);\n\ncsoundGetCurrentTimeSamples.toString = () => \"getCurrentTimeSamples = async () => Number;\";\n\n/**\n * Return the size of MYFLT in number of bytes\n * @async\n * @function\n * @name getSizeOfMYFLT\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetSizeOfMYFLT = (wasm) => (csound) => wasm.exports.csoundGetSizeOfMYFLT(csound);\n\ncsoundGetSizeOfMYFLT.toString = () => \"getSizeOfMYFLT = async () => Number;\";\n\n// TODO (do these make any sense in wasm?)\n// csoundGetHostData\n// csoundSetHostData\n\n/**\n * Set a single csound option (flag),\n * no spaces are allowed in the string.\n * @async\n * @function\n * @name setOption\n * @memberof CsoundObj\n * @param {string} option\n * @return {Promise.<number>}\n */\nexport const csoundSetOption = (wasm) => (csound, option) => {\n  const stringPtr = string2ptr(wasm, option);\n  const result = wasm.exports.csoundSetOption(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundSetOption.toString = () => \"setOption = async (option) => Number;\";\n\n/**\n * Configure Csound with a given set of\n * parameters defined in the CSOUND_PARAMS structure.\n * These parameters are the part of the OPARMS struct\n * that are configurable through command line flags.\n * The CSOUND_PARAMS structure can be obtained using\n * csoundGetParams().\n * These options should only be changed before\n * performance has started.\n * @async\n * @function\n * @name setParams\n * @memberof CsoundObj\n * @param {CSOUND_PARAMS} csoundParams - csoundParams object\n * @return {Promise.<undefined>}\n */\nexport const csoundSetParams = (wasm) => (csound, csoundParameters) => {\n  wasm.exports.csoundSetParams(csound, csoundParameters);\n};\n\ncsoundSetParams.toString = () => \"setParams = async (csoundParams) => undefined;\";\n\n/**\n * Get the current set of parameters\n * from a Csound instance\n * in a CSOUND_PARAMS structure.\n * @async\n * @function\n * @name getParams\n * @memberof CsoundObj\n * @return {Promise.<CSOUND_PARAMS>} - CSOUND_PARAMS object\n */\nexport const csoundGetParams = (wasm) => (csound) => {\n  const { buffer } = wasm.wasi.memory;\n  const structLength = sizeofStruct(CSOUND_PARAMS);\n  const structOffset = wasm.exports.allocCsoundParamsStruct();\n  const structBuffer = new Uint8Array(buffer, structOffset, structLength);\n  wasm.exports.csoundGetParams(csound, structOffset);\n  const currentCsoundParameters = structBufferToObject(CSOUND_PARAMS, structBuffer);\n  wasm.exports.freeCsoundParams(structOffset);\n  return currentCsoundParameters;\n};\n\ncsoundGetParams.toString = () => \"getParams = async () => CSOUND_PARAMS;\";\n\n/**\n * Returns whether Csound is set to print debug messages\n * sent through the DebugMsg() internal API function.\n * Anything different to 0 means true.\n * @async\n * @function\n * @name getDebug\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetDebug = (wasm) => (csound) => wasm.exports.csoundGetDebug(csound);\n\ncsoundGetDebug.toString = () => \"getDebug = async () => Number;\";\n\n/**\n * Return the size of MYFLT in number of bytes\n * @async\n * @function\n * @name setDebug\n * @memberof CsoundObj\n * @param {number} debug\n * @return {Promise.<undefined>}\n */\nexport const csoundSetDebug = (wasm) => (csound, debug) => {\n  wasm.exports.csoundSetDebug(csound, debug);\n};\n\ncsoundSetDebug.toString = () => \"setDebug = async (number) => undefined;\";\n","/*\n   Realtime Audio I/O module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * Returns the number of samples in Csound's input buffer.\n * @async\n * @function\n * @name getInputBufferSize\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetInputBufferSize = (wasm) => (csound) =>\n  wasm.exports.csoundGetInputBufferSize(csound);\n\ncsoundGetInputBufferSize.toString = () => \"getInputBufferSize = async () => Number;\";\n\n/**\n * Returns the number of samples in Csound's output buffer.\n * @async\n * @function\n * @name getOutputBufferSize\n * @memberof CsoundObj\n * @return {Promise.<number>}\n */\nexport const csoundGetOutputBufferSize = (wasm) => (csound) =>\n  wasm.exports.csoundGetOutputBufferSize(csound);\n\ncsoundGetOutputBufferSize.toString = () => \"getOutputBufferSize = async () => Number;\";\n\n/**\n * Returns the address of the Csound audio input buffer.\n * @function\n */\nexport const csoundGetInputBuffer = (wasm /* WasmInst */) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundGetInputBuffer(csound);\n\ncsoundGetInputBuffer.toString = () => \"getInputBuffer = async () => Number;\";\n\n/**\n * Returns the address of the Csound audio output buffer.\n * @function\n */\nexport const csoundGetOutputBuffer = (wasm /* WasmInst */) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundGetOutputBuffer(csound);\n\ncsoundGetOutputBuffer.toString = () => \"getOutputBuffer = async () => Number;\";\n\n/**\n * Returns the address of the Csound audio input working buffer (spin).\n * Enables external software to write audio into Csound before calling csoundPerformKsmps.\n * @function\n */\nexport const csoundGetSpin = (wasm /* WasmInst */) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundGetSpin(csound);\n\ncsoundGetSpin.toString = () => \"getSpin = async (csound) => Number;\";\n\n/**\n * Returns the address of the Csound audio output working buffer (spout).\n * Enables external software to read audio from Csound after calling csoundPerformKsmps.\n * @function\n */\nexport const csoundGetSpout = (wasm /* WasmInst */) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundGetSpout(csound);\n\ncsoundGetSpout.toString = () => \"getSpout = async () => Number;\";\n\n// PUBLIC void \tcsoundSetRTAudioModule (CSOUND *csound, const char *module)\n// PUBLIC int \tcsoundGetModule (CSOUND *csound, int number, char **name, char **type)\n\n// PUBLIC void \tcsoundClearSpin (CSOUND *)\n// PUBLIC void \tcsoundAddSpinSample (CSOUND *csound, int frame, int channel, MYFLT sample)\n// PUBLIC void \tcsoundSetSpinSample (CSOUND *csound, int frame, int channel, MYFLT sample)\n\n// PUBLIC MYFLT \tcsoundGetSpoutSample (CSOUND *csound, int frame, int channel)\n// PUBLIC void ** \tcsoundGetRtRecordUserData (CSOUND *)\n// PUBLIC void ** \tcsoundGetRtPlayUserData (CSOUND *)\n// PUBLIC void \tcsoundSetHostImplementedAudioIO (CSOUND *, int state, int bufSize)\n// PUBLIC int \tcsoundGetAudioDevList (CSOUND *csound, CS_AUDIODEVICE *list, int isOutput)\n// PUBLIC void \tcsoundSetPlayopenCallback (CSOUND *, int(*playopen__)(CSOUND *, const csRtAudioParams *parm))\n// PUBLIC void \tcsoundSetRtplayCallback (CSOUND *, void(*rtplay__)(CSOUND *, const MYFLT *outBuf, int nbytes))\n// PUBLIC void \tcsoundSetRecopenCallback (CSOUND *, int(*recopen_)(CSOUND *, const csRtAudioParams *parm))\n// PUBLIC void \tcsoundSetRtrecordCallback (CSOUND *, int(*rtrecord__)(CSOUND *, MYFLT *inBuf, int nbytes))\n// PUBLIC void \tcsoundSetRtcloseCallback (CSOUND *, void(*rtclose__)(CSOUND *))\n// PUBLIC void \tcsoundSetAudioDeviceListCallback (CSOUND *csound, int(*audiodevlist__)(CSOUND *, CS_AUDIODEVICE *list, int isOutput))\n","function F() {\n  return false;\n}\n\nfunction T() {\n  return true;\n}\n\nfunction add(a, b) {\n  if (arguments.length === 1) return _b => add(a, _b);\n  return Number(a) + Number(b);\n}\n\nfunction curry(fn, args = []) {\n  return (..._args) => (rest => rest.length >= fn.length ? fn(...rest) : curry(fn, rest))([...args, ..._args]);\n}\n\nconst cloneList = list => {\n  return Array.prototype.slice.call(list);\n};\n\nfunction adjustFn(index, replaceFn, list) {\n  const actualIndex = index < 0 ? list.length + index : index;\n  if (index >= list.length || actualIndex < 0) return list;\n  const clone = cloneList(list);\n  clone[actualIndex] = replaceFn(clone[actualIndex]);\n  return clone;\n}\n\nconst adjust = curry(adjustFn);\n\nfunction all(predicate, list) {\n  if (arguments.length === 1) return _list => all(predicate, _list);\n\n  for (let i = 0; i < list.length; i++) {\n    if (!predicate(list[i])) return false;\n  }\n\n  return true;\n}\n\nfunction allPass(predicates) {\n  return (...input) => {\n    let counter = 0;\n\n    while (counter < predicates.length) {\n      if (!predicates[counter](...input)) {\n        return false;\n      }\n\n      counter++;\n    }\n\n    return true;\n  };\n}\n\nfunction always(x) {\n  return () => x;\n}\n\nfunction and(a, b) {\n  if (arguments.length === 1) return _b => and(a, _b);\n  return a && b;\n}\n\nfunction any(predicate, list) {\n  if (arguments.length === 1) return _list => any(predicate, _list);\n  let counter = 0;\n\n  while (counter < list.length) {\n    if (predicate(list[counter], counter)) {\n      return true;\n    }\n\n    counter++;\n  }\n\n  return false;\n}\n\nfunction anyPass(predicates) {\n  return (...input) => {\n    let counter = 0;\n\n    while (counter < predicates.length) {\n      if (predicates[counter](...input)) {\n        return true;\n      }\n\n      counter++;\n    }\n\n    return false;\n  };\n}\n\nfunction append(x, input) {\n  if (arguments.length === 1) return _input => append(x, _input);\n  if (typeof input === 'string') return input.split('').concat(x);\n  const clone = cloneList(input);\n  clone.push(x);\n  return clone;\n}\n\nfunction apply(fn, args) {\n  if (arguments.length === 1) {\n    return _args => apply(fn, _args);\n  }\n\n  return fn.apply(this, args);\n}\n\nconst _isArray = Array.isArray;\n\nfunction __findHighestArity(spec, max = 0) {\n  for (const key in spec) {\n    if (spec.hasOwnProperty(key) === false || key === 'constructor') continue;\n\n    if (typeof spec[key] === 'object') {\n      max = Math.max(max, __findHighestArity(spec[key]));\n    }\n\n    if (typeof spec[key] === 'function') {\n      max = Math.max(max, spec[key].length);\n    }\n  }\n\n  return max;\n}\n\nfunction __filterUndefined() {\n  const defined = [];\n  let i = 0;\n  const l = arguments.length;\n\n  while (i < l) {\n    if (typeof arguments[i] === 'undefined') break;\n    defined[i] = arguments[i];\n    i++;\n  }\n\n  return defined;\n}\n\nfunction __applySpecWithArity(spec, arity, cache) {\n  const remaining = arity - cache.length;\n  if (remaining === 1) return x => __applySpecWithArity(spec, arity, __filterUndefined(...cache, x));\n  if (remaining === 2) return (x, y) => __applySpecWithArity(spec, arity, __filterUndefined(...cache, x, y));\n  if (remaining === 3) return (x, y, z) => __applySpecWithArity(spec, arity, __filterUndefined(...cache, x, y, z));\n  if (remaining === 4) return (x, y, z, a) => __applySpecWithArity(spec, arity, __filterUndefined(...cache, x, y, z, a));\n  if (remaining > 4) return (...args) => __applySpecWithArity(spec, arity, __filterUndefined(...cache, ...args));\n\n  if (_isArray(spec)) {\n    const ret = [];\n    let i = 0;\n    const l = spec.length;\n\n    for (; i < l; i++) {\n      if (typeof spec[i] === 'object' || _isArray(spec[i])) {\n        ret[i] = __applySpecWithArity(spec[i], arity, cache);\n      }\n\n      if (typeof spec[i] === 'function') {\n        ret[i] = spec[i](...cache);\n      }\n    }\n\n    return ret;\n  }\n\n  const ret = {};\n\n  for (const key in spec) {\n    if (spec.hasOwnProperty(key) === false || key === 'constructor') continue;\n\n    if (typeof spec[key] === 'object') {\n      ret[key] = __applySpecWithArity(spec[key], arity, cache);\n      continue;\n    }\n\n    if (typeof spec[key] === 'function') {\n      ret[key] = spec[key](...cache);\n    }\n  }\n\n  return ret;\n}\n\nfunction applySpec(spec, ...args) {\n  const arity = __findHighestArity(spec);\n\n  if (arity === 0) {\n    return () => ({});\n  }\n\n  const toReturn = __applySpecWithArity(spec, arity, args);\n\n  return toReturn;\n}\n\nfunction assocFn(prop, newValue, obj) {\n  return Object.assign({}, obj, {\n    [prop]: newValue\n  });\n}\n\nconst assoc = curry(assocFn);\n\nfunction _isInteger(n) {\n  return n << 0 === n;\n}\nvar _isInteger$1 = Number.isInteger || _isInteger;\n\nfunction assocPathFn(path, newValue, input) {\n  const pathArrValue = typeof path === 'string' ? path.split('.').map(x => _isInteger(Number(x)) ? Number(x) : x) : path;\n\n  if (pathArrValue.length === 0) {\n    return newValue;\n  }\n\n  const index = pathArrValue[0];\n\n  if (pathArrValue.length > 1) {\n    const condition = typeof input !== 'object' || input === null || !input.hasOwnProperty(index);\n    const nextinput = condition ? _isInteger(pathArrValue[1]) ? [] : {} : input[index];\n    newValue = assocPathFn(Array.prototype.slice.call(pathArrValue, 1), newValue, nextinput);\n  }\n\n  if (_isInteger(index) && _isArray(input)) {\n    const arr = cloneList(input);\n    arr[index] = newValue;\n    return arr;\n  }\n\n  return assoc(index, newValue, input);\n}\n\nconst assocPath = curry(assocPathFn);\n\nfunction _curryN(n, cache, fn) {\n  return function () {\n    let ci = 0;\n    let ai = 0;\n    const cl = cache.length;\n    const al = arguments.length;\n    const args = new Array(cl + al);\n\n    while (ci < cl) {\n      args[ci] = cache[ci];\n      ci++;\n    }\n\n    while (ai < al) {\n      args[cl + ai] = arguments[ai];\n      ai++;\n    }\n\n    const remaining = n - args.length;\n    return args.length >= n ? fn.apply(this, args) : _arity(remaining, _curryN(n, args, fn));\n  };\n}\n\nfunction _arity(n, fn) {\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n\n    case 1:\n      return function (_1) {\n        return fn.apply(this, arguments);\n      };\n\n    case 2:\n      return function (_1, _2) {\n        return fn.apply(this, arguments);\n      };\n\n    case 3:\n      return function (_1, _2, _3) {\n        return fn.apply(this, arguments);\n      };\n\n    case 4:\n      return function (_1, _2, _3, _4) {\n        return fn.apply(this, arguments);\n      };\n\n    case 5:\n      return function (_1, _2, _3, _4, _5) {\n        return fn.apply(this, arguments);\n      };\n\n    case 6:\n      return function (_1, _2, _3, _4, _5, _6) {\n        return fn.apply(this, arguments);\n      };\n\n    case 7:\n      return function (_1, _2, _3, _4, _5, _6, _7) {\n        return fn.apply(this, arguments);\n      };\n\n    case 8:\n      return function (_1, _2, _3, _4, _5, _6, _7, _8) {\n        return fn.apply(this, arguments);\n      };\n\n    case 9:\n      return function (_1, _2, _3, _4, _5, _6, _7, _8, _9) {\n        return fn.apply(this, arguments);\n      };\n\n    default:\n      return function (_1, _2, _3, _4, _5, _6, _7, _8, _9, _10) {\n        return fn.apply(this, arguments);\n      };\n  }\n}\n\nfunction curryN(n, fn) {\n  if (arguments.length === 1) return _fn => curryN(n, _fn);\n\n  if (n > 10) {\n    throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n\n  return _arity(n, _curryN(n, [], fn));\n}\n\nfunction bind(fn, thisObj) {\n  if (arguments.length === 1) {\n    return _thisObj => bind(fn, _thisObj);\n  }\n\n  return curryN(fn.length, (...args) => fn.apply(thisObj, args));\n}\n\nfunction both(f, g) {\n  if (arguments.length === 1) return _g => both(f, _g);\n  return (...input) => f(...input) && g(...input);\n}\n\nfunction chain(fn, list) {\n  if (arguments.length === 1) {\n    return _list => chain(fn, _list);\n  }\n\n  return [].concat(...list.map(fn));\n}\n\nfunction clampFn(min, max, input) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n\n  if (input >= min && input <= max) return input;\n  if (input > max) return max;\n  if (input < min) return min;\n}\n\nconst clamp = curry(clampFn);\n\nfunction clone(input) {\n  const out = _isArray(input) ? Array(input.length) : {};\n  if (input && input.getTime) return new Date(input.getTime());\n\n  for (const key in input) {\n    const v = input[key];\n    out[key] = typeof v === 'object' && v !== null ? v.getTime ? new Date(v.getTime()) : clone(v) : v;\n  }\n\n  return out;\n}\n\nfunction complement(fn) {\n  return (...input) => !fn(...input);\n}\n\nfunction compose(...fns) {\n  if (fns.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n\n  return function (...args) {\n    const list = fns.slice();\n\n    if (list.length > 0) {\n      const fn = list.pop();\n      let result = fn.apply(this, args);\n\n      while (list.length > 0) {\n        result = list.pop()(result);\n      }\n\n      return result;\n    }\n  };\n}\n\nfunction concat(x, y) {\n  if (arguments.length === 1) return _y => concat(x, _y);\n  return typeof x === 'string' ? `${x}${y}` : [...x, ...y];\n}\n\nfunction cond(conditions) {\n  return input => {\n    let done = false;\n    let toReturn;\n    conditions.forEach(([predicate, resultClosure]) => {\n      if (!done && predicate(input)) {\n        done = true;\n        toReturn = resultClosure(input);\n      }\n    });\n    return toReturn;\n  };\n}\n\nconst _keys = Object.keys;\n\nfunction mapArray(fn, list, isIndexed = false) {\n  let index = 0;\n  const willReturn = Array(list.length);\n\n  while (index < list.length) {\n    willReturn[index] = isIndexed ? fn(list[index], index) : fn(list[index]);\n    index++;\n  }\n\n  return willReturn;\n}\nfunction mapObject(fn, obj) {\n  let index = 0;\n\n  const keys = _keys(obj);\n\n  const len = keys.length;\n  const willReturn = {};\n\n  while (index < len) {\n    const key = keys[index];\n    willReturn[key] = fn(obj[key], key, obj);\n    index++;\n  }\n\n  return willReturn;\n}\nconst mapObjIndexed = mapObject;\nfunction map(fn, iterable) {\n  if (arguments.length === 1) return _iterable => map(fn, _iterable);\n\n  if (!iterable) {\n    throw new Error('Incorrect iterable input');\n  }\n\n  if (_isArray(iterable)) return mapArray(fn, iterable);\n  return mapObject(fn, iterable);\n}\n\nfunction max(x, y) {\n  if (arguments.length === 1) return _y => max(x, _y);\n  return y > x ? y : x;\n}\n\nfunction reduceFn(reducer, acc, list) {\n  if (!_isArray(list)) {\n    throw new TypeError('reduce: list must be array or iterable');\n  }\n\n  let index = 0;\n  const len = list.length;\n\n  while (index < len) {\n    acc = reducer(acc, list[index], index, list);\n    index++;\n  }\n\n  return acc;\n}\n\nconst reduce = curry(reduceFn);\n\nfunction converge(fn, transformers) {\n  if (arguments.length === 1) return _transformers => converge(fn, _transformers);\n  const highestArity = reduce((a, b) => max(a, b.length), 0, transformers);\n  return curryN(highestArity, function () {\n    return fn.apply(this, map(g => g.apply(this, arguments), transformers));\n  });\n}\n\nconst dec = x => x - 1;\n\nfunction isFalsy(input) {\n  return input === undefined || input === null || Number.isNaN(input) === true;\n}\n\nfunction defaultTo(defaultArgument, input) {\n  if (arguments.length === 1) {\n    return _input => defaultTo(defaultArgument, _input);\n  }\n\n  return isFalsy(input) ? defaultArgument : input;\n}\n\nfunction type(input) {\n  if (input === null) {\n    return 'Null';\n  } else if (input === undefined) {\n    return 'Undefined';\n  } else if (Number.isNaN(input)) {\n    return 'NaN';\n  }\n\n  const typeResult = Object.prototype.toString.call(input).slice(8, -1);\n  return typeResult === 'AsyncFunction' ? 'Async' : typeResult;\n}\n\nfunction _lastIndexOf(valueToFind, list) {\n  if (!_isArray(list)) {\n    throw new Error(`Cannot read property 'indexOf' of ${list}`);\n  }\n\n  const typeOfValue = type(valueToFind);\n  if (!['Object', 'Array', 'NaN', 'RegExp'].includes(typeOfValue)) return list.lastIndexOf(valueToFind);\n  const {\n    length\n  } = list;\n  let index = length;\n  let foundIndex = -1;\n\n  while (--index > -1 && foundIndex === -1) {\n    if (equals(list[index], valueToFind)) {\n      foundIndex = index;\n    }\n  }\n\n  return foundIndex;\n}\nfunction _indexOf(valueToFind, list) {\n  if (!_isArray(list)) {\n    throw new Error(`Cannot read property 'indexOf' of ${list}`);\n  }\n\n  const typeOfValue = type(valueToFind);\n  if (!['Object', 'Array', 'NaN', 'RegExp'].includes(typeOfValue)) return list.indexOf(valueToFind);\n  let index = -1;\n  let foundIndex = -1;\n  const {\n    length\n  } = list;\n\n  while (++index < length && foundIndex === -1) {\n    if (equals(list[index], valueToFind)) {\n      foundIndex = index;\n    }\n  }\n\n  return foundIndex;\n}\n\nfunction _arrayFromIterator(iter) {\n  const list = [];\n  let next;\n\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n\n  return list;\n}\n\nfunction _equalsSets(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  const aList = _arrayFromIterator(a.values());\n\n  const bList = _arrayFromIterator(b.values());\n\n  const filtered = aList.filter(aInstance => _indexOf(aInstance, bList) === -1);\n  return filtered.length === 0;\n}\n\nfunction parseError(maybeError) {\n  const typeofError = maybeError.__proto__.toString();\n\n  if (!['Error', 'TypeError'].includes(typeofError)) return [];\n  return [typeofError, maybeError.message];\n}\n\nfunction parseDate(maybeDate) {\n  if (!maybeDate.toDateString) return [false];\n  return [true, maybeDate.getTime()];\n}\n\nfunction parseRegex(maybeRegex) {\n  if (maybeRegex.constructor !== RegExp) return [false];\n  return [true, maybeRegex.toString()];\n}\n\nfunction equals(a, b) {\n  if (arguments.length === 1) return _b => equals(a, _b);\n  const aType = type(a);\n  if (aType !== type(b)) return false;\n\n  if (aType === 'Function') {\n    return a.name === undefined ? false : a.name === b.name;\n  }\n\n  if (['NaN', 'Undefined', 'Null'].includes(aType)) return true;\n\n  if (aType === 'Number') {\n    if (Object.is(-0, a) !== Object.is(-0, b)) return false;\n    return a.toString() === b.toString();\n  }\n\n  if (['String', 'Boolean'].includes(aType)) {\n    return a.toString() === b.toString();\n  }\n\n  if (aType === 'Array') {\n    const aClone = Array.from(a);\n    const bClone = Array.from(b);\n\n    if (aClone.toString() !== bClone.toString()) {\n      return false;\n    }\n\n    let loopArrayFlag = true;\n    aClone.forEach((aCloneInstance, aCloneIndex) => {\n      if (loopArrayFlag) {\n        if (aCloneInstance !== bClone[aCloneIndex] && !equals(aCloneInstance, bClone[aCloneIndex])) {\n          loopArrayFlag = false;\n        }\n      }\n    });\n    return loopArrayFlag;\n  }\n\n  const aRegex = parseRegex(a);\n  const bRegex = parseRegex(b);\n\n  if (aRegex[0]) {\n    return bRegex[0] ? aRegex[1] === bRegex[1] : false;\n  } else if (bRegex[0]) return false;\n\n  const aDate = parseDate(a);\n  const bDate = parseDate(b);\n\n  if (aDate[0]) {\n    return bDate[0] ? aDate[1] === bDate[1] : false;\n  } else if (bDate[0]) return false;\n\n  const aError = parseError(a);\n  const bError = parseError(b);\n\n  if (aError[0]) {\n    return bError[0] ? aError[0] === bError[0] && aError[1] === bError[1] : false;\n  }\n\n  if (aType === 'Set') {\n    return _equalsSets(a, b);\n  }\n\n  if (aType === 'Object') {\n    const aKeys = Object.keys(a);\n\n    if (aKeys.length !== Object.keys(b).length) {\n      return false;\n    }\n\n    let loopObjectFlag = true;\n    aKeys.forEach(aKeyInstance => {\n      if (loopObjectFlag) {\n        const aValue = a[aKeyInstance];\n        const bValue = b[aKeyInstance];\n\n        if (aValue !== bValue && !equals(aValue, bValue)) {\n          loopObjectFlag = false;\n        }\n      }\n    });\n    return loopObjectFlag;\n  }\n\n  return false;\n}\n\nfunction includes(valueToFind, iterable) {\n  if (arguments.length === 1) return _iterable => includes(valueToFind, _iterable);\n\n  if (typeof iterable === 'string') {\n    return iterable.includes(valueToFind);\n  }\n\n  if (!iterable) {\n    throw new TypeError(`Cannot read property \\'indexOf\\' of ${iterable}`);\n  }\n\n  if (!_isArray(iterable)) return false;\n  return _indexOf(valueToFind, iterable) > -1;\n}\n\nclass _Set {\n  constructor() {\n    this.set = new Set();\n    this.items = {};\n  }\n\n  checkUniqueness(item) {\n    const type$1 = type(item);\n\n    if (['Null', 'Undefined', 'NaN'].includes(type$1)) {\n      if (type$1 in this.items) {\n        return false;\n      }\n\n      this.items[type$1] = true;\n      return true;\n    }\n\n    if (!['Object', 'Array'].includes(type$1)) {\n      const prevSize = this.set.size;\n      this.set.add(item);\n      return this.set.size !== prevSize;\n    }\n\n    if (!(type$1 in this.items)) {\n      this.items[type$1] = [item];\n      return true;\n    }\n\n    if (_indexOf(item, this.items[type$1]) === -1) {\n      this.items[type$1].push(item);\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nfunction uniq(list) {\n  const set = new _Set();\n  const willReturn = [];\n  list.forEach(item => {\n    if (set.checkUniqueness(item)) {\n      willReturn.push(item);\n    }\n  });\n  return willReturn;\n}\n\nfunction difference(a, b) {\n  if (arguments.length === 1) return _b => difference(a, _b);\n  return uniq(a).filter(aInstance => !includes(aInstance, b));\n}\n\nfunction dissoc(prop, obj) {\n  if (arguments.length === 1) return _obj => dissoc(prop, _obj);\n  if (obj === null || obj === undefined) return {};\n  const willReturn = {};\n\n  for (const p in obj) {\n    willReturn[p] = obj[p];\n  }\n\n  delete willReturn[prop];\n  return willReturn;\n}\n\nfunction divide(a, b) {\n  if (arguments.length === 1) return _b => divide(a, _b);\n  return a / b;\n}\n\nfunction drop(howManyToDrop, listOrString) {\n  if (arguments.length === 1) return _list => drop(howManyToDrop, _list);\n  return listOrString.slice(howManyToDrop > 0 ? howManyToDrop : 0);\n}\n\nfunction dropLast(howManyToDrop, listOrString) {\n  if (arguments.length === 1) {\n    return _listOrString => dropLast(howManyToDrop, _listOrString);\n  }\n\n  return howManyToDrop > 0 ? listOrString.slice(0, -howManyToDrop) : listOrString.slice();\n}\n\nfunction dropLastWhile(predicate, iterable) {\n  if (arguments.length === 1) {\n    return _iterable => dropLastWhile(predicate, _iterable);\n  }\n\n  if (iterable.length === 0) return iterable;\n\n  const isArray = _isArray(iterable);\n\n  if (typeof predicate !== 'function') {\n    throw new Error(`'predicate' is from wrong type ${typeof predicate}`);\n  }\n\n  if (!isArray && typeof iterable !== 'string') {\n    throw new Error(`'iterable' is from wrong type ${typeof iterable}`);\n  }\n\n  let found = false;\n  const toReturn = [];\n  let counter = iterable.length;\n\n  while (counter > 0) {\n    counter--;\n\n    if (!found && predicate(iterable[counter]) === false) {\n      found = true;\n      toReturn.push(iterable[counter]);\n    } else if (found) {\n      toReturn.push(iterable[counter]);\n    }\n  }\n\n  return isArray ? toReturn.reverse() : toReturn.reverse().join('');\n}\n\nfunction dropRepeats(list) {\n  if (!_isArray(list)) {\n    throw new Error(`${list} is not a list`);\n  }\n\n  const toReturn = [];\n  list.reduce((prev, current) => {\n    if (!equals(prev, current)) {\n      toReturn.push(current);\n    }\n\n    return current;\n  }, undefined);\n  return toReturn;\n}\n\nfunction dropRepeatsWith(predicate, list) {\n  if (arguments.length === 1) {\n    return _iterable => dropRepeatsWith(predicate, _iterable);\n  }\n\n  if (!_isArray(list)) {\n    throw new Error(`${list} is not a list`);\n  }\n\n  const toReturn = [];\n  list.reduce((prev, current) => {\n    if (prev === undefined) {\n      toReturn.push(current);\n      return current;\n    }\n\n    if (!predicate(prev, current)) {\n      toReturn.push(current);\n    }\n\n    return current;\n  }, undefined);\n  return toReturn;\n}\n\nfunction dropWhile(predicate, iterable) {\n  if (arguments.length === 1) {\n    return _iterable => dropWhile(predicate, _iterable);\n  }\n\n  const isArray = _isArray(iterable);\n\n  if (!isArray && typeof iterable !== 'string') {\n    throw new Error('`iterable` is neither list nor a string');\n  }\n\n  let flag = false;\n  const holder = [];\n  let counter = -1;\n\n  while (counter++ < iterable.length - 1) {\n    if (flag) {\n      holder.push(iterable[counter]);\n    } else if (!predicate(iterable[counter])) {\n      if (!flag) flag = true;\n      holder.push(iterable[counter]);\n    }\n  }\n\n  return isArray ? holder : holder.join('');\n}\n\nfunction either(firstPredicate, secondPredicate) {\n  if (arguments.length === 1) {\n    return _secondPredicate => either(firstPredicate, _secondPredicate);\n  }\n\n  return (...input) => Boolean(firstPredicate(...input) || secondPredicate(...input));\n}\n\nfunction endsWith(target, iterable) {\n  if (arguments.length === 1) return _iterable => endsWith(target, _iterable);\n\n  if (typeof iterable === 'string') {\n    return iterable.endsWith(target);\n  }\n\n  if (!_isArray(target)) return false;\n  const diff = iterable.length - target.length;\n  let correct = true;\n  const filtered = target.filter((x, index) => {\n    if (!correct) return false;\n    const result = equals(x, iterable[index + diff]);\n    if (!result) correct = false;\n    return result;\n  });\n  return filtered.length === target.length;\n}\n\nfunction prop(propToFind, obj) {\n  if (arguments.length === 1) return _obj => prop(propToFind, _obj);\n  if (!obj) return undefined;\n  return obj[propToFind];\n}\n\nfunction eqPropsFn(property, objA, objB) {\n  return equals(prop(property, objA), prop(property, objB));\n}\n\nconst eqProps = curry(eqPropsFn);\n\nfunction evolveArray(rules, list) {\n  return mapArray((x, i) => {\n    if (type(rules[i]) === 'Function') {\n      return rules[i](x);\n    }\n\n    return x;\n  }, list, true);\n}\nfunction evolveObject(rules, iterable) {\n  return mapObject((x, prop) => {\n    if (type(x) === 'Object') {\n      const typeRule = type(rules[prop]);\n\n      if (typeRule === 'Function') {\n        return rules[prop](x);\n      }\n\n      if (typeRule === 'Object') {\n        return evolve(rules[prop], x);\n      }\n\n      return x;\n    }\n\n    if (type(rules[prop]) === 'Function') {\n      return rules[prop](x);\n    }\n\n    return x;\n  }, iterable);\n}\nfunction evolve(rules, iterable) {\n  if (arguments.length === 1) {\n    return _iterable => evolve(rules, _iterable);\n  }\n\n  const rulesType = type(rules);\n  const iterableType = type(iterable);\n\n  if (iterableType !== rulesType) {\n    throw new Error('iterableType !== rulesType');\n  }\n\n  if (!['Object', 'Array'].includes(rulesType)) {\n    throw new Error(`'iterable' and 'rules' are from wrong type ${rulesType}`);\n  }\n\n  if (iterableType === 'Object') {\n    return evolveObject(rules, iterable);\n  }\n\n  return evolveArray(rules, iterable);\n}\n\nfunction filterObject(predicate, obj) {\n  const willReturn = {};\n\n  for (const prop in obj) {\n    if (predicate(obj[prop], prop, obj)) {\n      willReturn[prop] = obj[prop];\n    }\n  }\n\n  return willReturn;\n}\nfunction filterArray(predicate, list, indexed = false) {\n  let index = 0;\n  const len = list.length;\n  const willReturn = [];\n\n  while (index < len) {\n    const predicateResult = indexed ? predicate(list[index], index) : predicate(list[index]);\n\n    if (predicateResult) {\n      willReturn.push(list[index]);\n    }\n\n    index++;\n  }\n\n  return willReturn;\n}\nfunction filter(predicate, iterable) {\n  if (arguments.length === 1) return _iterable => filter(predicate, _iterable);\n\n  if (!iterable) {\n    throw new Error('Incorrect iterable input');\n  }\n\n  if (_isArray(iterable)) return filterArray(predicate, iterable, false);\n  return filterObject(predicate, iterable);\n}\n\nfunction find(predicate, list) {\n  if (arguments.length === 1) return _list => find(predicate, _list);\n  let index = 0;\n  const len = list.length;\n\n  while (index < len) {\n    const x = list[index];\n\n    if (predicate(x)) {\n      return x;\n    }\n\n    index++;\n  }\n}\n\nfunction findIndex(predicate, list) {\n  if (arguments.length === 1) return _list => findIndex(predicate, _list);\n  const len = list.length;\n  let index = -1;\n\n  while (++index < len) {\n    if (predicate(list[index])) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nfunction findLast(predicate, list) {\n  if (arguments.length === 1) return _list => findLast(predicate, _list);\n  let index = list.length;\n\n  while (--index >= 0) {\n    if (predicate(list[index])) {\n      return list[index];\n    }\n  }\n\n  return undefined;\n}\n\nfunction findLastIndex(fn, list) {\n  if (arguments.length === 1) return _list => findLastIndex(fn, _list);\n  let index = list.length;\n\n  while (--index >= 0) {\n    if (fn(list[index])) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nfunction flatten(list, input) {\n  const willReturn = input === undefined ? [] : input;\n\n  for (let i = 0; i < list.length; i++) {\n    if (_isArray(list[i])) {\n      flatten(list[i], willReturn);\n    } else {\n      willReturn.push(list[i]);\n    }\n  }\n\n  return willReturn;\n}\n\nfunction flipFn(fn) {\n  return (...input) => {\n    if (input.length === 1) {\n      return holder => fn(holder, input[0]);\n    } else if (input.length === 2) {\n      return fn(input[1], input[0]);\n    } else if (input.length === 3) {\n      return fn(input[1], input[0], input[2]);\n    } else if (input.length === 4) {\n      return fn(input[1], input[0], input[2], input[3]);\n    }\n\n    throw new Error(\"R.flip doesn't work with arity > 4\");\n  };\n}\n\nfunction flip(fn) {\n  return flipFn(fn);\n}\n\nfunction forEach(fn, list) {\n  if (arguments.length === 1) return _list => forEach(fn, _list);\n\n  if (list === undefined) {\n    return;\n  }\n\n  if (_isArray(list)) {\n    let index = 0;\n    const len = list.length;\n\n    while (index < len) {\n      fn(list[index]);\n      index++;\n    }\n  } else {\n    let index = 0;\n\n    const keys = _keys(list);\n\n    const len = keys.length;\n\n    while (index < len) {\n      const key = keys[index];\n      fn(list[key], key, list);\n      index++;\n    }\n  }\n\n  return list;\n}\n\nfunction fromPairs(listOfPairs) {\n  const toReturn = {};\n  listOfPairs.forEach(([prop, value]) => toReturn[prop] = value);\n  return toReturn;\n}\n\nfunction groupBy(groupFn, list) {\n  if (arguments.length === 1) return _list => groupBy(groupFn, _list);\n  const result = {};\n\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i];\n    const key = groupFn(item);\n\n    if (!result[key]) {\n      result[key] = [];\n    }\n\n    result[key].push(item);\n  }\n\n  return result;\n}\n\nfunction groupWith(compareFn, list) {\n  if (!_isArray(list)) throw new TypeError('list.reduce is not a function');\n  const clone = cloneList(list);\n  if (list.length === 1) return [clone];\n  const toReturn = [];\n  let holder = [];\n  clone.reduce((prev, current, i) => {\n    if (i === 0) return current;\n    const okCompare = compareFn(prev, current);\n    const holderIsEmpty = holder.length === 0;\n    const lastCall = i === list.length - 1;\n\n    if (okCompare) {\n      if (holderIsEmpty) holder.push(prev);\n      holder.push(current);\n      if (lastCall) toReturn.push(holder);\n      return current;\n    }\n\n    if (holderIsEmpty) {\n      toReturn.push([prev]);\n      if (lastCall) toReturn.push([current]);\n      return current;\n    }\n\n    toReturn.push(holder);\n    if (lastCall) toReturn.push([current]);\n    holder = [];\n    return current;\n  }, undefined);\n  return toReturn;\n}\n\nfunction has(prop, obj) {\n  if (arguments.length === 1) return _obj => has(prop, _obj);\n  if (!obj) return false;\n  return obj.hasOwnProperty(prop);\n}\n\nfunction path(pathInput, obj) {\n  if (arguments.length === 1) return _obj => path(pathInput, _obj);\n\n  if (obj === null || obj === undefined) {\n    return undefined;\n  }\n\n  let willReturn = obj;\n  let counter = 0;\n  const pathArrValue = typeof pathInput === 'string' ? pathInput.split('.') : pathInput;\n\n  while (counter < pathArrValue.length) {\n    if (willReturn === null || willReturn === undefined) {\n      return undefined;\n    }\n\n    if (willReturn[pathArrValue[counter]] === null) return undefined;\n    willReturn = willReturn[pathArrValue[counter]];\n    counter++;\n  }\n\n  return willReturn;\n}\n\nfunction hasPath(pathInput, obj) {\n  if (arguments.length === 1) {\n    return objHolder => hasPath(pathInput, objHolder);\n  }\n\n  return path(pathInput, obj) !== undefined;\n}\n\nfunction head(listOrString) {\n  if (typeof listOrString === 'string') return listOrString[0] || '';\n  return listOrString[0];\n}\n\nfunction _objectIs(a, b) {\n  if (a === b) {\n    return a !== 0 || 1 / a === 1 / b;\n  }\n\n  return a !== a && b !== b;\n}\nvar _objectIs$1 = Object.is || _objectIs;\n\nfunction identical(a, b) {\n  if (arguments.length === 1) return _b => identical(a, _b);\n  return _objectIs$1(a, b);\n}\n\nfunction identity(x) {\n  return x;\n}\n\nfunction ifElseFn(condition, onTrue, onFalse) {\n  return (...input) => {\n    const conditionResult = typeof condition === 'boolean' ? condition : condition(...input);\n\n    if (conditionResult === true) {\n      return onTrue(...input);\n    }\n\n    return onFalse(...input);\n  };\n}\n\nconst ifElse = curry(ifElseFn);\n\nconst inc = x => x + 1;\n\nfunction indexByPath(pathInput, list) {\n  const toReturn = {};\n\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i];\n    toReturn[path(pathInput, item)] = item;\n  }\n\n  return toReturn;\n}\n\nfunction indexBy(condition, list) {\n  if (arguments.length === 1) {\n    return _list => indexBy(condition, _list);\n  }\n\n  if (typeof condition === 'string') {\n    return indexByPath(condition, list);\n  }\n\n  const toReturn = {};\n\n  for (let i = 0; i < list.length; i++) {\n    const item = list[i];\n    toReturn[condition(item)] = item;\n  }\n\n  return toReturn;\n}\n\nfunction indexOf(valueToFind, list) {\n  if (arguments.length === 1) {\n    return _list => _indexOf(valueToFind, _list);\n  }\n\n  return _indexOf(valueToFind, list);\n}\n\nfunction baseSlice(array, start, end) {\n  let index = -1;\n  let {\n    length\n  } = array;\n  end = end > length ? length : end;\n\n  if (end < 0) {\n    end += length;\n  }\n\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n  const result = Array(length);\n\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n\n  return result;\n}\n\nfunction init(listOrString) {\n  if (typeof listOrString === 'string') return listOrString.slice(0, -1);\n  return listOrString.length ? baseSlice(listOrString, 0, -1) : [];\n}\n\nfunction intersection(listA, listB) {\n  if (arguments.length === 1) return _list => intersection(listA, _list);\n  return filter(x => includes(x, listA), listB);\n}\n\nfunction intersperse(separator, list) {\n  if (arguments.length === 1) return _list => intersperse(separator, _list);\n  let index = -1;\n  const len = list.length;\n  const willReturn = [];\n\n  while (++index < len) {\n    if (index === len - 1) {\n      willReturn.push(list[index]);\n    } else {\n      willReturn.push(list[index], separator);\n    }\n  }\n\n  return willReturn;\n}\n\nfunction is(targetPrototype, x) {\n  if (arguments.length === 1) return _x => is(targetPrototype, _x);\n  return x != null && x.constructor === targetPrototype || x instanceof targetPrototype;\n}\n\nfunction isEmpty(input) {\n  const inputType = type(input);\n  if (['Undefined', 'NaN', 'Number', 'Null'].includes(inputType)) return false;\n  if (!input) return true;\n\n  if (inputType === 'Object') {\n    return Object.keys(input).length === 0;\n  }\n\n  if (inputType === 'Array') {\n    return input.length === 0;\n  }\n\n  return false;\n}\n\nfunction isNil(x) {\n  return x === undefined || x === null;\n}\n\nfunction join(glue, list) {\n  if (arguments.length === 1) return _list => join(glue, _list);\n  return list.join(glue);\n}\n\nfunction keys(x) {\n  return Object.keys(x);\n}\n\nfunction last(listOrString) {\n  if (typeof listOrString === 'string') {\n    return listOrString[listOrString.length - 1] || '';\n  }\n\n  return listOrString[listOrString.length - 1];\n}\n\nfunction lastIndexOf(valueToFind, list) {\n  if (arguments.length === 1) {\n    return _list => _lastIndexOf(valueToFind, _list);\n  }\n\n  return _lastIndexOf(valueToFind, list);\n}\n\nfunction length(x) {\n  if (_isArray(x)) return x.length;\n  if (typeof x === 'string') return x.length;\n  return NaN;\n}\n\nfunction lens(getter, setter) {\n  return function (functor) {\n    return function (target) {\n      return functor(getter(target)).map(focus => setter(focus, target));\n    };\n  };\n}\n\nfunction nth(index, list) {\n  if (arguments.length === 1) return _list => nth(index, _list);\n  const idx = index < 0 ? list.length + index : index;\n  return Object.prototype.toString.call(list) === '[object String]' ? list.charAt(idx) : list[idx];\n}\n\nfunction updateFn(index, newValue, list) {\n  const clone = cloneList(list);\n  if (index === -1) return clone.fill(newValue, index);\n  return clone.fill(newValue, index, index + 1);\n}\n\nconst update = curry(updateFn);\n\nfunction lensIndex(index) {\n  return lens(nth(index), update(index));\n}\n\nfunction lensPath(key) {\n  return lens(path(key), assocPath(key));\n}\n\nfunction lensProp(key) {\n  return lens(prop(key), assoc(key));\n}\n\nfunction match(pattern, input) {\n  if (arguments.length === 1) return _input => match(pattern, _input);\n  const willReturn = input.match(pattern);\n  return willReturn === null ? [] : willReturn;\n}\n\nfunction mathMod(x, y) {\n  if (arguments.length === 1) return _y => mathMod(x, _y);\n  if (!_isInteger$1(x) || !_isInteger$1(y) || y < 1) return NaN;\n  return (x % y + y) % y;\n}\n\nfunction maxByFn(compareFn, x, y) {\n  return compareFn(y) > compareFn(x) ? y : x;\n}\nconst maxBy = curry(maxByFn);\n\nfunction sum(list) {\n  return list.reduce((prev, current) => prev + current, 0);\n}\n\nfunction mean(list) {\n  return sum(list) / list.length;\n}\n\nfunction median(list) {\n  const len = list.length;\n  if (len === 0) return NaN;\n  const width = 2 - len % 2;\n  const idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort((a, b) => {\n    if (a === b) return 0;\n    return a < b ? -1 : 1;\n  }).slice(idx, idx + width));\n}\n\nfunction merge(target, newProps) {\n  if (arguments.length === 1) return _newProps => merge(target, _newProps);\n  return Object.assign({}, target || {}, newProps || {});\n}\n\nfunction mergeAll(arr) {\n  let willReturn = {};\n  map(val => {\n    willReturn = merge(willReturn, val);\n  }, arr);\n  return willReturn;\n}\n\nfunction mergeDeepRight(target, source) {\n  if (arguments.length === 1) {\n    return sourceHolder => mergeDeepRight(target, sourceHolder);\n  }\n\n  const willReturn = JSON.parse(JSON.stringify(target));\n  Object.keys(source).forEach(key => {\n    if (type(source[key]) === 'Object') {\n      if (type(target[key]) === 'Object') {\n        willReturn[key] = mergeDeepRight(target[key], source[key]);\n      } else {\n        willReturn[key] = source[key];\n      }\n    } else {\n      willReturn[key] = source[key];\n    }\n  });\n  return willReturn;\n}\n\nfunction mergeLeft(x, y) {\n  if (arguments.length === 1) return _y => mergeLeft(x, _y);\n  return merge(y, x);\n}\n\nfunction min(x, y) {\n  if (arguments.length === 1) return _y => min(x, _y);\n  return y < x ? y : x;\n}\n\nfunction minByFn(compareFn, x, y) {\n  return compareFn(y) < compareFn(x) ? y : x;\n}\nconst minBy = curry(minByFn);\n\nfunction modulo(x, y) {\n  if (arguments.length === 1) return _y => modulo(x, _y);\n  return x % y;\n}\n\nfunction moveFn(fromIndex, toIndex, list) {\n  if (fromIndex < 0 || toIndex < 0) {\n    throw new Error('Rambda.move does not support negative indexes');\n  }\n\n  if (fromIndex > list.length - 1 || toIndex > list.length - 1) return list;\n  const clone = cloneList(list);\n  clone[fromIndex] = list[toIndex];\n  clone[toIndex] = list[fromIndex];\n  return clone;\n}\n\nconst move = curry(moveFn);\n\nfunction multiply(x, y) {\n  if (arguments.length === 1) return _y => multiply(x, _y);\n  return x * y;\n}\n\nfunction negate(x) {\n  return -x;\n}\n\nfunction none(predicate, list) {\n  if (arguments.length === 1) return _list => none(predicate, _list);\n\n  for (let i = 0; i < list.length; i++) {\n    if (!predicate(list[i])) return true;\n  }\n\n  return false;\n}\n\nfunction not(input) {\n  return !input;\n}\n\nfunction objOf(key, value) {\n  if (arguments.length === 1) {\n    return _value => objOf(key, _value);\n  }\n\n  return {\n    [key]: value\n  };\n}\n\nfunction of(value) {\n  return [value];\n}\n\nfunction omit(propsToOmit, obj) {\n  if (arguments.length === 1) return _obj => omit(propsToOmit, _obj);\n\n  if (obj === null || obj === undefined) {\n    return undefined;\n  }\n\n  const propsToOmitValue = typeof propsToOmit === 'string' ? propsToOmit.split(',') : propsToOmit;\n  const willReturn = {};\n\n  for (const key in obj) {\n    if (!propsToOmitValue.includes(key)) {\n      willReturn[key] = obj[key];\n    }\n  }\n\n  return willReturn;\n}\n\nfunction onceFn(fn, context) {\n  let result;\n  return function () {\n    if (fn) {\n      result = fn.apply(context || this, arguments);\n      fn = null;\n    }\n\n    return result;\n  };\n}\n\nfunction once(fn, context) {\n  if (arguments.length === 1) {\n    const wrap = onceFn(fn, context);\n    return curry(wrap);\n  }\n\n  return onceFn(fn, context);\n}\n\nfunction or(a, b) {\n  if (arguments.length === 1) return _b => or(a, _b);\n  return a || b;\n}\n\nconst Identity = x => ({\n  x,\n  map: fn => Identity(fn(x))\n});\n\nfunction overFn(lens, fn, object) {\n  return lens(x => Identity(fn(x)))(object).x;\n}\n\nconst over = curry(overFn);\n\nfunction partial(fn, ...args) {\n  const len = fn.length;\n  return (...rest) => {\n    if (args.length + rest.length >= len) {\n      return fn(...args, ...rest);\n    }\n\n    return partial(fn, ...[...args, ...rest]);\n  };\n}\n\nfunction partitionObject(predicate, iterable) {\n  const yes = {};\n  const no = {};\n  Object.entries(iterable).forEach(([prop, value]) => {\n    if (predicate(value, prop)) {\n      yes[prop] = value;\n    } else {\n      no[prop] = value;\n    }\n  });\n  return [yes, no];\n}\nfunction partitionArray(predicate, list, indexed = false) {\n  const yes = [];\n  const no = [];\n  let counter = -1;\n\n  while (counter++ < list.length - 1) {\n    if (indexed ? predicate(list[counter], counter) : predicate(list[counter])) {\n      yes.push(list[counter]);\n    } else {\n      no.push(list[counter]);\n    }\n  }\n\n  return [yes, no];\n}\nfunction partition(predicate, iterable) {\n  if (arguments.length === 1) {\n    return listHolder => partition(predicate, listHolder);\n  }\n\n  if (!_isArray(iterable)) return partitionObject(predicate, iterable);\n  return partitionArray(predicate, iterable);\n}\n\nfunction pathEqFn(pathToSearch, target, input) {\n  return equals(path(pathToSearch, input), target);\n}\n\nconst pathEq = curry(pathEqFn);\n\nfunction pathOrFn(defaultValue, pathInput, obj) {\n  return defaultTo(defaultValue, path(pathInput, obj));\n}\n\nconst pathOr = curry(pathOrFn);\n\nfunction paths(pathsToSearch, obj) {\n  if (arguments.length === 1) {\n    return _obj => paths(pathsToSearch, _obj);\n  }\n\n  return pathsToSearch.map(singlePath => path(singlePath, obj));\n}\n\nfunction pick(propsToPick, input) {\n  if (arguments.length === 1) return _input => pick(propsToPick, _input);\n\n  if (input === null || input === undefined) {\n    return undefined;\n  }\n\n  const keys = typeof propsToPick === 'string' ? propsToPick.split(',') : propsToPick;\n  const willReturn = {};\n  let counter = 0;\n\n  while (counter < keys.length) {\n    if (keys[counter] in input) {\n      willReturn[keys[counter]] = input[keys[counter]];\n    }\n\n    counter++;\n  }\n\n  return willReturn;\n}\n\nfunction pickAll(propsToPick, obj) {\n  if (arguments.length === 1) return _obj => pickAll(propsToPick, _obj);\n\n  if (obj === null || obj === undefined) {\n    return undefined;\n  }\n\n  const keysValue = typeof propsToPick === 'string' ? propsToPick.split(',') : propsToPick;\n  const willReturn = {};\n  let counter = 0;\n\n  while (counter < keysValue.length) {\n    if (keysValue[counter] in obj) {\n      willReturn[keysValue[counter]] = obj[keysValue[counter]];\n    } else {\n      willReturn[keysValue[counter]] = undefined;\n    }\n\n    counter++;\n  }\n\n  return willReturn;\n}\n\nfunction pipe(...fns) {\n  if (fns.length === 0) throw new Error('pipe requires at least one argument');\n  return (...args) => {\n    const list = fns.slice();\n\n    if (list.length > 0) {\n      const fn = list.shift();\n      let result = fn(...args);\n\n      while (list.length > 0) {\n        result = list.shift()(result);\n      }\n\n      return result;\n    }\n  };\n}\n\nfunction pluck(property, list) {\n  if (arguments.length === 1) return _list => pluck(property, _list);\n  const willReturn = [];\n  map(x => {\n    if (x[property] !== undefined) {\n      willReturn.push(x[property]);\n    }\n  }, list);\n  return willReturn;\n}\n\nfunction prepend(x, input) {\n  if (arguments.length === 1) return _input => prepend(x, _input);\n  if (typeof input === 'string') return [x].concat(input.split(''));\n  return [x].concat(input);\n}\n\nconst product = reduce(multiply, 1);\n\nfunction propEqFn(propToFind, valueToMatch, obj) {\n  if (!obj) return false;\n  return obj[propToFind] === valueToMatch;\n}\n\nconst propEq = curry(propEqFn);\n\nfunction propIsFn(targetPrototype, property, obj) {\n  return is(targetPrototype, obj[property]);\n}\n\nconst propIs = curry(propIsFn);\n\nfunction propOrFn(defaultValue, property, obj) {\n  if (!obj) return defaultValue;\n  return defaultTo(defaultValue, obj[property]);\n}\n\nconst propOr = curry(propOrFn);\n\nfunction props(propsToPick, obj) {\n  if (arguments.length === 1) {\n    return _obj => props(propsToPick, _obj);\n  }\n\n  if (!_isArray(propsToPick)) {\n    throw new Error('propsToPick is not a list');\n  }\n\n  return mapArray(prop => obj[prop], propsToPick);\n}\n\nfunction range(start, end) {\n  if (arguments.length === 1) return _end => range(start, _end);\n\n  if (Number.isNaN(Number(start)) || Number.isNaN(Number(end))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n\n  if (end < start) return [];\n  const len = end - start;\n  const willReturn = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    willReturn[i] = start + i;\n  }\n\n  return willReturn;\n}\n\nfunction reject(predicate, list) {\n  if (arguments.length === 1) return _list => reject(predicate, _list);\n  return filter(x => !predicate(x), list);\n}\n\nfunction repeat(x, timesToRepeat) {\n  if (arguments.length === 1) {\n    return _timesToRepeat => repeat(x, _timesToRepeat);\n  }\n\n  return Array(timesToRepeat).fill(x);\n}\n\nfunction replaceFn(pattern, replacer, str) {\n  return str.replace(pattern, replacer);\n}\n\nconst replace = curry(replaceFn);\n\nfunction reverse(listOrString) {\n  if (typeof listOrString === 'string') {\n    return listOrString.split('').reverse().join('');\n  }\n\n  const clone = listOrString.slice();\n  return clone.reverse();\n}\n\nfunction setFn(lens, replacer, x) {\n  return over(lens, always(replacer), x);\n}\n\nconst set = curry(setFn);\n\nfunction sliceFn(from, to, list) {\n  return list.slice(from, to);\n}\n\nconst slice = curry(sliceFn);\n\nfunction sort(sortFn, list) {\n  if (arguments.length === 1) return _list => sort(sortFn, _list);\n  return cloneList(list).sort(sortFn);\n}\n\nfunction sortBy(sortFn, list) {\n  if (arguments.length === 1) return _list => sortBy(sortFn, _list);\n  const clone = cloneList(list);\n  return clone.sort((a, b) => {\n    const aSortResult = sortFn(a);\n    const bSortResult = sortFn(b);\n    if (aSortResult === bSortResult) return 0;\n    return aSortResult < bSortResult ? -1 : 1;\n  });\n}\n\nfunction split(separator, str) {\n  if (arguments.length === 1) return _str => split(separator, _str);\n  return str.split(separator);\n}\n\nfunction maybe(ifRule, whenIf, whenElse) {\n  const whenIfInput = ifRule && type(whenIf) === 'Function' ? whenIf() : whenIf;\n  const whenElseInput = !ifRule && type(whenElse) === 'Function' ? whenElse() : whenElse;\n  return ifRule ? whenIfInput : whenElseInput;\n}\n\nfunction take(howMany, listOrString) {\n  if (arguments.length === 1) return _listOrString => take(howMany, _listOrString);\n  if (howMany < 0) return listOrString.slice();\n  if (typeof listOrString === 'string') return listOrString.slice(0, howMany);\n  return baseSlice(listOrString, 0, howMany);\n}\n\nfunction splitAt(index, input) {\n  if (arguments.length === 1) {\n    return _list => splitAt(index, _list);\n  }\n\n  if (!input) throw new TypeError(`Cannot read property 'slice' of ${input}`);\n  if (!_isArray(input) && typeof input !== 'string') return [[], []];\n  const correctIndex = maybe(index < 0, input.length + index < 0 ? 0 : input.length + index, index);\n  return [take(correctIndex, input), drop(correctIndex, input)];\n}\n\nfunction splitEvery(sliceLength, listOrString) {\n  if (arguments.length === 1) {\n    return _listOrString => splitEvery(sliceLength, _listOrString);\n  }\n\n  if (sliceLength < 1) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n\n  const willReturn = [];\n  let counter = 0;\n\n  while (counter < listOrString.length) {\n    willReturn.push(listOrString.slice(counter, counter += sliceLength));\n  }\n\n  return willReturn;\n}\n\nfunction splitWhen(predicate, input) {\n  if (arguments.length === 1) {\n    return _input => splitWhen(predicate, _input);\n  }\n\n  if (!input) throw new TypeError(`Cannot read property 'length' of ${input}`);\n  const preFound = [];\n  const postFound = [];\n  let found = false;\n  let counter = -1;\n\n  while (counter++ < input.length - 1) {\n    if (found) {\n      postFound.push(input[counter]);\n    } else if (predicate(input[counter])) {\n      postFound.push(input[counter]);\n      found = true;\n    } else {\n      preFound.push(input[counter]);\n    }\n  }\n\n  return [preFound, postFound];\n}\n\nfunction startsWith(target, iterable) {\n  if (arguments.length === 1) return _iterable => startsWith(target, _iterable);\n\n  if (typeof iterable === 'string') {\n    return iterable.startsWith(target);\n  }\n\n  if (!_isArray(target)) return false;\n  let correct = true;\n  const filtered = target.filter((x, index) => {\n    if (!correct) return false;\n    const result = equals(x, iterable[index]);\n    if (!result) correct = false;\n    return result;\n  });\n  return filtered.length === target.length;\n}\n\nfunction subtract(a, b) {\n  if (arguments.length === 1) return _b => subtract(a, _b);\n  return a - b;\n}\n\nfunction symmetricDifference(x, y) {\n  if (arguments.length === 1) {\n    return _y => symmetricDifference(x, _y);\n  }\n\n  return concat(filter(value => !includes(value, y), x), filter(value => !includes(value, x), y));\n}\n\nfunction tail(listOrString) {\n  return drop(1, listOrString);\n}\n\nfunction takeLast(howMany, listOrString) {\n  if (arguments.length === 1) return _listOrString => takeLast(howMany, _listOrString);\n  const len = listOrString.length;\n  if (howMany < 0) return listOrString.slice();\n  let numValue = howMany > len ? len : howMany;\n  if (typeof listOrString === 'string') return listOrString.slice(len - numValue);\n  numValue = len - numValue;\n  return baseSlice(listOrString, numValue, len);\n}\n\nfunction takeLastWhile(predicate, input) {\n  if (arguments.length === 1) {\n    return _input => takeLastWhile(predicate, _input);\n  }\n\n  if (input.length === 0) return input;\n  let found = false;\n  const toReturn = [];\n  let counter = input.length;\n\n  while (!found || counter === 0) {\n    counter--;\n\n    if (predicate(input[counter]) === false) {\n      found = true;\n    } else if (!found) {\n      toReturn.push(input[counter]);\n    }\n  }\n\n  return _isArray(input) ? toReturn.reverse() : toReturn.reverse().join('');\n}\n\nfunction takeWhile(predicate, iterable) {\n  if (arguments.length === 1) {\n    return _iterable => takeWhile(predicate, _iterable);\n  }\n\n  const isArray = _isArray(iterable);\n\n  if (!isArray && typeof iterable !== 'string') {\n    throw new Error('`iterable` is neither list nor a string');\n  }\n\n  let flag = true;\n  const holder = [];\n  let counter = -1;\n\n  while (counter++ < iterable.length - 1) {\n    if (!predicate(iterable[counter])) {\n      if (flag) flag = false;\n    } else if (flag) {\n      holder.push(iterable[counter]);\n    }\n  }\n  return isArray ? holder : holder.join('');\n}\n\nfunction tap(fn, x) {\n  if (arguments.length === 1) return _x => tap(fn, _x);\n  fn(x);\n  return x;\n}\n\nfunction test(pattern, str) {\n  if (arguments.length === 1) return _str => test(pattern, _str);\n\n  if (typeof pattern === 'string') {\n    throw new TypeError(`\u2018test\u2019 requires a value of type RegExp as its first argument; received \"${pattern}\"`);\n  }\n\n  return str.search(pattern) !== -1;\n}\n\nfunction times(fn, howMany) {\n  if (arguments.length === 1) return _howMany => times(fn, _howMany);\n\n  if (!Number.isInteger(howMany) || howMany < 0) {\n    throw new RangeError('n must be an integer');\n  }\n\n  return map(fn, range(0, howMany));\n}\n\nfunction toLower(str) {\n  return str.toLowerCase();\n}\n\nfunction toPairs(obj) {\n  return Object.entries(obj);\n}\n\nfunction toString(x) {\n  return x.toString();\n}\n\nfunction toUpper(str) {\n  return str.toUpperCase();\n}\n\nfunction transpose(array) {\n  return array.reduce((acc, el) => {\n    el.forEach((nestedEl, i) => _isArray(acc[i]) ? acc[i].push(nestedEl) : acc.push([nestedEl]));\n    return acc;\n  }, []);\n}\n\nfunction trim(str) {\n  return str.trim();\n}\n\nfunction isFunction(fn) {\n  return ['Async', 'Function'].includes(type(fn));\n}\n\nfunction tryCatch(fn, fallback) {\n  if (!isFunction(fn)) {\n    throw new Error(`R.tryCatch | fn '${fn}'`);\n  }\n\n  const passFallback = isFunction(fallback);\n  return (...inputs) => {\n    try {\n      return fn(...inputs);\n    } catch (e) {\n      return passFallback ? fallback(e, ...inputs) : fallback;\n    }\n  };\n}\n\nfunction unapply(fn) {\n  return function (...args) {\n    return fn.call(this, args);\n  };\n}\n\nfunction union(x, y) {\n  if (arguments.length === 1) return _y => union(x, _y);\n  const toReturn = cloneList(x);\n  y.forEach(yInstance => {\n    if (!includes(yInstance, x)) toReturn.push(yInstance);\n  });\n  return toReturn;\n}\n\nfunction includesWith(predicate, target, list) {\n  let willReturn = false;\n  let index = -1;\n\n  while (++index < list.length && !willReturn) {\n    const value = list[index];\n\n    if (predicate(target, value)) {\n      willReturn = true;\n    }\n  }\n\n  return willReturn;\n}\n\nfunction uniqWith(predicate, list) {\n  if (arguments.length === 1) return _list => uniqWith(predicate, _list);\n  let index = -1;\n  const willReturn = [];\n\n  while (++index < list.length) {\n    const value = list[index];\n\n    if (!includesWith(predicate, value, willReturn)) {\n      willReturn.push(value);\n    }\n  }\n\n  return willReturn;\n}\n\nfunction unless(predicate, whenFalse) {\n  if (arguments.length === 1) {\n    return _whenFalse => unless(predicate, _whenFalse);\n  }\n\n  return input => predicate(input) ? input : whenFalse(input);\n}\n\nfunction values(obj) {\n  if (type(obj) !== 'Object') return [];\n  return Object.values(obj);\n}\n\nconst Const = x => ({\n  x,\n  map: fn => Const(x)\n});\n\nfunction view(lens, target) {\n  if (arguments.length === 1) return _target => view(lens, _target);\n  return lens(Const)(target).x;\n}\n\nfunction whenFn(predicate, whenTrueFn, input) {\n  if (!predicate(input)) return input;\n  return whenTrueFn(input);\n}\n\nconst when = curry(whenFn);\n\nfunction where(conditions, input) {\n  if (input === undefined) {\n    return _input => where(conditions, _input);\n  }\n\n  let flag = true;\n\n  for (const prop in conditions) {\n    const result = conditions[prop](input[prop]);\n\n    if (flag && result === false) {\n      flag = false;\n    }\n  }\n\n  return flag;\n}\n\nfunction whereEq(condition, input) {\n  if (arguments.length === 1) {\n    return _input => whereEq(condition, _input);\n  }\n\n  const result = filter((conditionValue, conditionProp) => equals(conditionValue, input[conditionProp]), condition);\n  return Object.keys(result).length === Object.keys(condition).length;\n}\n\nfunction without(matchAgainst, source) {\n  if (source === undefined) {\n    return _source => without(matchAgainst, _source);\n  }\n\n  return reduce((prev, current) => _indexOf(current, matchAgainst) > -1 ? prev : prev.concat(current), [], source);\n}\n\nfunction xor(a, b) {\n  if (arguments.length === 1) return _b => xor(a, _b);\n  return Boolean(a) && !b || Boolean(b) && !a;\n}\n\nfunction zip(left, right) {\n  if (arguments.length === 1) return _right => zip(left, _right);\n  const result = [];\n  const length = Math.min(left.length, right.length);\n\n  for (let i = 0; i < length; i++) {\n    result[i] = [left[i], right[i]];\n  }\n\n  return result;\n}\n\nfunction zipObj(keys, values) {\n  if (arguments.length === 1) return yHolder => zipObj(keys, yHolder);\n  return take(values.length, keys).reduce((prev, xInstance, i) => {\n    prev[xInstance] = values[i];\n    return prev;\n  }, {});\n}\n\nfunction zipWithFn(fn, x, y) {\n  return take(x.length > y.length ? y.length : x.length, x).map((xInstance, i) => fn(xInstance, y[i]));\n}\n\nconst zipWith = curry(zipWithFn);\n\nexport { F, T, _indexOf, _lastIndexOf, add, adjust, all, allPass, always, and, any, anyPass, append, apply, applySpec, assoc, assocPath, bind, both, chain, clamp, clone, complement, compose, concat, cond, converge, curry, curryN, dec, defaultTo, difference, dissoc, divide, drop, dropLast, dropLastWhile, dropRepeats, dropRepeatsWith, dropWhile, either, endsWith, eqProps, equals, evolve, evolveArray, evolveObject, filter, filterArray, filterObject, find, findIndex, findLast, findLastIndex, flatten, flip, forEach, fromPairs, groupBy, groupWith, has, hasPath, head, identical, identity, ifElse, inc, includes, indexBy, indexOf, init, intersection, intersperse, is, isEmpty, isNil, join, keys, last, lastIndexOf, length, lens, lensIndex, lensPath, lensProp, map, mapArray, mapObjIndexed, mapObject, match, mathMod, max, maxBy, maxByFn, mean, median, merge, mergeAll, mergeDeepRight, mergeLeft, min, minBy, minByFn, modulo, move, multiply, negate, none, not, nth, objOf, of, omit, once, or, over, partial, partition, partitionArray, partitionObject, path, pathEq, pathOr, paths, pick, pickAll, pipe, pluck, prepend, product, prop, propEq, propIs, propOr, props, range, reduce, reject, repeat, replace, reverse, set, slice, sort, sortBy, split, splitAt, splitEvery, splitWhen, startsWith, subtract, sum, symmetricDifference, tail, take, takeLast, takeLastWhile, takeWhile, tap, test, times, toLower, toPairs, toString, toUpper, transpose, trim, tryCatch, type, unapply, union, uniq, uniqWith, unless, update, values, view, when, where, whereEq, without, xor, zip, zipObj, zipWith };\n","import { range } from \"rambda/dist/rambda.esm.js\";\nimport { freeStringPtr } from \"../utils/string-pointers.js\";\nimport { trimNull } from \"../utils/trim-null.js\";\nimport { structBufferToObject } from \"../utils/structure-buffer-to-object.js\";\nimport { sizeofStruct } from \"../utils/native-sizes.js\";\nimport { uint2String } from \"../utils/text-encoders.js\";\nimport { CS_MIDIDEVICE } from \"../structures.js\";\n\nexport const csoundSetMidiCallbacks = (wasm) => (csound /* CsoundInst */) => {\n  wasm.exports.csoundSetMidiCallbacks(csound);\n};\n\n/**\n * This function can be called to obtain a list of available input or output midi devices.\n * If list is NULL, the function will only return the number of devices\n * (isOutput=1 for out devices, 0 for in devices).\n * @function\n */\n// eslint-disable-next-line unicorn/prevent-abbreviations\nexport const csoundGetMIDIDevList = (wasm) => (csound /* CsoundInst */, isOutput /* number */) => {\n  const { buffer } = wasm.wasi.memory;\n  const numberOfDevices = wasm.exports.csoundGetMIDIDevList(csound, undefined, isOutput ? 1 : 0);\n  if (numberOfDevices === 0) return [];\n  const structLength = sizeofStruct(CS_MIDIDEVICE);\n  const structOffset = wasm.exports.allocCsMidiDeviceStruct(numberOfDevices);\n  wasm.exports.csoundGetMIDIDevList(csound, structOffset, isOutput ? 1 : 0);\n  const structBuffer = new Uint8Array(buffer, structOffset, structLength * numberOfDevices);\n  /** @type CS_MIDIDEVICE */\n  const out = range(0, numberOfDevices).map((index) =>\n    structBufferToObject(CS_MIDIDEVICE, structBuffer.subarray(index * structLength, structLength)),\n  );\n  wasm.exports.freeCsMidiDeviceStruct(structOffset);\n  return out;\n};\n\ncsoundGetMIDIDevList.toString = () => \"getMIDIDevList = async (isOutput) => Object;\";\n\n/**\n * This function can be called to obtain a list of available input or output midi devices.\n * If list is NULL, the function will only return the number of devices\n * (isOutput=1 for out devices, 0 for in devices).\n * @function\n */\nexport const csoundGetRtMidiName = (wasm) => (csound /* CsoundInst */) => {\n  const { buffer } = wasm.wasi.memory;\n  const ptr = wasm.exports.getRtMidiName(csound);\n  const stringBuffer = new Uint8Array(buffer, ptr, 128);\n  return trimNull(uint2String(stringBuffer)) || \"\";\n};\n\ncsoundGetRtMidiName.toString = () => \"getRtMidiName = async () => String;\";\n\nexport const csoundGetMidiOutFileName = (wasm) => (csound /* CsoundInst */) => {\n  const { buffer } = wasm.wasi.memory;\n  const ptr = wasm.exports.getMidiOutFileName(csound);\n  const stringBuffer = new Uint8Array(buffer, ptr, 128);\n  ptr && ptr.length > 0 && freeStringPtr(wasm, ptr);\n  return trimNull(uint2String(stringBuffer)) || \"\";\n};\n\nexport const _isRequestingRtMidiInput = (wasm) => (csound /* CsoundInst */) => {\n  return wasm.exports.isRequestingRtMidiInput(csound);\n};\n\n/**\n * Emit a midi message with a given triplet of values\n * in the range of 0 to 127.\n * @function\n */\nexport const csoundPushMidiMessage =\n  (wasm) =>\n  (csound /* CsoundInst */, status /* number */, data1 /* number */, data2 /* number */) => {\n    wasm.exports.pushMidiMessage(csound, status, data1, data2);\n  };\n\ncsoundPushMidiMessage.toString = () => \"midiMessage = async (status, data1, data2) => undefined;\";\n\n// PUBLIC void \tcsoundSetMIDIModule (CSOUND *csound, const char *module)\n// PUBLIC void \tcsoundSetHostImplementedMIDIIO (CSOUND *csound, int state)\n// PUBLIC int \tcsoundGetMIDIDevList (CSOUND *csound, CS_MIDIDEVICE *list, int isOutput)\n// PUBLIC void \tcsoundSetExternalMidiInOpenCallback (CSOUND *, int(*func)(CSOUND *, void **userData, const char *devName))\n// PUBLIC void \tcsoundSetExternalMidiReadCallback (CSOUND *, int(*func)(CSOUND *, void *userData, unsigned char *buf, int nBytes))\n// PUBLIC void \tcsoundSetExternalMidiInCloseCallback (CSOUND *, int(*func)(CSOUND *, void *userData))\n// PUBLIC void \tcsoundSetExternalMidiOutOpenCallback (CSOUND *, int(*func)(CSOUND *, void **userData, const char *devName))\n// PUBLIC void \tcsoundSetExternalMidiWriteCallback (CSOUND *, int(*func)(CSOUND *, void *userData, const unsigned char *buf, int nBytes))\n// PUBLIC void \tcsoundSetExternalMidiOutCloseCallback (CSOUND *, int(*func)(CSOUND *, void *userData))\n// PUBLIC void \tcsoundSetExternalMidiErrorStringCallback (CSOUND *, const char *(*func)(int))\n// PUBLIC void \tcsoundSetMIDIDeviceListCallback (CSOUND *csound, int(*mididevlist__)(CSOUND *, CS_MIDIDEVICE *list, int isOutput))\n","import { freeStringPtr, ptr2string, string2ptr } from \"../utils/string-pointers.js\";\n\n/*\n   csound control-events module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * Inputs an immediate score event\n * without any pre-process parsing\n * @async\n * @function\n * @name inputMessage\n * @memberof CsoundObj\n * @param {string} scoreEvent\n * @return {Promise.<number>}\n */\nexport const csoundInputMessage = (wasm) => (csound, scoEvent) => {\n  const stringPtr = string2ptr(wasm, scoEvent);\n  const result = wasm.exports.csoundInputMessage(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundInputMessage.toString = () => \"inputMessage = async (scoreEvent) => Number;\";\n\n/**\n * Inputs an immediate score event\n * without any pre-process parsing\n * @async\n * @function\n * @name inputMessageAsync\n * @memberof CsoundObj\n * @param {string} scoreEvent\n * @return {Promise.<number>}\n */\nexport const csoundInputMessageAsync = (wasm) => (csound, scoEvent) => {\n  const stringPtr = string2ptr(wasm, scoEvent);\n  const result = wasm.exports.csoundInputMessageAsync(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundInputMessageAsync.toString = () => \"inputMessageAsync = async (scoreEvent) => Number;\";\n\n/**\n * Retrieves the value of control channel identified by channelName.\n * If the err argument is not NULL, the error (or success) code finding\n * or accessing the channel is stored in it.\n * @async\n * @function\n * @name getControlChannel\n * @memberof CsoundObj\n * @param {string} channelName\n * @return {Promise.<undefined>}\n */\nexport const csoundGetControlChannel = (wasm) => (csound, channelName) => {\n  const stringPtr = string2ptr(wasm, channelName);\n  const result = wasm.exports.csoundGetControlChannelWasi(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundGetControlChannel.toString = () => \"getControlChannel = async (channelName) => Number;\";\n\n/**\n * Sets the value of control channel identified by channelName\n * @async\n * @function\n * @name setControlChannel\n * @memberof CsoundObj\n * @param {string} channelName\n * @param {number} value\n * @return {Promise.<undefined>}\n */\nexport const csoundSetControlChannel = (wasm) => (csound, channelName, value) => {\n  const stringPtr = string2ptr(wasm, channelName);\n  wasm.exports.csoundSetControlChannel(csound, stringPtr, value);\n  freeStringPtr(wasm, stringPtr);\n};\n\ncsoundSetControlChannel.toString = () => \"setControlChannel = async (channelName, value) => void;\";\n\n/**\n * Retrieves the string channel identified by channelName\n * @async\n * @function\n * @name getStringChannel\n * @memberof CsoundObj\n * @param {string} channelName\n * @return {Promise.<undefined>}\n */\nexport const csoundGetStringChannel = (wasm) => (csound, channelName) => {\n  const stringPtr = string2ptr(wasm, channelName);\n  const pointerToResult = wasm.exports.csoundGetStringChannelWasi(csound, stringPtr);\n  const result = ptr2string(wasm, pointerToResult);\n\n  freeStringPtr(wasm, stringPtr);\n  freeStringPtr(wasm, pointerToResult);\n  return result;\n};\n\ncsoundGetStringChannel.toString = () => \"getStringChannel = async (channelName) => String;\";\n\n/**\n * Sets the string channel value identified by channelName\n * @async\n * @function\n * @name setStringChannel\n * @memberof CsoundObj\n * @param {string} channelName\n * @param {string} value\n * @return {Promise.<undefined>}\n */\nexport const csoundSetStringChannel = (wasm) => (csound, channelName, value) => {\n  const stringPtr = string2ptr(wasm, channelName);\n  const stringPtr2 = string2ptr(wasm, value);\n  wasm.exports.csoundSetStringChannel(csound, stringPtr, stringPtr2);\n  freeStringPtr(wasm, stringPtr);\n  freeStringPtr(wasm, stringPtr2);\n};\n\ncsoundSetStringChannel.toString = () => \"setStringChannel = async (channelName, value) => void;\";\n\n// csoundGetChannelPtr (CSOUND *, MYFLT **p, const char *name, int type)\n// csoundListChannels (CSOUND *, controlChannelInfo_t **lst)\n// csoundDeleteChannelList (CSOUND *, controlChannelInfo_t *lst)\n// csoundSetControlChannelHints (CSOUND *, const char *name, controlChannelHints_t hints)\n// csoundGetControlChannelHints (CSOUND *, const char *name, controlChannelHints_t *hints)\n// csoundGetChannelLock (CSOUND *, const char *name)\n// csoundSetControlChannel (CSOUND *csound, const char *name, MYFLT val)\n// csoundGetChannelDatasize (CSOUND *csound, const char *name)\n// csoundSetInputChannelCallback (CSOUND *csound, channelCallback_t inputChannelCalback)\n// csoundSetOutputChannelCallback (CSOUND *csound, channelCallback_t outputChannelCalback)\n// csoundSetPvsChannel (CSOUND *, const PVSDATEXT *fin, const char *name)\n// csoundGetPvsChannel (CSOUND *csound, PVSDATEXT *fout, const char *name)\n// csoundScoreEvent (CSOUND *, char type, const MYFLT *pFields, long numFields)\n// csoundScoreEventAsync (CSOUND *, char type, const MYFLT *pFields, long numFields)\n// csoundScoreEventAbsolute (CSOUND *, char type, const MYFLT *pfields, long numFields, double time_ofs)\n// csoundScoreEventAbsoluteAsync (CSOUND *, char type, const MYFLT *pfields, long numFields, double time_ofs)\n// csoundKillInstance (CSOUND *csound, MYFLT instr, char *instrName, int mode, int allow_release)\n// csoundRegisterSenseEventCallback (CSOUND *, void(*func)(CSOUND *, void *), void *userData)\n// csoundKeyPress (CSOUND *, char c)\n// csoundRegisterKeyboardCallback (CSOUND *, int(*func)(void *userData, void *p, unsigned int type), void *userData, unsigned int type)\n// csoundRemoveKeyboardCallback (CSOUND *csound, int(*func)(void *, void *, unsigned int))\n","import { uint2String } from \"../utils/text-encoders.js\";\nimport { trimNull } from \"../utils/trim-null.js\";\n\n/*\n   csound general i/o module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * Returns the audio output name (-o)\n * @function\n * @name getOutputName\n * @memberof CsoundObj\n * @return {Promise.<string>}\n */\nexport const csoundGetOutputName = (wasm) => (csound) => {\n  const { buffer } = wasm.wasi.memory;\n  const ptr = wasm.exports.csoundGetOutputName(csound);\n  const stringBuffer = new Uint8Array(buffer, ptr, 64);\n  return trimNull(uint2String(stringBuffer)) || \"\";\n};\n\ncsoundGetOutputName.toString = () => \"getOutputName = async () => String;\";\n\n/**\n * Returns the audio input name (-i)\n * @function\n * @name getInputName\n * @memberof CsoundObj\n * @return {Promise.<string>}\n */\nexport const csoundGetInputName = (wasm) => (csound) => {\n  const { buffer } = wasm.wasi.memory;\n  const ptr = wasm.exports.csoundGetInputName(csound);\n  const stringBuffer = new Uint8Array(buffer, ptr, 64);\n  return trimNull(uint2String(stringBuffer)) || \"\";\n};\n\ncsoundGetInputName.toString = () => \"getInputName = async (csound) => String;\";\n\n// PUBLIC void \tcsoundSetOutput (CSOUND *csound, const char *name, const char *type, const char *format)\n// PUBLIC void \tcsoundGetOutputFormat (CSOUND *csound, char *type, char *format)\n// PUBLIC void \tcsoundSetInput (CSOUND *csound, const char *name)\n// PUBLIC void \tcsoundSetMIDIInput (CSOUND *csound, const char *name)\n// PUBLIC void \tcsoundSetMIDIFileInput (CSOUND *csound, const char *name)\n// PUBLIC void \tcsoundSetMIDIOutput (CSOUND *csound, const char *name)\n// PUBLIC void \tcsoundSetMIDIFileOutput (CSOUND *csound, const char *name)\n// PUBLIC void \tcsoundSetFileOpenCallback (CSOUND *p, void(*func)(CSOUND *, const char *, int, int, int))\n","/* eslint-disable unicorn/prevent-abbreviations */\nimport { freeStringPtr, string2ptr } from \"../utils/string-pointers.js\";\n\n/**\n * Append 'value' to environment variable 'name'\n * added for internal usage of csound-wasm, feel\n * free to use as well ;)\n */\nexport const csoundAppendEnv = (wasm) => (csound, variable, value) => {\n  const varStringPtr = string2ptr(wasm, variable);\n  const valueStringPtr = string2ptr(wasm, value);\n  const res = wasm.exports.csoundAppendEnv(csound, varStringPtr, valueStringPtr);\n  freeStringPtr(wasm, varStringPtr);\n  freeStringPtr(wasm, valueStringPtr);\n  return res;\n};\n\ncsoundAppendEnv.toString = () => \"appendEnv = async (csound, variable, value) => Number;\";\n\n// deliberately no jsdocs because this is internal only\nexport const csoundShouldDaemonize = (wasm) => (csound) =>\n  wasm.exports.csoundShouldDaemonize(csound);\n","import { freeStringPtr, string2ptr } from \"../utils/string-pointers.js\";\n/*\n   csound Score Handling module from <csound.h>\n   https://csound.com/docs/api/modules.html\n*/\n\n/**\n * Sees whether Csound score events are performed or not,\n * independently of real-time MIDI events\n * @function\n */\nexport const csoundIsScorePending = (wasm) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundIsScorePending(csound);\n\ncsoundIsScorePending.toString = () => \"isScorePending = async () => Number;\";\n\n/**\n * Sets whether Csound score events are performed or not\n * (real-time events will continue to be performed).\n * Can be used by external software, such as a VST host,\n * to turn off performance of score events (while continuing to perform real-time events),\n * for example to mute a Csound score while working on other tracks of a piece,\n * or to play the Csound instruments live.\n * @function\n */\nexport const csoundSetScorePending = (wasm) => (csound /* CsoundInst */, pending /* number */) =>\n  wasm.exports.csoundSetScorePending(csound, pending);\n\ncsoundSetScorePending.toString = () => \"setScorePending = async (pending) => Number;\";\n\n/**\n * Read, preprocess, and load a score from an ASCII string It can be called repeatedly,\n * with the new score events being added to the currently scheduled ones.\n * @function\n */\nexport const csoundReadScore = (wasm) => (csound /* CsoundInst */, score /* string */) => {\n  const stringPtr = string2ptr(wasm, score);\n  const result = wasm.exports.csoundReadScore(csound, stringPtr);\n  freeStringPtr(wasm, stringPtr);\n  return result;\n};\n\ncsoundReadScore.toString = () => \"readScore = async (score) => Number;\";\n\n/**\n * Returns the current score time in seconds since the beginning of performance.\n * @function\n */\nexport const csoundGetScoreTime = (wasm) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundGetScoreTime(csound);\n\ncsoundGetScoreTime.toString = () => \"getScoreTime = async () => Number;\";\n\n/**\n * Returns the score time beginning at which score events will actually immediately be performed\n * @function\n */\nexport const csoundGetScoreOffsetSeconds = (wasm) => (csound /* CsoundInst */) =>\n  wasm.exports.csoundGetScoreOffsetSeconds(csound);\n\ncsoundGetScoreOffsetSeconds.toString = () => \"getScoreOffsetSeconds = async () => Number;\";\n\n/**\n * Csound score events prior to the specified time are not performed,\n * and performance begins immediately at the specified time\n * (real-time events will continue to be performed as they are received).\n * Can be used by external software, such as a VST host, to begin\n * score performance midway through a Csound score,\n * for example to repeat a loop in a sequencer,\n * or to synchronize other events with the Csound score.\n * @function\n */\nexport const csoundSetScoreOffsetSeconds = (wasm) => (csound /* CsoundInst */, time /* string */) =>\n  wasm.exports.csoundSetScoreOffsetSeconds(csound, time);\n\ncsoundSetScoreOffsetSeconds.toString = () => \"setScoreOffsetSeconds = async () => Number;\";\n\n/**\n * Rewinds a compiled Csound score to the time specified with csoundObj.setScoreOffsetSeconds().\n * @function\n */\nexport const csoundRewindScore = (wasm) => (csound) =>\n  wasm.exports.csoundRewindScore(csound /* CsoundInst */);\n\ncsoundRewindScore.toString = () => \"rewindScore = async () => undefined;\";\n\n// PUBLIC void \tcsoundSetCscoreCallback (CSOUND *, void(*cscoreCallback_)(CSOUND *))\n// PUBLIC int \tcsoundScoreSort (CSOUND *, FILE *inFile, FILE *outFile)\n// PUBLIC int \tcsoundScoreExtract (CSOUND *, FILE *inFile, FILE *outFile, FILE *extractFile)\n","/* eslint-disable unicorn/prevent-abbreviations */\nimport { uint2String } from \"../utils/text-encoders.js\";\n/*\n   csound table module from <csound.h>\n   https://csound.com/docs/api/group___t_a_b_l_e.html\n*/\n\n/**\n * Returns the length of a function table\n * (not including the guard point),\n * or -1 if the table does not exist.\n * @function\n */\nexport const csoundTableLength = (wasm) => (csound /* CsoundInst */, tableNumber /* string */) =>\n  wasm.exports.csoundTableLength(csound, tableNumber);\n\ncsoundTableLength.toString = () => \"tableLength = async (tableNum) => Number;\";\n\n/**\n * Returns the value of a slot in a function table.\n * The table number and index are assumed to be valid.\n * @function\n */\nexport const csoundTableGet =\n  (wasm) => (csound /* CsoundInst */, tableNumber /* string */, tableIndex /* string */) =>\n    wasm.exports.csoundTableGet(csound, tableNumber, tableIndex);\n\ncsoundTableGet.toString = () => \"tableGet = async (tableNum, tableIndex) => Number;\";\n\n/**\n * Sets the value of a slot in a function table.\n * The table number and index are assumed to be valid.\n * @function\n */\nexport const csoundTableSet =\n  (wasm) =>\n  (\n    csound /* CsoundInst */,\n    tableNumber /* string */,\n    tableIndex /* string */,\n    value /* string */,\n  ) =>\n    wasm.exports.csoundTableSet(csound, tableNumber, tableIndex, value);\n\ncsoundTableSet.toString = () => \"tableSet = async (tableNum, tableIndex, value) => undefined;\";\n\n/**\n * Copy the contents of an Array or TypedArray from javascript into a given csound function table.\n * The table number is assumed to be valid, and the table needs to have sufficient space\n * to receive all the array contents.\n * The table number and index are assumed to be valid.\n */\nexport const csoundTableCopyIn =\n  (wasm) => (csound /* CsoundInst */, tableNumber /* string */, array /* ArrayLike<number> */) => {\n    const arrayPtr = wasm.exports.allocFloatArray(array.length);\n    const buffer = new Float64Array(wasm.wasi.memory.buffer, arrayPtr, array.length);\n    buffer.set(array);\n    wasm.exports.csoundTableCopyIn(csound, tableNumber, arrayPtr);\n    wasm.exports.freeFloatArrayMem(arrayPtr);\n  };\n\ncsoundTableCopyIn.toString = () => \"tableCopyIn = async (tableNum, float64Array) => undefined;\";\n\n/**\n * Copies the contents of a function table from csound into Float64Array.\n * The function returns a Float64Array if the table exists, otherwise\n * it returns undefined.\n * @function\n */\nexport const csoundTableCopyOut = (wasm) => (csound /* CsoundInst */, tableNumber /* string */) => {\n  const tableLength = wasm.exports.csoundTableLength(csound, tableNumber);\n  if (tableLength > 0) {\n    const arrayPtr = wasm.exports.allocFloatArray(tableLength);\n    wasm.exports.csoundTableCopyOut(csound, tableNumber, arrayPtr);\n    const { buffer } = wasm.wasi.memory;\n    const jsArray = new Float64Array(buffer, arrayPtr, tableLength);\n    wasm.exports.freeFloatArrayMem(arrayPtr);\n    return Float64Array.from(jsArray);\n  }\n};\n\ncsoundTableCopyOut.toString = () => \"tableCopyOut = async (tableNum) => ?Float64Array;\";\n\n/**\n * @name getTable\n * @alias csoundTableCopyOut\n * @async\n * @function\n */\nexport const csoundGetTable = csoundTableCopyOut;\ncsoundGetTable.toString = csoundTableCopyOut.toString;\n\n/**\n * Copies the contents of a function table from csound into Float64Array.\n * The function returns a Float64Array if the table exists, otherwise\n * it returns undefined.\n */\nexport const csoundGetTableArgs = (wasm) => (csound /* CsoundInst */, tableNumber /* string */) => {\n  const arrayPtr = wasm.exports.allocFloatArray(1024);\n  wasm.exports.csoundGetTableArgs(csound, arrayPtr, tableNumber);\n  const { buffer } = wasm.wasi.memory;\n  const jsArray = new Float64Array(buffer, arrayPtr, 1024);\n  wasm.exports.freeFloatArrayMem(arrayPtr);\n  return jsArray;\n};\n\ncsoundGetTableArgs.toString = () => \"getTableArgs = async (tableNum) => ?Float64Array;\";\n\n/**\n * Checks if a given GEN number num is a named GEN if so,\n * it returns the string length (excluding terminating NULL char).\n * Otherwise it returns 0.\n */\nexport const csoundIsNamedGEN = (wasm) => (csound /* CsoundInst */, tableNumber /* string */) =>\n  wasm.exports.csoundIsNamedGEN(csound, tableNumber);\n\ncsoundIsNamedGEN.toString = () => \"isNamedGEN = async (tableNum) => number;\";\n\n/**\n * Gets the GEN name from a number num, if this is a named GEN.\n * If the table number doesn't represent a named GEN, it will\n * return undefined.\n */\nexport const csoundGetNamedGEN = (wasm) => (csound /* CsoundInst */, tableNumber /* string */) => {\n  const stringLength = wasm.exports.csoundIsNamedGEN(csound, tableNumber);\n  if (stringLength > 0) {\n    const offset = wasm.exports.allocStringMem(stringLength);\n    wasm.exports.csoundGetNamedGEN(csound, offset, tableNumber, stringLength);\n    const { buffer } = wasm.wasi.memory;\n    const stringBuffer = new Uint8Array(buffer, offset, stringLength);\n    const result = uint2String(stringBuffer);\n    return result;\n  }\n};\n\ncsoundGetNamedGEN.toString = () => \"getNamedGEN = async (tableNum) => ?string;\";\n","import { encoder } from \"../utils/text-encoders.js\";\n\nexport function writeFile(wasm) {\n  return (_, path, data_) => {\n    const data = typeof data_ === \"string\" ? encoder.encode(data_) : data_;\n    wasm.wasi.writeFile(path, data);\n  };\n}\n\nwriteFile.toString = () => \"async (path, data) => void\";\n\nexport function appendFile(wasm) {\n  return (_, path, data_) => {\n    const data = typeof data_ === \"string\" ? encoder.encode(data_) : data_;\n    wasm.wasi.appendFile(path, data);\n  };\n}\n\nappendFile.toString = () => \"async (path, data) => void\";\n\nexport function readFile(wasm) {\n  return (_, path) => {\n    return wasm.wasi.readFile(path);\n  };\n}\n\nreadFile.toString = () => \"async (path) => ?Uint8Array\";\n\nexport function unlink(wasm) {\n  return (_, path) => {\n    return wasm.wasi.unlink(path);\n  };\n}\n\nunlink.toString = () => \"async (path) => void\";\n\nexport function readdir(wasm) {\n  return (_, path) => wasm.wasi.readdir(path);\n}\n\nreaddir.toString = () => \"async (path) => string[]\";\n\nexport function mkdir(wasm) {\n  return (_, path) => {\n    return wasm.wasi.mkdir(path);\n  };\n}\n\nmkdir.toString = () => \"async (path) => void\";\n","import {\n  csoundCreate,\n  csoundDestroy,\n  csoundGetAPIVersion,\n  csoundGetVersion,\n  csoundInitialize,\n} from \"./modules/instantiation\";\nimport {\n  csoundParseOrc,\n  csoundCompileTree,\n  csoundCompileOrc,\n  csoundEvalCode,\n  csoundStart,\n  csoundCompileCsd,\n  csoundCompileCsdText,\n  csoundPerform,\n  csoundPerformKsmps,\n  csoundPerformBuffer,\n  csoundStop,\n  csoundCleanup,\n  csoundReset,\n} from \"./modules/performance\";\nimport {\n  csoundGetSr,\n  csoundGetKr,\n  csoundGetKsmps,\n  csoundGetNchnls,\n  csoundGetNchnlsInput,\n  csoundGet0dBFS,\n  csoundGetA4,\n  csoundGetCurrentTimeSamples,\n  csoundGetSizeOfMYFLT,\n  csoundSetOption,\n  csoundSetParams as csoundSetParameters,\n  csoundGetParams as csoundGetParameters,\n  csoundGetDebug,\n  csoundSetDebug,\n} from \"./modules/attributes\";\nimport {\n  csoundGetInputBufferSize,\n  csoundGetOutputBufferSize,\n  csoundGetInputBuffer,\n  csoundGetOutputBuffer,\n  csoundGetSpin,\n  csoundGetSpout,\n} from \"./modules/rtaudio\";\nimport {\n  csoundGetMIDIDevList as csoundGetMIDIDevelopmentList,\n  csoundSetMidiCallbacks,\n  csoundGetRtMidiName,\n  csoundGetMidiOutFileName,\n  csoundPushMidiMessage,\n  _isRequestingRtMidiInput,\n} from \"./modules/rtmidi\";\nimport {\n  csoundInputMessage,\n  csoundInputMessageAsync,\n  csoundGetControlChannel,\n  csoundSetControlChannel,\n  csoundGetStringChannel,\n  csoundSetStringChannel,\n} from \"./modules/control-events\";\nimport { csoundGetInputName, csoundGetOutputName } from \"./modules/general-io\";\nimport { csoundAppendEnv as csoundAppendEnvironment, csoundShouldDaemonize } from \"./modules/extra\";\nimport {\n  csoundIsScorePending,\n  csoundSetScorePending,\n  csoundReadScore,\n  csoundGetScoreTime,\n  csoundGetScoreOffsetSeconds,\n  csoundSetScoreOffsetSeconds,\n  csoundRewindScore,\n} from \"./modules/score-handling\";\nimport {\n  csoundTableLength,\n  csoundTableGet,\n  csoundTableSet,\n  csoundTableCopyIn,\n  csoundTableCopyOut,\n  csoundGetTable,\n  csoundGetTableArgs as csoundGetTableArguments,\n  csoundIsNamedGEN,\n  csoundGetNamedGEN,\n} from \"./modules/table\";\nimport * as fs from \"./filesystem/worker-fs\";\n\nimport { assoc, dissoc, keys, mergeAll, reduce } from \"rambda/dist/rambda.esm.js\";\n\ngoog.declareModuleId(\"libcsound\");\n\n/*\n   Don't call these functions directly.\n   They are closures that take wasm instance as\n   first argument before they can be called as\n   documented.\n*/\nexport const api = {\n  // @module/instantiation\n  csoundCreate,\n  csoundDestroy,\n  csoundGetAPIVersion,\n  csoundGetVersion,\n  csoundInitialize,\n  // @module/performance\n  csoundParseOrc,\n  csoundCompileTree,\n  csoundCompileOrc,\n  csoundEvalCode,\n  csoundStart,\n  csoundCompileCsd,\n  csoundCompileCsdText,\n  csoundPerform,\n  csoundPerformKsmps,\n  csoundPerformBuffer,\n  csoundStop,\n  csoundCleanup,\n  csoundReset,\n  // @module/attributes\n  csoundGetSr,\n  csoundGetKr,\n  csoundGetKsmps,\n  csoundGetNchnls,\n  csoundGetNchnlsInput,\n  csoundGet0dBFS,\n  csoundGetA4,\n  csoundGetCurrentTimeSamples,\n  csoundGetSizeOfMYFLT,\n  csoundSetOption,\n  csoundSetParams: csoundSetParameters,\n  csoundGetParams: csoundGetParameters,\n  csoundGetDebug,\n  csoundSetDebug,\n  // @module/rtaudio\n  csoundGetInputBufferSize,\n  csoundGetOutputBufferSize,\n  csoundGetInputBuffer,\n  csoundGetOutputBuffer,\n  csoundGetSpin,\n  csoundGetSpout,\n  // @module/rtmidi\n  csoundGetMIDIDevList: csoundGetMIDIDevelopmentList,\n  csoundSetMidiCallbacks,\n  csoundGetRtMidiName,\n  csoundGetMidiOutFileName,\n  csoundPushMidiMessage,\n  _isRequestingRtMidiInput,\n  // @module/control_events\n  csoundInputMessage,\n  csoundInputMessageAsync,\n  csoundGetControlChannel,\n  csoundSetControlChannel,\n  csoundGetStringChannel,\n  csoundSetStringChannel,\n  // @module/general_io\n  csoundGetInputName,\n  csoundGetOutputName,\n  // @module/extra\n  csoundAppendEnv: csoundAppendEnvironment,\n  csoundShouldDaemonize,\n  // @module/score-handling\n  csoundIsScorePending,\n  csoundSetScorePending,\n  csoundReadScore,\n  csoundGetScoreTime,\n  csoundGetScoreOffsetSeconds,\n  csoundSetScoreOffsetSeconds,\n  csoundRewindScore,\n  // @module/table\n  csoundTableLength,\n  csoundTableGet,\n  csoundTableSet,\n  csoundTableCopyIn,\n  csoundTableCopyOut,\n  csoundGetTable,\n  csoundGetTableArgs: csoundGetTableArguments,\n  csoundIsNamedGEN,\n  csoundGetNamedGEN,\n  // filesystem\n  fs,\n};\n\nexport default function (wasm) {\n  return mergeAll([\n    reduce((accumulator, k) => assoc(k, api[k](wasm), accumulator), {}, keys(dissoc(\"fs\")(api))),\n    reduce((accumulator, k) => assoc(k, api.fs[k](wasm), accumulator), {}, keys(fs)),\n  ]);\n}\n","export const appendBuffers = (buffer1, buffer2) => {\n  const temporary = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  temporary.set(new Uint8Array(buffer1), 0);\n  temporary.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return temporary.buffer;\n};\n\nexport const nearestPowerOf2 = (n) => {\n  return 1 << (31 - Math.clz32(n));\n};\n\nexport const isIos = () => /iPhone|iPad|iPod/.test(navigator.userAgent);\n\nconst isFirefox = () => navigator.userAgent.toLowerCase().includes(\"firefox\");\n\nexport const isSafari = () =>\n  typeof navigator.vendor === \"string\" && navigator.vendor.includes(\"Apple\");\n\nexport const isSabSupported = () =>\n  !isFirefox() &&\n  typeof window.Atomics !== \"undefined\" &&\n  typeof window.SharedArrayBuffer !== \"undefined\";\n\nexport const areWorkletsSupported = () =>\n  typeof AudioNode !== \"undefined\" && typeof AudioWorkletNode !== \"undefined\";\n\nexport const WebkitAudioContext = () => {\n  if (typeof window.webkitAudioContext !== \"undefined\") {\n    return window.webkitAudioContext;\n  } else if (typeof window.AudioContext !== \"undefined\") {\n    return window.AudioContext;\n  }\n};\n\nexport const isScriptProcessorNodeSupported = () => {\n  const audioContext = WebkitAudioContext();\n  return (\n    typeof audioContext !== \"undefined\" &&\n    typeof audioContext.prototype.createScriptProcessor !== \"undefined\"\n  );\n};\n\nexport const csoundApiRename = (apiName) => {\n  let minusCsound = apiName.replace(/^csound/i, \"\");\n  if (apiName === \"csoundPushMidiMessage\") {\n    minusCsound = \"midiMessage\";\n  }\n  return minusCsound.charAt(0).toLowerCase() + minusCsound.slice(1);\n};\n\nexport const stopableStates = new Set([\n  \"realtimePerformanceStarted\",\n  \"realtimePerformancePaused\",\n  \"realtimePerformanceResumed\",\n  \"renderStarted\",\n]);\n\nexport const makeProxyCallback =\n  (proxyPort, csoundInstance, apiK, playState) =>\n  async (...arguments_) => {\n    if (!playState || !stopableStates.has(playState)) {\n      const modifiedFs = {}; // getModifiedPersistentStorage();\n      Object.values(modifiedFs).length > 0 &&\n        (await proxyPort.callUncloned(\"syncWorkerFs\", [csoundInstance, modifiedFs]));\n    }\n    return await proxyPort.callUncloned(apiK, [csoundInstance, ...arguments_]);\n  };\n\nexport const makeSingleThreadCallback =\n  (csoundInstance, apiCallback) =>\n  async (...arguments_) => {\n    return await apiCallback.apply({}, [csoundInstance, ...arguments_]);\n  };\n\nexport const fetchPlugins = async (withPlugins) => {\n  return await Promise.all(\n    withPlugins.map(async (url) => {\n      const response = await fetch(url);\n      return response.arrayBuffer();\n    }),\n  );\n};\n","// exec log-event: msg => cb(msg)\nexport const messageEventHandler = (worker) => (event) => {\n  if (event.data.log) {\n    if (worker && worker.publicEvents && worker.publicEvents.triggerMessage) {\n      worker.publicEvents.triggerMessage(event.data.log);\n    } else {\n      // in case of errors, this can happen\n      // in which case, it's good to see the log\n      console.log(event.data.log);\n    }\n  } else if (event.data.playStateChange && worker && worker.onPlayStateChange) {\n    worker.onPlayStateChange(event.data.playStateChange);\n  }\n};\n\nconst iterableMessageChannel = () => {\n  const { port1, port2 } = new MessageChannel();\n  return [port1, port2];\n};\n\nconst safelyClosePorts = ([p1, p2]) => {\n  if (typeof p1.close !== \"undefined\") {\n    try {\n      p1.close();\n      // eslint-disable unicorn/prefer-optional-catch-binding\n    } catch (_) {}\n  }\n  if (typeof p2.close !== \"undefined\") {\n    try {\n      p2.close();\n      // eslint-disable unicorn/prefer-optional-catch-binding\n    } catch (_) {}\n  }\n};\n\nexport class IPCMessagePorts {\n  constructor() {\n    const { port1: mainMessagePort, port2: workerMessagePort } = new MessageChannel();\n    this.mainMessagePort = mainMessagePort;\n    this.workerMessagePort = workerMessagePort;\n    const { port1: mainMessagePortAudio, port2: workerMessagePortAudio } = new MessageChannel();\n    this.mainMessagePortAudio = mainMessagePortAudio;\n    this.workerMessagePortAudio = workerMessagePortAudio;\n    const { port1: csoundWorkerFrameRequestPort, port2: audioWorkerFrameRequestPort } =\n      new MessageChannel();\n    this.csoundWorkerFrameRequestPort = csoundWorkerFrameRequestPort;\n    this.audioWorkerFrameRequestPort = audioWorkerFrameRequestPort;\n    const { port1: csoundWorkerAudioInputPort, port2: audioWorkerAudioInputPort } =\n      new MessageChannel();\n    this.csoundWorkerAudioInputPort = csoundWorkerAudioInputPort;\n    this.audioWorkerAudioInputPort = audioWorkerAudioInputPort;\n    const { port1: csoundWorkerRtMidiPort, port2: csoundMainRtMidiPort } = new MessageChannel();\n    this.csoundWorkerRtMidiPort = csoundWorkerRtMidiPort;\n    this.csoundMainRtMidiPort = csoundMainRtMidiPort;\n\n    const { port1: sabWorkerCallbackReply, port2: sabMainCallbackReply } = new MessageChannel();\n    this.sabWorkerCallbackReply = sabWorkerCallbackReply;\n    this.sabMainCallbackReply = sabMainCallbackReply;\n\n    // old-spn worker-port\n    const { port1: mainMessagePort2, port2: workerMessagePort2 } = new MessageChannel();\n    this.mainMessagePort2 = mainMessagePort2;\n    this.workerMessagePort2 = workerMessagePort2;\n\n    this.restartAudioWorkerPorts = this.restartAudioWorkerPorts.bind(this);\n  }\n\n  restartAudioWorkerPorts() {\n    safelyClosePorts([this.csoundWorkerAudioInputPort, this.audioWorkerAudioInputPort]);\n    [this.csoundWorkerAudioInputPort, this.audioWorkerAudioInputPort] = iterableMessageChannel();\n\n    safelyClosePorts([this.mainMessagePortAudio, this.workerMessagePortAudio]);\n    [this.mainMessagePortAudio, this.workerMessagePortAudio] = iterableMessageChannel();\n\n    safelyClosePorts([this.csoundWorkerFrameRequestPort, this.audioWorkerFrameRequestPort]);\n    [this.csoundWorkerFrameRequestPort, this.audioWorkerFrameRequestPort] =\n      iterableMessageChannel();\n\n    safelyClosePorts([this.mainMessagePort2, this.workerMessagePort2]);\n    [this.mainMessagePort2, this.workerMessagePort2] = iterableMessageChannel();\n  }\n}\n","export function clearArray(array) {\n  while (array.length > 0) {\n    array.pop();\n  }\n}\n","// utilities which declutter\n// promises which hold back releases\n// of certain async events\n// for internal usecases only\nimport { equals, reject } from \"rambda/dist/rambda.esm.js\";\nimport { clearArray } from \"./clear-array\";\n\nexport class EventPromises {\n  constructor() {\n    this.timeoutTimers = [];\n\n    this.startPromise = undefined;\n    this.startResolver = undefined;\n\n    this.stopPromise = undefined;\n    this.stopResolver = undefined;\n\n    this.pausePromise = undefined;\n    this.pauseResolver = undefined;\n\n    this.resumePromise = undefined;\n    this.resumeResolver = undefined;\n\n    this.createStartPromise = this.createStartPromise.bind(this);\n    this.releaseStartPromise = this.releaseStartPromise.bind(this);\n\n    this.createStopPromise = this.createStopPromise.bind(this);\n    this.releaseStopPromise = this.releaseStopPromise.bind(this);\n\n    this.createPausePromise = this.createPausePromise.bind(this);\n    this.releasePausePromise = this.releasePausePromise.bind(this);\n\n    this.createResumePromise = this.createResumePromise.bind(this);\n    this.releaseResumePromise = this.releaseResumePromise.bind(this);\n\n    this.waitForStart = this.waitForStart.bind(this);\n    this.waitForStop = this.waitForStop.bind(this);\n\n    this.isWaitingToStart = this.isWaitingToStart.bind(this);\n    this.isWaitingToStop = this.isWaitingToStop.bind(this);\n  }\n\n  isWaitingToStart() {\n    return typeof this.startPromise !== \"undefined\";\n  }\n\n  isWaitingToStop() {\n    return typeof this.stopPromise !== \"undefined\";\n  }\n\n  isWaiting(eventAsking) {\n    if (typeof this.startPromise !== \"undefined\") {\n      console.error(`cannot ${eventAsking} while starting, did you forget to 'await'?`);\n      return true;\n    }\n\n    if (typeof this.stopPromise !== \"undefined\") {\n      console.error(`cannot ${eventAsking} while stopping, did you forget to 'await'?`);\n      return true;\n    }\n\n    if (typeof this.pausePromise !== \"undefined\") {\n      console.error(`cannot ${eventAsking} while pausing, did you forget to 'await'?`);\n      return true;\n    }\n\n    if (typeof this.resumePromise !== \"undefined\") {\n      console.error(`cannot ${eventAsking} while resuming, did you forget to 'await'?`);\n      return true;\n    }\n\n    return false;\n  }\n\n  async waitForStart() {\n    return this.startPromise ? await this.startPromise : -1;\n  }\n\n  async waitForStop() {\n    return this.stopPromise ? this.stopPromise : -1;\n  }\n\n  async waitForPause() {\n    return this.pausePromise ? this.pausePromise : -1;\n  }\n\n  async waitForResume() {\n    return this.resumePromise ? this.resumePromise : -1;\n  }\n\n  createStartPromise() {\n    if (!this.startPromise) {\n      this.startPromise = new Promise((resolve) => {\n        this.startResolver = resolve;\n        const timer = setTimeout(() => {\n          this.timeoutTimers = reject(equals(timer), this.timeoutTimers);\n          if (this.startPromise) {\n            console.warn(\"start promise timed out\");\n            this.startResolver();\n            delete this.startResolver;\n            this.startPromise && delete this.startPromise;\n          }\n        }, 2000);\n        this.timeoutTimers.push(timer);\n      });\n    }\n  }\n\n  releaseStartPromise() {\n    // first timer cleanup\n    try {\n      this.timeoutTimers.forEach(clearTimeout);\n      clearArray(this.timeoutTimers);\n    } catch (error) {\n      console.error(error);\n    }\n    // then resolve\n    if (this.startResolver) {\n      this.startResolver();\n      delete this.startResolver;\n    }\n    if (this.startPromise) {\n      delete this.startPromise;\n    }\n  }\n\n  createStopPromise() {\n    if (!this.stopPromise) {\n      this.stopPromise = new Promise((resolve) => {\n        this.stopResolver = resolve;\n        const timer = setTimeout(() => {\n          this.timeoutTimers = reject(equals(timer), this.timeoutTimers);\n          if (this.stopPromise) {\n            console.warn(\"stop promise timed out\");\n            this.stopResolver();\n            delete this.stopResolver;\n            this.stopPromise && delete this.stopPromise;\n          }\n        }, 2000);\n        this.timeoutTimers.push(timer);\n      });\n    }\n  }\n\n  releaseStopPromise() {\n    // first timer cleanup\n    try {\n      this.timeoutTimers.forEach(clearTimeout);\n      clearArray(this.timeoutTimers);\n    } catch (error) {\n      console.error(error);\n    }\n    // then resolve\n    if (this.stopResolver) {\n      this.stopResolver();\n      delete this.stopResolver;\n    }\n    if (this.stopPromise) {\n      delete this.stopPromise;\n    }\n  }\n\n  createPausePromise() {\n    if (!this.pausePromise) {\n      this.pausePromise = new Promise((resolve) => {\n        this.pauseResolver = resolve;\n        const timer = setTimeout(() => {\n          this.timeoutTimers = reject(equals(timer), this.timeoutTimers);\n          if (this.pausePromise) {\n            console.warn(\"pause promise timed out\");\n            this.pauseResolver();\n            delete this.pauseResolver;\n            this.pausePromise && delete this.pausePromise;\n          }\n        }, 2000);\n        this.timeoutTimers.push(timer);\n      });\n    }\n  }\n\n  releasePausePromise() {\n    // first timer cleanup\n    try {\n      this.timeoutTimers.forEach(clearTimeout);\n      clearArray(this.timeoutTimers);\n    } catch (error) {\n      console.error(error);\n    }\n    // then resolve\n    if (this.pauseResolver) {\n      this.pauseResolver();\n      delete this.pauseResolver;\n    }\n    if (this.pausePromise) {\n      delete this.pausePromise;\n    }\n  }\n\n  createResumePromise() {\n    if (!this.resumePromise) {\n      this.resumePromise = new Promise((resolve) => {\n        this.resumeResolver = resolve;\n        const timer = setTimeout(() => {\n          this.timeoutTimers = reject(equals(timer), this.timeoutTimers);\n          if (this.resumePromise) {\n            console.warn(\"resume promise timed out\");\n            this.resumeResolver();\n            delete this.resumeResolver;\n            this.resumePromise && delete this.resumePromise;\n          }\n        }, 2000);\n        this.timeoutTimers.push(timer);\n      });\n    }\n  }\n\n  releaseResumePromise() {\n    // first timer cleanup\n    try {\n      this.timeoutTimers.forEach(clearTimeout);\n      clearArray(this.timeoutTimers);\n    } catch (error) {\n      console.error(error);\n    }\n    // then resolve\n    if (this.resumeResolver) {\n      this.resumeResolver();\n      delete this.resumeResolver;\n    }\n    if (this.resumePromise) {\n      delete this.resumePromise;\n    }\n  }\n}\n","!function(e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).EventEmitter3=e()}(function(){return function i(s,f,c){function u(t,e){if(!f[t]){if(!s[t]){var n=\"function\"==typeof require&&require;if(!e&&n)return n(t,!0);if(a)return a(t,!0);var r=new Error(\"Cannot find module '\"+t+\"'\");throw r.code=\"MODULE_NOT_FOUND\",r}var o=f[t]={exports:{}};s[t][0].call(o.exports,function(e){return u(s[t][1][e]||e)},o,o.exports,i,s,f,c)}return f[t].exports}for(var a=\"function\"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){\"use strict\";var r=Object.prototype.hasOwnProperty,v=\"~\";function o(){}function f(e,t,n){this.fn=e,this.context=t,this.once=n||!1}function i(e,t,n,r,o){if(\"function\"!=typeof n)throw new TypeError(\"The listener must be a function\");var i=new f(n,r||e,o),s=v?v+t:t;return e._events[s]?e._events[s].fn?e._events[s]=[e._events[s],i]:e._events[s].push(i):(e._events[s]=i,e._eventsCount++),e}function u(e,t){0==--e._eventsCount?e._events=new o:delete e._events[t]}function s(){this._events=new o,this._eventsCount=0}Object.create&&(o.prototype=Object.create(null),(new o).__proto__||(v=!1)),s.prototype.eventNames=function(){var e,t,n=[];if(0===this._eventsCount)return n;for(t in e=this._events)r.call(e,t)&&n.push(v?t.slice(1):t);return Object.getOwnPropertySymbols?n.concat(Object.getOwnPropertySymbols(e)):n},s.prototype.listeners=function(e){var t=v?v+e:e,n=this._events[t];if(!n)return[];if(n.fn)return[n.fn];for(var r=0,o=n.length,i=new Array(o);r<o;r++)i[r]=n[r].fn;return i},s.prototype.listenerCount=function(e){var t=v?v+e:e,n=this._events[t];return n?n.fn?1:n.length:0},s.prototype.emit=function(e,t,n,r,o,i){var s=v?v+e:e;if(!this._events[s])return!1;var f,c=this._events[s],u=arguments.length;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),u){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,n),!0;case 4:return c.fn.call(c.context,t,n,r),!0;case 5:return c.fn.call(c.context,t,n,r,o),!0;case 6:return c.fn.call(c.context,t,n,r,o,i),!0}for(p=1,f=new Array(u-1);p<u;p++)f[p-1]=arguments[p];c.fn.apply(c.context,f)}else for(var a,l=c.length,p=0;p<l;p++)switch(c[p].once&&this.removeListener(e,c[p].fn,void 0,!0),u){case 1:c[p].fn.call(c[p].context);break;case 2:c[p].fn.call(c[p].context,t);break;case 3:c[p].fn.call(c[p].context,t,n);break;case 4:c[p].fn.call(c[p].context,t,n,r);break;default:if(!f)for(a=1,f=new Array(u-1);a<u;a++)f[a-1]=arguments[a];c[p].fn.apply(c[p].context,f)}return!0},s.prototype.on=function(e,t,n){return i(this,e,t,n,!1)},s.prototype.once=function(e,t,n){return i(this,e,t,n,!0)},s.prototype.removeListener=function(e,t,n,r){var o=v?v+e:e;if(!this._events[o])return this;if(!t)return u(this,o),this;var i=this._events[o];if(i.fn)i.fn!==t||r&&!i.once||n&&i.context!==n||u(this,o);else{for(var s=0,f=[],c=i.length;s<c;s++)(i[s].fn!==t||r&&!i[s].once||n&&i[s].context!==n)&&f.push(i[s]);f.length?this._events[o]=1===f.length?f[0]:f:u(this,o)}return this},s.prototype.removeAllListeners=function(e){var t;return e?(t=v?v+e:e,this._events[t]&&u(this,t)):(this._events=new o,this._eventsCount=0),this},s.prototype.off=s.prototype.removeListener,s.prototype.addListener=s.prototype.on,s.prefixed=v,s.EventEmitter=s,void 0!==t&&(t.exports=s)},{}]},{},[1])(1)});","import EE3 from \"eventemitter3/umd/eventemitter3.min.js\";\n\n/**\n * @template PublicEvents\n * @readonly\n * @enum {number}\n * @property {string} \"play\" called anytime performance goes from pause/stop to a running state.\n * @property {string} \"pause\" called after any successful csound.pause() calls.\n * @property {string} \"stop\" called after end of performance or after a successful csound.stop().\n * @property {string} \"realtimePerformanceStarted\" called at the start of realtime performance but not on resume or render.\n * @property {string} \"realtimePerformancePaused\" only called if csound.pause() was successfully called during performance.\n * @property {string} \"realtimePerformanceResumed\" only called if csound.resume() was successfully called after a pause.\n * @property {string} \"realtimePerformanceEnded\" called after end of performance or after a successful csound.stop().\n * @property {string} \"renderStarted\" called at the start of offline/non-realtime render to disk.\n * @property {string} \"renderEnded\" called at the end of offline/non-realtime render to disk.\n * @property {string} \"onAudioNodeCreated\" called when an audioNode is created from the AudioContext before realtime performance.\n * the event callback will include the audioNode itself, which is needed if autoConnect is set to false.\n * @property {string} \"message\" the main entrypoint to csound's messaging (-m) system,\n * a default event listener will print the message to the browser console, this default\n * listener can be removed by the user.\n * @suppress {misplacedTypeAnnotation}\n */\n\nexport class PublicEventAPI {\n  constructor(parent) {\n    this.parent = parent;\n    this.eventEmitter = new EE3();\n    this.currentDerivedPlayState = undefined;\n    this.decorateAPI = this.decorateAPI.bind(this);\n    this.triggerRealtimePerformanceStarted = this.triggerRealtimePerformanceStarted.bind(this);\n    this.triggerRealtimePerformancePaused = this.triggerRealtimePerformancePaused.bind(this);\n    this.triggerRealtimePerformanceResumed = this.triggerRealtimePerformanceResumed.bind(this);\n    this.triggerRealtimePerformanceEnded = this.triggerRealtimePerformanceEnded.bind(this);\n    this.triggerRenderStarted = this.triggerRenderStarted.bind(this);\n    this.triggerRenderEnded = this.triggerRenderEnded.bind(this);\n    this.triggerOnAudioNodeCreated = this.triggerOnAudioNodeCreated.bind(this);\n    this.terminateInstance = this.terminateInstance.bind(this);\n  }\n\n  terminateInstance() {\n    this.eventEmitter.removeAllListeners([\n      \"play\",\n      \"pause\",\n      \"stop\",\n      \"realtimePerformanceStarted\",\n      \"realtimePerformancePaused\",\n      \"realtimePerformanceResumed\",\n      \"realtimePerformanceEnded\",\n      \"renderStarted\",\n      \"renderEnded\",\n      \"onAudioNodeCreated\",\n      \"message\",\n    ]);\n    Object.keys(this).forEach((key) => delete this[key]);\n  }\n\n  triggerRealtimePerformanceStarted() {\n    this.eventEmitter.emit(\"realtimePerformanceStarted\");\n    if (this.currentDerivedPlayState !== \"play\") {\n      this.eventEmitter.emit(\"play\");\n      this.currentDerivedPlayState = \"play\";\n    }\n  }\n\n  triggerRealtimePerformancePaused() {\n    this.eventEmitter.emit(\"realtimePerformancePaused\");\n    if (this.currentDerivedPlayState !== \"pause\") {\n      this.eventEmitter.emit(\"pause\");\n      this.currentDerivedPlayState = \"pause\";\n    }\n  }\n\n  triggerRealtimePerformanceResumed() {\n    this.eventEmitter.emit(\"realtimePerformanceResumed\");\n    if (this.currentDerivedPlayState !== \"play\") {\n      this.eventEmitter.emit(\"play\");\n      this.currentDerivedPlayState = \"play\";\n    }\n  }\n\n  triggerRealtimePerformanceEnded() {\n    this.eventEmitter.emit(\"realtimePerformanceEnded\");\n    if (this.currentDerivedPlayState !== \"stop\") {\n      this.eventEmitter.emit(\"stop\");\n      this.currentDerivedPlayState = \"stop\";\n    }\n  }\n\n  triggerRenderStarted() {\n    this.eventEmitter.emit(\"renderStarted\");\n    if (this.currentDerivedPlayState !== \"stop\") {\n      this.eventEmitter.emit(\"stop\");\n      this.currentDerivedPlayState = \"stop\";\n    }\n  }\n\n  triggerRenderEnded() {\n    this.eventEmitter.emit(\"renderEnded\");\n    if (this.currentDerivedPlayState !== \"stop\") {\n      this.eventEmitter.emit(\"stop\");\n      this.currentDerivedPlayState = \"stop\";\n    }\n  }\n\n  triggerOnAudioNodeCreated(audioNode) {\n    this.eventEmitter.emit(\"onAudioNodeCreated\", audioNode);\n  }\n\n  triggerMessage({ log }) {\n    this.eventEmitter.emit(\"message\", log);\n  }\n\n  decorateAPI(exportApi) {\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     * The values in the array are strings.\n     * @function\n     * @name eventNames\n     * @memberof CsoundObj\n     * @return {Array<string>}\n     */\n    exportApi.eventNames = this.eventEmitter.eventNames.bind(this.eventEmitter);\n    /**\n     * Returns the number of listeners listening to the event named eventName.\n     * @function\n     * @name listenerCount\n     * @memberof CsoundObj\n     * @return {number}\n     */\n    exportApi.listenerCount = this.eventEmitter.listenerCount.bind(this.eventEmitter);\n    /**\n     * Returns a copy of the array of listeners for the event named eventName.\n     * @function\n     * @name listeners\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @return {Array.<function()>}\n     */\n    exportApi.listeners = this.eventEmitter.listeners.bind(this.eventEmitter);\n    /**\n     * Alias for removeListener()\n     * @function\n     * @name off\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @param {function()} listener\n     * @return {EventEmitter}\n     */\n    exportApi.off = this.eventEmitter.off.bind(this.eventEmitter);\n    /**\n     * Adds the listener function to the end of the listeners array for the event named eventName.\n     * No checks are made to see if the listener has already been added.\n     * Multiple calls passing the same combination of eventName and listener\n     * will result in the listener being added, and called, multiple times.\n     * @function\n     * @name on\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @param {function()} listener\n     * @return {EventEmitter}\n     */\n    exportApi.on = this.eventEmitter.on.bind(this.eventEmitter);\n    /**\n     * Alias for \"on\"\n     * @function\n     * @name addListener\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @param {function()} listener\n     * @return {EventEmitter}\n     */\n    exportApi.addListener = this.eventEmitter.on.bind(this.eventEmitter);\n    /**\n     * Adds a one-time listener function for the event named eventName.\n     * The next time eventName is triggered, this listener is removed and then invoked.\n     * @function\n     * @name once\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @param {function()} listener\n     * @return {EventEmitter}\n     */\n    exportApi.once = this.eventEmitter.once.bind(this.eventEmitter);\n    /**\n     * Removes all listeners, or those of the specified eventName.\n     * It is bad practice to remove listeners added elsewhere in the code,\n     * particularly when the EventEmitter instance was created by some other\n     * component or module.\n     * Returns a reference to the EventEmitter, so that calls can be chained.\n     * @function\n     * @name removeAllListeners\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @return {EventEmitter}\n     */\n    exportApi.removeAllListeners = this.eventEmitter.removeAllListeners.bind(this.eventEmitter);\n    /**\n     * Removes the specified listener from the listener array for the event named eventName.\n     * removeListener() will remove, at most, one instance of a listener from the listener array.\n     * If any single listener has been added multiple times to the listener array for the specified eventName,\n     * then removeListener() must be called multiple times to remove each instance.\n     * Removes the specified listener from the listener array for the event named eventName.\n     * @function\n     * @name removeListener\n     * @memberof CsoundObj\n     * @param {PublicEvents} eventName\n     * @param {function()} listener\n     * @return {EventEmitter}\n     */\n    exportApi.removeListener = this.eventEmitter.removeListener.bind(this.eventEmitter);\n    return exportApi;\n  }\n}\n","goog.provide(\"worker.vanilla\");\n         goog.scope(function () {\n         worker.vanilla = () => (window.URL || window.webkitURL).createObjectURL(new Blob([\"(function(){/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifier: Apache-2.0\\n*/\\nvar aa=aa||{};aa.scope={};var c=c||{};c.global=this||self;c.exportPath_=function(a,b,d,e){a=a.split(\\\".\\\");e=e||c.global;a[0]in e||\\\"undefined\\\"==typeof e.execScript||e.execScript(\\\"var \\\"+a[0]);for(var f;a.length&&(f=a.shift());)if(a.length||void 0===b)e=e[f]&&e[f]!==Object.prototype[f]?e[f]:e[f]={};else if(!d&&c.isObject(b)&&c.isObject(e[f]))for(var g in b)b.hasOwnProperty(g)&&(e[f][g]=b[g]);else e[f]=b};c.define=function(a,b){return b};c.FEATURESET_YEAR=2020;c.DEBUG=!0;c.LOCALE=\\\"en\\\";c.getLocale=function(){return c.LOCALE};\\nc.TRUSTED_SITE=!0;c.DISALLOW_TEST_ONLY_CODE=!c.DEBUG;c.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;c.provide=function(a){if(c.isInModuleLoader_())throw Error(\\\"goog.provide cannot be used within a module.\\\");c.constructNamespace_(a)};c.constructNamespace_=function(a,b,d){c.exportPath_(a,b,d)};c.NONCE_PATTERN_=/^[\\\\w+/_-]+[=]{0,2}$/;\\nc.getScriptNonce_=function(a){a=(a||c.global).document;return(a=a.querySelector&&a.querySelector(\\\"script[nonce]\\\"))&&(a=a.nonce||a.getAttribute(\\\"nonce\\\"))&&c.NONCE_PATTERN_.test(a)?a:\\\"\\\"};c.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\\nc.module=function(a){if(\\\"string\\\"!==typeof a||!a||-1==a.search(c.VALID_MODULE_RE_))throw Error(\\\"Invalid module identifier\\\");if(!c.isInGoogModuleLoader_())throw Error(\\\"Module \\\"+a+\\\" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\\\");if(c.moduleLoaderState_.moduleName)throw Error(\\\"goog.module may only be called once per module.\\\");\\nc.moduleLoaderState_.moduleName=a};c.module.get=function(a){return c.module.getInternal_(a)};c.module.getInternal_=function(){return null};c.ModuleType={ES6:\\\"es6\\\",GOOG:\\\"goog\\\"};c.moduleLoaderState_=null;c.isInModuleLoader_=function(){return c.isInGoogModuleLoader_()||c.isInEs6ModuleLoader_()};c.isInGoogModuleLoader_=function(){return!!c.moduleLoaderState_&&c.moduleLoaderState_.type==c.ModuleType.GOOG};\\nc.isInEs6ModuleLoader_=function(){if(c.moduleLoaderState_&&c.moduleLoaderState_.type==c.ModuleType.ES6)return!0;var a=c.global.$jscomp;return a?\\\"function\\\"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};c.module.declareLegacyNamespace=function(){c.moduleLoaderState_.declareLegacyNamespace=!0};\\nc.declareModuleId=function(a){if(c.moduleLoaderState_)c.moduleLoaderState_.moduleName=a;else{var b=c.global.$jscomp;if(!b||\\\"function\\\"!=typeof b.getCurrentModulePath)throw Error('Module with namespace \\\"'+a+'\\\" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());c.loadedModules_[a]={exports:b,type:c.ModuleType.ES6,moduleId:a}}};c.setTestOnly=function(a){if(c.DISALLOW_TEST_ONLY_CODE)throw a=a||\\\"\\\",Error(\\\"Importing test-only code into non-debug environment\\\"+(a?\\\": \\\"+a:\\\".\\\"));};\\nc.forwardDeclare=function(){};c.getObjectByName=function(a,b){a=a.split(\\\".\\\");b=b||c.global;for(var d=0;d<a.length;d++)if(b=b[a[d]],null==b)return null;return b};c.addDependency=function(){};c.ENABLE_DEBUG_LOADER=!0;c.logToConsole_=function(a){c.global.console&&c.global.console.error(a)};c.require=function(){};c.requireType=function(){return{}};c.basePath=\\\"\\\";c.nullFunction=function(){};c.abstractMethod=function(){throw Error(\\\"unimplemented abstract method\\\");};\\nc.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;c.DEBUG&&(c.instantiatedSingletons_[c.instantiatedSingletons_.length]=a);return a.instance_=new a}};c.instantiatedSingletons_=[];c.LOAD_MODULE_USING_EVAL=!0;c.SEAL_MODULE_EXPORTS=c.DEBUG;c.loadedModules_={};c.DEPENDENCIES_ENABLED=!1;c.TRANSPILE=\\\"detect\\\";c.ASSUME_ES_MODULES_TRANSPILED=!1;c.TRANSPILE_TO_LANGUAGE=\\\"\\\";c.TRANSPILER=\\\"transpile.js\\\";c.TRUSTED_TYPES_POLICY_NAME=\\\"goog\\\";\\nc.hasBadLetScoping=null;\\nc.loadModule=function(a){var b=c.moduleLoaderState_;try{c.moduleLoaderState_={moduleName:\\\"\\\",declareLegacyNamespace:!1,type:c.ModuleType.GOOG};var d={},e=d;if(\\\"function\\\"===typeof a)e=a.call(void 0,e);else if(\\\"string\\\"===typeof a)e=c.loadModuleFromSource_.call(void 0,e,a);else throw Error(\\\"Invalid module definition\\\");var f=c.moduleLoaderState_.moduleName;if(\\\"string\\\"===typeof f&&f)c.moduleLoaderState_.declareLegacyNamespace?c.constructNamespace_(f,e,d!==e):c.SEAL_MODULE_EXPORTS&&Object.seal&&\\\"object\\\"==\\ntypeof e&&null!=e&&Object.seal(e),c.loadedModules_[f]={exports:e,type:c.ModuleType.GOOG,moduleId:c.moduleLoaderState_.moduleName};else throw Error('Invalid module name \\\"'+f+'\\\"');}finally{c.moduleLoaderState_=b}};c.loadModuleFromSource_=function(a,b){eval(c.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};c.normalizePath_=function(a){a=a.split(\\\"/\\\");for(var b=0;b<a.length;)\\\".\\\"==a[b]?a.splice(b,1):b&&\\\"..\\\"==a[b]&&a[b-1]&&\\\"..\\\"!=a[b-1]?a.splice(--b,2):b++;return a.join(\\\"/\\\")};\\nc.loadFileSync_=function(a){if(c.global.CLOSURE_LOAD_FILE_SYNC)return c.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new c.global.XMLHttpRequest;b.open(\\\"get\\\",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(d){return null}};\\nc.transpile_=function(a,b,d){var e=c.global.$jscomp;e||(c.global.$jscomp=e={});var f=e.transpile;if(!f){var g=c.basePath+c.TRANSPILER,h=c.loadFileSync_(g);if(h){(function(){(0,eval)(h+\\\"\\\\n//# sourceURL=\\\"+g)}).call(c.global);if(c.global.$gwtExport&&c.global.$gwtExport.$jscomp&&!c.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the \\\"transpile\\\" method. $gwtExport: '+JSON.stringify(c.global.$gwtExport));c.global.$jscomp.transpile=c.global.$gwtExport.$jscomp.transpile;\\ne=c.global.$jscomp;f=e.transpile}}f||(f=e.transpile=function(k,n){c.logToConsole_(n+\\\" requires transpilation but no transpiler was found.\\\");return k});return f(a,b,d)};c.typeOf=function(a){var b=typeof a;return\\\"object\\\"!=b?b:a?Array.isArray(a)?\\\"array\\\":b:\\\"null\\\"};c.isArrayLike=function(a){var b=c.typeOf(a);return\\\"array\\\"==b||\\\"object\\\"==b&&\\\"number\\\"==typeof a.length};c.isDateLike=function(a){return c.isObject(a)&&\\\"function\\\"==typeof a.getFullYear};\\nc.isObject=function(a){var b=typeof a;return\\\"object\\\"==b&&null!=a||\\\"function\\\"==b};c.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,c.UID_PROPERTY_)&&a[c.UID_PROPERTY_]||(a[c.UID_PROPERTY_]=++c.uidCounter_)};c.hasUid=function(a){return!!a[c.UID_PROPERTY_]};c.removeUid=function(a){null!==a&&\\\"removeAttribute\\\"in a&&a.removeAttribute(c.UID_PROPERTY_);try{delete a[c.UID_PROPERTY_]}catch(b){}};c.UID_PROPERTY_=\\\"closure_uid_\\\"+(1E9*Math.random()>>>0);c.uidCounter_=0;\\nc.cloneObject=function(a){var b=c.typeOf(a);if(\\\"object\\\"==b||\\\"array\\\"==b){if(\\\"function\\\"===typeof a.clone)return a.clone();if(\\\"undefined\\\"!==typeof Map&&a instanceof Map)return new Map(a);if(\\\"undefined\\\"!==typeof Set&&a instanceof Set)return new Set(a);b=\\\"array\\\"==b?[]:{};for(var d in a)b[d]=c.cloneObject(a[d]);return b}return a};c.bindNative_=function(a,b,d){return a.call.apply(a.bind,arguments)};\\nc.bindJs_=function(a,b,d){if(!a)throw Error();if(2<arguments.length){var e=Array.prototype.slice.call(arguments,2);return function(){var f=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(f,e);return a.apply(b,f)}}return function(){return a.apply(b,arguments)}};c.bind=function(a,b,d){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\\\"native code\\\")?c.bind=c.bindNative_:c.bind=c.bindJs_;return c.bind.apply(null,arguments)};\\nc.partial=function(a,b){var d=Array.prototype.slice.call(arguments,1);return function(){var e=d.slice();e.push.apply(e,arguments);return a.apply(this,e)}};c.mixin=function(a,b){for(var d in b)a[d]=b[d]};c.now=function(){return Date.now()};c.globalEval=function(a){(0,eval)(a)};\\nc.getCssName=function(a,b){function d(g){g=g.split(\\\"-\\\");for(var h=[],k=0;k<g.length;k++)h.push(e(g[k]));return h.join(\\\"-\\\")}function e(g){return c.cssNameMapping_[g]||g}if(\\\".\\\"==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with \\\".\\\". You passed: '+a);var f=c.cssNameMapping_?\\\"BY_WHOLE\\\"==c.cssNameMappingStyle_?e:d:function(g){return g};a=b?a+\\\"-\\\"+f(b):f(a);return c.global.CLOSURE_CSS_NAME_MAP_FN?c.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\\nc.setCssNameMapping=function(a,b){c.cssNameMapping_=a;c.cssNameMappingStyle_=b};c.getMsg=function(a,b,d){d&&d.html&&(a=a.replace(/</g,\\\"&lt;\\\"));d&&d.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,\\\"<\\\").replace(/&gt;/g,\\\">\\\").replace(/&apos;/g,\\\"'\\\").replace(/&quot;/g,'\\\"').replace(/&amp;/g,\\\"&\\\"));b&&(a=a.replace(/\\\\{\\\\$([^}]+)}/g,function(e,f){return null!=b&&f in b?b[f]:e}));return a};c.getMsgWithFallback=function(a){return a};c.exportSymbol=function(a,b,d){c.exportPath_(a,b,!0,d)};\\nc.exportProperty=function(a,b,d){a[b]=d};c.inherits=function(a,b){function d(){}d.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new d;a.prototype.constructor=a;a.base=function(e,f,g){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[f].apply(e,h)}};c.scope=function(a){if(c.isInModuleLoader_())throw Error(\\\"goog.scope is not supported within a module.\\\");a.call(c.global)};\\nc.defineClass=function(a,b){var d=b.constructor,e=b.statics;d&&d!=Object.prototype.constructor||(d=function(){throw Error(\\\"cannot instantiate an interface (no constructor defined).\\\");});d=c.defineClass.createSealingConstructor_(d,a);a&&c.inherits(d,a);delete b.constructor;delete b.statics;c.defineClass.applyProperties_(d.prototype,b);null!=e&&(e instanceof Function?e(d):c.defineClass.applyProperties_(d,e));return d};c.defineClass.SEAL_CLASS_INSTANCES=c.DEBUG;\\nc.defineClass.createSealingConstructor_=function(a){return c.defineClass.SEAL_CLASS_INSTANCES?function(){var b=a.apply(this,arguments)||this;b[c.UID_PROPERTY_]=b[c.UID_PROPERTY_];return b}:a};c.defineClass.OBJECT_PROTOTYPE_FIELDS_=\\\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\\\".split(\\\" \\\");\\nc.defineClass.applyProperties_=function(a,b){for(var d in b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);for(var e=0;e<c.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;e++)d=c.defineClass.OBJECT_PROTOTYPE_FIELDS_[e],Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d])};c.identity_=function(a){return a};c.createTrustedTypesPolicy=function(a){var b=null,d=c.global.trustedTypes;if(!d||!d.createPolicy)return b;try{b=d.createPolicy(a,{createHTML:c.identity_,createScript:c.identity_,createScriptURL:c.identity_})}catch(e){c.logToConsole_(e.message)}return b};const ba=Symbol(\\\"Comlink.proxy\\\"),ca=Symbol(\\\"Comlink.endpoint\\\"),da=Symbol(\\\"Comlink.releaseProxy\\\"),ea=Symbol(\\\"Comlink.thrown\\\"),fa=a=>\\\"object\\\"===typeof a&&null!==a||\\\"function\\\"===typeof a,ja=new Map([[\\\"proxy\\\",{canHandle:a=>fa(a)&&a[ba],serialize(a){const {port1:b,port2:d}=new MessageChannel;ha(a,b);return[d,[d]]},deserialize(a){a.start();return ia(a,[],void 0)}}],[\\\"throw\\\",{canHandle:a=>fa(a)&&ea in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:\\n{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}}]]);\\nfunction ha(a,b=self){b.addEventListener(\\\"message\\\",function f(e){if(e&&e.data){var {id:g,type:h,path:k}=Object.assign({path:[]},e.data),n=(e.data.argumentList||[]).map(m);try{const q=k.slice(0,-1).reduce((u,v)=>u[v],a),t=k.reduce((u,v)=>u[v],a);switch(h){case \\\"GET\\\":var l=t;break;case \\\"SET\\\":q[k.slice(-1)[0]]=m(e.data.value);l=!0;break;case \\\"APPLY\\\":l=t.apply(q,n);break;case \\\"CONSTRUCT\\\":const u=new t(...n);l=Object.assign(u,{[ba]:!0});break;case \\\"ENDPOINT\\\":const {port1:v,port2:J}=new MessageChannel;\\nha(a,J);l=ka(v,[v]);break;case \\\"RELEASE\\\":l=void 0;break;default:return}}catch(q){l={value:q,[ea]:0}}Promise.resolve(l).catch(q=>({value:q,[ea]:0})).then(q=>{const [t,u]=la(q);b.postMessage(Object.assign(Object.assign({},t),{id:g}),u);\\\"RELEASE\\\"===h&&(b.removeEventListener(\\\"message\\\",f),\\\"MessagePort\\\"===b.constructor.name&&b.close())})}});b.start&&b.start()}function ma(a){if(a)throw Error(\\\"Proxy has been released and is not useable\\\");}\\nfunction ia(a,b=[],d=function(){}){let e=!1;const f=new Proxy(d,{get(g,h){ma(e);if(h===da)return()=>na(a,{type:\\\"RELEASE\\\",path:b.map(k=>k.toString())}).then(()=>{\\\"MessagePort\\\"===a.constructor.name&&a.close();e=!0});if(\\\"then\\\"===h){if(0===b.length)return{then:()=>f};g=na(a,{type:\\\"GET\\\",path:b.map(k=>k.toString())}).then(m);return g.then.bind(g)}return ia(a,[...b,h])},set(g,h,k){ma(e);const [n,l]=la(k);return na(a,{type:\\\"SET\\\",path:[...b,h].map(q=>q.toString()),value:n},l).then(m)},apply(g,h,k){ma(e);g=\\nb[b.length-1];if(g===ca)return na(a,{type:\\\"ENDPOINT\\\"}).then(m);if(\\\"bind\\\"===g)return ia(a,b.slice(0,-1));const [n,l]=oa(k);return na(a,{type:\\\"APPLY\\\",path:b.map(q=>q.toString()),argumentList:n},l).then(m)},construct(g,h){ma(e);const [k,n]=oa(h);return na(a,{type:\\\"CONSTRUCT\\\",path:b.map(l=>l.toString()),argumentList:k},n).then(m)}});return f}function oa(a){a=a.map(la);return[a.map(b=>b[0]),Array.prototype.concat.apply([],a.map(b=>b[1]))]}const pa=new WeakMap;function ka(a,b){pa.set(a,b);return a}\\nfunction la(a){for(const [b,d]of ja)if(d.canHandle(a)){const [e,f]=d.serialize(a);return[{type:\\\"HANDLER\\\",name:b,value:e},f]}return[{type:\\\"RAW\\\",value:a},pa.get(a)||[]]}function m(a){switch(a.type){case \\\"HANDLER\\\":return ja.get(a.name).deserialize(a.value);case \\\"RAW\\\":return a.value}}\\nfunction na(a,b,d){return new Promise(e=>{const f=qa();a.addEventListener(\\\"message\\\",function k(h){h.data&&h.data.id&&h.data.id===f&&(a.removeEventListener(\\\"message\\\",k),e(h.data))});a.start&&a.start();a.postMessage(Object.assign({id:f},b),d)})}function qa(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join(\\\"-\\\")};function p(){}p.prototype.ready=!1;p.prototype.port=void 0;p.prototype.post=()=>{};p.prototype.broadcastPlayState=()=>{};p.prototype.workerState=void 0;p.prototype.vanillaWorkerState=void 0;var r={__esModule:!0};r.LoggerFactory=r.logLevels=void 0;r.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};\\nvar ra=function(){function a(b,d){if(void 0===b&&(b=\\\"log_with_warnings\\\"),void 0===d&&(d=null),this.logLevel=b,!r.logLevels[b])throw Error(\\\"Invalid log level \\\"+b+\\\" allowed: \\\"+JSON.stringify(r.logLevels));this.mockConsole=d||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=function(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,d,e){return this.getSingleLoggerStyle(b,this.getColorStyle(d),e)},a.prototype.getSingleLogger=\\nfunction(b,d){var e=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(e),d)},a.prototype.getSingleLoggerStyle=function(b,d,e,f){var g=this;return void 0===f&&(f=\\\"log_with_warnings\\\"),function(){for(var h=[],k=0;k<arguments.length;k++)h[k]=arguments[k];if(r.logLevels[g.logLevel]>r.logLevels[f])return g.dummy;h=Array.prototype.slice.call(h);k=h.shift().split(\\\"{}\\\");for(var n=[g.mockConsole,\\\"%c\\\"+b,d],l=0;l<k.length;l++)n.push(k[l]),void 0!==h[l]&&n.push(h[l]);if(k.length-1!==\\nh.length)if(\\\"log_with_warnings\\\"===g.logLevel)g.mockConsole.error(\\\"MissMatch amount of arguments\\\");else if(\\\"log_raise_error\\\"===g.logLevel)throw Error(\\\"MissMatch amount of arguments\\\");return Function.prototype.bind.apply(e,n)}},a.prototype.getLoggerColor=function(b,d){return this.getLoggerStyle(b,this.getColorStyle(d))},a.prototype.getColorStyle=function(b){return\\\"color: white; background-color: \\\"+b+\\\"; padding: 2px 6px; border-radius: 2px; font-size: 10px\\\"},a.getHash=function(b,d){void 0===d&&(d=0);\\nvar e=3735928559^d;d^=1103547991;for(var f=0,g;f<b.length;f++)g=b.charCodeAt(f),e=Math.imul(e^g,2654435761),d=Math.imul(d^g,1597334677);return e=Math.imul(e^e>>>16,2246822507)^Math.imul(d^d>>>13,3266489909),4294967296*(2097151&(Math.imul(d^d>>>16,2246822507)^Math.imul(e^e>>>13,3266489909)))+(e>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b=\\\"\\\");b=a.getHash(b);for(var d=\\\"#\\\",e=0;3>e;e++)d+=(\\\"00\\\"+(8+(b>>7*e&127)).toString(16)).substr(-2);return d},a.prototype.getLogger=function(b){return this.getLoggerColor(b,\\nthis.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,d){return{trace:this.getSingleLoggerStyle(b,d,this.mockConsole.trace,\\\"trace\\\"),debug:this.getSingleLoggerStyle(b,d,this.mockConsole.debug,\\\"debug\\\"),log:this.getSingleLoggerStyle(b,d,this.mockConsole.log,\\\"info\\\"),warn:this.getSingleLoggerStyle(b,d,this.mockConsole.warn,\\\"warn\\\"),error:this.getSingleLoggerStyle(b,d,this.mockConsole.error,\\\"error\\\")}},a}();r.LoggerFactory=ra;let sa,ta,ua;sa=()=>()=>{};ta=()=>()=>{};ua=()=>()=>{};const wa=(a,b,d,e,f)=>g=>{const {csound:h}=g,k=1===b.csoundShouldDaemonize(h);k&&(b.csoundSetOption(h,\\\"--daemon\\\"),b.csoundSetOption(h,\\\"-odac\\\"));const n=b.csoundStart(h),l=b.csoundGetOutputName(h)||\\\"test.wav\\\";ta(`handleCsoundStart: actual csoundStart result ${n}, outputName: ${l}`)();0!==n&&a.post(`error: csoundStart failed while trying to render ${l},`+\\\" look out for errors in options and syntax\\\");setTimeout(()=>{const q=b._isRequestingRtMidiInput(h);if(k||q||l.includes(\\\"dac\\\"))e(g);else if(a.broadcastPlayState(\\\"renderStarted\\\"),\\nf)f(g);else for(;0===b.csoundPerformKsmps(h););},0);return n},xa=(a,b)=>{const d=[];for(let e=0;e<a;e++)d.push(new Float64Array(b));return d},ya=({libraryCsound:a,workerMessagePort:b})=>async({csound:d})=>{const e=a.csoundGetKsmps(d);let f=0,g=0;for(;(\\\"renderStarted\\\"===b.vanillaWorkerState||\\\"renderStarted\\\"===b.workerState)&&0===f;)f=a.csoundPerformKsmps(d),g+=1,\\\"function\\\"===typeof setTimeout&&0===f&&0===g%e&&await new Promise(h=>setTimeout(h,0));b.broadcastPlayState(\\\"renderEnded\\\")};const za=a=>()=>a.exports.csoundCreateWasi();za.toString=()=>\\\"create = async () => undefined;\\\";const Aa=a=>b=>a.exports.csoundDestroy(b);Aa.toString=()=>\\\"destroy = async () => undefined;\\\";const Ba=a=>()=>a.exports.csoundGetAPIVersion();Ba.toString=()=>\\\"getAPIVersion = async () => Number;\\\";const Ca=a=>()=>a.exports.csoundGetVersion();Ca.toString=()=>\\\"getVersion = async () => Number;\\\";const Da=a=>(b,d)=>a.exports.csoundInitialize(d);Da.toString=()=>\\\"initialize = async () => Number;\\\";const z=new TextDecoder(\\\"utf8\\\"),Ea=new TextEncoder(\\\"utf8\\\");const Fa=a=>{const b=a.indexOf(\\\"\\\\x00\\\");return-1<b?a.substr(0,b):a};const A=(a,b)=>{if(\\\"string\\\"!==typeof b)console.error(\\\"Expected string but got\\\",typeof b);else{b=Ea.encode(b);var d=a.exports.allocStringMem(b.length);({buffer:a}=a.wasi.memory);(new Uint8Array(a,d,b.length+1)).set(b);return d}};const Ga=a=>(b,d)=>a.exports.csoundParseOrc(b,d);Ga.toString=()=>\\\"parseOrc = async (orchestra) => Object;\\\";const Ha=a=>(b,d)=>a.exports.csoundCompileTree(b,d);Ha.toString=()=>\\\"compileTree = async (tree) => Number;\\\";const Ia=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundCompileOrc(b,d);a.exports.freeStringMem(d);return b};Ia.toString=()=>\\\"compileOrc = async (orchestra) => Number;\\\";const Ja=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundEvalCode(b,d);a.exports.freeStringMem(d);return b};Ja.toString=()=>\\\"csoundEvalCode = async (orchestra) => Number;\\\";\\nconst Ka=a=>b=>a.exports.csoundStartWasi(b);Ka.toString=()=>\\\"start = async () => Number;\\\";const La=a=>(b,d)=>{d=A(a,d);let e;try{e=a.exports.csoundCompileCsd(b,d)}catch(f){console.error(f)}a.exports.freeStringMem(d);return e};La.toString=()=>\\\"compileCsd = async (path) => Number;\\\";const Ma=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundCompileCsdText(b,d);a.exports.freeStringMem(d);return b};Ma.toString=()=>\\\"compileCsdText = async (csoundDocument) => Number;\\\";const Na=a=>b=>a.exports.csoundPerform(b);\\nNa.toString=()=>\\\"perform = async () => Number;\\\";const Oa=a=>b=>a.exports.csoundPerformKsmpsWasi(b);Oa.toString=()=>\\\"performKsmps = async (csound) => Number;\\\";const Pa=a=>b=>a.exports.csoundPerformBuffer(b);Pa.toString=()=>\\\"performBuffer = async (csound) => Number;\\\";const Qa=a=>b=>a.exports.csoundStop(b);Qa.toString=()=>\\\"stop = async () => undefined;\\\";const Ra=a=>b=>a.exports.csoundCleanup(b);Ra.toString=()=>\\\"cleanup = async () => Number;\\\";const Sa=a=>b=>a.exports.csoundResetWasi(b);\\nSa.toString=()=>\\\"reset = async () => Number;\\\";const Ta={int:4,MYFLT:4,char:1},Ua=a=>a.reduce((b,[,d,...e])=>b+(\\\"char\\\"===d?Ta[d]*e[0]:Ta[d]),0);const Va=(a,b)=>{[a]=a.reduce(([d,e],[f,g,...h])=>{h=\\\"char\\\"===g?Ta[g]*h[0]:Ta[g];g=\\\"char\\\"===g?Fa(z.decode(b.subarray(e,h)))||\\\"\\\":b[e];d[f]=g;return[d,e+h]},[{},0]);return a};const Wa=[[\\\"debug_mode\\\",\\\"int\\\"],[\\\"buffer_frames\\\",\\\"int\\\"],[\\\"hardware_buffer_frames\\\",\\\"int\\\"],[\\\"displays\\\",\\\"int\\\"],[\\\"ascii_graphs\\\",\\\"int\\\"],[\\\"postscript_graphs\\\",\\\"int\\\"],[\\\"message_level\\\",\\\"int\\\"],[\\\"tempo\\\",\\\"int\\\"],[\\\"ring_bell\\\",\\\"int\\\"],[\\\"use_cscore\\\",\\\"int\\\"],[\\\"terminate_on_midi\\\",\\\"int\\\"],[\\\"heartbeat\\\",\\\"int\\\"],[\\\"defer_gen01_load\\\",\\\"int\\\"],[\\\"midi_key\\\",\\\"int\\\"],[\\\"midi_key_cps\\\",\\\"int\\\"],[\\\"midi_key_oct\\\",\\\"int\\\"],[\\\"midi_key_pch\\\",\\\"int\\\"],[\\\"midi_velocity\\\",\\\"int\\\"],[\\\"midi_velocity_amp\\\",\\\"int\\\"],[\\\"no_default_paths\\\",\\\"int\\\"],[\\\"number_of_threads\\\",\\n\\\"int\\\"],[\\\"syntax_check_only\\\",\\\"int\\\"],[\\\"csd_line_counts\\\",\\\"int\\\"],[\\\"compute_weights\\\",\\\"int\\\"],[\\\"realtime_mode\\\",\\\"int\\\"],[\\\"sample_accurate\\\",\\\"int\\\"],[\\\"sample_rate_override\\\",\\\"MYFLT\\\"],[\\\"control_rate_override\\\",\\\"MYFLT\\\"],[\\\"nchnls_override\\\",\\\"int\\\"],[\\\"nchnls_i_override\\\",\\\"int\\\"],[\\\"e0dbfs_override\\\",\\\"MYFLT\\\"],[\\\"daemon\\\",\\\"int\\\"],[\\\"ksmps_override\\\",\\\"int\\\"],[\\\"FFT_library\\\",\\\"int\\\"]],Xa=[[\\\"device_name\\\",\\\"char\\\",64],[\\\"interface_name\\\",\\\"char\\\",64],[\\\"device_id\\\",\\\"char\\\",64],[\\\"midi_module\\\",\\\"char\\\",64],[\\\"isOutput\\\",\\\"int\\\"]];const Ya=a=>b=>a.exports.csoundGetSr(b);Ya.toString=()=>\\\"getSr = async () => Number;\\\";const Za=a=>b=>a.exports.csoundGetKr(b);Za.toString=()=>\\\"getKr = async () => Number;\\\";const $a=a=>b=>a.exports.csoundGetKsmps(b);$a.toString=()=>\\\"getKsmps = async () => Number;\\\";const ab=a=>b=>a.exports.csoundGetNchnls(b);ab.toString=()=>\\\"getNchnls = async () => Number;\\\";const bb=a=>b=>a.exports.csoundGetNchnlsInput(b);bb.toString=()=>\\\"getNchnlsInput = async () => Number;\\\";const cb=a=>b=>a.exports.csoundGet0dBFS(b);\\ncb.toString=()=>\\\"get0dBFS = async () => Number;\\\";const db=a=>b=>a.exports.csoundGetA4(b);db.toString=()=>\\\"getA4 = async () => Number;\\\";const eb=a=>b=>a.exports.csoundGetCurrentTimeSamples(b);eb.toString=()=>\\\"getCurrentTimeSamples = async () => Number;\\\";const fb=a=>b=>a.exports.csoundGetSizeOfMYFLT(b);fb.toString=()=>\\\"getSizeOfMYFLT = async () => Number;\\\";const gb=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundSetOption(b,d);a.exports.freeStringMem(d);return b};gb.toString=()=>\\\"setOption = async (option) => Number;\\\";\\nconst hb=a=>(b,d)=>{a.exports.csoundSetParams(b,d)};hb.toString=()=>\\\"setParams = async (csoundParams) => undefined;\\\";const ib=a=>b=>{var {buffer:d}=a.wasi.memory;const e=Ua(Wa),f=a.exports.allocCsoundParamsStruct();d=new Uint8Array(d,f,e);a.exports.csoundGetParams(b,f);b=Va(Wa,d);a.exports.freeCsoundParams(f);return b};ib.toString=()=>\\\"getParams = async () => CSOUND_PARAMS;\\\";const jb=a=>b=>a.exports.csoundGetDebug(b);jb.toString=()=>\\\"getDebug = async () => Number;\\\";\\nconst kb=a=>(b,d)=>{a.exports.csoundSetDebug(b,d)};kb.toString=()=>\\\"setDebug = async (number) => undefined;\\\";const lb=a=>b=>a.exports.csoundGetInputBufferSize(b);lb.toString=()=>\\\"getInputBufferSize = async () => Number;\\\";const mb=a=>b=>a.exports.csoundGetOutputBufferSize(b);mb.toString=()=>\\\"getOutputBufferSize = async () => Number;\\\";const nb=a=>b=>a.exports.csoundGetInputBuffer(b);nb.toString=()=>\\\"getInputBuffer = async () => Number;\\\";const pb=a=>b=>a.exports.csoundGetOutputBuffer(b);pb.toString=()=>\\\"getOutputBuffer = async () => Number;\\\";const qb=a=>b=>a.exports.csoundGetSpin(b);qb.toString=()=>\\\"getSpin = async (csound) => Number;\\\";\\nconst rb=a=>b=>a.exports.csoundGetSpout(b);rb.toString=()=>\\\"getSpout = async () => Number;\\\";function D(a,b=[]){return(...d)=>{d=[...b,...d];return d.length>=a.length?a(...d):D(a,d)}}D(function(a,b,d){const e=0>a?d.length+a:a;if(a>=d.length||0>e)return d;a=Array.prototype.slice.call(d);a[e]=b(a[e]);return a});function sb(a){return()=>a}const tb=Array.isArray,ub=D(function(a,b,d){return Object.assign({},d,{[a]:b})});function vb(a){return a<<0===a}\\nfunction wb(a,b,d){const e=\\\"string\\\"===typeof a?a.split(\\\".\\\").map(f=>vb(Number(f))?Number(f):f):a;if(0===e.length)return b;a=e[0];if(1<e.length){const f=\\\"object\\\"===typeof d&&null!==d&&d.hasOwnProperty(a)?d[a]:vb(e[1])?[]:{};b=wb(Array.prototype.slice.call(e,1),b,f)}return vb(a)&&tb(d)?(d=Array.prototype.slice.call(d),d[a]=b,d):ub(a,b,d)}D(wb);D(function(a,b,d){if(a>b)throw Error(\\\"min must not be greater than max in clamp(min, max, value)\\\");if(d>=a&&d<=b)return d;if(d>b)return b;if(d<a)return a});\\nconst xb=Object.keys;function yb(a,b,d=!1){let e=0;const f=Array(b.length);for(;e<b.length;)f[e]=d?a(b[e],e):a(b[e]),e++;return f}function zb(a,b){let d=0;const e=xb(b),f=e.length,g={};for(;d<f;){const h=e[d];g[h]=a(b[h],h,b);d++}return g}function Ab(a,b){if(1===arguments.length)return d=>Ab(a,d);if(!b)throw Error(\\\"Incorrect iterable input\\\");return tb(b)?yb(a,b):zb(a,b)}\\nconst Bb=D(function(a,b,d){if(!tb(d))throw new TypeError(\\\"reduce: list must be array or iterable\\\");let e=0;const f=d.length;for(;e<f;)b=a(b,d[e],e,d),e++;return b});function Cb(a,b){return 1===arguments.length?d=>Cb(a,d):void 0===b||null===b||!0===Number.isNaN(b)?a:b}function Db(a){if(null===a)return\\\"Null\\\";if(void 0===a)return\\\"Undefined\\\";if(Number.isNaN(a))return\\\"NaN\\\";a=Object.prototype.toString.call(a).slice(8,-1);return\\\"AsyncFunction\\\"===a?\\\"Async\\\":a}\\nfunction Eb(a){const b=[];let d;for(;!(d=a.next()).done;)b.push(d.value);return b}function Fb(a,b){if(a.size!==b.size)return!1;a=Eb(a.values());const d=Eb(b.values());return 0===a.filter(e=>{if(!tb(d))throw Error(`Cannot read property 'indexOf' of ${d}`);var f=Db(e);if([\\\"Object\\\",\\\"Array\\\",\\\"NaN\\\",\\\"RegExp\\\"].includes(f)){for(var g=f=-1,{length:h}=d;++f<h&&-1===g;)Gb(d[f],e)&&(g=f);e=g}else e=d.indexOf(e);return-1===e}).length}\\nfunction Hb(a){const b=a.__proto__.toString();return[\\\"Error\\\",\\\"TypeError\\\"].includes(b)?[b,a.message]:[]}\\nfunction Gb(a,b){if(1===arguments.length)return g=>Gb(a,g);var d=Db(a);if(d!==Db(b))return!1;if(\\\"Function\\\"===d)return void 0===a.name?!1:a.name===b.name;if([\\\"NaN\\\",\\\"Undefined\\\",\\\"Null\\\"].includes(d))return!0;if(\\\"Number\\\"===d)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if([\\\"String\\\",\\\"Boolean\\\"].includes(d))return a.toString()===b.toString();if(\\\"Array\\\"===d){d=Array.from(a);const g=Array.from(b);if(d.toString()!==g.toString())return!1;let h=!0;d.forEach((k,n)=>{h&&(k===g[n]||Gb(k,\\ng[n])||(h=!1))});return h}var e=a.constructor!==RegExp?[!1]:[!0,a.toString()],f=b.constructor!==RegExp?[!1]:[!0,b.toString()];if(e[0])return f[0]?e[1]===f[1]:!1;if(f[0])return!1;e=a.toDateString?[!0,a.getTime()]:[!1];f=b.toDateString?[!0,b.getTime()]:[!1];if(e[0])return f[0]?e[1]===f[1]:!1;if(f[0])return!1;e=Hb(a);f=Hb(b);if(e[0])return f[0]?e[0]===f[0]&&e[1]===f[1]:!1;if(\\\"Set\\\"===d)return Fb(a,b);if(\\\"Object\\\"===d){d=Object.keys(a);if(d.length!==Object.keys(b).length)return!1;let g=!0;d.forEach(h=>\\n{if(g){const k=a[h];h=b[h];k===h||Gb(k,h)||(g=!1)}});return g}return!1}function Ib(a,b){if(1===arguments.length)return e=>Ib(a,e);if(null===b||void 0===b)return{};const d={};for(const e in b)d[e]=b[e];delete d[a];return d}function Jb(a,b){if(1===arguments.length)return d=>Jb(a,d);if(b)return b[a]}D(function(a,b,d){return Gb(Jb(a,b),Jb(a,d))});\\nfunction Kb(a,b){if(1===arguments.length)return g=>Kb(a,g);if(null!==b&&void 0!==b){for(var d=b,e=0,f=\\\"string\\\"===typeof a?a.split(\\\".\\\"):a;e<f.length;){if(null===d||void 0===d||null===d[f[e]])return;d=d[f[e]];e++}return d}}D(function(a,b,d){return(...e)=>!0===(\\\"boolean\\\"===typeof a?a:a(...e))?b(...e):d(...e)});function Lb(a,b,d){let e=-1,{length:f}=a;d=d>f?f:d;0>d&&(d+=f);f=b>d?0:d-b>>>0;b>>>=0;for(d=Array(f);++e<f;)d[e]=a[e+b];return d}\\nfunction Mb(a,b){return 1===arguments.length?d=>Mb(a,d):null!=b&&b.constructor===a||b instanceof a}D(function(a,b,d){d=Array.prototype.slice.call(d);return-1===a?d.fill(b,a):d.fill(b,a,a+1)});D(function(a,b,d){return a(d)>a(b)?d:b});function Nb(a,b){return 1===arguments.length?d=>Nb(a,d):Object.assign({},a||{},b||{})}function Ob(a){let b={};Ab(d=>{b=Nb(b,d)},a);return b}D(function(a,b,d){return a(d)<a(b)?d:b});\\nD(function(a,b,d){if(0>a||0>b)throw Error(\\\"Rambda.move does not support negative indexes\\\");if(a>d.length-1||b>d.length-1)return d;const e=Array.prototype.slice.call(d);e[a]=d[b];e[b]=d[a];return e});function Pb(a,b){return 1===arguments.length?d=>Pb(a,d):a*b}const Qb=a=>({x:a,map:b=>Qb(b(a))}),Rb=D(function(a,b,d){return a(e=>Qb(b(e)))(d).x});D(function(a,b,d){return Gb(Kb(a,d),b)});D(function(a,b,d){return Cb(a,Kb(b,d))});\\nfunction Sb(...a){if(0===a.length)throw Error(\\\"pipe requires at least one argument\\\");return(...b)=>{const d=a.slice();if(0<d.length){for(b=d.shift()(...b);0<d.length;)b=d.shift()(b);return b}}}Bb(Pb,1);D(function(a,b,d){return d?d[a]===b:!1});D(function(a,b,d){return Mb(a,d[b])});D(function(a,b,d){return d?Cb(a,d[b]):a});\\nfunction Tb(a,b){if(1===arguments.length)return f=>Tb(a,f);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError(\\\"Both arguments to range must be numbers\\\");if(b<a)return[];const d=b-a,e=Array(d);for(let f=0;f<d;f++)e[f]=a+f;return e}D(function(a,b,d){return d.replace(a,b)});D(function(a,b,d){return Rb(a,sb(b),d)});D(function(a,b,d){return d.slice(a,b)});function Ub(a,b){return 1===arguments.length?d=>Ub(a,d):0>a?b.slice():\\\"string\\\"===typeof b?b.slice(0,a):Lb(b,0,a)}\\nD(function(a,b,d){return a(d)?b(d):d});D(function(a,b,d){return Ub(b.length>d.length?d.length:b.length,b).map((e,f)=>a(e,d[f]))});const Vb=a=>(b,d)=>{const {buffer:e}=a.wasi.memory,f=a.exports.csoundGetMIDIDevList(b,void 0,d?1:0);if(0===f)return[];const g=Ua(Xa),h=a.exports.allocCsMidiDeviceStruct(f);a.exports.csoundGetMIDIDevList(b,h,d?1:0);const k=new Uint8Array(e,h,g*f);b=Tb(0,f).map(n=>Va(Xa,k.subarray(n*g,g)));a.exports.freeCsMidiDeviceStruct(h);return b};Vb.toString=()=>\\\"getMIDIDevList = async (isOutput) => Object;\\\";\\nconst Wb=a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.getRtMidiName(b);d=new Uint8Array(d,b,128);return Fa(z.decode(d))||\\\"\\\"};Wb.toString=()=>\\\"getRtMidiName = async () => String;\\\";const Xb=a=>(b,d,e,f)=>{a.exports.pushMidiMessage(b,d,e,f)};Xb.toString=()=>\\\"midiMessage = async (status, data1, data2) => undefined;\\\";const Yb=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundInputMessage(b,d);a.exports.freeStringMem(d);return b};Yb.toString=()=>\\\"inputMessage = async (scoreEvent) => Number;\\\";const Zb=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundInputMessageAsync(b,d);a.exports.freeStringMem(d);return b};Zb.toString=()=>\\\"inputMessageAsync = async (scoreEvent) => Number;\\\";const $b=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundGetControlChannelWasi(b,d);a.exports.freeStringMem(d);return b};$b.toString=()=>\\\"getControlChannel = async (channelName) => Number;\\\";\\nconst ac=a=>(b,d,e)=>{d=A(a,d);a.exports.csoundSetControlChannel(b,d,e);a.exports.freeStringMem(d)};ac.toString=()=>\\\"setControlChannel = async (channelName, value) => void;\\\";const bc=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundGetStringChannelWasi(b,d);({buffer:e}=a.wasi.memory);var e=new Uint8Array(e,b);e=z.decode(e);e=Fa(e);a.exports.freeStringMem(d);a.exports.freeStringMem(b);return e};bc.toString=()=>\\\"getStringChannel = async (channelName) => String;\\\";\\nconst cc=a=>(b,d,e)=>{d=A(a,d);e=A(a,e);a.exports.csoundSetStringChannel(b,d,e);a.exports.freeStringMem(d);a.exports.freeStringMem(e)};cc.toString=()=>\\\"setStringChannel = async (channelName, value) => void;\\\";const dc=a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.csoundGetOutputName(b);d=new Uint8Array(d,b,64);return Fa(z.decode(d))||\\\"\\\"};dc.toString=()=>\\\"getOutputName = async () => String;\\\";const ec=a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.csoundGetInputName(b);d=new Uint8Array(d,b,64);return Fa(z.decode(d))||\\\"\\\"};ec.toString=()=>\\\"getInputName = async (csound) => String;\\\";const fc=a=>(b,d,e)=>{d=A(a,d);e=A(a,e);b=a.exports.csoundAppendEnv(b,d,e);a.exports.freeStringMem(d);a.exports.freeStringMem(e);return b};fc.toString=()=>\\\"appendEnv = async (csound, variable, value) => Number;\\\";const gc=a=>b=>a.exports.csoundIsScorePending(b);gc.toString=()=>\\\"isScorePending = async () => Number;\\\";const hc=a=>(b,d)=>a.exports.csoundSetScorePending(b,d);hc.toString=()=>\\\"setScorePending = async (pending) => Number;\\\";const ic=a=>(b,d)=>{d=A(a,d);b=a.exports.csoundReadScore(b,d);a.exports.freeStringMem(d);return b};ic.toString=()=>\\\"readScore = async (score) => Number;\\\";const jc=a=>b=>a.exports.csoundGetScoreTime(b);jc.toString=()=>\\\"getScoreTime = async () => Number;\\\";const kc=a=>b=>a.exports.csoundGetScoreOffsetSeconds(b);\\nkc.toString=()=>\\\"getScoreOffsetSeconds = async () => Number;\\\";const lc=a=>(b,d)=>a.exports.csoundSetScoreOffsetSeconds(b,d);lc.toString=()=>\\\"setScoreOffsetSeconds = async () => Number;\\\";const mc=a=>b=>a.exports.csoundRewindScore(b);mc.toString=()=>\\\"rewindScore = async () => undefined;\\\";const nc=a=>(b,d)=>a.exports.csoundTableLength(b,d);nc.toString=()=>\\\"tableLength = async (tableNum) => Number;\\\";const oc=a=>(b,d,e)=>a.exports.csoundTableGet(b,d,e);oc.toString=()=>\\\"tableGet = async (tableNum, tableIndex) => Number;\\\";const pc=a=>(b,d,e,f)=>a.exports.csoundTableSet(b,d,e,f);pc.toString=()=>\\\"tableSet = async (tableNum, tableIndex, value) => undefined;\\\";\\nconst qc=a=>(b,d,e)=>{const f=a.exports.allocFloatArray(e.length);(new Float64Array(a.wasi.memory.buffer,f,e.length)).set(e);a.exports.csoundTableCopyIn(b,d,f);a.exports.freeFloatArrayMem(f)};qc.toString=()=>\\\"tableCopyIn = async (tableNum, float64Array) => undefined;\\\";const rc=a=>(b,d)=>{var e=a.exports.csoundTableLength(b,d);if(0<e){const f=a.exports.allocFloatArray(e);a.exports.csoundTableCopyOut(b,d,f);({buffer:b}=a.wasi.memory);e=new Float64Array(b,f,e);a.exports.freeFloatArrayMem(f);return Float64Array.from(e)}};\\nrc.toString=()=>\\\"tableCopyOut = async (tableNum) => ?Float64Array;\\\";rc.toString=rc.toString;const sc=a=>(b,d)=>{const e=a.exports.allocFloatArray(1024);a.exports.csoundGetTableArgs(b,e,d);({buffer:b}=a.wasi.memory);b=new Float64Array(b,e,1024);a.exports.freeFloatArrayMem(e);return b};sc.toString=()=>\\\"getTableArgs = async (tableNum) => ?Float64Array;\\\";const tc=a=>(b,d)=>a.exports.csoundIsNamedGEN(b,d);tc.toString=()=>\\\"isNamedGEN = async (tableNum) => number;\\\";\\nconst uc=a=>(b,d)=>{var e=a.exports.csoundIsNamedGEN(b,d);if(0<e){const f=a.exports.allocStringMem(e);a.exports.csoundGetNamedGEN(b,f,d,e);({buffer:b}=a.wasi.memory);e=new Uint8Array(b,f,e);return z.decode(e)}};uc.toString=()=>\\\"getNamedGEN = async (tableNum) => ?string;\\\";function vc(a){return(b,d,e)=>{b=\\\"string\\\"===typeof e?Ea.encode(e):e;a.wasi.writeFile(d,b)}}vc.toString=()=>\\\"async (path, data) => void\\\";function wc(a){return(b,d,e)=>{b=\\\"string\\\"===typeof e?Ea.encode(e):e;a.wasi.appendFile(d,b)}}wc.toString=()=>\\\"async (path, data) => void\\\";function xc(a){return(b,d)=>a.wasi.readFile(d)}xc.toString=()=>\\\"async (path) => ?Uint8Array\\\";function yc(a){return(b,d)=>a.wasi.unlink(d)}yc.toString=()=>\\\"async (path) => void\\\";function zc(a){return(b,d)=>a.wasi.readdir(d)}\\nzc.toString=()=>\\\"async (path) => string[]\\\";function Ac(a){return(b,d)=>a.wasi.mkdir(d)}Ac.toString=()=>\\\"async (path) => void\\\";var G={};G.appendFile=wc;G.mkdir=Ac;G.readFile=xc;G.readdir=zc;G.unlink=yc;G.writeFile=vc;const Bc={csoundCreate:za,csoundDestroy:Aa,csoundGetAPIVersion:Ba,csoundGetVersion:Ca,csoundInitialize:Da,csoundParseOrc:Ga,csoundCompileTree:Ha,csoundCompileOrc:Ia,csoundEvalCode:Ja,csoundStart:Ka,csoundCompileCsd:La,csoundCompileCsdText:Ma,csoundPerform:Na,csoundPerformKsmps:Oa,csoundPerformBuffer:Pa,csoundStop:Qa,csoundCleanup:Ra,csoundReset:Sa,csoundGetSr:Ya,csoundGetKr:Za,csoundGetKsmps:$a,csoundGetNchnls:ab,csoundGetNchnlsInput:bb,csoundGet0dBFS:cb,csoundGetA4:db,csoundGetCurrentTimeSamples:eb,\\ncsoundGetSizeOfMYFLT:fb,csoundSetOption:gb,csoundSetParams:hb,csoundGetParams:ib,csoundGetDebug:jb,csoundSetDebug:kb,csoundGetInputBufferSize:lb,csoundGetOutputBufferSize:mb,csoundGetInputBuffer:nb,csoundGetOutputBuffer:pb,csoundGetSpin:qb,csoundGetSpout:rb,csoundGetMIDIDevList:Vb,csoundSetMidiCallbacks:a=>b=>{a.exports.csoundSetMidiCallbacks(b)},csoundGetRtMidiName:Wb,csoundGetMidiOutFileName:a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.getMidiOutFileName(b);d=new Uint8Array(d,b,128);b&&0<b.length&&\\na.exports.freeStringMem(b);return Fa(z.decode(d))||\\\"\\\"},csoundPushMidiMessage:Xb,_isRequestingRtMidiInput:a=>b=>a.exports.isRequestingRtMidiInput(b),csoundInputMessage:Yb,csoundInputMessageAsync:Zb,csoundGetControlChannel:$b,csoundSetControlChannel:ac,csoundGetStringChannel:bc,csoundSetStringChannel:cc,csoundGetInputName:ec,csoundGetOutputName:dc,csoundAppendEnv:fc,csoundShouldDaemonize:a=>b=>a.exports.csoundShouldDaemonize(b),csoundIsScorePending:gc,csoundSetScorePending:hc,csoundReadScore:ic,csoundGetScoreTime:jc,\\ncsoundGetScoreOffsetSeconds:kc,csoundSetScoreOffsetSeconds:lc,csoundRewindScore:mc,csoundTableLength:nc,csoundTableGet:oc,csoundTableSet:pc,csoundTableCopyIn:qc,csoundTableCopyOut:rc,csoundGetTable:rc,csoundGetTableArgs:sc,csoundIsNamedGEN:tc,csoundGetNamedGEN:uc,fs:G};function Cc(a){return Ob([Bb((b,d)=>ub(d,Bc[d](a),b),{},Object.keys(Ib(\\\"fs\\\")(Bc))),Bb((b,d)=>ub(d,Bc.fs[d](a),b),{},Object.keys(G))])};\\\"undefined\\\"===typeof c.global&&(c.global={});\\\"undefined\\\"===typeof c.global.BigInt&&(c.global.BigInt=\\\"undefined\\\"!==typeof BigInt?BigInt:Number);const Dc=c.global.BigInt(1),Ec=c.global.BigInt(2),Fc=c.global.BigInt(4),Gc=c.global.BigInt(8),Hc=c.global.BigInt(16),Ic=c.global.BigInt(32),Jc=c.global.BigInt(64),Kc=c.global.BigInt(128),Lc=c.global.BigInt(256);c.global.BigInt(512);c.global.BigInt(1024);c.global.BigInt(2048);c.global.BigInt(4096);c.global.BigInt(8192);c.global.BigInt(16384);c.global.BigInt(32768);\\nc.global.BigInt(65536);c.global.BigInt(131072);c.global.BigInt(262144);c.global.BigInt(524288);c.global.BigInt(1048576);const Mc=c.global.BigInt(2097152),Nc=c.global.BigInt(4194304),Oc=c.global.BigInt(8388608);c.global.BigInt(16777216);c.global.BigInt(33554432);c.global.BigInt(67108864);const Pc=c.global.BigInt(134217728);c.global.BigInt(268435456);const Qc=Dc|Ec|Fc|Gc|Hc|Ic|Jc|Kc|Lc|Mc|Nc|Oc|Pc,Rc=c.global.BigInt(0);c.global.BigInt(0);c.debug={};function Sc(a,b){if(Error.captureStackTrace)Error.captureStackTrace(this,Sc);else{const d=Error().stack;d&&(this.stack=d)}a&&(this.message=String(a));void 0!==b&&(this.cause=b);this.reportErrorToServer=!0}c.inherits(Sc,Error);Sc.prototype.name=\\\"CustomError\\\";c.debug.Error=Sc;c.dom={};c.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};c.asserts={};c.asserts.ENABLE_ASSERTS=c.DEBUG;c.asserts.AssertionError=function(a,b){Sc.call(this,c.asserts.subs_(a,b));this.messagePattern=a};c.inherits(c.asserts.AssertionError,Sc);c.asserts.AssertionError.prototype.name=\\\"AssertionError\\\";c.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};c.asserts.errorHandler_=c.asserts.DEFAULT_ERROR_HANDLER;c.asserts.subs_=function(a,b){a=a.split(\\\"%s\\\");for(var d=\\\"\\\",e=a.length-1,f=0;f<e;f++)d+=a[f]+(f<b.length?b[f]:\\\"%s\\\");return d+a[e]};\\nc.asserts.doAssertFailure_=function(a,b,d,e){var f=\\\"Assertion failed\\\";if(d){f+=\\\": \\\"+d;var g=e}else a&&(f+=\\\": \\\"+a,g=b);a=new c.asserts.AssertionError(\\\"\\\"+f,g||[]);c.asserts.errorHandler_(a)};c.asserts.setErrorHandler=function(a){c.asserts.ENABLE_ASSERTS&&(c.asserts.errorHandler_=a)};c.asserts.assert=function(a,b,d){c.asserts.ENABLE_ASSERTS&&!a&&c.asserts.doAssertFailure_(\\\"\\\",null,b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertExists=function(a,b,d){c.asserts.ENABLE_ASSERTS&&null==a&&c.asserts.doAssertFailure_(\\\"Expected to exist: %s.\\\",[a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.fail=function(a,b){c.asserts.ENABLE_ASSERTS&&c.asserts.errorHandler_(new c.asserts.AssertionError(\\\"Failure\\\"+(a?\\\": \\\"+a:\\\"\\\"),Array.prototype.slice.call(arguments,1)))};\\nc.asserts.assertNumber=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"number\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected number but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertString=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"string\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected string but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertFunction=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"function\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected function but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertObject=function(a,b,d){c.asserts.ENABLE_ASSERTS&&!c.isObject(a)&&c.asserts.doAssertFailure_(\\\"Expected object but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertArray=function(a,b,d){c.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&c.asserts.doAssertFailure_(\\\"Expected array but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertBoolean=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"boolean\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected boolean but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertElement=function(a,b,d){!c.asserts.ENABLE_ASSERTS||c.isObject(a)&&a.nodeType==c.dom.NodeType.ELEMENT||c.asserts.doAssertFailure_(\\\"Expected Element but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertInstanceof=function(a,b,d,e){!c.asserts.ENABLE_ASSERTS||a instanceof b||c.asserts.doAssertFailure_(\\\"Expected instanceof %s but got %s.\\\",[c.asserts.getType_(b),c.asserts.getType_(a)],d,Array.prototype.slice.call(arguments,3));return a};\\nc.asserts.assertFinite=function(a,b,d){!c.asserts.ENABLE_ASSERTS||\\\"number\\\"==typeof a&&isFinite(a)||c.asserts.doAssertFailure_(\\\"Expected %s to be a finite number but it is not.\\\",[a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||\\\"unknown type name\\\":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?\\\"null\\\":typeof a};c.array={};c.NATIVE_ARRAY_PROTOTYPES=c.TRUSTED_SITE;const H=2012<c.FEATURESET_YEAR;c.array.ASSUME_NATIVE_FUNCTIONS=H;function Tc(a){return a[a.length-1]}c.array.peek=Tc;c.array.last=Tc;\\nconst Uc=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.indexOf)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,d)}:function(a,b,d){d=null==d?0:0>d?Math.max(0,a.length+d):d;if(\\\"string\\\"===typeof a)return\\\"string\\\"!==typeof b||1!=b.length?-1:a.indexOf(b,d);for(;d<a.length;d++)if(d in a&&a[d]===b)return d;return-1};c.array.indexOf=Uc;\\nconst Vc=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.lastIndexOf)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==d?a.length-1:d)}:function(a,b,d){d=null==d?a.length-1:d;0>d&&(d=Math.max(0,a.length+d));if(\\\"string\\\"===typeof a)return\\\"string\\\"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,d);for(;0<=d;d--)if(d in a&&a[d]===b)return d;return-1};c.array.lastIndexOf=Vc;\\nconst Wc=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.forEach)?function(a,b,d){c.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,d)}:function(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)g in f&&b.call(d,f[g],g,a)};c.array.forEach=Wc;function Xc(a,b,d){var e=a.length;const f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(--e;0<=e;--e)e in f&&b.call(d,f[e],e,a)}c.array.forEachRight=Xc;\\nc.array.filter=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.filter)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,d)}:function(a,b,d){const e=a.length,f=[];let g=0;const h=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let k=0;k<e;k++)if(k in h){const n=h[k];b.call(d,n,k,a)&&(f[g++]=n)}return f};\\nconst Yc=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.map)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,d)}:function(a,b,d){const e=a.length,f=Array(e),g=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let h=0;h<e;h++)h in g&&(f[h]=b.call(d,g[h],h,a));return f};c.array.map=Yc;\\nc.array.reduce=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.reduce)?function(a,b,d,e){c.asserts.assert(null!=a.length);e&&(b=c.bind(b,e));return Array.prototype.reduce.call(a,b,d)}:function(a,b,d,e){let f=d;Wc(a,function(g,h){f=b.call(e,f,g,h,a)});return f};\\nc.array.reduceRight=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.reduceRight)?function(a,b,d,e){c.asserts.assert(null!=a.length);c.asserts.assert(null!=b);e&&(b=c.bind(b,e));return Array.prototype.reduceRight.call(a,b,d)}:function(a,b,d,e){let f=d;Xc(a,function(g,h){f=b.call(e,f,g,h,a)});return f};\\nc.array.some=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.some)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,d)}:function(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)if(g in f&&b.call(d,f[g],g,a))return!0;return!1};\\nc.array.every=c.NATIVE_ARRAY_PROTOTYPES&&(H||Array.prototype.every)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,d)}:function(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)if(g in f&&!b.call(d,f[g],g,a))return!1;return!0};c.array.count=function(a,b,d){let e=0;Wc(a,function(f,g,h){b.call(d,f,g,h)&&++e},d);return e};c.array.find=function(a,b,d){b=Zc(a,b,d);return 0>b?null:\\\"string\\\"===typeof a?a.charAt(b):a[b]};\\nfunction Zc(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)if(g in f&&b.call(d,f[g],g,a))return g;return-1}c.array.findIndex=Zc;c.array.findRight=function(a,b,d){b=$c(a,b,d);return 0>b?null:\\\"string\\\"===typeof a?a.charAt(b):a[b]};function $c(a,b,d){var e=a.length;const f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(--e;0<=e;e--)if(e in f&&b.call(d,f[e],e,a))return e;return-1}c.array.findIndexRight=$c;function ad(a,b){return 0<=Uc(a,b)}c.array.contains=ad;\\nc.array.isEmpty=function(a){return 0==a.length};c.array.clear=function(a){if(!Array.isArray(a))for(let b=a.length-1;0<=b;b--)delete a[b];a.length=0};c.array.insert=function(a,b){ad(a,b)||a.push(b)};function bd(a,b,d){cd(a,d,0,b)}c.array.insertAt=bd;c.array.insertArrayAt=function(a,b,d){c.partial(cd,a,d,0).apply(null,b)};c.array.insertBefore=function(a,b,d){let e;2==arguments.length||0>(e=Uc(a,d))?a.push(b):bd(a,b,e)};c.array.remove=function(a,b){b=Uc(a,b);let d;(d=0<=b)&&dd(a,b);return d};\\nc.array.removeLast=function(a,b){b=Vc(a,b);return 0<=b?(dd(a,b),!0):!1};function dd(a,b){c.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length}c.array.removeAt=dd;c.array.removeIf=function(a,b,d){b=Zc(a,b,d);return 0<=b?(dd(a,b),!0):!1};c.array.removeAllIf=function(a,b,d){let e=0;Xc(a,function(f,g){b.call(d,f,g,a)&&dd(a,g)&&e++});return e};function ed(a){return Array.prototype.concat.apply([],arguments)}c.array.concat=ed;\\nc.array.join=function(a){return Array.prototype.concat.apply([],arguments)};function fd(a){const b=a.length;if(0<b){const d=Array(b);for(let e=0;e<b;e++)d[e]=a[e];return d}return[]}c.array.toArray=fd;c.array.clone=fd;c.array.extend=function(a,b){for(let d=1;d<arguments.length;d++){const e=arguments[d];if(c.isArrayLike(e)){const f=a.length||0,g=e.length||0;a.length=f+g;for(let h=0;h<g;h++)a[f+h]=e[h]}else a.push(e)}};\\nfunction cd(a,b,d,e){c.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,gd(arguments,1))}c.array.splice=cd;function gd(a,b,d){c.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,d)}c.array.slice=gd;\\nc.array.removeDuplicates=function(a,b,d){function e(k){return c.isObject(k)?\\\"o\\\"+c.getUid(k):(typeof k).charAt(0)+k}b=b||a;d=d||e;let f=0,g=0;const h={};for(;g<a.length;){const k=a[g++],n=d(k);Object.prototype.hasOwnProperty.call(h,n)||(h[n]=!0,b[f++]=k)}b.length=f};function hd(a,b,d){return id(a,d||I,!1,b)}c.array.binarySearch=hd;c.array.binarySelect=function(a,b,d){return id(a,b,!0,void 0,d)};\\nfunction id(a,b,d,e,f){let g=0,h=a.length,k;for(;g<h;){const n=g+(h-g>>>1);let l;l=d?b.call(f,a[n],n,a):b(e,a[n]);0<l?g=n+1:(h=n,k=!l)}return k?g:-g-1}function jd(a,b){a.sort(b||I)}c.array.sort=jd;c.array.stableSort=function(a,b){const d=Array(a.length);for(let f=0;f<a.length;f++)d[f]={index:f,value:a[f]};const e=b||I;jd(d,function(f,g){return e(f.value,g.value)||f.index-g.index});for(b=0;b<a.length;b++)a[b]=d[b].value};function kd(a,b,d){const e=d||I;jd(a,function(f,g){return e(b(f),b(g))})}\\nc.array.sortByKey=kd;c.array.sortObjectsByKey=function(a,b,d){kd(a,function(e){return e[b]},d)};c.array.isSorted=function(a,b,d){b=b||I;for(let e=1;e<a.length;e++){const f=b(a[e-1],a[e]);if(0<f||0==f&&d)return!1}return!0};c.array.equals=function(a,b,d){if(!c.isArrayLike(a)||!c.isArrayLike(b)||a.length!=b.length)return!1;const e=a.length;d=d||ld;for(let f=0;f<e;f++)if(!d(a[f],b[f]))return!1;return!0};\\nc.array.compare3=function(a,b,d){d=d||I;const e=Math.min(a.length,b.length);for(let f=0;f<e;f++){const g=d(a[f],b[f]);if(0!=g)return g}return I(a.length,b.length)};function I(a,b){return a>b?1:a<b?-1:0}c.array.defaultCompare=I;c.array.inverseDefaultCompare=function(a,b){return-I(a,b)};function ld(a,b){return a===b}c.array.defaultCompareEquality=ld;c.array.binaryInsert=function(a,b,d){d=hd(a,b,d);return 0>d?(bd(a,b,-(d+1)),!0):!1};\\nc.array.binaryRemove=function(a,b,d){b=hd(a,b,d);return 0<=b?dd(a,b):!1};c.array.bucket=function(a,b,d){const e={};for(let f=0;f<a.length;f++){const g=a[f],h=b.call(d,g,f,a);void 0!==h&&(e[h]||(e[h]=[])).push(g)}return e};c.array.bucketToMap=function(a,b){const d=new Map;for(let e=0;e<a.length;e++){const f=a[e],g=b(f,e,a);if(void 0!==g){let h=d.get(g);h||(h=[],d.set(g,h));h.push(f)}}return d};c.array.toObject=function(a,b,d){const e={};Wc(a,function(f,g){e[b.call(d,f,g,a)]=f});return e};\\nc.array.toMap=function(a,b){const d=new Map;for(let e=0;e<a.length;e++){const f=a[e];d.set(b(f,e,a),f)}return d};c.array.range=function(a,b,d){const e=[];let f=0,g=a;d=d||1;void 0!==b&&(f=a,g=b);if(0>d*(g-f))return[];if(0<d)for(a=f;a<g;a+=d)e.push(a);else for(a=f;a>g;a+=d)e.push(a);return e};c.array.repeat=function(a,b){const d=[];for(let e=0;e<b;e++)d[e]=a;return d};\\nfunction md(a){const b=[];for(let e=0;e<arguments.length;e++){const f=arguments[e];if(Array.isArray(f))for(let g=0;g<f.length;g+=8192){var d=gd(f,g,g+8192);d=md.apply(null,d);for(let h=0;h<d.length;h++)b.push(d[h])}else b.push(f)}return b}c.array.flatten=md;c.array.rotate=function(a,b){c.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};\\nc.array.moveItem=function(a,b,d){c.asserts.assert(0<=b&&b<a.length);c.asserts.assert(0<=d&&d<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,d,0,b[0])};c.array.zip=function(a){if(!arguments.length)return[];const b=[];let d=arguments[0].length;for(var e=1;e<arguments.length;e++)arguments[e].length<d&&(d=arguments[e].length);for(e=0;e<d;e++){const f=[];for(let g=0;g<arguments.length;g++)f.push(arguments[g][e]);b.push(f)}return b};\\nc.array.shuffle=function(a,b){b=b||Math.random;for(let d=a.length-1;0<d;d--){const e=Math.floor(b()*(d+1)),f=a[d];a[d]=a[e];a[e]=f}};c.array.copyByIndex=function(a,b){const d=[];Wc(b,function(e){d.push(a[e])});return d};c.array.concatMap=function(a,b,d){return ed.apply([],Yc(a,b,d))};c.dom.asserts={};c.dom.asserts.assertIsLocation=function(a){if(c.asserts.ENABLE_ASSERTS){var b=c.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&c.asserts.fail(\\\"Argument is not a Location (or a non-Element mock); got: %s\\\",c.dom.asserts.debugStringForType_(a))}return a};\\nc.dom.asserts.assertIsElementType_=function(a,b){if(c.asserts.ENABLE_ASSERTS){var d=c.dom.asserts.getWindow_(a);d&&\\\"undefined\\\"!=typeof d[b]&&(a&&(a instanceof d[b]||!(a instanceof d.Location||a instanceof d.Element))||c.asserts.fail(\\\"Argument is not a %s (or a non-Element, non-Location mock); got: %s\\\",b,c.dom.asserts.debugStringForType_(a)))}return a};c.dom.asserts.assertIsHTMLAnchorElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLAnchorElement\\\")};\\nc.dom.asserts.assertIsHTMLButtonElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLButtonElement\\\")};c.dom.asserts.assertIsHTMLLinkElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLLinkElement\\\")};c.dom.asserts.assertIsHTMLImageElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLImageElement\\\")};c.dom.asserts.assertIsHTMLAudioElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLAudioElement\\\")};\\nc.dom.asserts.assertIsHTMLVideoElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLVideoElement\\\")};c.dom.asserts.assertIsHTMLInputElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLInputElement\\\")};c.dom.asserts.assertIsHTMLTextAreaElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLTextAreaElement\\\")};c.dom.asserts.assertIsHTMLCanvasElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLCanvasElement\\\")};\\nc.dom.asserts.assertIsHTMLEmbedElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLEmbedElement\\\")};c.dom.asserts.assertIsHTMLFormElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLFormElement\\\")};c.dom.asserts.assertIsHTMLFrameElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLFrameElement\\\")};c.dom.asserts.assertIsHTMLIFrameElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLIFrameElement\\\")};\\nc.dom.asserts.assertIsHTMLObjectElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLObjectElement\\\")};c.dom.asserts.assertIsHTMLScriptElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLScriptElement\\\")};c.dom.asserts.debugStringForType_=function(a){if(c.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return\\\"<object could not be stringified>\\\"}else return void 0===a?\\\"undefined\\\":null===a?\\\"null\\\":typeof a};\\nc.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,d=b&&(b.defaultView||b.parentWindow);d=d||c.global;if(d.Element&&d.Location)return d}catch(e){}return null};c.functions={};c.functions.constant=function(a){return function(){return a}};c.functions.FALSE=function(){return!1};c.functions.TRUE=function(){return!0};c.functions.NULL=function(){return null};c.functions.UNDEFINED=function(){};c.functions.EMPTY=c.functions.UNDEFINED;c.functions.identity=function(a){return a};c.functions.error=function(a){return function(){throw Error(a);}};c.functions.fail=function(a){return function(){throw a;}};\\nc.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};c.functions.nth=function(a){return function(){return arguments[a]}};c.functions.partialRight=function(a,b){const d=Array.prototype.slice.call(arguments,1);return function(){let e=this;e===c.global&&(e=void 0);const f=Array.prototype.slice.call(arguments);f.push.apply(f,d);return a.apply(e,f)}};c.functions.withReturnValue=function(a,b){return c.functions.sequence(a,c.functions.constant(b))};\\nc.functions.equalTo=function(a,b){return function(d){return b?a==d:a===d}};c.functions.compose=function(a,b){const d=arguments,e=d.length;return function(){let f;e&&(f=d[e-1].apply(this,arguments));for(let g=e-2;0<=g;g--)f=d[g].call(this,f);return f}};c.functions.sequence=function(a){const b=arguments,d=b.length;return function(){let e;for(let f=0;f<d;f++)e=b[f].apply(this,arguments);return e}};\\nc.functions.and=function(a){const b=arguments,d=b.length;return function(){for(let e=0;e<d;e++)if(!b[e].apply(this,arguments))return!1;return!0}};c.functions.or=function(a){const b=arguments,d=b.length;return function(){for(let e=0;e<d;e++)if(b[e].apply(this,arguments))return!0;return!1}};c.functions.not=function(a){return function(){return!a.apply(this,arguments)}};\\nc.functions.create=function(a,b){function d(){}d.prototype=a.prototype;const e=new d;a.apply(e,Array.prototype.slice.call(arguments,1));return e};c.functions.CACHE_RETURN_VALUE=!0;c.functions.cacheReturnValue=function(a){let b=!1,d;return function(){if(!c.functions.CACHE_RETURN_VALUE)return a();b||(d=a(),b=!0);return d}};c.functions.once=function(a){let b=a;return function(){if(b){const d=b;b=null;d()}}};\\nc.functions.debounce=function(a,b,d){let e=0;return function(f){c.global.clearTimeout(e);const g=arguments;e=c.global.setTimeout(function(){a.apply(d,g)},b)}};c.functions.throttle=function(a,b,d){function e(){g=c.global.setTimeout(f,b);let n=k;k=[];a.apply(d,n)}function f(){g=0;h&&(h=!1,e())}let g=0,h=!1,k=[];return function(n){k=arguments;g?h=!0:e()}};c.functions.rateLimit=function(a,b,d){function e(){f=0}let f=0;return function(g){f||(f=c.global.setTimeout(e,b),a.apply(d,arguments))}};\\nc.functions.isFunction=a=>\\\"function\\\"===typeof a;c.string={};c.string.TypedString=function(){};c.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===c.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||\\\"\\\";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=c.string.Const.TYPE_MARKER_};c.string.Const.prototype.implementsGoogStringTypedString=!0;c.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};\\nc.DEBUG&&(c.string.Const.prototype.toString=function(){return\\\"Const{\\\"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+\\\"}\\\"});c.string.Const.unwrap=function(a){if(a instanceof c.string.Const&&a.constructor===c.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===c.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;c.asserts.fail(\\\"expected object of type Const, got '\\\"+a+\\\"'\\\");return\\\"type_error:Const\\\"};\\nc.string.Const.from=function(a){return new c.string.Const(c.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};c.string.Const.TYPE_MARKER_={};c.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};c.string.Const.EMPTY=c.string.Const.from(\\\"\\\");c.i18n={};c.i18n.bidi={};c.i18n.bidi.FORCE_RTL=!1;\\nc.i18n.bidi.IS_RTL=c.i18n.bidi.FORCE_RTL||(\\\"ar\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"fa\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"he\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"iw\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"ps\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"sd\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"ug\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"ur\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"yi\\\"==c.LOCALE.substring(0,2).toLowerCase())&&(2==c.LOCALE.length||\\\"-\\\"==c.LOCALE.substring(2,3)||\\\"_\\\"==\\nc.LOCALE.substring(2,3))||3<=c.LOCALE.length&&\\\"ckb\\\"==c.LOCALE.substring(0,3).toLowerCase()&&(3==c.LOCALE.length||\\\"-\\\"==c.LOCALE.substring(3,4)||\\\"_\\\"==c.LOCALE.substring(3,4))||7<=c.LOCALE.length&&(\\\"-\\\"==c.LOCALE.substring(2,3)||\\\"_\\\"==c.LOCALE.substring(2,3))&&(\\\"adlm\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"arab\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"hebr\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"nkoo\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"rohg\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"thaa\\\"==c.LOCALE.substring(3,\\n7).toLowerCase())||8<=c.LOCALE.length&&(\\\"-\\\"==c.LOCALE.substring(3,4)||\\\"_\\\"==c.LOCALE.substring(3,4))&&(\\\"adlm\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"arab\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"hebr\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"nkoo\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"rohg\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"thaa\\\"==c.LOCALE.substring(4,8).toLowerCase());c.i18n.bidi.Format={LRE:\\\"\\\\u202a\\\",RLE:\\\"\\\\u202b\\\",PDF:\\\"\\\\u202c\\\",LRM:\\\"\\\\u200e\\\",RLM:\\\"\\\\u200f\\\"};c.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};\\nc.i18n.bidi.RIGHT=\\\"right\\\";c.i18n.bidi.LEFT=\\\"left\\\";c.i18n.bidi.I18N_RIGHT=c.i18n.bidi.IS_RTL?c.i18n.bidi.LEFT:c.i18n.bidi.RIGHT;c.i18n.bidi.I18N_LEFT=c.i18n.bidi.IS_RTL?c.i18n.bidi.RIGHT:c.i18n.bidi.LEFT;c.i18n.bidi.toDir=function(a,b){return\\\"number\\\"==typeof a?0<a?c.i18n.bidi.Dir.LTR:0>a?c.i18n.bidi.Dir.RTL:b?null:c.i18n.bidi.Dir.NEUTRAL:null==a?null:a?c.i18n.bidi.Dir.RTL:c.i18n.bidi.Dir.LTR};c.i18n.bidi.ltrChars_=\\\"A-Za-z\\\\u00c0-\\\\u00d6\\\\u00d8-\\\\u00f6\\\\u00f8-\\\\u02b8\\\\u0300-\\\\u0590\\\\u0900-\\\\u1fff\\\\u200e\\\\u2c00-\\\\ud801\\\\ud804-\\\\ud839\\\\ud83c-\\\\udbff\\\\uf900-\\\\ufb1c\\\\ufe00-\\\\ufe6f\\\\ufefd-\\\\uffff\\\";\\nc.i18n.bidi.rtlChars_=\\\"\\\\u0591-\\\\u06ef\\\\u06fa-\\\\u08ff\\\\u200f\\\\ud802-\\\\ud803\\\\ud83a-\\\\ud83b\\\\ufb1d-\\\\ufdff\\\\ufe70-\\\\ufefc\\\";c.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;c.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(c.i18n.bidi.htmlSkipReg_,\\\"\\\"):a};c.i18n.bidi.rtlCharReg_=new RegExp(\\\"[\\\"+c.i18n.bidi.rtlChars_+\\\"]\\\");c.i18n.bidi.ltrCharReg_=new RegExp(\\\"[\\\"+c.i18n.bidi.ltrChars_+\\\"]\\\");c.i18n.bidi.hasAnyRtl=function(a,b){return c.i18n.bidi.rtlCharReg_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};\\nc.i18n.bidi.hasRtlChar=c.i18n.bidi.hasAnyRtl;c.i18n.bidi.hasAnyLtr=function(a,b){return c.i18n.bidi.ltrCharReg_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.ltrRe_=new RegExp(\\\"^[\\\"+c.i18n.bidi.ltrChars_+\\\"]\\\");c.i18n.bidi.rtlRe_=new RegExp(\\\"^[\\\"+c.i18n.bidi.rtlChars_+\\\"]\\\");c.i18n.bidi.isRtlChar=function(a){return c.i18n.bidi.rtlRe_.test(a)};c.i18n.bidi.isLtrChar=function(a){return c.i18n.bidi.ltrRe_.test(a)};c.i18n.bidi.isNeutralChar=function(a){return!c.i18n.bidi.isLtrChar(a)&&!c.i18n.bidi.isRtlChar(a)};\\nc.i18n.bidi.ltrDirCheckRe_=new RegExp(\\\"^[^\\\"+c.i18n.bidi.rtlChars_+\\\"]*[\\\"+c.i18n.bidi.ltrChars_+\\\"]\\\");c.i18n.bidi.rtlDirCheckRe_=new RegExp(\\\"^[^\\\"+c.i18n.bidi.ltrChars_+\\\"]*[\\\"+c.i18n.bidi.rtlChars_+\\\"]\\\");c.i18n.bidi.startsWithRtl=function(a,b){return c.i18n.bidi.rtlDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.isRtlText=c.i18n.bidi.startsWithRtl;c.i18n.bidi.startsWithLtr=function(a,b){return c.i18n.bidi.ltrDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};\\nc.i18n.bidi.isLtrText=c.i18n.bidi.startsWithLtr;c.i18n.bidi.isRequiredLtrRe_=/^http:\\\\/\\\\/.*/;c.i18n.bidi.isNeutralText=function(a,b){a=c.i18n.bidi.stripHtmlIfNeeded_(a,b);return c.i18n.bidi.isRequiredLtrRe_.test(a)||!c.i18n.bidi.hasAnyLtr(a)&&!c.i18n.bidi.hasAnyRtl(a)};c.i18n.bidi.ltrExitDirCheckRe_=new RegExp(\\\"[\\\"+c.i18n.bidi.ltrChars_+\\\"][^\\\"+c.i18n.bidi.rtlChars_+\\\"]*$\\\");c.i18n.bidi.rtlExitDirCheckRe_=new RegExp(\\\"[\\\"+c.i18n.bidi.rtlChars_+\\\"][^\\\"+c.i18n.bidi.ltrChars_+\\\"]*$\\\");\\nc.i18n.bidi.endsWithLtr=function(a,b){return c.i18n.bidi.ltrExitDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.isLtrExitText=c.i18n.bidi.endsWithLtr;c.i18n.bidi.endsWithRtl=function(a,b){return c.i18n.bidi.rtlExitDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.isRtlExitText=c.i18n.bidi.endsWithRtl;c.i18n.bidi.rtlLocalesRe_=RegExp(\\\"^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)\\\",\\\"i\\\");\\nc.i18n.bidi.isRtlLanguage=function(a){return c.i18n.bidi.rtlLocalesRe_.test(a)};c.i18n.bidi.bracketGuardTextRe_=/(\\\\(.*?\\\\)+)|(\\\\[.*?\\\\]+)|(\\\\{.*?\\\\}+)|(<.*?>+)/g;c.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?c.i18n.bidi.hasAnyRtl(a):b)?c.i18n.bidi.Format.RLM:c.i18n.bidi.Format.LRM;return a.replace(c.i18n.bidi.bracketGuardTextRe_,b+\\\"$&\\\"+b)};c.i18n.bidi.enforceRtlInHtml=function(a){return\\\"<\\\"==a.charAt(0)?a.replace(/<\\\\w+/,\\\"$& dir=rtl\\\"):\\\"\\\\n<span dir=rtl>\\\"+a+\\\"</span>\\\"};\\nc.i18n.bidi.enforceRtlInText=function(a){return c.i18n.bidi.Format.RLE+a+c.i18n.bidi.Format.PDF};c.i18n.bidi.enforceLtrInHtml=function(a){return\\\"<\\\"==a.charAt(0)?a.replace(/<\\\\w+/,\\\"$& dir=ltr\\\"):\\\"\\\\n<span dir=ltr>\\\"+a+\\\"</span>\\\"};c.i18n.bidi.enforceLtrInText=function(a){return c.i18n.bidi.Format.LRE+a+c.i18n.bidi.Format.PDF};c.i18n.bidi.dimensionsRe_=/:\\\\s*([.\\\\d][.\\\\w]*)\\\\s+([.\\\\d][.\\\\w]*)\\\\s+([.\\\\d][.\\\\w]*)\\\\s+([.\\\\d][.\\\\w]*)/g;c.i18n.bidi.leftRe_=/left/gi;c.i18n.bidi.rightRe_=/right/gi;c.i18n.bidi.tempRe_=/%%%%/g;\\nc.i18n.bidi.mirrorCSS=function(a){return a.replace(c.i18n.bidi.dimensionsRe_,\\\":$1 $4 $3 $2\\\").replace(c.i18n.bidi.leftRe_,\\\"%%%%\\\").replace(c.i18n.bidi.rightRe_,c.i18n.bidi.LEFT).replace(c.i18n.bidi.tempRe_,c.i18n.bidi.RIGHT)};c.i18n.bidi.doubleQuoteSubstituteRe_=/([\\\\u0591-\\\\u05f2])\\\"/g;c.i18n.bidi.singleQuoteSubstituteRe_=/([\\\\u0591-\\\\u05f2])'/g;c.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(c.i18n.bidi.doubleQuoteSubstituteRe_,\\\"$1\\\\u05f4\\\").replace(c.i18n.bidi.singleQuoteSubstituteRe_,\\\"$1\\\\u05f3\\\")};\\nc.i18n.bidi.wordSeparatorRe_=/\\\\s+/;c.i18n.bidi.hasNumeralsRe_=/[\\\\d\\\\u06f0-\\\\u06f9]/;c.i18n.bidi.rtlDetectionThreshold_=.4;\\nc.i18n.bidi.estimateDirection=function(a,b){let d=0,e=0,f=!1;a=c.i18n.bidi.stripHtmlIfNeeded_(a,b).split(c.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){const g=a[b];c.i18n.bidi.startsWithRtl(g)?(d++,e++):c.i18n.bidi.isRequiredLtrRe_.test(g)?f=!0:c.i18n.bidi.hasAnyLtr(g)?e++:c.i18n.bidi.hasNumeralsRe_.test(g)&&(f=!0)}return 0==e?f?c.i18n.bidi.Dir.LTR:c.i18n.bidi.Dir.NEUTRAL:d/e>c.i18n.bidi.rtlDetectionThreshold_?c.i18n.bidi.Dir.RTL:c.i18n.bidi.Dir.LTR};\\nc.i18n.bidi.detectRtlDirectionality=function(a,b){return c.i18n.bidi.estimateDirection(a,b)==c.i18n.bidi.Dir.RTL};c.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=c.i18n.bidi.toDir(b))&&(a.style.textAlign=b==c.i18n.bidi.Dir.RTL?c.i18n.bidi.RIGHT:c.i18n.bidi.LEFT,a.dir=b==c.i18n.bidi.Dir.RTL?\\\"rtl\\\":\\\"ltr\\\")};\\nc.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(c.i18n.bidi.estimateDirection(b)){case c.i18n.bidi.Dir.LTR:\\\"ltr\\\"!==a.dir&&(a.dir=\\\"ltr\\\");break;case c.i18n.bidi.Dir.RTL:\\\"rtl\\\"!==a.dir&&(a.dir=\\\"rtl\\\");break;default:a.removeAttribute(\\\"dir\\\")}};c.i18n.bidi.DirectionalString=function(){};c.html={};c.html.trustedtypes={};c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse=function(){if(!c.TRUSTED_TYPES_POLICY_NAME)return null;void 0===c.html.trustedtypes.cachedPolicy_&&(c.html.trustedtypes.cachedPolicy_=c.createTrustedTypesPolicy(c.TRUSTED_TYPES_POLICY_NAME+\\\"#html\\\"));return c.html.trustedtypes.cachedPolicy_};const nd={};\\nclass L{constructor(a,b){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=b===nd?a:\\\"\\\";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=c.string.Const.unwrap(a);return 0===a.length?L.EMPTY:L.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)}static fromJson(a){return L.createSafeScriptSecurityPrivateDoNotAccessOrElse(L.stringify_(a))}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static unwrap(a){return L.unwrapTrustedScript(a).toString()}static unwrapTrustedScript(a){if(a instanceof L&&\\na.constructor===L)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;(0,c.asserts.fail)(\\\"expected object of type SafeScript, got '\\\"+a+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeScript\\\"}static stringify_(a){return JSON.stringify(a).replace(/</g,\\\"\\\\\\\\x3c\\\")}static createSafeScriptSecurityPrivateDoNotAccessOrElse(a){const b=c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScript(a):a;return new L(a,nd)}}L.prototype.toString=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};\\nL.EMPTY=L.createSafeScriptSecurityPrivateDoNotAccessOrElse(\\\"\\\");c.html.SafeScript=L;c.fs={};c.fs.url={};c.fs.url.createObjectUrl=function(a){return c.fs.url.getUrlObject_().createObjectURL(a)};c.fs.url.revokeObjectUrl=function(a){c.fs.url.getUrlObject_().revokeObjectURL(a)};c.fs.url.UrlObject_=function(){};c.fs.url.UrlObject_.prototype.createObjectURL=function(){};c.fs.url.UrlObject_.prototype.revokeObjectURL=function(){};c.fs.url.getUrlObject_=function(){const a=c.fs.url.findUrlObject_();if(null!=a)return a;throw Error(\\\"This browser doesn't seem to support blob URLs\\\");};\\nc.fs.url.findUrlObject_=function(){return void 0!==c.global.URL&&void 0!==c.global.URL.createObjectURL?c.global.URL:void 0!==c.global.createObjectURL?c.global:null};c.fs.url.browserSupportsObjectUrls=function(){return null!=c.fs.url.findUrlObject_()};c.fs.blob={};c.fs.blob.getBlob=function(a){var b=c.global.BlobBuilder||c.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(let d=0;d<arguments.length;d++)b.append(arguments[d]);return b.getBlob()}return c.fs.blob.getBlobWithProperties(Array.prototype.slice.call(arguments))};\\nc.fs.blob.getBlobWithProperties=function(a,b,d){var e=c.global.BlobBuilder||c.global.WebKitBlobBuilder;if(void 0!==e){e=new e;for(let f=0;f<a.length;f++)e.append(a[f],d);return e.getBlob(b)}if(void 0!==c.global.Blob)return e={},b&&(e.type=b),d&&(e.endings=d),new Blob(a,e);throw Error(\\\"This browser doesn't seem to support creating Blobs\\\");};c.html.TrustedResourceUrl=class{constructor(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=b===c.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:\\\"\\\"}};c.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;c.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};c.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;\\nc.html.TrustedResourceUrl.prototype.getDirection=function(){return c.i18n.bidi.Dir.LTR};c.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var d=c.html.TrustedResourceUrl.unwrap(this);d=c.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(d);var e=d[3]||\\\"\\\";return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(d[1]+c.html.TrustedResourceUrl.stringifyParams_(\\\"?\\\",d[2]||\\\"\\\",a)+c.html.TrustedResourceUrl.stringifyParams_(\\\"#\\\",e,b))};\\nc.html.TrustedResourceUrl.prototype.toString=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+\\\"\\\"};c.html.TrustedResourceUrl.unwrap=function(a){return c.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};\\nc.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof c.html.TrustedResourceUrl&&a.constructor===c.html.TrustedResourceUrl)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;c.asserts.fail(\\\"expected object of type TrustedResourceUrl, got '\\\"+a+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:TrustedResourceUrl\\\"};\\nc.html.TrustedResourceUrl.format=function(a,b){var d=c.string.Const.unwrap(a);if(!c.html.TrustedResourceUrl.BASE_URL_.test(d))throw Error(\\\"Invalid TrustedResourceUrl format: \\\"+d);a=d.replace(c.html.TrustedResourceUrl.FORMAT_MARKER_,function(e,f){if(!Object.prototype.hasOwnProperty.call(b,f))throw Error('Found marker, \\\"'+f+'\\\", in format string, \\\"'+d+'\\\", but no valid label mapping found in args: '+JSON.stringify(b));e=b[f];return e instanceof c.string.Const?c.string.Const.unwrap(e):encodeURIComponent(String(e))});\\nreturn c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\\\\w+)}/g;c.html.TrustedResourceUrl.BASE_URL_=RegExp(\\\"^((https:)?//[0-9a-z.:[\\\\\\\\]-]+/|/[^/\\\\\\\\\\\\\\\\]|[^:/\\\\\\\\\\\\\\\\%]+/|[^:/\\\\\\\\\\\\\\\\%]*[?#]|about:blank#)\\\",\\\"i\\\");c.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\\\\?[^#]*)?(#[\\\\s\\\\S]*)?/;c.html.TrustedResourceUrl.formatWithParams=function(a,b,d,e){return c.html.TrustedResourceUrl.format(a,b).cloneWithParams(d,e)};\\nc.html.TrustedResourceUrl.fromConstant=function(a){return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c.string.Const.unwrap(a))};c.html.TrustedResourceUrl.fromConstants=function(a){for(var b=\\\"\\\",d=0;d<a.length;d++)b+=c.string.Const.unwrap(a[d]);return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.TrustedResourceUrl.fromSafeScript=function(a){a=c.fs.blob.getBlobWithProperties([L.unwrap(a)],\\\"text/javascript\\\");a=c.fs.url.createObjectUrl(a);return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};\\nc.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){const b=c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScriptURL(a):a;return new c.html.TrustedResourceUrl(a,c.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};\\nc.html.TrustedResourceUrl.stringifyParams_=function(a,b,d){if(null==d)return b;if(\\\"string\\\"===typeof d)return d?a+encodeURIComponent(d):\\\"\\\";for(var e in d)if(Object.prototype.hasOwnProperty.call(d,e)){var f=d[e];f=Array.isArray(f)?f:[f];for(var g=0;g<f.length;g++){var h=f[g];null!=h&&(b||(b=a),b+=(b.length>a.length?\\\"&\\\":\\\"\\\")+encodeURIComponent(e)+\\\"=\\\"+encodeURIComponent(String(h)))}}return b};c.string.internal={};c.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};c.string.internal.endsWith=function(a,b){const d=a.length-b.length;return 0<=d&&a.indexOf(b,d)==d};c.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==c.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};c.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==c.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};\\nc.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};c.string.internal.isEmptyOrWhitespace=function(a){return/^[\\\\s\\\\xa0]*$/.test(a)};c.string.internal.trim=c.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\\\s\\\\xa0]*([\\\\s\\\\S]*?)[\\\\s\\\\xa0]*$/.exec(a)[1]};c.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};\\nc.string.internal.newLineToBr=function(a,b){return a.replace(/(\\\\r\\\\n|\\\\r|\\\\n)/g,b?\\\"<br />\\\":\\\"<br>\\\")};\\nc.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(c.string.internal.AMP_RE_,\\\"&amp;\\\").replace(c.string.internal.LT_RE_,\\\"&lt;\\\").replace(c.string.internal.GT_RE_,\\\"&gt;\\\").replace(c.string.internal.QUOT_RE_,\\\"&quot;\\\").replace(c.string.internal.SINGLE_QUOTE_RE_,\\\"&#39;\\\").replace(c.string.internal.NULL_RE_,\\\"&#0;\\\");else{if(!c.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf(\\\"&\\\")&&(a=a.replace(c.string.internal.AMP_RE_,\\\"&amp;\\\"));-1!=a.indexOf(\\\"<\\\")&&(a=a.replace(c.string.internal.LT_RE_,\\\"&lt;\\\"));\\n-1!=a.indexOf(\\\">\\\")&&(a=a.replace(c.string.internal.GT_RE_,\\\"&gt;\\\"));-1!=a.indexOf('\\\"')&&(a=a.replace(c.string.internal.QUOT_RE_,\\\"&quot;\\\"));-1!=a.indexOf(\\\"'\\\")&&(a=a.replace(c.string.internal.SINGLE_QUOTE_RE_,\\\"&#39;\\\"));-1!=a.indexOf(\\\"\\\\x00\\\")&&(a=a.replace(c.string.internal.NULL_RE_,\\\"&#0;\\\"))}return a};c.string.internal.AMP_RE_=/&/g;c.string.internal.LT_RE_=/</g;c.string.internal.GT_RE_=/>/g;c.string.internal.QUOT_RE_=/\\\"/g;c.string.internal.SINGLE_QUOTE_RE_=/'/g;c.string.internal.NULL_RE_=/\\\\x00/g;\\nc.string.internal.ALL_RE_=/[\\\\x00&<>\\\"']/;c.string.internal.whitespaceEscape=function(a,b){return c.string.internal.newLineToBr(a.replace(/  /g,\\\" &#160;\\\"),b)};c.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};c.string.internal.caseInsensitiveContains=function(a,b){return c.string.internal.contains(a.toLowerCase(),b.toLowerCase())};\\nc.string.internal.compareVersions=function(a,b){var d=0;a=c.string.internal.trim(String(a)).split(\\\".\\\");b=c.string.internal.trim(String(b)).split(\\\".\\\");const e=Math.max(a.length,b.length);for(let h=0;0==d&&h<e;h++){var f=a[h]||\\\"\\\",g=b[h]||\\\"\\\";do{f=/(\\\\d*)(\\\\D*)(.*)/.exec(f)||[\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\"];g=/(\\\\d*)(\\\\D*)(.*)/.exec(g)||[\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\"];if(0==f[0].length&&0==g[0].length)break;d=0==f[1].length?0:parseInt(f[1],10);const k=0==g[1].length?0:parseInt(g[1],10);d=c.string.internal.compareElements_(d,k)||c.string.internal.compareElements_(0==\\nf[2].length,0==g[2].length)||c.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==d)}return d};c.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};c.html.SafeUrl=class{constructor(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=b===c.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:\\\"\\\"}};c.html.SafeUrl.INNOCUOUS_STRING=\\\"about:invalid#zClosurez\\\";c.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;c.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};c.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;c.html.SafeUrl.prototype.getDirection=function(){return c.i18n.bidi.Dir.LTR};\\nc.html.SafeUrl.prototype.toString=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};c.html.SafeUrl.unwrap=function(a){if(a instanceof c.html.SafeUrl&&a.constructor===c.html.SafeUrl)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;c.asserts.fail(\\\"expected object of type SafeUrl, got '\\\"+a+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeUrl\\\"};c.html.SafeUrl.fromConstant=function(a){return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(c.string.Const.unwrap(a))};\\nc.html.SAFE_MIME_TYPE_PATTERN_=RegExp('^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font/\\\\\\\\w+|image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\\\\\\\w+=(?:\\\\\\\\w+|\\\"[\\\\\\\\w;,= ]+\\\"))*$',\\\"i\\\");c.html.SafeUrl.isSafeMimeType=function(a){return c.html.SAFE_MIME_TYPE_PATTERN_.test(a)};\\nc.html.SafeUrl.fromBlob=function(a){a=c.html.SafeUrl.isSafeMimeType(a.type)?c.fs.url.createObjectUrl(a):c.html.SafeUrl.INNOCUOUS_STRING;return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.SafeUrl.revokeObjectUrl=function(a){a=a.getTypedStringValue();a!==c.html.SafeUrl.INNOCUOUS_STRING&&c.fs.url.revokeObjectUrl(a)};\\nc.html.SafeUrl.fromMediaSource=function(a){c.asserts.assert(\\\"MediaSource\\\"in c.global,\\\"No support for MediaSource\\\");a=a instanceof MediaSource?c.fs.url.createObjectUrl(a):c.html.SafeUrl.INNOCUOUS_STRING;return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\\\\/]+=*$/i;\\nc.html.SafeUrl.tryFromDataUrl=function(a){a=String(a);a=a.replace(/(%0A|%0D)/g,\\\"\\\");var b=a.match(c.html.DATA_URL_PATTERN_);return b&&c.html.SafeUrl.isSafeMimeType(b[1])?c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):null};c.html.SafeUrl.fromDataUrl=function(a){return c.html.SafeUrl.tryFromDataUrl(a)||c.html.SafeUrl.INNOCUOUS_URL};c.html.SafeUrl.fromTelUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"tel:\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SIP_URL_PATTERN_=RegExp(\\\"^sip[s]?:[+a-z0-9_.!$%&'*\\\\\\\\/=^`{|}~-]+@([a-z0-9-]+\\\\\\\\.)+[a-z0-9]{2,63}$\\\",\\\"i\\\");c.html.SafeUrl.fromSipUrl=function(a){c.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.SafeUrl.fromFacebookMessengerUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"fb-messenger://share\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.fromWhatsAppUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"whatsapp://send\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.SafeUrl.fromSmsUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"sms:\\\")&&c.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf(\\\"#\\\");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(d){return!1}return/^(?:[a-z0-9\\\\-_.~]|%[0-9a-f]{2})+$/i.test(a)};c.html.SafeUrl.fromSshUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"ssh://\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return c.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\\\\/\\\\/([^\\\\/]+)\\\\//,a,b)};c.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return c.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\\\\/\\\\/([^\\\\/]+)\\\\//,a,b)};c.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return c.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\\\\/\\\\/([^\\\\/]+)\\\\//,a,b)};\\nc.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,d){(a=a.exec(b))?(a=a[1],-1==(d instanceof c.string.Const?[c.string.Const.unwrap(d)]:d.map(function(e){return c.string.Const.unwrap(e)})).indexOf(a)&&(b=c.html.SafeUrl.INNOCUOUS_STRING)):b=c.html.SafeUrl.INNOCUOUS_STRING;return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};c.html.SafeUrl.fromTrustedResourceUrl=function(a){return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(c.html.TrustedResourceUrl.unwrap(a))};\\nc.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;c.html.SafeUrl.SAFE_URL_PATTERN=c.html.SAFE_URL_PATTERN_;c.html.SafeUrl.trySanitize=function(a){if(a instanceof c.html.SafeUrl)return a;a=\\\"object\\\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return c.html.SAFE_URL_PATTERN_.test(a)?c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):c.html.SafeUrl.tryFromDataUrl(a)};\\nc.html.SafeUrl.sanitize=function(a){return c.html.SafeUrl.trySanitize(a)||c.html.SafeUrl.INNOCUOUS_URL};\\nc.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof c.html.SafeUrl)return a;a=\\\"object\\\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=c.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;c.asserts.assert(c.html.SAFE_URL_PATTERN_.test(a),\\\"%s does not match the safe URL pattern\\\",a)||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new c.html.SafeUrl(a,c.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};c.html.SafeUrl.INNOCUOUS_URL=c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(c.html.SafeUrl.INNOCUOUS_STRING);c.html.SafeUrl.ABOUT_BLANK=c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\\"about:blank\\\");const od={};\\nclass M{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=b===od?a:\\\"\\\";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=c.string.Const.unwrap(a);if(0===a.length)return M.EMPTY;(0,c.asserts.assert)((0,c.string.internal.endsWith)(a,\\\";\\\"),`Last character of style string is not ';': ${a}`);(0,c.asserts.assert)((0,c.string.internal.contains)(a,\\\":\\\"),\\\"Style string must contain at least one ':', to specify a \\\\\\\"name: value\\\\\\\" pair: \\\"+a);return M.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_}toString(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString()}static unwrap(a){if(a instanceof M&&\\na.constructor===M)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;(0,c.asserts.fail)(`expected object of type SafeStyle, got '${a}`+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeStyle\\\"}static createSafeStyleSecurityPrivateDoNotAccessOrElse(a){return new M(a,od)}static create(a){let b=\\\"\\\";for(let d in a)if(Object.prototype.hasOwnProperty.call(a,d)){if(!/^[-_a-zA-Z0-9]+$/.test(d))throw Error(`Name allows only [-_a-zA-Z0-9], got: ${d}`);let e=a[d];null!=e&&(e=Array.isArray(e)?e.map(pd).join(\\\" \\\"):\\npd(e),b+=`${d}:${e};`)}return b?M.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):M.EMPTY}static concat(a){let b=\\\"\\\";const d=e=>{Array.isArray(e)?e.forEach(d):b+=M.unwrap(e)};Array.prototype.forEach.call(arguments,d);return b?M.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):M.EMPTY}}M.EMPTY=M.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\\"\\\");M.INNOCUOUS_STRING=\\\"zClosurez\\\";\\nfunction pd(a){if(a instanceof c.html.SafeUrl)return'url(\\\"'+c.html.SafeUrl.unwrap(a).replace(/</g,\\\"%3c\\\").replace(/[\\\\\\\\\\\"]/g,\\\"\\\\\\\\$&\\\")+'\\\")';a=a instanceof c.string.Const?c.string.Const.unwrap(a):qd(String(a));if(/[{;}]/.test(a))throw new c.asserts.AssertionError(\\\"Value does not allow [{;}], got: %s.\\\",[a]);return a}\\nfunction qd(a){var b=a.replace(rd,\\\"$1\\\").replace(rd,\\\"$1\\\").replace(sd,\\\"url\\\");if(td.test(b)){if(ud.test(a))return(0,c.asserts.fail)(`String value disallows comments, got: ${a}`),M.INNOCUOUS_STRING;let d=b=!0;for(let e=0;e<a.length;e++){const f=a.charAt(e);\\\"'\\\"==f&&d?b=!b:'\\\"'==f&&b&&(d=!d)}if(!b||!d)return(0,c.asserts.fail)(`String value requires balanced quotes, got: ${a}`),M.INNOCUOUS_STRING;if(!vd(a))return(0,c.asserts.fail)(\\\"String value requires balanced square brackets and one identifier per pair of brackets, got: \\\"+\\na),M.INNOCUOUS_STRING}else return(0,c.asserts.fail)(\\\"String value allows only [-,.\\\\\\\"'%_!#/ a-zA-Z0-9\\\\\\\\[\\\\\\\\]] and simple functions, got: \\\"+a),M.INNOCUOUS_STRING;return wd(a)}function vd(a){let b=!0;const d=/^[-_a-zA-Z0-9]$/;for(let e=0;e<a.length;e++){const f=a.charAt(e);if(\\\"]\\\"==f){if(b)return!1;b=!0}else if(\\\"[\\\"==f){if(!b)return!1;b=!1}else if(!b&&!d.test(f))return!1}return b}\\nconst td=RegExp(\\\"^[-,.\\\\\\\"'%_!#/ a-zA-Z0-9\\\\\\\\[\\\\\\\\]]+$\\\"),sd=RegExp(\\\"\\\\\\\\b(url\\\\\\\\([ \\\\t\\\\n]*)('[ -&(-\\\\\\\\[\\\\\\\\]-~]*'|\\\\\\\"[ !#-\\\\\\\\[\\\\\\\\]-~]*\\\\\\\"|[!#-&*-\\\\\\\\[\\\\\\\\]-~]*)([ \\\\t\\\\n]*\\\\\\\\))\\\",\\\"g\\\"),rd=RegExp(\\\"\\\\\\\\b(calc|cubic-bezier|fit-content|hsl|hsla|linear-gradient|matrix|minmax|repeat|rgb|rgba|(rotate|scale|translate)(X|Y|Z|3d)?|var)\\\\\\\\([-+*/0-9a-zA-Z.%#\\\\\\\\[\\\\\\\\], ]+\\\\\\\\)\\\",\\\"g\\\"),ud=/\\\\/\\\\*/;\\nfunction wd(a){return a.replace(sd,(b,d,e,f)=>{let g=\\\"\\\";e=e.replace(/^(['\\\"])(.*)\\\\1$/,(h,k,n)=>{g=k;return n});b=c.html.SafeUrl.sanitize(e).getTypedStringValue();return d+g+b+g+f})}c.html.SafeStyle=M;c.object={};function xd(a){const b=[];let d=0;for(const e in a)b[d++]=e;return b}function yd(a,b){for(const d in a)if(a[d]==b)return!0;return!1}function zd(a,b,d){for(const e in a)if(b.call(d,a[e],e,a))return e}\\nfunction Ad(a){if(!a||\\\"object\\\"!==typeof a)return a;if(\\\"function\\\"===typeof a.clone)return a.clone();if(\\\"undefined\\\"!==typeof Map&&a instanceof Map)return new Map(a);if(\\\"undefined\\\"!==typeof Set&&a instanceof Set)return new Set(a);const b=Array.isArray(a)?[]:\\\"function\\\"!==typeof ArrayBuffer||\\\"function\\\"!==typeof ArrayBuffer.isView||!ArrayBuffer.isView(a)||a instanceof DataView?{}:new a.constructor(a.length);for(const d in a)b[d]=Ad(a[d]);return b}const Bd=\\\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\\\".split(\\\" \\\");\\nfunction Cd(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return Cd.apply(null,arguments[0]);if(b%2)throw Error(\\\"Uneven number of arguments\\\");const d={};for(let e=0;e<b;e+=2)d[arguments[e]]=arguments[e+1];return d}function Dd(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return Dd.apply(null,arguments[0]);const d={};for(let e=0;e<b;e++)d[arguments[e]]=!0;return d}\\nc.object.add=function(a,b,d){if(null!==a&&b in a)throw Error(`The object already contains the key \\\"${b}\\\"`);a[b]=d};c.object.clear=function(a){for(const b in a)delete a[b]};c.object.clone=function(a){const b={};for(const d in a)b[d]=a[d];return b};c.object.contains=function(a,b){return yd(a,b)};c.object.containsKey=function(a,b){return null!==a&&b in a};c.object.containsValue=yd;c.object.create=Cd;\\nc.object.createImmutableView=function(a){let b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};c.object.createSet=Dd;c.object.equals=function(a,b){for(const d in a)if(!(d in b)||a[d]!==b[d])return!1;for(const d in b)if(!(d in a))return!1;return!0};c.object.every=function(a,b,d){for(const e in a)if(!b.call(d,a[e],e,a))return!1;return!0};\\nc.object.extend=function(a,b){let d,e;for(let f=1;f<arguments.length;f++){e=arguments[f];for(d in e)a[d]=e[d];for(let g=0;g<Bd.length;g++)d=Bd[g],Object.prototype.hasOwnProperty.call(e,d)&&(a[d]=e[d])}};c.object.filter=function(a,b,d){const e={};for(const f in a)b.call(d,a[f],f,a)&&(e[f]=a[f]);return e};c.object.findKey=zd;c.object.findValue=function(a,b,d){return(b=zd(a,b,d))&&a[b]};c.object.forEach=function(a,b,d){for(const e in a)b.call(d,a[e],e,a)};\\nc.object.get=function(a,b,d){return null!==a&&b in a?a[b]:d};c.object.getAllPropertyNames=function(a,b,d){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return xd(a);const e={};for(;a&&(a!==Object.prototype||b)&&(a!==Function.prototype||d);){const f=Object.getOwnPropertyNames(a);for(let g=0;g<f.length;g++)e[f[g]]=!0;a=Object.getPrototypeOf(a)}return xd(e)};c.object.getAnyKey=function(a){for(const b in a)return b};c.object.getAnyValue=function(a){for(const b in a)return a[b]};\\nc.object.getCount=function(a){let b=0;for(const d in a)b++;return b};c.object.getKeys=xd;c.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};c.object.getValueByKeys=function(a,b){var d=c.isArrayLike(b);const e=d?b:arguments;for(d=d?0:1;d<e.length;d++){if(null==a)return;a=a[e[d]]}return a};c.object.getValues=function(a){const b=[];let d=0;for(const e in a)b[d++]=a[e];return b};c.object.isEmpty=function(a){for(const b in a)return!1;return!0};\\nc.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};c.object.map=function(a,b,d){const e={};for(const f in a)e[f]=b.call(d,a[f],f,a);return e};c.object.remove=function(a,b){let d;(d=b in a)&&delete a[b];return d};c.object.set=function(a,b,d){a[b]=d};c.object.setIfUndefined=function(a,b,d){return b in a?a[b]:a[b]=d};c.object.setWithReturnValueIfNotSet=function(a,b,d){if(b in a)return a[b];d=d();return a[b]=d};\\nc.object.some=function(a,b,d){for(const e in a)if(b.call(d,a[e],e,a))return!0;return!1};c.object.transpose=function(a){const b={};for(const d in a)b[a[d]]=d;return b};c.object.unsafeClone=Ad;const Ed={};\\nclass N{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=b===Ed?a:\\\"\\\";this.implementsGoogStringTypedString=!0}static createRule(a,b){if((0,c.string.internal.contains)(a,\\\"<\\\"))throw Error(`Selector does not allow '<', got: ${a}`);const d=a.replace(/('|\\\")((?!\\\\1)[^\\\\r\\\\n\\\\f\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\1/g,\\\"\\\");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|]+$/.test(d))throw Error(\\\"Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\\\\\]()=^$|] and strings, got: \\\"+a);if(!N.hasBalancedBrackets_(d))throw Error(\\\"() and [] in selector must be balanced, got: \\\"+a);\\nb instanceof M||(b=M.create(b));a=`${a}{`+M.unwrap(b).replace(/</g,\\\"\\\\\\\\3C \\\")+\\\"}\\\";return N.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}static hasBalancedBrackets_(a){const b={\\\"(\\\":\\\")\\\",\\\"[\\\":\\\"]\\\"},d=[];for(let e=0;e<a.length;e++){const f=a[e];if(b[f])d.push(b[f]);else if(yd(b,f)&&d.pop()!=f)return!1}return 0==d.length}static concat(a){let b=\\\"\\\";const d=e=>{Array.isArray(e)?e.forEach(d):b+=N.unwrap(e)};Array.prototype.forEach.call(arguments,d);return N.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)}static fromConstant(a){a=\\nc.string.Const.unwrap(a);if(0===a.length)return N.EMPTY;(0,c.asserts.assert)(!(0,c.string.internal.contains)(a,\\\"<\\\"),`Forbidden '<' character in style sheet string: ${a}`);return N.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_}static unwrap(a){if(a instanceof N&&a.constructor===N)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;(0,c.asserts.fail)(\\\"expected object of type SafeStyleSheet, got '\\\"+\\na+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeStyleSheet\\\"}static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a){return new N(a,Ed)}}N.prototype.toString=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString()};N.EMPTY=N.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\\\"\\\");c.html.SafeStyleSheet=N;c.dom.HtmlElement=function(){};c.dom.TagName=class{static cast(a){return a}constructor(){}toString(){}};c.dom.TagName.A=\\\"A\\\";c.dom.TagName.ABBR=\\\"ABBR\\\";c.dom.TagName.ACRONYM=\\\"ACRONYM\\\";c.dom.TagName.ADDRESS=\\\"ADDRESS\\\";c.dom.TagName.APPLET=\\\"APPLET\\\";c.dom.TagName.AREA=\\\"AREA\\\";c.dom.TagName.ARTICLE=\\\"ARTICLE\\\";c.dom.TagName.ASIDE=\\\"ASIDE\\\";c.dom.TagName.AUDIO=\\\"AUDIO\\\";c.dom.TagName.B=\\\"B\\\";c.dom.TagName.BASE=\\\"BASE\\\";c.dom.TagName.BASEFONT=\\\"BASEFONT\\\";c.dom.TagName.BDI=\\\"BDI\\\";c.dom.TagName.BDO=\\\"BDO\\\";c.dom.TagName.BIG=\\\"BIG\\\";\\nc.dom.TagName.BLOCKQUOTE=\\\"BLOCKQUOTE\\\";c.dom.TagName.BODY=\\\"BODY\\\";c.dom.TagName.BR=\\\"BR\\\";c.dom.TagName.BUTTON=\\\"BUTTON\\\";c.dom.TagName.CANVAS=\\\"CANVAS\\\";c.dom.TagName.CAPTION=\\\"CAPTION\\\";c.dom.TagName.CENTER=\\\"CENTER\\\";c.dom.TagName.CITE=\\\"CITE\\\";c.dom.TagName.CODE=\\\"CODE\\\";c.dom.TagName.COL=\\\"COL\\\";c.dom.TagName.COLGROUP=\\\"COLGROUP\\\";c.dom.TagName.COMMAND=\\\"COMMAND\\\";c.dom.TagName.DATA=\\\"DATA\\\";c.dom.TagName.DATALIST=\\\"DATALIST\\\";c.dom.TagName.DD=\\\"DD\\\";c.dom.TagName.DEL=\\\"DEL\\\";c.dom.TagName.DETAILS=\\\"DETAILS\\\";\\nc.dom.TagName.DFN=\\\"DFN\\\";c.dom.TagName.DIALOG=\\\"DIALOG\\\";c.dom.TagName.DIR=\\\"DIR\\\";c.dom.TagName.DIV=\\\"DIV\\\";c.dom.TagName.DL=\\\"DL\\\";c.dom.TagName.DT=\\\"DT\\\";c.dom.TagName.EM=\\\"EM\\\";c.dom.TagName.EMBED=\\\"EMBED\\\";c.dom.TagName.FIELDSET=\\\"FIELDSET\\\";c.dom.TagName.FIGCAPTION=\\\"FIGCAPTION\\\";c.dom.TagName.FIGURE=\\\"FIGURE\\\";c.dom.TagName.FONT=\\\"FONT\\\";c.dom.TagName.FOOTER=\\\"FOOTER\\\";c.dom.TagName.FORM=\\\"FORM\\\";c.dom.TagName.FRAME=\\\"FRAME\\\";c.dom.TagName.FRAMESET=\\\"FRAMESET\\\";c.dom.TagName.H1=\\\"H1\\\";c.dom.TagName.H2=\\\"H2\\\";\\nc.dom.TagName.H3=\\\"H3\\\";c.dom.TagName.H4=\\\"H4\\\";c.dom.TagName.H5=\\\"H5\\\";c.dom.TagName.H6=\\\"H6\\\";c.dom.TagName.HEAD=\\\"HEAD\\\";c.dom.TagName.HEADER=\\\"HEADER\\\";c.dom.TagName.HGROUP=\\\"HGROUP\\\";c.dom.TagName.HR=\\\"HR\\\";c.dom.TagName.HTML=\\\"HTML\\\";c.dom.TagName.I=\\\"I\\\";c.dom.TagName.IFRAME=\\\"IFRAME\\\";c.dom.TagName.IMG=\\\"IMG\\\";c.dom.TagName.INPUT=\\\"INPUT\\\";c.dom.TagName.INS=\\\"INS\\\";c.dom.TagName.ISINDEX=\\\"ISINDEX\\\";c.dom.TagName.KBD=\\\"KBD\\\";c.dom.TagName.KEYGEN=\\\"KEYGEN\\\";c.dom.TagName.LABEL=\\\"LABEL\\\";c.dom.TagName.LEGEND=\\\"LEGEND\\\";\\nc.dom.TagName.LI=\\\"LI\\\";c.dom.TagName.LINK=\\\"LINK\\\";c.dom.TagName.MAIN=\\\"MAIN\\\";c.dom.TagName.MAP=\\\"MAP\\\";c.dom.TagName.MARK=\\\"MARK\\\";c.dom.TagName.MATH=\\\"MATH\\\";c.dom.TagName.MENU=\\\"MENU\\\";c.dom.TagName.MENUITEM=\\\"MENUITEM\\\";c.dom.TagName.META=\\\"META\\\";c.dom.TagName.METER=\\\"METER\\\";c.dom.TagName.NAV=\\\"NAV\\\";c.dom.TagName.NOFRAMES=\\\"NOFRAMES\\\";c.dom.TagName.NOSCRIPT=\\\"NOSCRIPT\\\";c.dom.TagName.OBJECT=\\\"OBJECT\\\";c.dom.TagName.OL=\\\"OL\\\";c.dom.TagName.OPTGROUP=\\\"OPTGROUP\\\";c.dom.TagName.OPTION=\\\"OPTION\\\";c.dom.TagName.OUTPUT=\\\"OUTPUT\\\";\\nc.dom.TagName.P=\\\"P\\\";c.dom.TagName.PARAM=\\\"PARAM\\\";c.dom.TagName.PICTURE=\\\"PICTURE\\\";c.dom.TagName.PRE=\\\"PRE\\\";c.dom.TagName.PROGRESS=\\\"PROGRESS\\\";c.dom.TagName.Q=\\\"Q\\\";c.dom.TagName.RP=\\\"RP\\\";c.dom.TagName.RT=\\\"RT\\\";c.dom.TagName.RTC=\\\"RTC\\\";c.dom.TagName.RUBY=\\\"RUBY\\\";c.dom.TagName.S=\\\"S\\\";c.dom.TagName.SAMP=\\\"SAMP\\\";c.dom.TagName.SCRIPT=\\\"SCRIPT\\\";c.dom.TagName.SECTION=\\\"SECTION\\\";c.dom.TagName.SELECT=\\\"SELECT\\\";c.dom.TagName.SMALL=\\\"SMALL\\\";c.dom.TagName.SOURCE=\\\"SOURCE\\\";c.dom.TagName.SPAN=\\\"SPAN\\\";c.dom.TagName.STRIKE=\\\"STRIKE\\\";\\nc.dom.TagName.STRONG=\\\"STRONG\\\";c.dom.TagName.STYLE=\\\"STYLE\\\";c.dom.TagName.SUB=\\\"SUB\\\";c.dom.TagName.SUMMARY=\\\"SUMMARY\\\";c.dom.TagName.SUP=\\\"SUP\\\";c.dom.TagName.SVG=\\\"SVG\\\";c.dom.TagName.TABLE=\\\"TABLE\\\";c.dom.TagName.TBODY=\\\"TBODY\\\";c.dom.TagName.TD=\\\"TD\\\";c.dom.TagName.TEMPLATE=\\\"TEMPLATE\\\";c.dom.TagName.TEXTAREA=\\\"TEXTAREA\\\";c.dom.TagName.TFOOT=\\\"TFOOT\\\";c.dom.TagName.TH=\\\"TH\\\";c.dom.TagName.THEAD=\\\"THEAD\\\";c.dom.TagName.TIME=\\\"TIME\\\";c.dom.TagName.TITLE=\\\"TITLE\\\";c.dom.TagName.TR=\\\"TR\\\";c.dom.TagName.TRACK=\\\"TRACK\\\";\\nc.dom.TagName.TT=\\\"TT\\\";c.dom.TagName.U=\\\"U\\\";c.dom.TagName.UL=\\\"UL\\\";c.dom.TagName.VAR=\\\"VAR\\\";c.dom.TagName.VIDEO=\\\"VIDEO\\\";c.dom.TagName.WBR=\\\"WBR\\\";var Fd={USE_CLIENT_HINTS:!1};c.labs={};c.labs.userAgent={};c.labs.userAgent.util={};function Gd(){var a=c.global.navigator;return a&&(a=a.userAgent)?a:\\\"\\\"}function Hd(){if(!Fd.USE_CLIENT_HINTS)return null;const a=c.global.navigator;return a?a.userAgentData||null:null}let Id=null,Q=Hd();function Jd(){return null==Id?Gd():Id}function Kd(a){const b=Q;return b?b.brands.some(({brand:d})=>d&&(0,c.string.internal.contains)(d,a)):!1}function R(a){const b=Jd();return(0,c.string.internal.contains)(b,a)}\\nfunction Ld(a){const b=RegExp(\\\"([A-Z][\\\\\\\\w ]+)/([^\\\\\\\\s]+)\\\\\\\\s*(?:\\\\\\\\((.*?)\\\\\\\\))?\\\",\\\"g\\\"),d=[];let e;for(;e=b.exec(a);)d.push([e[1],e[2],e[3]||void 0]);return d}c.labs.userAgent.util.ASSUME_CLIENT_HINTS_SUPPORT=!1;c.labs.userAgent.util.extractVersionTuples=Ld;c.labs.userAgent.util.getNativeUserAgentString=Gd;c.labs.userAgent.util.getUserAgent=Jd;c.labs.userAgent.util.getUserAgentData=function(){return Q};c.labs.userAgent.util.matchUserAgent=R;c.labs.userAgent.util.matchUserAgentDataBrand=Kd;\\nc.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){const b=Jd();return(0,c.string.internal.caseInsensitiveContains)(b,a)};c.labs.userAgent.util.resetUserAgentData=function(){Q=Hd()};c.labs.userAgent.util.setUserAgent=function(a){Id=\\\"string\\\"===typeof a?a:Gd()};c.labs.userAgent.util.setUserAgentData=function(a){Q=a};var Md={AsyncValue:class{getIfLoaded(){}load(){}},HighEntropyValue:class{constructor(a){this.key_=a;this.promise_=this.value_=void 0;this.pending_=!1}getIfLoaded(){if(Q)return this.value_}async load(){const a=Q;if(a)return this.promise_||(this.pending_=!0,this.promise_=(async()=>{try{return this.value_=(await a.getHighEntropyValues([this.key_]))[this.key_]}finally{this.pending_=!1}})()),await this.promise_}resetForTesting(){if(this.pending_)throw Error(\\\"Unsafe call to resetForTesting\\\");this.value_=\\nthis.promise_=void 0;this.pending_=!1}},Version:class{constructor(a){this.versionString_=a}toVersionStringForLogging(){return this.versionString_}isAtLeast(a){return 0<=(0,c.string.internal.compareVersions)(this.versionString_,a)}}};var S={};let Nd=!1;S.hasFullVersionList=function(){return Nd};S.setHasFullVersionListForTesting=function(a){Nd=a};S.fullVersionList=new Md.HighEntropyValue(\\\"fullVersionList\\\");S.platformVersion=new Md.HighEntropyValue(\\\"platformVersion\\\");S.resetAllForTesting=function(){S.fullVersionList.resetForTesting();S.platformVersion.resetForTesting()};c.labs.userAgent.browser={};const U={ANDROID_BROWSER:\\\"Android Browser\\\",CHROMIUM:\\\"Chromium\\\",EDGE:\\\"Microsoft Edge\\\",FIREFOX:\\\"Firefox\\\",IE:\\\"Internet Explorer\\\",OPERA:\\\"Opera\\\",SAFARI:\\\"Safari\\\",SILK:\\\"Silk\\\"};c.labs.userAgent.browser.Brand=U;function V(){const a=Q;return!!a&&0<a.brands.length}function Od(){return V()?!1:R(\\\"Opera\\\")}function Pd(){return V()?!1:R(\\\"Trident\\\")||R(\\\"MSIE\\\")}function Qd(){return V()?!1:R(\\\"Edge\\\")}function Rd(){return V()?Kd(U.EDGE):R(\\\"Edg/\\\")}\\nfunction Sd(){return V()?Kd(U.OPERA):R(\\\"OPR\\\")}function Td(){return R(\\\"Firefox\\\")||R(\\\"FxiOS\\\")}function Ud(){return R(\\\"Safari\\\")&&!(Vd()||Wd()||Od()||Qd()||Rd()||Sd()||Td()||Xd()||R(\\\"Android\\\"))}function Wd(){return V()?!1:R(\\\"Coast\\\")}function Vd(){return V()?Kd(U.CHROMIUM):(R(\\\"Chrome\\\")||R(\\\"CriOS\\\"))&&!Qd()||Xd()}function Yd(){return R(\\\"Android\\\")&&!(Vd()||Td()||Od()||Xd())}c.labs.userAgent.browser.isOpera=Od;c.labs.userAgent.browser.isIE=Pd;c.labs.userAgent.browser.isEdge=Qd;\\nc.labs.userAgent.browser.isEdgeChromium=Rd;c.labs.userAgent.browser.isOperaChromium=Sd;c.labs.userAgent.browser.isFirefox=Td;c.labs.userAgent.browser.isSafari=Ud;c.labs.userAgent.browser.isCoast=Wd;c.labs.userAgent.browser.isIosWebview=function(){return(R(\\\"iPad\\\")||R(\\\"iPhone\\\"))&&!Ud()&&!Vd()&&!Wd()&&!Td()&&R(\\\"AppleWebKit\\\")};c.labs.userAgent.browser.isChrome=Vd;c.labs.userAgent.browser.isAndroidBrowser=Yd;function Xd(){return R(\\\"Silk\\\")}c.labs.userAgent.browser.isSilk=Xd;\\nfunction Zd(a){const b={};a.forEach(d=>{b[d[0]]=d[1]});return d=>b[d.find(e=>e in b)]||\\\"\\\"}function $d(){var a=Jd();if(Pd())return ae(a);a=Ld(a);const b=Zd(a);return Od()?b([\\\"Version\\\",\\\"Opera\\\"]):Qd()?b([\\\"Edge\\\"]):Rd()?b([\\\"Edg\\\"]):Xd()?b([\\\"Silk\\\"]):Vd()?b([\\\"Chrome\\\",\\\"CriOS\\\",\\\"HeadlessChrome\\\"]):(a=a[2])&&a[1]||\\\"\\\"}c.labs.userAgent.browser.getVersion=$d;c.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=(0,c.string.internal.compareVersions)($d(),a)};\\nfunction ae(a){var b=/rv: *([\\\\d\\\\.]*)/.exec(a);if(b&&b[1])return b[1];b=\\\"\\\";const d=/MSIE +([\\\\d\\\\.]+)/.exec(a);if(d&&d[1])if(a=/Trident\\\\/(\\\\d.\\\\d)/.exec(a),\\\"7.0\\\"==d[1])if(a&&a[1])switch(a[1]){case \\\"4.0\\\":b=\\\"8.0\\\";break;case \\\"5.0\\\":b=\\\"9.0\\\";break;case \\\"6.0\\\":b=\\\"10.0\\\";break;case \\\"7.0\\\":b=\\\"11.0\\\"}else b=\\\"7.0\\\";else b=d[1];return b}\\nfunction be(a){var b=Jd();if(a===U.IE)return Pd()?ae(b):\\\"\\\";b=Ld(b);const d=Zd(b);switch(a){case U.OPERA:if(Od())return d([\\\"Version\\\",\\\"Opera\\\"]);if(Sd())return d([\\\"OPR\\\"]);break;case U.EDGE:if(Qd())return d([\\\"Edge\\\"]);if(Rd())return d([\\\"Edg\\\"]);break;case U.CHROMIUM:if(Vd())return d([\\\"Chrome\\\",\\\"CriOS\\\",\\\"HeadlessChrome\\\"])}return a===U.FIREFOX&&Td()||a===U.SAFARI&&Ud()||a===U.ANDROID_BROWSER&&Yd()||a===U.SILK&&Xd()?(a=b[2])&&a[1]||\\\"\\\":\\\"\\\"}\\nfunction ce(a){if(V()&&a!==U.SILK){var b=Q.brands.find(({brand:d})=>d===a);if(!b||!b.version)return NaN;b=b.version.split(\\\".\\\")}else{b=be(a);if(\\\"\\\"===b)return NaN;b=b.split(\\\".\\\")}return 0===b.length?NaN:Number(b[0])}c.labs.userAgent.browser.versionOf=ce;c.labs.userAgent.browser.isAtLeast=function(a,b){c.asserts.assert(Math.floor(b)===b,\\\"Major version must be an integer\\\");return ce(a)>=b};\\nc.labs.userAgent.browser.isAtMost=function(a,b){c.asserts.assert(Math.floor(b)===b,\\\"Major version must be an integer\\\");return ce(a)<=b};class de{constructor(a){this.brand_=a}getIfLoaded(){var a=S.fullVersionList.getIfLoaded();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),c.asserts.assertExists(a),new Md.Version(a.version)}async load(){const a=(await S.fullVersionList.load()).find(({brand:b})=>this.brand_===b);c.asserts.assertExists(a);return new Md.Version(a.version)}}\\nclass ee{constructor(a){this.version_=new Md.Version(a)}getIfLoaded(){return this.version_}async load(){return this.version_}}c.labs.userAgent.browser.loadFullVersions=async function(){V()&&Nd&&await S.fullVersionList.load()};function fe(a){if(V()&&Nd)return Q.brands.find(({brand:d})=>d===a)?new de(a):void 0;const b=be(a);return\\\"\\\"===b?void 0:new ee(b)}c.labs.userAgent.browser.fullVersionOf=fe;\\nc.labs.userAgent.browser.getVersionStringForLogging=function(a){if(V()){var b=fe(a);if(b){if(b=b.getIfLoaded())return b.toVersionStringForLogging();b=Q.brands.find(({brand:d})=>d===a);c.asserts.assertExists(b);return b.version}return\\\"\\\"}return be(a)};c.dom.tags={};c.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};c.dom.tags.isVoidTag=function(a){return!0===c.dom.tags.VOID_TAGS_[a]};const ge={};\\nclass W{constructor(a,b,d){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=d===ge?a:\\\"\\\";this.dir_=b;this.implementsGoogStringTypedString=this.implementsGoogI18nBidiDirectionalString=!0}getDirection(){return this.dir_}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}toString(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}static unwrap(a){return W.unwrapTrustedHTML(a).toString()}static unwrapTrustedHTML(a){if(a instanceof W&&a.constructor===\\nW)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;c.asserts.fail(`expected object of type SafeHtml, got '${a}' of type `+c.typeOf(a));return\\\"type_error:SafeHtml\\\"}static htmlEscape(a){if(a instanceof W)return a;const b=\\\"object\\\"==typeof a;let d=null;b&&a.implementsGoogI18nBidiDirectionalString&&(d=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.string.internal.htmlEscape(a),d)}static htmlEscapePreservingNewlines(a){if(a instanceof\\nW)return a;a=W.htmlEscape(a);return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.string.internal.newLineToBr(W.unwrap(a)),a.getDirection())}static htmlEscapePreservingNewlinesAndSpaces(a){if(a instanceof W)return a;a=W.htmlEscape(a);return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.string.internal.whitespaceEscape(W.unwrap(a)),a.getDirection())}static comment(a){return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\\\"\\\\x3c!--\\\"+c.string.internal.htmlEscape(a)+\\\"--\\\\x3e\\\",null)}static create(a,\\nb,d){W.verifyTagName(String(a));return W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,d)}static verifyTagName(a){if(!he.test(a))throw Error(W.ENABLE_ERROR_MESSAGES?`Invalid tag name <${a}>.`:\\\"\\\");if(a.toUpperCase()in ie)throw Error(W.ENABLE_ERROR_MESSAGES?`Tag name <${a}> is not allowed for SafeHtml.`:\\\"\\\");}static createIframe(a,b,d,e){a&&c.html.TrustedResourceUrl.unwrap(a);const f={};f.src=a||null;f.srcdoc=b&&W.unwrap(b);a=W.combineAttributes(f,{sandbox:\\\"\\\"},d);return W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"iframe\\\",\\na,e)}static createSandboxIframe(a,b,d,e){if(!W.canUseSandboxIframe())throw Error(W.ENABLE_ERROR_MESSAGES?\\\"The browser does not support sandboxed iframes.\\\":\\\"\\\");const f={};f.src=a?c.html.SafeUrl.unwrap(c.html.SafeUrl.sanitize(a)):null;f.srcdoc=b||null;f.sandbox=\\\"\\\";a=W.combineAttributes(f,{},d);return W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"iframe\\\",a,e)}static canUseSandboxIframe(){return c.global.HTMLIFrameElement&&\\\"sandbox\\\"in c.global.HTMLIFrameElement.prototype}static createScriptSrc(a,\\nb){c.html.TrustedResourceUrl.unwrap(a);a=W.combineAttributes({src:a},{},b);return W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"script\\\",a)}static createScript(a,b){for(var d in b)if(Object.prototype.hasOwnProperty.call(b,d)){var e=d.toLowerCase();if(\\\"language\\\"==e||\\\"src\\\"==e||\\\"text\\\"==e||\\\"type\\\"==e)throw Error(W.ENABLE_ERROR_MESSAGES?`Cannot set \\\"${e}\\\" attribute`:\\\"\\\");}d=\\\"\\\";a=ed(a);for(e=0;e<a.length;e++)d+=L.unwrap(a[e]);a=W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d,c.i18n.bidi.Dir.NEUTRAL);\\nreturn W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"script\\\",b,a)}static createStyle(a,b){b=W.combineAttributes({type:\\\"text/css\\\"},{},b);let d=\\\"\\\";a=ed(a);for(let e=0;e<a.length;e++)d+=N.unwrap(a[e]);a=W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d,c.i18n.bidi.Dir.NEUTRAL);return W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"style\\\",b,a)}static createMetaRefresh(a,b){a=c.html.SafeUrl.unwrap(c.html.SafeUrl.sanitize(a));(Pd()||Qd())&&c.string.internal.contains(a,\\\";\\\")&&(a=\\\"'\\\"+a.replace(/'/g,\\n\\\"%27\\\")+\\\"'\\\");return W.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"meta\\\",{\\\"http-equiv\\\":\\\"refresh\\\",content:(b||0)+\\\"; url=\\\"+a})}static createWithDir(a,b,d,e){b=W.create(b,d,e);b.dir_=a;return b}static join(a,b){a=W.htmlEscape(a);let d=a.getDirection();const e=[],f=g=>{Array.isArray(g)?g.forEach(f):(g=W.htmlEscape(g),e.push(W.unwrap(g)),g=g.getDirection(),d==c.i18n.bidi.Dir.NEUTRAL?d=g:g!=c.i18n.bidi.Dir.NEUTRAL&&d!=g&&(d=null))};b.forEach(f);return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e.join(W.unwrap(a)),\\nd)}static concat(a){return W.join(W.EMPTY,Array.prototype.slice.call(arguments))}static concatWithDir(a,b){const d=W.concat(Array.prototype.slice.call(arguments,1));d.dir_=a;return d}static createSafeHtmlSecurityPrivateDoNotAccessOrElse(a,b){const d=c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=d?d.createHTML(a):a;return new W(a,b,ge)}static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(a,b,d){var e=null;let f;f=`<${a}`+W.stringifyAttributes(a,b);null==d?d=[]:Array.isArray(d)||(d=\\n[d]);c.dom.tags.isVoidTag(a.toLowerCase())?(c.asserts.assert(!d.length,`Void tag <${a}> does not allow content.`),f+=\\\">\\\"):(e=W.concat(d),f+=\\\">\\\"+W.unwrap(e)+\\\"</\\\"+a+\\\">\\\",e=e.getDirection());(a=b&&b.dir)&&(e=/^(ltr|rtl|auto)$/i.test(a)?c.i18n.bidi.Dir.NEUTRAL:null);return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(f,e)}static stringifyAttributes(a,b){var d=\\\"\\\";if(b)for(let h in b)if(Object.prototype.hasOwnProperty.call(b,h)){if(!he.test(h))throw Error(W.ENABLE_ERROR_MESSAGES?`Invalid attribute name \\\"${h}\\\".`:\\n\\\"\\\");var e=b[h];if(null!=e){var f=a;var g=h;if(e instanceof c.string.Const)e=c.string.Const.unwrap(e);else if(\\\"style\\\"==g.toLowerCase())if(W.SUPPORT_STYLE_ATTRIBUTE){f=e;if(!c.isObject(f))throw Error(W.ENABLE_ERROR_MESSAGES?'The \\\"style\\\" attribute requires goog.html.SafeStyle or map of style properties, '+typeof f+\\\" given: \\\"+f:\\\"\\\");f instanceof M||(f=M.create(f));e=M.unwrap(f)}else throw Error(W.ENABLE_ERROR_MESSAGES?'Attribute \\\"style\\\" not supported.':\\\"\\\");else{if(/^on/i.test(g))throw Error(W.ENABLE_ERROR_MESSAGES?\\n`Attribute \\\"${g}`+'\\\" requires goog.string.Const value, \\\"'+e+'\\\" given.':\\\"\\\");if(g.toLowerCase()in je)if(e instanceof c.html.TrustedResourceUrl)e=c.html.TrustedResourceUrl.unwrap(e);else if(e instanceof c.html.SafeUrl)e=c.html.SafeUrl.unwrap(e);else if(\\\"string\\\"===typeof e)e=c.html.SafeUrl.sanitize(e).getTypedStringValue();else throw Error(W.ENABLE_ERROR_MESSAGES?`Attribute \\\"${g}\\\" on tag \\\"${f}`+'\\\" requires goog.html.SafeUrl, goog.string.Const, or string, value \\\"'+e+'\\\" given.':\\\"\\\");}e.implementsGoogStringTypedString&&\\n(e=e.getTypedStringValue());c.asserts.assert(\\\"string\\\"===typeof e||\\\"number\\\"===typeof e,\\\"String or number value expected, got \\\"+typeof e+\\\" with value: \\\"+e);g=`${g}=\\\"`+c.string.internal.htmlEscape(String(e))+'\\\"';d+=\\\" \\\"+g}}return d}static combineAttributes(a,b,d){const e={};for(var f in a)Object.prototype.hasOwnProperty.call(a,f)&&(c.asserts.assert(f.toLowerCase()==f,\\\"Must be lower case\\\"),e[f]=a[f]);for(const g in b)Object.prototype.hasOwnProperty.call(b,g)&&(c.asserts.assert(g.toLowerCase()==g,\\\"Must be lower case\\\"),\\ne[g]=b[g]);if(d)for(const g in d)if(Object.prototype.hasOwnProperty.call(d,g)){f=g.toLowerCase();if(f in a)throw Error(W.ENABLE_ERROR_MESSAGES?`Cannot override \\\"${f}\\\" attribute, got \\\"`+g+'\\\" with value \\\"'+d[g]+'\\\"':\\\"\\\");f in b&&delete e[f];e[g]=d[g]}return e}}W.ENABLE_ERROR_MESSAGES=c.DEBUG;W.SUPPORT_STYLE_ATTRIBUTE=!0;W.from=W.htmlEscape;\\nconst he=/^[a-zA-Z0-9-]+$/,je={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},ie={[c.dom.TagName.APPLET]:!0,[c.dom.TagName.BASE]:!0,[c.dom.TagName.EMBED]:!0,[c.dom.TagName.IFRAME]:!0,[c.dom.TagName.LINK]:!0,[c.dom.TagName.MATH]:!0,[c.dom.TagName.META]:!0,[c.dom.TagName.OBJECT]:!0,[c.dom.TagName.SCRIPT]:!0,[c.dom.TagName.STYLE]:!0,[c.dom.TagName.SVG]:!0,[c.dom.TagName.TEMPLATE]:!0};W.DOCTYPE_HTML=W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\\\"<!DOCTYPE html>\\\",c.i18n.bidi.Dir.NEUTRAL);\\nW.EMPTY=new W(c.global.trustedTypes&&c.global.trustedTypes.emptyHTML||\\\"\\\",c.i18n.bidi.Dir.NEUTRAL,ge);W.BR=W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\\\"<br>\\\",c.i18n.bidi.Dir.NEUTRAL);c.html.SafeHtml=W;c.html.uncheckedconversions={};c.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,d){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return W.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,d||null)};\\nc.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return L.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return M.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return N.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};c.dom.safe={};c.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:\\\"afterbegin\\\",AFTEREND:\\\"afterend\\\",BEFOREBEGIN:\\\"beforebegin\\\",BEFOREEND:\\\"beforeend\\\"};c.dom.safe.insertAdjacentHtml=function(a,b,d){a.insertAdjacentHTML(b,W.unwrapTrustedHTML(d))};c.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\\nc.dom.safe.isInnerHtmlCleanupRecursive_=c.functions.cacheReturnValue(function(){if(c.DEBUG&&\\\"undefined\\\"===typeof document)return!1;var a=document.createElement(\\\"div\\\"),b=document.createElement(\\\"div\\\");b.appendChild(document.createElement(\\\"div\\\"));a.appendChild(b);if(c.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=W.unwrapTrustedHTML(W.EMPTY);return!b.parentElement});\\nc.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(c.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=W.unwrapTrustedHTML(b)};c.dom.safe.setInnerHtml=function(a,b){if(c.asserts.ENABLE_ASSERTS&&a.tagName){var d=a.tagName.toUpperCase();if(c.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[d])throw Error(\\\"goog.dom.safe.setInnerHtml cannot be used to set content of \\\"+a.tagName+\\\".\\\");}c.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};\\nc.dom.safe.setInnerHtmlFromConstant=function(a,b){c.dom.safe.setInnerHtml(a,c.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(c.string.Const.from(\\\"Constant HTML to be immediatelly used.\\\"),c.string.Const.unwrap(b)))};c.dom.safe.setOuterHtml=function(a,b){a.outerHTML=W.unwrapTrustedHTML(b)};c.dom.safe.setFormElementAction=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);c.dom.asserts.assertIsHTMLFormElement(a).action=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.setButtonFormAction=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);c.dom.asserts.assertIsHTMLButtonElement(a).formAction=c.html.SafeUrl.unwrap(b)};c.dom.safe.setInputFormAction=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);c.dom.asserts.assertIsHTMLInputElement(a).formAction=c.html.SafeUrl.unwrap(b)};c.dom.safe.setStyle=function(a,b){a.style.cssText=M.unwrap(b)};c.dom.safe.documentWrite=function(a,b){a.write(W.unwrapTrustedHTML(b))};\\nc.dom.safe.setAnchorHref=function(a,b){c.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=c.html.SafeUrl.unwrap(b)};c.dom.safe.setImageSrc=function(a,b){c.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof c.html.SafeUrl)){var d=/^data:image\\\\//i.test(b);b=c.html.SafeUrl.sanitizeAssertUnchanged(b,d)}a.src=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.setAudioSrc=function(a,b){c.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof c.html.SafeUrl)){var d=/^data:audio\\\\//i.test(b);b=c.html.SafeUrl.sanitizeAssertUnchanged(b,d)}a.src=c.html.SafeUrl.unwrap(b)};c.dom.safe.setVideoSrc=function(a,b){c.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof c.html.SafeUrl)){var d=/^data:video\\\\//i.test(b);b=c.html.SafeUrl.sanitizeAssertUnchanged(b,d)}a.src=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.setEmbedSrc=function(a,b){c.dom.asserts.assertIsHTMLEmbedElement(a);a.src=c.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};c.dom.safe.setFrameSrc=function(a,b){c.dom.asserts.assertIsHTMLFrameElement(a);a.src=c.html.TrustedResourceUrl.unwrap(b)};c.dom.safe.setIframeSrc=function(a,b){c.dom.asserts.assertIsHTMLIFrameElement(a);a.src=c.html.TrustedResourceUrl.unwrap(b)};c.dom.safe.setIframeSrcdoc=function(a,b){c.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=W.unwrapTrustedHTML(b)};\\nc.dom.safe.setLinkHrefAndRel=function(a,b,d){c.dom.asserts.assertIsHTMLLinkElement(a);a.rel=d;c.string.internal.caseInsensitiveContains(d,\\\"stylesheet\\\")?(c.asserts.assert(b instanceof c.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because \\\"rel\\\" contains \\\"stylesheet\\\"'),a.href=c.html.TrustedResourceUrl.unwrap(b),(b=c.dom.safe.getStyleNonce(a.ownerDocument&&a.ownerDocument.defaultView))&&a.setAttribute(\\\"nonce\\\",b)):a.href=b instanceof c.html.TrustedResourceUrl?c.html.TrustedResourceUrl.unwrap(b):\\nb instanceof c.html.SafeUrl?c.html.SafeUrl.unwrap(b):c.html.SafeUrl.unwrap(c.html.SafeUrl.sanitizeAssertUnchanged(b))};c.dom.safe.setObjectData=function(a,b){c.dom.asserts.assertIsHTMLObjectElement(a);a.data=c.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};c.dom.safe.setScriptSrc=function(a,b){c.dom.asserts.assertIsHTMLScriptElement(a);a.src=c.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);c.dom.safe.setNonceForScriptElement_(a)};\\nc.dom.safe.setScriptContent=function(a,b){c.dom.asserts.assertIsHTMLScriptElement(a);a.textContent=L.unwrapTrustedScript(b);c.dom.safe.setNonceForScriptElement_(a)};c.dom.safe.setNonceForScriptElement_=function(a){const b=c.dom.safe.getScriptNonce(a.ownerDocument&&a.ownerDocument.defaultView);b&&a.setAttribute(\\\"nonce\\\",b)};c.dom.safe.setLocationHref=function(a,b){c.dom.asserts.assertIsLocation(a);b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.assignLocation=function(a,b){c.dom.asserts.assertIsLocation(a);b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(c.html.SafeUrl.unwrap(b))};c.dom.safe.replaceLocation=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(c.html.SafeUrl.unwrap(b))};\\nc.dom.safe.openInWindow=function(a,b,d,e){a=a instanceof c.html.SafeUrl?a:c.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||c.global;d=d instanceof c.string.Const?c.string.Const.unwrap(d):d||\\\"\\\";return void 0!==e?b.open(c.html.SafeUrl.unwrap(a),d,e):b.open(c.html.SafeUrl.unwrap(a),d)};c.dom.safe.parseFromStringHtml=function(a,b){return c.dom.safe.parseFromString(a,b,\\\"text/html\\\")};c.dom.safe.parseFromString=function(a,b,d){return a.parseFromString(W.unwrapTrustedHTML(b),d)};\\nc.dom.safe.createImageFromBlob=function(a){if(!/^image\\\\/.*/g.test(a.type))throw Error(\\\"goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.\\\");var b=c.global.URL.createObjectURL(a);a=new c.global.Image;a.onload=function(){c.global.URL.revokeObjectURL(b)};c.dom.safe.setImageSrc(a,c.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(c.string.Const.from(\\\"Image blob URL.\\\"),b));return a};c.dom.safe.createContextualFragment=function(a,b){return a.createContextualFragment(W.unwrapTrustedHTML(b))};\\nc.dom.safe.getScriptNonce=function(a){return c.dom.safe.getNonce_(\\\"script[nonce]\\\",a)};c.dom.safe.getStyleNonce=function(a){return c.dom.safe.getNonce_('style[nonce],link[rel=\\\"stylesheet\\\"][nonce]',a)};c.dom.safe.NONCE_PATTERN_=/^[\\\\w+/_-]+[=]{0,2}$/;c.dom.safe.getNonce_=function(a,b){b=(b||c.global).document;return b.querySelector?(a=b.querySelector(a))&&(a=a.nonce||a.getAttribute(\\\"nonce\\\"))&&c.dom.safe.NONCE_PATTERN_.test(a)?a:\\\"\\\":\\\"\\\"};c.string.DETECT_DOUBLE_ESCAPING=!1;c.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;c.string.Unicode={NBSP:\\\"\\\\u00a0\\\"};c.string.startsWith=c.string.internal.startsWith;c.string.endsWith=c.string.internal.endsWith;c.string.caseInsensitiveStartsWith=c.string.internal.caseInsensitiveStartsWith;c.string.caseInsensitiveEndsWith=c.string.internal.caseInsensitiveEndsWith;c.string.caseInsensitiveEquals=c.string.internal.caseInsensitiveEquals;\\nc.string.subs=function(a,b){const d=a.split(\\\"%s\\\");let e=\\\"\\\";const f=Array.prototype.slice.call(arguments,1);for(;f.length&&1<d.length;)e+=d.shift()+f.shift();return e+d.join(\\\"%s\\\")};c.string.collapseWhitespace=function(a){return a.replace(/[\\\\s\\\\xa0]+/g,\\\" \\\").replace(/^\\\\s+|\\\\s+$/g,\\\"\\\")};c.string.isEmptyOrWhitespace=c.string.internal.isEmptyOrWhitespace;c.string.isEmptyString=function(a){return 0==a.length};c.string.isEmpty=c.string.isEmptyOrWhitespace;c.string.isEmptyOrWhitespaceSafe=function(a){return c.string.isEmptyOrWhitespace(c.string.makeSafe(a))};\\nc.string.isEmptySafe=c.string.isEmptyOrWhitespaceSafe;c.string.isBreakingWhitespace=function(a){return!/[^\\\\t\\\\n\\\\r ]/.test(a)};c.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};c.string.isNumeric=function(a){return!/[^0-9]/.test(a)};c.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};c.string.isSpace=function(a){return\\\" \\\"==a};c.string.isUnicodeChar=function(a){return 1==a.length&&\\\" \\\"<=a&&\\\"~\\\">=a||\\\"\\\\u0080\\\"<=a&&\\\"\\\\ufffd\\\">=a};\\nc.string.stripNewlines=function(a){return a.replace(/(\\\\r\\\\n|\\\\r|\\\\n)+/g,\\\" \\\")};c.string.canonicalizeNewlines=function(a){return a.replace(/(\\\\r\\\\n|\\\\r|\\\\n)/g,\\\"\\\\n\\\")};c.string.normalizeWhitespace=function(a){return a.replace(/\\\\xa0|\\\\s/g,\\\" \\\")};c.string.normalizeSpaces=function(a){return a.replace(/\\\\xa0|[ \\\\t]+/g,\\\" \\\")};c.string.collapseBreakingSpaces=function(a){return a.replace(/[\\\\t\\\\r\\\\n ]+/g,\\\" \\\").replace(/^[\\\\t\\\\r\\\\n ]+|[\\\\t\\\\r\\\\n ]+$/g,\\\"\\\")};c.string.trim=c.string.internal.trim;\\nc.string.trimLeft=function(a){return a.replace(/^[\\\\s\\\\xa0]+/,\\\"\\\")};c.string.trimRight=function(a){return a.replace(/[\\\\s\\\\xa0]+$/,\\\"\\\")};c.string.caseInsensitiveCompare=c.string.internal.caseInsensitiveCompare;\\nc.string.numberAwareCompare_=function(a,b,d){if(a==b)return 0;if(!a)return-1;if(!b)return 1;const e=a.toLowerCase().match(d),f=b.toLowerCase().match(d),g=Math.min(e.length,f.length);for(let h=0;h<g;h++){d=e[h];const k=f[h];if(d!=k)return a=parseInt(d,10),!isNaN(a)&&(b=parseInt(k,10),!isNaN(b)&&a-b)?a-b:d<k?-1:1}return e.length!=f.length?e.length-f.length:a<b?-1:1};c.string.intAwareCompare=function(a,b){return c.string.numberAwareCompare_(a,b,/\\\\d+|\\\\D+/g)};\\nc.string.floatAwareCompare=function(a,b){return c.string.numberAwareCompare_(a,b,/\\\\d+|\\\\.\\\\d+|\\\\D+/g)};c.string.numerateCompare=c.string.floatAwareCompare;c.string.urlEncode=function(a){return encodeURIComponent(String(a))};c.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\\\\+/g,\\\" \\\"))};c.string.newLineToBr=c.string.internal.newLineToBr;c.string.htmlEscape=function(a,b){a=c.string.internal.htmlEscape(a,b);c.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(c.string.E_RE_,\\\"&#101;\\\"));return a};\\nc.string.E_RE_=/e/g;c.string.unescapeEntities=function(a){return c.string.contains(a,\\\"&\\\")?!c.string.FORCE_NON_DOM_HTML_UNESCAPING&&\\\"document\\\"in c.global?c.string.unescapeEntitiesUsingDom_(a):c.string.unescapePureXmlEntities_(a):a};c.string.unescapeEntitiesWithDocument=function(a,b){return c.string.contains(a,\\\"&\\\")?c.string.unescapeEntitiesUsingDom_(a,b):a};\\nc.string.unescapeEntitiesUsingDom_=function(a,b){const d={\\\"&amp;\\\":\\\"&\\\",\\\"&lt;\\\":\\\"<\\\",\\\"&gt;\\\":\\\">\\\",\\\"&quot;\\\":'\\\"'};let e;e=b?b.createElement(\\\"div\\\"):c.global.document.createElement(\\\"div\\\");return a.replace(c.string.HTML_ENTITY_PATTERN_,function(f,g){let h=d[f];if(h)return h;\\\"#\\\"==g.charAt(0)&&(g=Number(\\\"0\\\"+g.substr(1)),isNaN(g)||(h=String.fromCharCode(g)));h||(c.dom.safe.setInnerHtml(e,c.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(c.string.Const.from(\\\"Single HTML entity.\\\"),f+\\\" \\\")),\\nh=e.firstChild.nodeValue.slice(0,-1));return d[f]=h})};c.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(b,d){switch(d){case \\\"amp\\\":return\\\"&\\\";case \\\"lt\\\":return\\\"<\\\";case \\\"gt\\\":return\\\">\\\";case \\\"quot\\\":return'\\\"';default:return\\\"#\\\"!=d.charAt(0)||(d=Number(\\\"0\\\"+d.substr(1)),isNaN(d))?b:String.fromCharCode(d)}})};c.string.HTML_ENTITY_PATTERN_=/&([^;\\\\s<&]+);?/g;c.string.whitespaceEscape=function(a,b){return c.string.newLineToBr(a.replace(/  /g,\\\" &#160;\\\"),b)};\\nc.string.preserveSpaces=function(a){return a.replace(/(^|[\\\\n ]) /g,\\\"$1\\\"+c.string.Unicode.NBSP)};c.string.stripQuotes=function(a,b){const d=b.length;for(let e=0;e<d;e++){const f=1==d?b:b.charAt(e);if(a.charAt(0)==f&&a.charAt(a.length-1)==f)return a.substring(1,a.length-1)}return a};c.string.truncate=function(a,b,d){d&&(a=c.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+\\\"...\\\");d&&(a=c.string.htmlEscape(a));return a};\\nc.string.truncateMiddle=function(a,b,d,e){d&&(a=c.string.unescapeEntities(a));if(e&&a.length>b){e>b&&(e=b);var f=a.length-e;a=a.substring(0,b-e)+\\\"...\\\"+a.substring(f)}else a.length>b&&(e=Math.floor(b/2),f=a.length-e,e+=b%2,a=a.substring(0,e)+\\\"...\\\"+a.substring(f));d&&(a=c.string.htmlEscape(a));return a};c.string.specialEscapeChars_={\\\"\\\\x00\\\":\\\"\\\\\\\\0\\\",\\\"\\\\b\\\":\\\"\\\\\\\\b\\\",\\\"\\\\f\\\":\\\"\\\\\\\\f\\\",\\\"\\\\n\\\":\\\"\\\\\\\\n\\\",\\\"\\\\r\\\":\\\"\\\\\\\\r\\\",\\\"\\\\t\\\":\\\"\\\\\\\\t\\\",\\\"\\\\x0B\\\":\\\"\\\\\\\\x0B\\\",'\\\"':'\\\\\\\\\\\"',\\\"\\\\\\\\\\\":\\\"\\\\\\\\\\\\\\\\\\\",\\\"<\\\":\\\"\\\\\\\\u003C\\\"};c.string.jsEscapeCache_={\\\"'\\\":\\\"\\\\\\\\'\\\"};\\nc.string.quote=function(a){a=String(a);const b=['\\\"'];for(let d=0;d<a.length;d++){const e=a.charAt(d),f=e.charCodeAt(0);b[d+1]=c.string.specialEscapeChars_[e]||(31<f&&127>f?e:c.string.escapeChar(e))}b.push('\\\"');return b.join(\\\"\\\")};c.string.escapeString=function(a){const b=[];for(let d=0;d<a.length;d++)b[d]=c.string.escapeChar(a.charAt(d));return b.join(\\\"\\\")};\\nc.string.escapeChar=function(a){if(a in c.string.jsEscapeCache_)return c.string.jsEscapeCache_[a];if(a in c.string.specialEscapeChars_)return c.string.jsEscapeCache_[a]=c.string.specialEscapeChars_[a];let b;const d=a.charCodeAt(0);if(31<d&&127>d)b=a;else{if(256>d){if(b=\\\"\\\\\\\\x\\\",16>d||256<d)b+=\\\"0\\\"}else b=\\\"\\\\\\\\u\\\",4096>d&&(b+=\\\"0\\\");b+=d.toString(16).toUpperCase()}return c.string.jsEscapeCache_[a]=b};c.string.contains=c.string.internal.contains;c.string.caseInsensitiveContains=c.string.internal.caseInsensitiveContains;\\nc.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};c.string.removeAt=function(a,b,d){let e=a;0<=b&&b<a.length&&0<d&&(e=a.substr(0,b)+a.substr(b+d,a.length-b-d));return e};c.string.remove=function(a,b){return a.replace(b,\\\"\\\")};c.string.removeAll=function(a,b){b=new RegExp(c.string.regExpEscape(b),\\\"g\\\");return a.replace(b,\\\"\\\")};c.string.replaceAll=function(a,b,d){b=new RegExp(c.string.regExpEscape(b),\\\"g\\\");return a.replace(b,d.replace(/\\\\$/g,\\\"$$$$\\\"))};\\nc.string.regExpEscape=function(a){return String(a).replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g,\\\"\\\\\\\\$1\\\").replace(/\\\\x08/g,\\\"\\\\\\\\x08\\\")};c.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};c.string.padNumber=function(a,b,d){if(!Number.isFinite(a))return String(a);a=void 0!==d?a.toFixed(d):String(a);d=a.indexOf(\\\".\\\");-1===d&&(d=a.length);const e=\\\"-\\\"===a[0]?\\\"-\\\":\\\"\\\";e&&(a=a.substring(1));return e+c.string.repeat(\\\"0\\\",Math.max(0,b-d))+a};\\nc.string.makeSafe=function(a){return null==a?\\\"\\\":String(a)};c.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^c.now()).toString(36)};c.string.compareVersions=c.string.internal.compareVersions;c.string.hashCode=function(a){let b=0;for(let d=0;d<a.length;++d)b=31*b+a.charCodeAt(d)>>>0;return b};c.string.uniqueStringCounter_=2147483648*Math.random()|0;c.string.createUniqueString=function(){return\\\"goog_\\\"+c.string.uniqueStringCounter_++};\\nc.string.toNumber=function(a){const b=Number(a);return 0==b&&c.string.isEmptyOrWhitespace(a)?NaN:b};c.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};c.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};c.string.toCamelCase=function(a){return String(a).replace(/\\\\-([a-z])/g,function(b,d){return d.toUpperCase()})};c.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,\\\"-$1\\\").toLowerCase()};\\nc.string.toTitleCase=function(a,b){b=\\\"string\\\"===typeof b?c.string.regExpEscape(b):\\\"\\\\\\\\s\\\";return a.replace(new RegExp(\\\"(^\\\"+(b?\\\"|[\\\"+b+\\\"]+\\\":\\\"\\\")+\\\")([a-z])\\\",\\\"g\\\"),function(d,e,f){return e+f.toUpperCase()})};c.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};c.string.parseInt=function(a){isFinite(a)&&(a=String(a));return\\\"string\\\"===typeof a?/^\\\\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};\\nc.string.splitLimit=function(a,b,d){a=a.split(b);const e=[];for(;0<d&&a.length;)e.push(a.shift()),d--;a.length&&e.push(a.join(b));return e};c.string.lastComponent=function(a,b){if(b)\\\"string\\\"==typeof b&&(b=[b]);else return a;let d=-1;for(let e=0;e<b.length;e++){if(\\\"\\\"==b[e])continue;const f=a.lastIndexOf(b[e]);f>d&&(d=f)}return-1==d?a:a.slice(d+1)};\\nc.string.editDistance=function(a,b){const d=[],e=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var f=0;f<b.length+1;f++)d[f]=f;for(f=0;f<a.length;f++){e[0]=f+1;for(var g=0;g<b.length;g++)e[g+1]=Math.min(e[g]+1,d[g+1]+1,d[g]+Number(a[f]!=b[g]));for(g=0;g<d.length;g++)d[g]=e[g]}return e[b.length]};c.string.path={};c.string.path.baseName=function(a){const b=a.lastIndexOf(\\\"/\\\")+1;return a.slice(b)};c.string.path.basename=c.string.path.baseName;c.string.path.dirname=function(a){const b=a.lastIndexOf(\\\"/\\\")+1;a=a.slice(0,b);/^\\\\/+$/.test(a)||(a=a.replace(/\\\\/+$/,\\\"\\\"));return a};c.string.path.extension=function(a){a=c.string.path.baseName(a).replace(/\\\\.+/g,\\\".\\\");const b=a.lastIndexOf(\\\".\\\");return 0>=b?\\\"\\\":a.substr(b+1)};\\nc.string.path.join=function(a){let b=arguments[0];for(let d=1;d<arguments.length;d++){const e=arguments[d];b=c.string.startsWith(e,\\\"/\\\")?e:\\\"\\\"==b||c.string.endsWith(b,\\\"/\\\")?b+e:b+(\\\"/\\\"+e)}return b};\\nc.string.path.normalizePath=function(a){if(\\\"\\\"==a)return\\\".\\\";let b=\\\"\\\";c.string.startsWith(a,\\\"/\\\")&&(b=\\\"/\\\",c.string.startsWith(a,\\\"//\\\")&&!c.string.startsWith(a,\\\"///\\\")&&(b=\\\"//\\\"));a=a.split(\\\"/\\\");const d=[];for(let e=0;e<a.length;e++){const f=a[e];\\\"\\\"!=f&&\\\".\\\"!=f&&(\\\"..\\\"!=f||!b&&!d.length||\\\"..\\\"==Tc(d)?d.push(f):d.pop())}return b+d.join(\\\"/\\\")||\\\".\\\"};c.string.path.split=function(a){const b=c.string.path.dirname(a);a=c.string.path.baseName(a);return[b,a]};function X(a){return/^\\\\//g.test(a)?a:`/${a}`}function ke(){if(\\\"undefined\\\"===typeof performance||\\\"undefined\\\"===typeof performance.now){const a=Date.now();return Date.now()-a}return performance.now()}function le(a){var b=a.reduce((e,f)=>e+f.length,0);if(0!==a.length){b=new Uint8Array(b);var d=0;for(const e of a)b.set(e,d),d+=e.length;return b}}\\nfunction Y(){this.fd=Array.from({length:4});this.fd[0]={fd:0,path:\\\"/dev/stdin\\\",seekPos:c.global.BigInt(0),buffers:[]};this.fd[1]={fd:1,path:\\\"/dev/stdout\\\",seekPos:c.global.BigInt(0),buffers:[]};this.fd[2]={fd:2,path:\\\"/dev/stderr\\\",seekPos:c.global.BigInt(0),buffers:[]};this.fd[3]={fd:3,path:\\\"/\\\",seekPos:c.global.BigInt(0),buffers:[]};this.getMemory=this.getMemory.bind(this);this.CPUTIME_START=0}Y.prototype.start=function(a){this.CPUTIME_START=ke();a.exports._start()};\\nY.prototype.getImports=function(a){const b={};a=WebAssembly.Module.imports(a);for(const d of a)\\\"function\\\"===d.kind&&d.module.startsWith(\\\"wasi_\\\")&&(\\\"object\\\"!==typeof b[d.module]&&(b[d.module]={}),b[d.module][d.name]=this[d.name].bind(this));return b};Y.prototype.setMemory=function(a){this.memory=a};Y.prototype.getMemory=function(){this.view&&this.view.buffer&&this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer));return this.view};\\nY.prototype.msToNs=function(a){const b=Math.trunc(a);a=c.global.BigInt(Math.round(1E6*(a-b)));return c.global.BigInt(b)*c.global.BigInt(1E6)+a};Y.prototype.now=function(a){switch(a){case 1:return Math.floor(ke());case 0:return this.msToNs(Date.now());case 2:case 3:return Math.floor(ke()-this.CPUTIME_START);default:return 0}};Y.prototype.args_get=function(){return 0};Y.prototype.args_sizes_get=function(){return 0};Y.prototype.clock_res_get=function(){return 0};\\nY.prototype.clock_time_get=function(a,b,d){b=this.getMemory();a=this.now(a);b.setBigUint64(d,c.global.BigInt(a),!0);return 0};Y.prototype.environ_get=function(){return 0};Y.prototype.environ_sizes_get=function(){return 0};Y.prototype.fd_advise=function(){return 52};Y.prototype.fd_allocate=function(){return 52};Y.prototype.fd_close=function(){return 0};Y.prototype.fd_datasync=function(){return 0};\\nY.prototype.fd_fdstat_get=function(a,b){a=this.getMemory();a.setUint8(b+4,4);a.setUint16(b+2,0,!0);a.setUint16(b+4,0,!0);a.setBigUint64(b+8,c.global.BigInt(Qc),!0);a.setBigUint64(b+8+8,c.global.BigInt(Rc),!0);return 0};Y.prototype.fd_fdstat_set_flags=function(){return 52};Y.prototype.fd_fdstat_set_rights=function(){return 0};\\nY.prototype.fd_filestat_get=function(a,b){let d=0;this.fd[a]&&(d=this.fd[a].buffers.reduce(function(f,g){return f+(null==g?void 0:g.byteLength)?null==g?void 0:g.byteLength:0},0));const e=this.getMemory();e.setBigUint64(b,c.global.BigInt(a),!0);b+=8;e.setBigUint64(b,c.global.BigInt(a),!0);b+=8;e.setUint8(b,4);b+=8;e.setBigUint64(b,c.global.BigInt(1),!0);b+=8;e.setBigUint64(b,c.global.BigInt(d),!0);b+=8;e.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);b+=8;e.setBigUint64(b,this.msToNs(this.CPUTIME_START),\\n!0);e.setBigUint64(b+8,this.msToNs(this.CPUTIME_START),!0);return 0};Y.prototype.fd_filestat_set_size=function(){return 0};Y.prototype.fd_filestat_set_times=function(){return 0};Y.prototype.fd_pread=function(){return 0};Y.prototype.fd_prestat_dir_name=function(a,b){if(!this.fd[a]&&!this.fd[a-1])return 8;var {path:d}=this.fd[a];a=this.getMemory();d=Ea.encode(d);(new Uint8Array(a.buffer)).set(d,b);return 0};\\nY.prototype.fd_prestat_get=function(a,b){if(!this.fd[a])return 8;var {path:d}=this.fd[a];a=this.getMemory();d=Ea.encode(d);a.setUint8(b,0);a.setUint32(b+4,d.byteLength,!0);return 0};Y.prototype.fd_pwrite=function(a,b,d,e,f){console.log(\\\"fd_pwrite\\\",a,b,d,e,f,arguments);return 0};\\nY.prototype.fd_read=function(a,b,d,e){const f=this.fd[a]&&this.fd[a].buffers;var g=f.reduce((t,u)=>t+u.length,0);const h=this.getMemory();if(f&&0!==f.length){var k=Number(this.fd[a].seekPos),n=0,l=!1;if(k>=g)return-1;for(g=0;g<d;g++){var q=b+8*g;const t=h.getUint32(q,!0);q=h.getUint32(q+4,!0);l||(n+=q,Array.from({length:q},(u,v)=>v).reduce((u,v)=>{if(l)return u;const [J,w]=u;let F=u=0,O=!1,K=0,x;if(0===v)for(;!O;)x=f[u]?f[u].byteLength:0,K<=k&&x+K>k?(O=!0,F=k-K):(K+=x,u+=1);else u=J,F=w;f[u]?(h.setUint8(t+\\nv,f[u][F]),F+1>=f[u].byteLength?(u=J+1,F=0):F+=1):(h.setUint8(t+v,\\\"\\\\x00\\\"),k+=v,l=!0);return[u,F]},[0,0]),l||(k+=q))}this.fd[a].seekPos=c.global.BigInt(k);h.setUint32(e,n,!0);return 0}console.error(\\\"Reading non existent file\\\",a,this.fd[a])};Y.prototype.fd_readdir=function(){return 0};Y.prototype.fd_renumber=function(){return 0};\\nY.prototype.fd_seek=function(a,b,d,e){const f=this.getMemory();switch(d){case 1:this.fd[a].seekPos=(this.fd[a].seekPos?this.fd[a].seekPos:c.global.BigInt(0))+c.global.BigInt(b);break;case 2:d=this.fd[a].writer?c.global.BigInt(this.fd[a].writer.length):c.global.BigInt(0);this.fd[a].seekPos=d+BigInt(b);break;case 0:this.fd[a].seekPos=BigInt(b)}f.setBigUint64(e,this.fd[a].seekPos,!0);return 0};Y.prototype.fd_sync=function(){return 0};\\nY.prototype.fd_tell=function(a,b){const d=this.getMemory();this.fd[a].seekPos||(this.fd[a].seekPos=c.global.BigInt(0));d.setBigUint64(b,this.fd[a].seekPos,!0);return 0};\\nY.prototype.fd_write=function(a,b,d,e){let f=!1;const g=this.getMemory();this.fd[a].buffers=this.fd[a].buffers||[];this.fd[a].seekPos===c.global.BigInt(0)&&0<this.fd[a].buffers.length&&(f=!0);let h=0;for(let l=0;l<d;l++){var k=b+8*l,n=g.getUint32(k,!0);k=g.getUint32(k+4,!0);h+=k;n=new Uint8Array(g.buffer,n,k);f?this.fd[a].buffers.unshift(n.slice(0,k)):this.fd[a].buffers.push(n.slice(0,k))}this.fd[a].seekPos+=c.global.BigInt(h);g.setUint32(e,h,!0);[1,2].includes(a)&&console.log(z.decode(le(this.fd[a].buffers)));\\nreturn 0};Y.prototype.path_create_directory=function(){return 0};Y.prototype.path_filestat_get=function(){return 0};Y.prototype.path_filestat_set_times=function(){return 0};Y.prototype.path_link=function(){return 0};\\nY.prototype.path_open=function(a,b,d,e,f,g,h,k,n){b=this.getMemory();f=(this.fd[a]||{path:\\\"/\\\"}).path;d=new Uint8Array(b.buffer,d,e);d=z.decode(d);const l=X(c.string.path.normalizePath(c.string.path.join(3===a?\\\"\\\":f,d)));if(l.startsWith(\\\"/..\\\")||\\\"/._\\\"===l||\\\"/.AppleDouble\\\"===l)return 8;(a=Object.values(this.fd).find(q=>q.path===l&&Array.isArray(q.buffers)))?d=a.fd:(d=this.fd.length,this.fd[d]={fd:d});this.fd[d]={...this.fd[d],path:l,type:\\\"file\\\",seekPos:c.global.BigInt(0),buffers:a?this.fd[d].buffers:\\n[]};c.global.BigInt(0);b.setUint32(n,d,!0);return 0};Y.prototype.path_readlink=function(){return 0};Y.prototype.path_remove_directory=function(){return 0};Y.prototype.path_rename=function(){return 0};Y.prototype.path_symlink=function(){return 0};Y.prototype.path_unlink_file=function(){return 0};Y.prototype.poll_oneoff=function(){return 0};Y.prototype.proc_exit=function(){return 0};Y.prototype.proc_raise=function(){return 0};Y.prototype.random_get=function(){return 0};Y.prototype.sched_yield=function(){return 0};\\nY.prototype.sock_recv=function(){return 52};Y.prototype.sock_send=function(){return 52};Y.prototype.sock_shutdown=function(){return 52};Y.prototype.findBuffers=function(a){const b=Object.values(this.fd).find(({path:d})=>d===a);return b&&b.buffers};\\nY.prototype.readdir=function(a){const b=(X((0,c.string.path.normalizePath)(a))+\\\"/\\\").replace(\\\"//\\\",\\\"/\\\"),d=[];Object.values(this.fd).forEach(({path:e})=>!/\\\\//g.test(e.replace(b,\\\"\\\"))&&d.push(e));return d.map(e=>e.replace(b,\\\"\\\").replace(/^\\\\//g,\\\"\\\")).filter(e=>!!e)};Y.prototype.writeFile=function(a,b){const d=X((0,c.string.path.normalizePath)(a));a=Object.keys(this.fd).length;const e=Object.values(this.fd).find(({path:f})=>f===d);this.fd[a]={fd:a,path:d,seekPos:c.global.BigInt(0),buffers:[b]};e&&delete this.fd[e]};\\nY.prototype.appendFile=function(a,b){var d=X((0,c.string.path.normalizePath)(a));(d=this.findBuffers(d))?d.push(b):console.error(`Can't append to non-existing file ${a}`)};Y.prototype.readFile=function(a){a=X((0,c.string.path.normalizePath)(a));if(a=this.findBuffers(a))return le(a)};Y.prototype.readStdOut=function(){const a=Object.values(this.fd[0]);return le(a&&a.buffers||[])};\\nY.prototype.unlink=function(a){const b=X((0,c.string.path.normalizePath)(a));(a=Object.values(this.fd).find(({path:d})=>d===b))?delete this.fd[a]:console.error(`While trying to unlink ${b}, path not found`)};Y.prototype.mkdir=function(a){const b=X((0,c.string.path.normalizePath)(a)),d=[];Object.values(this.fd).forEach(({path:e})=>e.startsWith(b)&&d.push(e));0<d.length?console.warn(`mkdir: path ${a} already exists`):(a=Object.keys(this.fd).length,this.fd[a]={fd:a,path:b})};function me(a){for(;0<a.length;)a.pop()};var Z={CompressionMethod:{DEFLATE:8,RESERVED:15}};Z.Util={};Z.Util.stringToByteArray=function(a){a=[...a];let b,d;b=0;for(d=a.length;b<d;b++)a[b]=(a[b].charPointAt(0)&255)>>>0;return new Uint8Array([a])};Z.Adler32=function(a){\\\"string\\\"===typeof a&&(a=Z.Util.stringToByteArray(a));return Z.Adler32.update(1,a)};Z.Adler32.update=function(a,b){let d=a&65535;a=a>>>16&65535;let e=b.length,f,g=0;for(;0<e;){f=e>Z.Adler32.OptimizationParameter?Z.Adler32.OptimizationParameter:e;e-=f;do d+=b[g++],a+=d;while(--f);d%=65521;a%=65521}return(a<<16|d)>>>0};Z.Adler32.OptimizationParameter=1024;/*\\n zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\\nZ.Huffman={};Z.Huffman.buildHuffmanTable=function(a){const b=a.length;let d=0,e=Number.POSITIVE_INFINITY,f,g,h,k;let n,l;for(n=0;n<b;++n)a[n]>d&&(d=a[n]),a[n]<e&&(e=a[n]);const q=1<<d,t=new Uint32Array(q);f=1;g=0;for(h=2;f<=d;){for(n=0;n<b;++n)if(a[n]===f){k=0;var u=g;for(l=0;l<f;++l)k=k<<1|u&1,u>>=1;u=f<<16|n;for(l=k;l<q;l+=h)t[l]=u;++g}++f;g<<=1;h<<=1}return[t,d,e]};Z.RawInflate=function(a,b){this.blocks=[];this.bufferSize=32768;this.bitsbuflen=this.bitsbuf=this.ip=this.totalpos=0;this.input=new Uint8Array(a);this.bfinal=!1;this.bufferType=Z.RawInflate.BufferType.ADAPTIVE;this.resize=!1;if(b||!(b={}))b.index&&(this.ip=b.index),b.bufferSize&&(this.bufferSize=b.bufferSize),b.bufferType&&(this.bufferType=b.bufferType),b.resize&&(this.resize=b.resize);switch(this.bufferType){case Z.RawInflate.BufferType.BLOCK:this.op=Z.RawInflate.MaxBackwardLength;this.output=new Uint8Array(Z.RawInflate.MaxBackwardLength+\\nthis.bufferSize+Z.RawInflate.MaxCopyLength);break;case Z.RawInflate.BufferType.ADAPTIVE:this.op=0;this.output=new Uint8Array(this.bufferSize);break;default:throw Error(\\\"invalid inflate mode\\\");}};Z.RawInflate.BufferType={BLOCK:0,ADAPTIVE:1};\\nZ.RawInflate.prototype.decompress=function(){for(;!this.bfinal;)this.parseBlock();switch(this.bufferType){case Z.RawInflate.BufferType.BLOCK:return this.concatBufferBlock();case Z.RawInflate.BufferType.ADAPTIVE:return this.concatBufferDynamic();default:throw Error(\\\"invalid inflate mode\\\");}};Z.RawInflate.MaxBackwardLength=32768;Z.RawInflate.MaxCopyLength=258;Z.RawInflate.Order=new Uint16Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\\nZ.RawInflate.LengthCodeTable=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258]);Z.RawInflate.LengthExtraTable=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0]);Z.RawInflate.DistCodeTable=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]);\\nZ.RawInflate.DistExtraTable=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);var ne=Z.RawInflate,oe;const pe=new Uint8Array(288);let qe,re;qe=0;for(re=pe.length;qe<re;++qe)pe[qe]=143>=qe?8:255>=qe?9:279>=qe?7:8;oe=(0,Z.Huffman.buildHuffmanTable)(pe);ne.FixedLiteralLengthTable=oe;var se=Z.RawInflate,te;const ue=new Uint8Array(30);let ve,we;ve=0;for(we=ue.length;ve<we;++ve)ue[ve]=5;te=(0,Z.Huffman.buildHuffmanTable)(ue);se.FixedDistanceTable=te;\\nZ.RawInflate.prototype.parseBlock=function(){let a=this.readBits(3);a&1&&(this.bfinal=!0);a>>>=1;switch(a){case 0:this.parseUncompressedBlock();break;case 1:this.parseFixedHuffmanBlock();break;case 2:this.parseDynamicHuffmanBlock();break;default:throw Error(\\\"unknown BTYPE: \\\"+a);}};\\nZ.RawInflate.prototype.readBits=function(a){let b=this.bitsbuf,d=this.bitsbuflen;const e=this.input;let f=this.ip;if(f+(a-d+7>>3)>=e.length)throw Error(\\\"input buffer is broken\\\");for(;d<a;)b|=e[f++]<<d,d+=8;this.bitsbuf=b>>>a;this.bitsbuflen=d-a;this.ip=f;return b&(1<<a)-1};\\nZ.RawInflate.prototype.readCodeByTable=function(a){let b=this.bitsbuf,d=this.bitsbuflen;var e=this.input;let f=this.ip;var g=e.length;const h=a[0];for(a=a[1];d<a&&!(f>=g);)b|=e[f++]<<d,d+=8;e=h[b&(1<<a)-1];g=e>>>16;if(g>d)throw Error(\\\"invalid code length: \\\"+g);this.bitsbuf=b>>g;this.bitsbuflen=d-g;this.ip=f;return e&65535};\\nZ.RawInflate.prototype.parseUncompressedBlock=function(){const a=this.input;let b=this.ip,d=this.output,e=this.op;var f=a.length;let g;const h=d.length;this.bitsbuflen=this.bitsbuf=0;if(b+1>=f)throw Error(\\\"invalid uncompressed block header: LEN\\\");g=a[b++]|a[b++]<<8;if(b+1>=f)throw Error(\\\"invalid uncompressed block header: NLEN\\\");f=a[b++]|a[b++]<<8;if(g===~f)throw Error(\\\"invalid uncompressed block header: length verify\\\");if(b+g>a.length)throw Error(\\\"input buffer is broken\\\");switch(this.bufferType){case Z.RawInflate.BufferType.BLOCK:for(;e+\\ng>d.length;)f=h-e,g-=f,d.set(a.subarray(b,b+f),e),e+=f,b+=f,this.op=e,d=this.expandBufferBlock(),e=this.op;break;case Z.RawInflate.BufferType.ADAPTIVE:for(;e+g>d.length;)d=this.expandBufferAdaptive({fixRatio:2});break;default:throw Error(\\\"invalid inflate mode\\\");}d.set(a.subarray(b,b+g),e);this.ip=b+g;this.op=e+g;this.output=d};\\nZ.RawInflate.prototype.parseFixedHuffmanBlock=function(){switch(this.bufferType){case Z.RawInflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(Z.RawInflate.FixedLiteralLengthTable,Z.RawInflate.FixedDistanceTable);break;case Z.RawInflate.BufferType.BLOCK:this.decodeHuffmanBlock(Z.RawInflate.FixedLiteralLengthTable,Z.RawInflate.FixedDistanceTable);break;default:throw Error(\\\"invalid inflate mode\\\");}};\\nZ.RawInflate.prototype.parseDynamicHuffmanBlock=function(){var a=this.readBits(5)+257,b=this.readBits(5)+1,d=this.readBits(4)+4,e=new Uint8Array(Z.RawInflate.Order.length);let f;for(f=0;f<d;++f)e[Z.RawInflate.Order[f]]=this.readBits(3);e=(0,Z.Huffman.buildHuffmanTable)(e);d=new Uint8Array(a+b);f=0;for(b=a+b;f<b;){var g=this.readCodeByTable(e);switch(g){case 16:for(g=3+this.readBits(2);g--;)d[f++]=h;break;case 17:for(g=3+this.readBits(3);g--;)d[f++]=0;var h=0;break;case 18:for(g=11+this.readBits(7);g--;)d[f++]=\\n0;h=0;break;default:h=d[f++]=g}}h=(0,Z.Huffman.buildHuffmanTable)(d.subarray(0,a));a=(0,Z.Huffman.buildHuffmanTable)(d.subarray(a));switch(this.bufferType){case Z.RawInflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(h,a);break;case Z.RawInflate.BufferType.BLOCK:this.decodeHuffmanBlock(h,a);break;default:throw Error(\\\"invalid inflate mode\\\");}};\\nZ.RawInflate.prototype.decodeHuffmanBlock=function(a,b){let d=this.output,e=this.op;this.currentLitlenTable=a;const f=d.length-Z.RawInflate.MaxCopyLength;var g;let h,k;const n=Z.RawInflate.LengthCodeTable,l=Z.RawInflate.LengthExtraTable,q=Z.RawInflate.DistCodeTable,t=Z.RawInflate.DistExtraTable;for(;256!==(g=this.readCodeByTable(a));)if(256>g)e>=f&&(this.op=e,d=this.expandBufferBlock(),e=this.op),d[e++]=g;else for(g-=257,k=n[g],0<l[g]&&(k+=this.readBits(l[g])),g=this.readCodeByTable(b),h=q[g],0<t[g]&&\\n(h+=this.readBits(t[g])),e>=f&&(this.op=e,d=this.expandBufferBlock(),e=this.op);k--;)d[e]=d[e++-h];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=e};\\nZ.RawInflate.prototype.decodeHuffmanAdaptive=function(a,b){let d=this.output,e=this.op;this.currentLitlenTable=a;let f=d.length;var g;let h,k;const n=Z.RawInflate.LengthCodeTable,l=Z.RawInflate.LengthExtraTable,q=Z.RawInflate.DistCodeTable,t=Z.RawInflate.DistExtraTable;for(;256!==(g=this.readCodeByTable(a));)if(256>g)e>=f&&(d=this.expandBufferAdaptive(),f=d.length),d[e++]=g;else for(g-=257,k=n[g],0<l[g]&&(k+=this.readBits(l[g])),g=this.readCodeByTable(b),h=q[g],0<t[g]&&(h+=this.readBits(t[g])),e+\\nk>f&&(d=this.expandBufferAdaptive(),f=d.length);k--;)d[e]=d[e++-h];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=e};Z.RawInflate.prototype.expandBufferBlock=function(){const a=new Uint8Array(this.op-Z.RawInflate.MaxBackwardLength),b=this.op-Z.RawInflate.MaxBackwardLength,d=this.output;a.set(d.subarray(Z.RawInflate.MaxBackwardLength,a.length));this.blocks.push(a);this.totalpos+=a.length;d.set(d.subarray(b,b+Z.RawInflate.MaxBackwardLength));this.op=Z.RawInflate.MaxBackwardLength;return d};\\nZ.RawInflate.prototype.expandBufferAdaptive=function(a){let b=Math.trunc(this.input.length/this.ip+1);const d=this.input,e=this.output;a&&(\\\"number\\\"===typeof a.fixRatio&&(b=a.fixRatio),\\\"number\\\"===typeof a.addRatio&&(b+=a.addRatio));2>b?(a=(d.length-this.ip)/this.currentLitlenTable[2],a=Math.trunc(a/2*258),a=a<e.length?e.length+a:e.length<<1):a=e.length*b;a=new Uint8Array(a);a.set(e);return this.output=a};\\nZ.RawInflate.prototype.concatBufferBlock=function(){let a=0;const b=this.output,d=this.blocks;let e;const f=new Uint8Array(this.totalpos+(this.op-Z.RawInflate.MaxBackwardLength));let g,h,k,n;if(0===d.length)return this.output.subarray(Z.RawInflate.MaxBackwardLength,this.op);g=0;for(h=d.length;g<h;++g)for(e=d[g],k=0,n=e.length;k<n;++k)f[a++]=e[k];g=Z.RawInflate.MaxBackwardLength;for(h=this.op;g<h;++g)f[a++]=b[g];this.blocks=[];return this.buffer=f};\\nZ.RawInflate.prototype.concatBufferDynamic=function(){let a;const b=this.op;this.resize?(a=new Uint8Array(b),a.set(this.output.subarray(0,b))):a=this.output.subarray(0,b);return this.buffer=a};Z.Inflate=function(a,b){this.input=a;this.ip=0;if(b||!(b={}))b.index&&(this.ip=b.index),b.verify&&(this.verify=b.verify);const d=a[this.ip++],e=a[this.ip++];switch(d&15){case Z.CompressionMethod.DEFLATE:this.method=Z.CompressionMethod.DEFLATE;break;default:throw Error(\\\"unsupported compression method\\\");}if(0!==((d<<8)+e)%31)throw Error(\\\"invalid fcheck flag:\\\"+((d<<8)+e)%31);if(e&32)throw Error(\\\"fdict flag is not supported\\\");this.rawinflate=new Z.RawInflate(a,{index:this.ip,bufferSize:b.bufferSize,bufferType:b.bufferType,\\nresize:b.resize})};Z.Inflate.BufferType=Z.RawInflate.BufferType;Z.Inflate.prototype.decompress=function(){var a=this.input;const b=this.rawinflate.decompress();this.ip=this.rawinflate.ip;if(this.verify&&(a=(a[this.ip++]<<24|a[this.ip++]<<16|a[this.ip++]<<8|a[this.ip++])>>>0,a!==Z.Adler32(b)))throw Error(\\\"invalid adler-32 checksum\\\");return b};const xe=({memory:a,messagePort:b,streamBuffer:d})=>function(e,f,g,h){if(a){e=new Uint8Array(a.buffer,h,g);e=z.decode(e);var k=/\\\\n$/g.test(e);f=/^\\\\n/g.test(e);var n=e.split(\\\"\\\\n\\\").filter(q=>0<q.length),l=[];if(0===n.length&&k||f)l.push(d.join(\\\"\\\")),me(d);n.forEach((q,t)=>{t+1===n.length?k?0===t?(l.push(d.join(\\\"\\\")+q),me(d)):l.push(q):d.push(q):0===t?(l.push(d.join(\\\"\\\")+q),me(d)):l.push(q)});l.forEach(q=>{q.replace(/(\\\\r\\\\n|\\\\n|\\\\r)/gm,\\\"\\\")&&b.post({log:q})})}},ye=a=>{if(a&&\\\"object\\\"===typeof a&&\\\"object\\\"===\\ntypeof a.exports){if(a.exports.__wasm_call_ctors){if(a.exports.csoundModuleCreate||a.exports.csound_opcode_init||a.exports.csound_fgen_init)return!0;console.error(a.exports,\\\"A csound plugin turns out to be neither a plugin, opcode or module.\\\\nPerhaps csdl.h or module.h wasn't imported correctly?\\\");return!1}console.error(\\\"A csound plugin didn't export __wasm_call_ctors.\\\\nPlease re-run wasm-ld with either --export-all or include --export=__wasm_call_ctors\\\");return!1}console.error(\\\"Error instantiating a csound plugin, instance and/or export is missing!\\\");\\nreturn!1},ze=a=>{function b(){let l=0,q=1;for(;;){const t=a[d++];l+=(t&127)*q;q*=128;if(!(t&128))break}return l}1836278016!==(new Uint32Array((new Uint8Array(a.subarray(0,24))).buffer))[0]&&console.error(\\\"Wasm magic number is missing!\\\");if(0!==a[8])return ua(\\\"Dylink section wasn't found in wasm binary, assuming static wasm.\\\"),\\\"static\\\";let d=9;const e=b();d++;(0,c.asserts.assert)(a[d]===\\\"d\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"y\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"l\\\".codePointAt(0));\\nd++;(0,c.asserts.assert)(a[d]===\\\"i\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"n\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"k\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\".\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"0\\\".codePointAt(0));d+=3;const f=b(),g=b(),h=b(),k=b(),n=b();return{sectionSize:e,memorySize:f,memoryAlign:g,neededDynlibsCount:n,tableSize:h,tableAlign:k}},Ae=async({wasmBytes:a,wasi:b,messagePort:d})=>{const e=await WebAssembly.compile(a);a=new WebAssembly.Memory({initial:16384});\\nconst f=b.getImports(e);f.env=f.env||{};f.env.csoundLoadModules=()=>0;f.env.memory=a;f.env.csoundWasiJsMessageCallback=xe({memory:f.env.memory,streamBuffer:[],messagePort:d});d=await WebAssembly.instantiate(e,f);b.setMemory(a);b.start(d);d.exports.__wasi_js_csoundSetMessageStringCallback();return[d,b]};\\nasync function Be({wasmDataURI:a,withPlugins:b=[],messagePort:d}){var e={};const f=new Y({preopens:{\\\"/\\\":\\\"/\\\"}});a=new Uint8Array(a);a=(new Z.Inflate(a)).decompress();var g=ze(a);if(\\\"static\\\"===g)return await Ae({messagePort:d,wasmBytes:a,wasmFs:e,wasi:f});const {memorySize:h,memoryAlign:k,tableSize:n}=g;b=await b.reduce(async(x,y)=>{x=await x;let E,C;try{E=new Uint8Array(y),C=ze(E)}catch(P){console.error(\\\"Error in plugin\\\",P)}C&&x.push({headerData:C,wasmPluginBytes:E});return x},[]);e=Math.ceil((h+k)/\\n65536);g=Math.ceil(b.reduce((x,{headerData:y})=>\\\"static\\\"===y?0:x+(y.memorySize+k),0)/65536);g=e+g+2048;const l=new WebAssembly.Memory({initial:g,maximum:16384}),q=new WebAssembly.Table({initial:n+1,element:\\\"anyfunc\\\"});f.setMemory(l);const t=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},65536*g);g=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},65536*g);const u=new WebAssembly.Global({value:\\\"i32\\\",mutable:!1},2048),v=new WebAssembly.Global({value:\\\"i32\\\",mutable:!1},1),J=new WebAssembly.Global({value:\\\"i32\\\",\\nmutable:!0},0);a=await WebAssembly.compile(a);const w=f.getImports(a);let F=[],O=e;w.env=w.env||{};w.env.memory=l;w.env.__indirect_function_table=q;w.env.__stack_pointer=t;w.env.__memory_base=u;w.env.__table_base=v;w.env.csoundLoadModules=x=>{F.forEach(y=>{if(\\\"undefined\\\"!==typeof K){var E=K;if(y.exports.csoundModuleInit){var C=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),P=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),T=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0);const va=new WebAssembly.Global({value:\\\"i32\\\",\\nmutable:!0},0);let B=q.length;\\\"function\\\"===typeof y.exports.csoundModuleCreate&&(q.grow(1),C.value=B,q.set(B,y.exports.csoundModuleCreate),B+=1);\\\"function\\\"===typeof y.exports.csoundModuleInit&&(q.grow(1),P.value=B,q.set(B,y.exports.csoundModuleInit),B+=1);\\\"function\\\"===typeof y.exports.csoundModuleDestroy&&(q.grow(1),T.value=B,q.set(B,y.exports.csoundModuleDestroy),B+=1);\\\"function\\\"===typeof y.exports.csoundModuleErrorCodeToString&&(q.grow(1),va.value=B,q.set(B,y.exports.csoundModuleErrorCodeToString));\\nE.exports.csoundWasiLoadPlugin(x,C,P,T,va)}else y.exports.csound_opcode_init||y.exports.csound_fgen_init?(C=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),P=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),T=q.length,\\\"function\\\"===typeof y.exports.csound_opcode_init&&(C.value=T,q.grow(1),q.set(T,y.exports.csound_opcode_init),T+=1),\\\"function\\\"===typeof y.exports.csound_fgen_init&&(P.value=T,q.grow(1),q.set(T,y.exports.csound_fgen_init)),E.exports.csoundWasiLoadOpcodeLibrary(x,P,C)):console.error(\\\"Plugin doesn't export nececcary functions to quality as csound plugin.\\\")}else console.error(\\\"csound-wasm internal: timing problem detected!\\\")});\\nreturn 0};w.env._ZTH5errno=function(){};w.env.csoundWasiJsMessageCallback=xe({memory:l,messagePort:d,streamBuffer:[]});w.env.printDebugCallback=(x,y)=>{x=new Uint8Array(l.buffer,x,y);x=z.decode(x);console.log(x)};w[\\\"GOT.mem\\\"]=w[\\\"GOT.mem\\\"]||{};w[\\\"GOT.mem\\\"].__heap_base=g;w[\\\"GOT.func\\\"]=w[\\\"GOT.func\\\"]||{};const K=await WebAssembly.instantiate(a,w);d=Object.assign({},K.exports);a={};a.exports=Object.assign(d,{memory:l});F=await b.reduce(async(x,{headerData:y,wasmPluginBytes:E})=>{x=await x;try{const {memorySize:C,\\nmemoryAlign:P,tableSize:T}=y,va=await WebAssembly.compile(E),B=f.getImports(va),Fe=new WebAssembly.Global({value:\\\"i32\\\",mutable:!1},65536*O);q.grow(T);B.env=Object.assign({},B.env);B.env.memory=l;B.env.__indirect_function_table=q;B.env.__memory_base=Fe;B.env.__stack_pointer=t;B.env.__table_base=v;B.env.csoundLoadModules=J;delete B.env.csoundWasiJsMessageCallback;O+=Math.ceil((C+P)/65536);const ob=await WebAssembly.instantiate(va,B);ye(ob)&&(ob.exports.__wasm_call_ctors(),x.push(ob))}catch(C){console.error(\\\"Error while compiling csound-plugin\\\",\\nC)}return x},[]);f.start(a);a.exports.__wasi_js_csoundSetMessageStringCallback();return[a,f]};let Ce,De=()=>{};\\nconst Ee=[],Ge=(a,b)=>{for(let d=0;d<b;++d)a.buffers.push(new Float64Array(16384))},He=({libraryCsound:a,wasm:b,workerMessagePort:d,audioInputs:e,inputChannelCount:f,outputChannelCount:g,sampleRate:h})=>({csound:k})=>{var n=a.csoundGetInputName(k).includes(\\\"adc\\\");h&&a.csoundSetOption(k,`--sr=${h}`);g&&a.csoundSetOption(k,`--nchnls=${g}`);f&&a.csoundSetOption(k,`--nchnls_i=${f}`);const l=a.csoundGetNchnls(k),q=0<f?f:n?a.csoundGetNchnlsInput(k):0,t=a.csoundGet0dBFS(k);n=a.csoundGetSpin(k);const u=a.csoundGetSpout(k),\\nv=a.csoundGetKsmps(k);let J=new Float64Array(b.wasi.memory.buffer,n,v*q),w=new Float64Array(b.wasi.memory.buffer,u,v*l),F=0,O=0;d.broadcastPlayState(\\\"realtimePerformanceStarted\\\");De=({numFrames:K})=>{const x=xa(l,K),y=0<e.buffers.length&&e.availableFrames>=K;0<Ee.length&&(Ee.forEach(E=>{a.csoundPushMidiMessage(k,E[0],E[1],E[2])}),me(Ee));for(let E=0;E<K;E++){O=(O+1)%v;if(\\\"realtimePerformanceEnded\\\"===d.vanillaWorkerState)return 0===F&&(a.csoundStop(k),F=a.csoundPerformKsmps(k)),d.broadcastPlayState(\\\"realtimePerformanceEnded\\\"),\\nDe=()=>{},me(Ee),e.port=void 0,{framesLeft:E};if(0===O&&0===F&&(F=a.csoundPerformKsmps(k),0!==F))return d.broadcastPlayState(\\\"realtimePerformanceEnded\\\"),De=()=>{},me(Ee),e.port=void 0,{framesLeft:E};0===J.length&&(J=new Float64Array(b.wasi.memory.buffer,a.csoundGetSpin(k),v*q));0===w.length&&(w=new Float64Array(b.wasi.memory.buffer,a.csoundGetSpout(k),v*l));x.forEach((C,P)=>{0<w.length&&(C[E]=(w[O*l+P]||0)/t)});if(y)for(let C=0;C<q;C++)J[O*q+C]=(e.buffers[C][E+e.inputReadIndex%16384]||0)*t}y&&(e.availableFrames-=\\nK,e.inputReadIndex+=K%16384);return{audioPacket:x,framesLeft:0}}},Ie=({port:a})=>{sa(\\\"initMessagePort\\\")();const b=new p;b.port=a;b.post=d=>a.postMessage({log:d});b.broadcastPlayState=d=>{b.vanillaWorkerState=d;a.postMessage({playStateChange:d})};b.ready=!0;return b},Je=({csoundWorkerFrameRequestPort:a,workerMessagePort:b})=>{sa(\\\"initRequestPort\\\")();a.addEventListener(\\\"message\\\",d=>{var e=\\\"realtimePerformanceEnded\\\"!==b.vanillaWorkerState?De(d.data):void 0;const {framesLeft:f=0,audioPacket:g}=e||{};\\na.postMessage({numFrames:d.data.numFrames-f,audioPacket:g,...d.data})});a.start();return a},Ke=({port:a})=>{sa(\\\"initAudioInputPort\\\")();const b={availableFrames:0,buffers:[],inputReadIndex:0,inputWriteIndex:0,port:a};b.port.addEventListener(\\\"message\\\",({data:d})=>{0===b.buffers.length&&Ge(b,d.length);b.buffers.forEach((e,f)=>{e.set(d[f],b.inputWriteIndex)});b.inputWriteIndex+=d[0].length;b.availableFrames+=d[0].length;16384<=b.inputWriteIndex&&(b.inputWriteIndex=0)});b.port.start();return b},Le=({rtmidiPort:a})=>\\n{sa(\\\"initRtMidiEventPort\\\")();a.addEventListener(\\\"message\\\",({data:b})=>{Ee.push(b)});a.start();return a};\\nha({initialize:async({audioInputPort:a,inputChannelCount:b,messagePort:d,outputChannelCount:e,requestPort:f,rtmidiPort:g,wasmDataURI:h,wasmTransformerDataURI:k,withPlugins:n=[]})=>{sa(\\\"initializing wasm and exposing csoundAPI functions from worker to main\\\")();const l=Ie({port:d}),q=Ke({port:a});Je({csoundWorkerFrameRequestPort:f,workerMessagePort:l});Le({rtmidiPort:g});const [t,u]=await Be({wasmDataURI:h,wasmTransformerDataURI:k,withPlugins:n,messagePort:l});t.wasi=u;const v=Cc(t);a=Sb(ub(\\\"csoundStart\\\",\\n(w,F)=>wa(l,v,u,He({audioInputs:q,inputChannelCount:b,libraryCsound:v,outputChannelCount:e,wasm:t,wasi:u,workerMessagePort:l}),ya({inputChannelCount:b,libraryCsound:v,outputChannelCount:e,wasm:t,workerMessagePort:l}))(F)),ub(\\\"wasm\\\",t))(v);Ce=new Map(Object.entries(a));v.csoundInitialize(0);const J=v.csoundCreate();l.port.addEventListener(\\\"message\\\",w=>{w.data&&w.data.newPlayState&&(\\\"realtimePerformanceEnded\\\"===w.data.newPlayState&&(v.csoundStop(J),\\\"realtimePerformanceEnded\\\"!==l.vanillaWorkerState&&\\nv.csoundPerformKsmps(J),l.broadcastPlayState(\\\"realtimePerformanceEnded\\\")),l.vanillaWorkerState=w.data.newPlayState)});l.port.start();return J},callUncloned:async(a,b)=>(a=Ce.get(a))&&a.apply({},b||[])});}).call(this);\\n//# sourceMappingURL=__compiled.vanilla.worker.js.map\\n\"]));\n         })","import * as Comlink from \"comlink/dist/esm/comlink.mjs\";\nimport { logVANMain as log } from \"../logger\";\nimport { api as API } from \"../libcsound\";\nimport { isEmpty } from \"rambda/dist/rambda.esm.js\";\nimport { csoundApiRename, fetchPlugins, makeProxyCallback, stopableStates } from \"../utils\";\nimport { IPCMessagePorts, messageEventHandler } from \"./messages.main\";\nimport { EventPromises } from \"../utils/event-promises\";\nimport { PublicEventAPI } from \"../events\";\n\nconst VanillaWorker = goog.require(\"worker.vanilla\");\n\nclass VanillaWorkerMainThread {\n  constructor({\n    audioContext,\n    audioWorker,\n    audioContextIsProvided,\n    inputChannelCount,\n    outputChannelCount,\n  }) {\n    this.ipcMessagePorts = new IPCMessagePorts();\n    this.eventPromises = new EventPromises();\n    this.publicEvents = new PublicEventAPI(this);\n\n    audioWorker.ipcMessagePorts = this.ipcMessagePorts;\n    audioWorker.csoundWorkerMain = this;\n    audioWorker.publicEvents = this.publicEvents;\n\n    this.audioWorker = audioWorker;\n    this.audioContextIsProvided = audioContextIsProvided;\n\n    if (audioContextIsProvided) {\n      this.sampleRate = audioContext.sampleRate;\n    }\n    if (inputChannelCount) {\n      this.inputChannelCount = inputChannelCount;\n    }\n\n    if (outputChannelCount) {\n      this.outputChannelCount = outputChannelCount;\n    }\n\n    this.exportApi = {};\n    this.csoundInstance = undefined;\n    this.currentPlayState = undefined;\n    // this.messageCallbacks = [];\n    this.midiPortStarted = false;\n    this.onPlayStateChange = this.onPlayStateChange.bind(this);\n  }\n\n  async terminateInstance() {\n    if (this.csoundWorker) {\n      this.csoundWorker.terminate();\n      delete this.csoundWorker;\n    }\n    if (this.audioWorker && this.audioWorker.terminateInstance) {\n      await this.audioWorker.terminateInstance();\n      delete this.audioWorker.terminateInstance;\n    }\n    if (this.proxyPort) {\n      this.proxyPort[Comlink.releaseProxy]();\n      delete this.proxyPort;\n    }\n    if (this.publicEvents) {\n      this.publicEvents.terminateInstance();\n    }\n    Object.keys(this.exportApi).forEach((key) => delete this.exportApi[key]);\n    Object.keys(this).forEach((key) => delete this[key]);\n  }\n\n  get api() {\n    return this.exportApi;\n  }\n\n  handleMidiInput({ data: payload }) {\n    this.ipcMessagePorts.csoundMainRtMidiPort.postMessage &&\n      this.ipcMessagePorts.csoundMainRtMidiPort.postMessage(payload);\n  }\n\n  async prepareRealtimePerformance() {\n    if (!this.csoundInstance) {\n      console.error(`fatal error: csound instance not found?`);\n      return;\n    }\n\n    this.audioWorker.sampleRate = await this.exportApi.getSr(this.csoundInstance);\n    const inputName = await this.exportApi.getInputName(this.csoundInstance);\n    this.audioWorker.isRequestingInput = inputName.includes(\"adc\");\n    this.audioWorker.isRequestingMidi = await this.exportApi._isRequestingRtMidiInput(\n      this.csoundInstance,\n    );\n    this.audioWorker.outputsCount = await this.exportApi.getNchnls(this.csoundInstance);\n    // TODO fix upstream: await this.exportApi.csoundGetNchnlsInput(this.csound);\n\n    this.audioWorker.inputsCount = this.audioWorker.isRequestingInput ? 1 : 0;\n    // if (this.audioWorker.scriptProcessorNode) {\n    //   this.audioWorker.softwareBufferSize *= 2;\n    // }\n\n    log(`vars for rtPerf set`)();\n  }\n\n  async onPlayStateChange(newPlayState) {\n    if (!this.publicEvents) {\n      // prevent error after termination\n      return;\n    }\n    this.currentPlayState = newPlayState;\n\n    switch (newPlayState) {\n      case \"realtimePerformanceStarted\": {\n        log(`event: realtimePerformanceStarted from worker, now preparingRT..`)();\n        await this.prepareRealtimePerformance();\n        break;\n      }\n\n      case \"realtimePerformanceEnded\": {\n        log(`event: realtimePerformanceEnded`)();\n        // a noop if the stop promise already exists\n        this.eventPromises.createStopPromise();\n        this.midiPortStarted = false;\n        this.publicEvents.triggerRealtimePerformanceEnded(this);\n        await this.eventPromises.releaseStopPromise();\n        break;\n      }\n\n      case \"renderStarted\": {\n        await this.eventPromises.releaseStartPromise();\n        this.publicEvents.triggerRenderStarted(this);\n        break;\n      }\n      case \"renderEnded\": {\n        log(`event: renderEnded received, beginning cleanup`)();\n        this.publicEvents.triggerRenderEnded(this);\n        await this.eventPromises.releaseStopPromise();\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n\n    // forward the message from worker to the audioWorker\n    if (!this.audioWorker.ipcMessagePorts) {\n      this.audioWorker.ipcMessagePorts = this.ipcMessagePorts;\n    }\n    await this.audioWorker.onPlayStateChange(newPlayState);\n  }\n\n  async csoundPause() {\n    if (this.eventPromises.isWaiting(\"pause\")) {\n      return -1;\n    } else {\n      this.eventPromises.createPausePromise();\n\n      this.audioWorker && typeof this.audioWorker.workletProxy !== \"undefined\"\n        ? await this.audioWorker.workletProxy.pause()\n        : await this.audioWorker.onPlayStateChange(\"realtimePerformancePaused\");\n\n      await this.eventPromises.waitForPause();\n      return 0;\n    }\n  }\n\n  async csoundResume() {\n    if (this.eventPromises.isWaiting(\"resume\")) {\n      return -1;\n    } else {\n      this.eventPromises.createResumePromise();\n      this.audioWorker && typeof this.audioWorker.workletProxy !== \"undefined\"\n        ? await this.audioWorker.workletProxy.resume()\n        : await this.audioWorker.onPlayStateChange(\"realtimePerformanceResumed\");\n\n      await this.eventPromises.waitForResume();\n      return 0;\n    }\n  }\n\n  async initialize({ wasmDataURI, withPlugins }) {\n    const wasmBytes = wasmDataURI();\n    if (typeof this.audioWorker.initIframe === \"function\") {\n      await this.audioWorker.initIframe();\n    }\n\n    if (withPlugins && !isEmpty(withPlugins)) {\n      withPlugins = await fetchPlugins(withPlugins);\n    }\n    log(`vanilla.main: initialize`)();\n    this.csoundWorker = this.csoundWorker || new Worker(VanillaWorker());\n    this.ipcMessagePorts.mainMessagePort.addEventListener(\"message\", messageEventHandler(this));\n    this.ipcMessagePorts.mainMessagePort2.addEventListener(\"message\", messageEventHandler(this));\n    this.ipcMessagePorts.mainMessagePort.start();\n\n    const proxyPort = Comlink.wrap(this.csoundWorker);\n    this.proxyPort = proxyPort;\n\n    this.csoundInstance = await proxyPort.initialize(\n      Comlink.transfer(\n        {\n          wasmDataURI: wasmBytes,\n          messagePort: this.ipcMessagePorts.workerMessagePort,\n          requestPort: this.ipcMessagePorts.csoundWorkerFrameRequestPort,\n          audioInputPort: this.ipcMessagePorts.csoundWorkerAudioInputPort,\n          rtmidiPort: this.ipcMessagePorts.csoundWorkerRtMidiPort,\n          // these values are only set if the user provided them\n          // during init or by passing audioContext\n          sampleRate: this.sampleRate,\n          inputChannelCount: this.inputChannelCount,\n          outputChannelCount: this.outputChannelCount,\n          withPlugins,\n        },\n        [\n          wasmBytes,\n          this.ipcMessagePorts.workerMessagePort,\n          this.ipcMessagePorts.csoundWorkerFrameRequestPort,\n          this.ipcMessagePorts.csoundWorkerAudioInputPort,\n          this.ipcMessagePorts.csoundWorkerRtMidiPort,\n        ],\n      ),\n    );\n\n    this.exportApi.pause = this.csoundPause.bind(this);\n    this.exportApi.resume = this.csoundResume.bind(this);\n    this.exportApi.terminateInstance = this.terminateInstance.bind(this);\n\n    this.exportApi.getAudioContext = async () => this.audioWorker.audioContext;\n\n    this.exportApi.getNode = async () => {\n      const maybeNode = this.audioWorker.audioWorkletNode;\n      if (maybeNode) {\n        return maybeNode;\n      } else {\n        const node = await new Promise((resolve) => {\n          this.exportApi.once(\"onAudioNodeCreated\", resolve);\n        });\n        return node;\n      }\n    };\n\n    this.exportApi = this.publicEvents.decorateAPI(this.exportApi);\n    this.exportApi.enableAudioInput = () =>\n      console.warn(\n        `enableAudioInput was ignored: please use -iadc option before calling start with useWorker=true`,\n      );\n\n    // the default message listener\n    this.exportApi.addListener(\"message\", console.log);\n\n    for (const apiK of Object.keys(API)) {\n      const reference = API[apiK];\n      const proxyCallback = makeProxyCallback(\n        proxyPort,\n        this.csoundInstance,\n        apiK,\n        this.currentPlayState,\n      );\n\n      switch (apiK) {\n        case \"csoundCreate\": {\n          break;\n        }\n\n        case \"csoundStart\": {\n          const csoundStart = async function () {\n            if (this.eventPromises.isWaiting(\"start\")) {\n              return -1;\n            } else {\n              this.eventPromises.createStartPromise();\n\n              const startResult = await proxyCallback({\n                csound: this.csoundInstance,\n              });\n              await this.eventPromises.waitForStart();\n\n              return startResult;\n            }\n          };\n\n          csoundStart.toString = () => reference.toString();\n          this.exportApi.start = csoundStart.bind(this);\n          break;\n        }\n\n        case \"csoundStop\": {\n          const csoundStop = async function () {\n            if (this.eventPromises.isWaiting(\"stop\")) {\n              return -1;\n            } else {\n              this.eventPromises.createStopPromise();\n              this.ipcMessagePorts.mainMessagePort.postMessage({\n                newPlayState:\n                  this.currentPlayState === \"renderStarted\"\n                    ? \"renderEnded\"\n                    : \"realtimePerformanceEnded\",\n              });\n\n              await this.eventPromises.waitForStop();\n              return 0;\n            }\n          };\n          this.exportApi.stop = csoundStop.bind(this);\n          csoundStop.toString = reference.toString;\n          break;\n        }\n\n        case \"csoundReset\": {\n          const csoundReset = async () => {\n            // no start = noReset\n            if (!this.currentPlayState) {\n              return;\n            }\n            if (this.eventPromises.isWaiting(\"reset\")) {\n              return -1;\n            } else {\n              if (stopableStates.has(this.currentPlayState)) {\n                await this.exportApi.stop();\n              }\n              const resetResult = await proxyCallback([]);\n              if (!this.audioContextIsProvided) {\n                await this.audioWorker.terminateInstance();\n                delete this.audioWorker.audioContext;\n              }\n\n              this.ipcMessagePorts.restartAudioWorkerPorts();\n\n              return resetResult;\n            }\n          };\n          this.exportApi.reset = csoundReset.bind(this);\n          csoundReset.toString = reference.toString;\n          break;\n        }\n\n        case \"fs\": {\n          this.exportApi.fs = {};\n          Object.keys(reference).forEach((method) => {\n            const proxyFsCallback = makeProxyCallback(\n              proxyPort,\n              this.csoundInstance,\n              method,\n              this.currentPlayState,\n            );\n            proxyFsCallback.toString = reference[method].toString;\n            this.exportApi.fs[method] = proxyFsCallback;\n          });\n          break;\n        }\n\n        default: {\n          proxyCallback.toString = reference.toString;\n          this.exportApi[csoundApiRename(apiK)] = proxyCallback;\n          break;\n        }\n      }\n    }\n    log(`exportAPI generated`)();\n  }\n}\n\nexport default VanillaWorkerMainThread;\n","/*! unmute-ios-audio. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nmodule.exports = unmuteIosAudio\n\nconst USER_ACTIVATION_EVENTS = [\n  'auxclick',\n  'click',\n  'contextmenu',\n  'dblclick',\n  'keydown',\n  'keyup',\n  'mousedown',\n  'mouseup',\n  'touchend'\n]\n\nfunction unmuteIosAudio () {\n  const AudioContext = window.webkitAudioContext\n\n  // To detect iOS, check for touch device and confirm Safari-only\n  // webkitAudioContext is present.\n  const isIos = navigator.maxTouchPoints > 0 && AudioContext != null\n\n  if (!isIos) return\n\n  // state can be 'blocked', 'pending', 'allowed'\n  let htmlAudioState = 'blocked'\n  let webAudioState = 'blocked'\n\n  let audio\n  let context\n  let source\n\n  const sampleRate = (new AudioContext()).sampleRate\n  const silentAudioFile = createSilentAudioFile(sampleRate)\n\n  USER_ACTIVATION_EVENTS.forEach(eventName => {\n    window.addEventListener(\n      eventName, handleUserActivation, { capture: true, passive: true }\n    )\n  })\n\n  // Return a seven samples long 8 bit mono WAVE file\n  function createSilentAudioFile (sampleRate) {\n    const arrayBuffer = new ArrayBuffer(10)\n    const dataView = new DataView(arrayBuffer)\n\n    dataView.setUint32(0, sampleRate, true)\n    dataView.setUint32(4, sampleRate, true)\n    dataView.setUint16(8, 1, true)\n\n    const missingCharacters =\n      window.btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)))\n        .slice(0, 13)\n\n    return `data:audio/wav;base64,UklGRisAAABXQVZFZm10IBAAAAABAAEA${missingCharacters}AgAZGF0YQcAAACAgICAgICAAAA=`\n  }\n\n  function handleUserActivation (e) {\n    if (htmlAudioState === 'blocked') {\n      htmlAudioState = 'pending'\n      createHtmlAudio()\n    }\n    if (webAudioState === 'blocked') {\n      webAudioState = 'pending'\n      createWebAudio()\n    }\n  }\n\n  function createHtmlAudio () {\n    audio = document.createElement('audio')\n\n    audio.setAttribute('x-webkit-airplay', 'deny') // Disable the iOS control center media widget\n    audio.preload = 'auto'\n    audio.loop = true\n    audio.src = silentAudioFile\n    audio.load()\n\n    audio.play().then(\n      () => {\n        htmlAudioState = 'allowed'\n        maybeCleanup()\n      },\n      () => {\n        htmlAudioState = 'blocked'\n\n        audio.pause()\n        audio.removeAttribute('src')\n        audio.load()\n        audio = null\n      }\n    )\n  }\n\n  function createWebAudio () {\n    context = new AudioContext()\n\n    source = context.createBufferSource()\n    source.buffer = context.createBuffer(1, 1, 22050) // .045 msec of silence\n    source.connect(context.destination)\n    source.start()\n\n    if (context.state === 'running') {\n      webAudioState = 'allowed'\n      maybeCleanup()\n    } else {\n      webAudioState = 'blocked'\n\n      source.disconnect(context.destination)\n      source = null\n\n      context.close()\n      context = null\n    }\n  }\n\n  function maybeCleanup () {\n    if (htmlAudioState !== 'allowed' || webAudioState !== 'allowed') return\n\n    USER_ACTIVATION_EVENTS.forEach(eventName => {\n      window.removeEventListener(\n        eventName, handleUserActivation, { capture: true, passive: true }\n      )\n    })\n  }\n}\n","export const DEFAULT_BUFFER_LEN = 128;\nexport const MAX_CHANNELS = 32;\nexport const RING_BUFFER_SIZE = 16384;\nexport const MIDI_BUFFER_SIZE = 1024;\nexport const MIDI_BUFFER_PAYLOAD_SIZE = 3;\nexport const CALLBACK_DATA_BUFFER_SIZE = 16384;\n\nexport const initialSharedState = [\n  0, // 1 = csound worker is locked\n  4096, // n = framesRequested (4096 is only initial and will thereafter be max'd to 2048)\n  0, // 1 = Csound is currently performing\n  0, // 1 = Csound is currently rendering\n  0, // 1 = Csound is currently paused\n  0, // 1 = STOP\n  -1, // n = sample rate\n  -1, // n = ksmps\n  -1, // n = nchnls\n  -1, // n = ncnls_i\n  0, // n = if 1 then it's requesting microphone\n  DEFAULT_BUFFER_LEN, // number of samples per process\n  0, // n = buffer read index of output buffer\n  0, // n = buffer write index of output buffer\n  0, // n = number of input buffers available\n  0, // n = number of output buffers available\n  0, // n = if 1 then is requesting rtmidi\n  0, // n = rtmidi buffer index\n  0, // n = available rtmidi events in buffer\n  0, // n = has pending callbacks\n];\n\n// Enum helper for SAB\nexport const AUDIO_STATE = {\n  CSOUND_LOCK: 0,\n  FRAMES_REQUESTED: 1,\n  IS_PERFORMING: 2,\n  IS_RENDERING: 3,\n  IS_PAUSED: 4,\n  STOP: 5,\n  SAMPLE_RATE: 6,\n  KSMPS: 7,\n  NCHNLS: 8,\n  NCHNLS_I: 9,\n  IS_REQUESTING_MIC: 10,\n  BUFFER_LEN: 11,\n  OUTPUT_READ_INDEX: 12,\n  OUTPUT_WRITE_INDEX: 13,\n  AVAIL_IN_BUFS: 14,\n  AVAIL_OUT_BUFS: 15,\n  IS_REQUESTING_RTMIDI: 16,\n  RTMIDI_INDEX: 17,\n  AVAIL_RTMIDI_EVENTS: 18,\n  HAS_PENDING_CALLBACKS: 19,\n};\n\nexport const DATA_TYPE = {\n  NUMBER: 0,\n  STRING: 1,\n  FLOAT_32: 2,\n  FLOAT_64: 3,\n};\n","goog.provide(\"worker.sab\");\n         goog.scope(function () {\n         worker.sab = () => (window.URL || window.webkitURL).createObjectURL(new Blob([\"(function(){/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifier: Apache-2.0\\n*/\\nvar aa=aa||{};aa.scope={};var c=c||{};c.global=this||self;c.exportPath_=function(a,b,d,e){a=a.split(\\\".\\\");e=e||c.global;a[0]in e||\\\"undefined\\\"==typeof e.execScript||e.execScript(\\\"var \\\"+a[0]);for(var f;a.length&&(f=a.shift());)if(a.length||void 0===b)e=e[f]&&e[f]!==Object.prototype[f]?e[f]:e[f]={};else if(!d&&c.isObject(b)&&c.isObject(e[f]))for(var g in b)b.hasOwnProperty(g)&&(e[f][g]=b[g]);else e[f]=b};c.define=function(a,b){return b};c.FEATURESET_YEAR=2020;c.DEBUG=!0;c.LOCALE=\\\"en\\\";c.getLocale=function(){return c.LOCALE};\\nc.TRUSTED_SITE=!0;c.DISALLOW_TEST_ONLY_CODE=!c.DEBUG;c.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;c.provide=function(a){if(c.isInModuleLoader_())throw Error(\\\"goog.provide cannot be used within a module.\\\");c.constructNamespace_(a)};c.constructNamespace_=function(a,b,d){c.exportPath_(a,b,d)};c.NONCE_PATTERN_=/^[\\\\w+/_-]+[=]{0,2}$/;\\nc.getScriptNonce_=function(a){a=(a||c.global).document;return(a=a.querySelector&&a.querySelector(\\\"script[nonce]\\\"))&&(a=a.nonce||a.getAttribute(\\\"nonce\\\"))&&c.NONCE_PATTERN_.test(a)?a:\\\"\\\"};c.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\\nc.module=function(a){if(\\\"string\\\"!==typeof a||!a||-1==a.search(c.VALID_MODULE_RE_))throw Error(\\\"Invalid module identifier\\\");if(!c.isInGoogModuleLoader_())throw Error(\\\"Module \\\"+a+\\\" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\\\");if(c.moduleLoaderState_.moduleName)throw Error(\\\"goog.module may only be called once per module.\\\");\\nc.moduleLoaderState_.moduleName=a};c.module.get=function(a){return c.module.getInternal_(a)};c.module.getInternal_=function(){return null};c.ModuleType={ES6:\\\"es6\\\",GOOG:\\\"goog\\\"};c.moduleLoaderState_=null;c.isInModuleLoader_=function(){return c.isInGoogModuleLoader_()||c.isInEs6ModuleLoader_()};c.isInGoogModuleLoader_=function(){return!!c.moduleLoaderState_&&c.moduleLoaderState_.type==c.ModuleType.GOOG};\\nc.isInEs6ModuleLoader_=function(){if(c.moduleLoaderState_&&c.moduleLoaderState_.type==c.ModuleType.ES6)return!0;var a=c.global.$jscomp;return a?\\\"function\\\"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};c.module.declareLegacyNamespace=function(){c.moduleLoaderState_.declareLegacyNamespace=!0};\\nc.declareModuleId=function(a){if(c.moduleLoaderState_)c.moduleLoaderState_.moduleName=a;else{var b=c.global.$jscomp;if(!b||\\\"function\\\"!=typeof b.getCurrentModulePath)throw Error('Module with namespace \\\"'+a+'\\\" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());c.loadedModules_[a]={exports:b,type:c.ModuleType.ES6,moduleId:a}}};c.setTestOnly=function(a){if(c.DISALLOW_TEST_ONLY_CODE)throw a=a||\\\"\\\",Error(\\\"Importing test-only code into non-debug environment\\\"+(a?\\\": \\\"+a:\\\".\\\"));};\\nc.forwardDeclare=function(){};c.getObjectByName=function(a,b){a=a.split(\\\".\\\");b=b||c.global;for(var d=0;d<a.length;d++)if(b=b[a[d]],null==b)return null;return b};c.addDependency=function(){};c.ENABLE_DEBUG_LOADER=!0;c.logToConsole_=function(a){c.global.console&&c.global.console.error(a)};c.require=function(){};c.requireType=function(){return{}};c.basePath=\\\"\\\";c.nullFunction=function(){};c.abstractMethod=function(){throw Error(\\\"unimplemented abstract method\\\");};\\nc.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;c.DEBUG&&(c.instantiatedSingletons_[c.instantiatedSingletons_.length]=a);return a.instance_=new a}};c.instantiatedSingletons_=[];c.LOAD_MODULE_USING_EVAL=!0;c.SEAL_MODULE_EXPORTS=c.DEBUG;c.loadedModules_={};c.DEPENDENCIES_ENABLED=!1;c.TRANSPILE=\\\"detect\\\";c.ASSUME_ES_MODULES_TRANSPILED=!1;c.TRANSPILE_TO_LANGUAGE=\\\"\\\";c.TRANSPILER=\\\"transpile.js\\\";c.TRUSTED_TYPES_POLICY_NAME=\\\"goog\\\";\\nc.hasBadLetScoping=null;\\nc.loadModule=function(a){var b=c.moduleLoaderState_;try{c.moduleLoaderState_={moduleName:\\\"\\\",declareLegacyNamespace:!1,type:c.ModuleType.GOOG};var d={},e=d;if(\\\"function\\\"===typeof a)e=a.call(void 0,e);else if(\\\"string\\\"===typeof a)e=c.loadModuleFromSource_.call(void 0,e,a);else throw Error(\\\"Invalid module definition\\\");var f=c.moduleLoaderState_.moduleName;if(\\\"string\\\"===typeof f&&f)c.moduleLoaderState_.declareLegacyNamespace?c.constructNamespace_(f,e,d!==e):c.SEAL_MODULE_EXPORTS&&Object.seal&&\\\"object\\\"==\\ntypeof e&&null!=e&&Object.seal(e),c.loadedModules_[f]={exports:e,type:c.ModuleType.GOOG,moduleId:c.moduleLoaderState_.moduleName};else throw Error('Invalid module name \\\"'+f+'\\\"');}finally{c.moduleLoaderState_=b}};c.loadModuleFromSource_=function(a,b){eval(c.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};c.normalizePath_=function(a){a=a.split(\\\"/\\\");for(var b=0;b<a.length;)\\\".\\\"==a[b]?a.splice(b,1):b&&\\\"..\\\"==a[b]&&a[b-1]&&\\\"..\\\"!=a[b-1]?a.splice(--b,2):b++;return a.join(\\\"/\\\")};\\nc.loadFileSync_=function(a){if(c.global.CLOSURE_LOAD_FILE_SYNC)return c.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new c.global.XMLHttpRequest;b.open(\\\"get\\\",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(d){return null}};\\nc.transpile_=function(a,b,d){var e=c.global.$jscomp;e||(c.global.$jscomp=e={});var f=e.transpile;if(!f){var g=c.basePath+c.TRANSPILER,h=c.loadFileSync_(g);if(h){(function(){(0,eval)(h+\\\"\\\\n//# sourceURL=\\\"+g)}).call(c.global);if(c.global.$gwtExport&&c.global.$gwtExport.$jscomp&&!c.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the \\\"transpile\\\" method. $gwtExport: '+JSON.stringify(c.global.$gwtExport));c.global.$jscomp.transpile=c.global.$gwtExport.$jscomp.transpile;\\ne=c.global.$jscomp;f=e.transpile}}f||(f=e.transpile=function(k,l){c.logToConsole_(l+\\\" requires transpilation but no transpiler was found.\\\");return k});return f(a,b,d)};c.typeOf=function(a){var b=typeof a;return\\\"object\\\"!=b?b:a?Array.isArray(a)?\\\"array\\\":b:\\\"null\\\"};c.isArrayLike=function(a){var b=c.typeOf(a);return\\\"array\\\"==b||\\\"object\\\"==b&&\\\"number\\\"==typeof a.length};c.isDateLike=function(a){return c.isObject(a)&&\\\"function\\\"==typeof a.getFullYear};\\nc.isObject=function(a){var b=typeof a;return\\\"object\\\"==b&&null!=a||\\\"function\\\"==b};c.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,c.UID_PROPERTY_)&&a[c.UID_PROPERTY_]||(a[c.UID_PROPERTY_]=++c.uidCounter_)};c.hasUid=function(a){return!!a[c.UID_PROPERTY_]};c.removeUid=function(a){null!==a&&\\\"removeAttribute\\\"in a&&a.removeAttribute(c.UID_PROPERTY_);try{delete a[c.UID_PROPERTY_]}catch(b){}};c.UID_PROPERTY_=\\\"closure_uid_\\\"+(1E9*Math.random()>>>0);c.uidCounter_=0;\\nc.cloneObject=function(a){var b=c.typeOf(a);if(\\\"object\\\"==b||\\\"array\\\"==b){if(\\\"function\\\"===typeof a.clone)return a.clone();if(\\\"undefined\\\"!==typeof Map&&a instanceof Map)return new Map(a);if(\\\"undefined\\\"!==typeof Set&&a instanceof Set)return new Set(a);b=\\\"array\\\"==b?[]:{};for(var d in a)b[d]=c.cloneObject(a[d]);return b}return a};c.bindNative_=function(a,b,d){return a.call.apply(a.bind,arguments)};\\nc.bindJs_=function(a,b,d){if(!a)throw Error();if(2<arguments.length){var e=Array.prototype.slice.call(arguments,2);return function(){var f=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(f,e);return a.apply(b,f)}}return function(){return a.apply(b,arguments)}};c.bind=function(a,b,d){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\\\"native code\\\")?c.bind=c.bindNative_:c.bind=c.bindJs_;return c.bind.apply(null,arguments)};\\nc.partial=function(a,b){var d=Array.prototype.slice.call(arguments,1);return function(){var e=d.slice();e.push.apply(e,arguments);return a.apply(this,e)}};c.mixin=function(a,b){for(var d in b)a[d]=b[d]};c.now=function(){return Date.now()};c.globalEval=function(a){(0,eval)(a)};\\nc.getCssName=function(a,b){function d(g){g=g.split(\\\"-\\\");for(var h=[],k=0;k<g.length;k++)h.push(e(g[k]));return h.join(\\\"-\\\")}function e(g){return c.cssNameMapping_[g]||g}if(\\\".\\\"==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with \\\".\\\". You passed: '+a);var f=c.cssNameMapping_?\\\"BY_WHOLE\\\"==c.cssNameMappingStyle_?e:d:function(g){return g};a=b?a+\\\"-\\\"+f(b):f(a);return c.global.CLOSURE_CSS_NAME_MAP_FN?c.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\\nc.setCssNameMapping=function(a,b){c.cssNameMapping_=a;c.cssNameMappingStyle_=b};c.getMsg=function(a,b,d){d&&d.html&&(a=a.replace(/</g,\\\"&lt;\\\"));d&&d.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,\\\"<\\\").replace(/&gt;/g,\\\">\\\").replace(/&apos;/g,\\\"'\\\").replace(/&quot;/g,'\\\"').replace(/&amp;/g,\\\"&\\\"));b&&(a=a.replace(/\\\\{\\\\$([^}]+)}/g,function(e,f){return null!=b&&f in b?b[f]:e}));return a};c.getMsgWithFallback=function(a){return a};c.exportSymbol=function(a,b,d){c.exportPath_(a,b,!0,d)};\\nc.exportProperty=function(a,b,d){a[b]=d};c.inherits=function(a,b){function d(){}d.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new d;a.prototype.constructor=a;a.base=function(e,f,g){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[f].apply(e,h)}};c.scope=function(a){if(c.isInModuleLoader_())throw Error(\\\"goog.scope is not supported within a module.\\\");a.call(c.global)};\\nc.defineClass=function(a,b){var d=b.constructor,e=b.statics;d&&d!=Object.prototype.constructor||(d=function(){throw Error(\\\"cannot instantiate an interface (no constructor defined).\\\");});d=c.defineClass.createSealingConstructor_(d,a);a&&c.inherits(d,a);delete b.constructor;delete b.statics;c.defineClass.applyProperties_(d.prototype,b);null!=e&&(e instanceof Function?e(d):c.defineClass.applyProperties_(d,e));return d};c.defineClass.SEAL_CLASS_INSTANCES=c.DEBUG;\\nc.defineClass.createSealingConstructor_=function(a){return c.defineClass.SEAL_CLASS_INSTANCES?function(){var b=a.apply(this,arguments)||this;b[c.UID_PROPERTY_]=b[c.UID_PROPERTY_];return b}:a};c.defineClass.OBJECT_PROTOTYPE_FIELDS_=\\\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\\\".split(\\\" \\\");\\nc.defineClass.applyProperties_=function(a,b){for(var d in b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);for(var e=0;e<c.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;e++)d=c.defineClass.OBJECT_PROTOTYPE_FIELDS_[e],Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d])};c.identity_=function(a){return a};c.createTrustedTypesPolicy=function(a){var b=null,d=c.global.trustedTypes;if(!d||!d.createPolicy)return b;try{b=d.createPolicy(a,{createHTML:c.identity_,createScript:c.identity_,createScriptURL:c.identity_})}catch(e){c.logToConsole_(e.message)}return b};const ca=Symbol(\\\"Comlink.proxy\\\"),da=Symbol(\\\"Comlink.endpoint\\\"),ea=Symbol(\\\"Comlink.releaseProxy\\\"),fa=Symbol(\\\"Comlink.thrown\\\"),ha=a=>\\\"object\\\"===typeof a&&null!==a||\\\"function\\\"===typeof a,ka=new Map([[\\\"proxy\\\",{canHandle:a=>ha(a)&&a[ca],serialize(a){const {port1:b,port2:d}=new MessageChannel;ia(a,b);return[d,[d]]},deserialize(a){a.start();return ja(a,[],void 0)}}],[\\\"throw\\\",{canHandle:a=>ha(a)&&fa in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:\\n{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}}]]);\\nfunction ia(a,b=self){b.addEventListener(\\\"message\\\",function f(e){if(e&&e.data){var {id:g,type:h,path:k}=Object.assign({path:[]},e.data),l=(e.data.argumentList||[]).map(la);try{const q=k.slice(0,-1).reduce((r,x)=>r[x],a),u=k.reduce((r,x)=>r[x],a);switch(h){case \\\"GET\\\":var m=u;break;case \\\"SET\\\":q[k.slice(-1)[0]]=la(e.data.value);m=!0;break;case \\\"APPLY\\\":m=u.apply(q,l);break;case \\\"CONSTRUCT\\\":const r=new u(...l);m=Object.assign(r,{[ca]:!0});break;case \\\"ENDPOINT\\\":const {port1:x,port2:Q}=new MessageChannel;\\nia(a,Q);m=ma(x,[x]);break;case \\\"RELEASE\\\":m=void 0;break;default:return}}catch(q){m={value:q,[fa]:0}}Promise.resolve(m).catch(q=>({value:q,[fa]:0})).then(q=>{const [u,r]=na(q);b.postMessage(Object.assign(Object.assign({},u),{id:g}),r);\\\"RELEASE\\\"===h&&(b.removeEventListener(\\\"message\\\",f),\\\"MessagePort\\\"===b.constructor.name&&b.close())})}});b.start&&b.start()}function oa(a){if(a)throw Error(\\\"Proxy has been released and is not useable\\\");}\\nfunction ja(a,b=[],d=function(){}){let e=!1;const f=new Proxy(d,{get(g,h){oa(e);if(h===ea)return()=>pa(a,{type:\\\"RELEASE\\\",path:b.map(k=>k.toString())}).then(()=>{\\\"MessagePort\\\"===a.constructor.name&&a.close();e=!0});if(\\\"then\\\"===h){if(0===b.length)return{then:()=>f};g=pa(a,{type:\\\"GET\\\",path:b.map(k=>k.toString())}).then(la);return g.then.bind(g)}return ja(a,[...b,h])},set(g,h,k){oa(e);const [l,m]=na(k);return pa(a,{type:\\\"SET\\\",path:[...b,h].map(q=>q.toString()),value:l},m).then(la)},apply(g,h,k){oa(e);\\ng=b[b.length-1];if(g===da)return pa(a,{type:\\\"ENDPOINT\\\"}).then(la);if(\\\"bind\\\"===g)return ja(a,b.slice(0,-1));const [l,m]=ra(k);return pa(a,{type:\\\"APPLY\\\",path:b.map(q=>q.toString()),argumentList:l},m).then(la)},construct(g,h){oa(e);const [k,l]=ra(h);return pa(a,{type:\\\"CONSTRUCT\\\",path:b.map(m=>m.toString()),argumentList:k},l).then(la)}});return f}function ra(a){a=a.map(na);return[a.map(b=>b[0]),Array.prototype.concat.apply([],a.map(b=>b[1]))]}const sa=new WeakMap;\\nfunction ma(a,b){sa.set(a,b);return a}function na(a){for(const [b,d]of ka)if(d.canHandle(a)){const [e,f]=d.serialize(a);return[{type:\\\"HANDLER\\\",name:b,value:e},f]}return[{type:\\\"RAW\\\",value:a},sa.get(a)||[]]}function la(a){switch(a.type){case \\\"HANDLER\\\":return ka.get(a.name).deserialize(a.value);case \\\"RAW\\\":return a.value}}\\nfunction pa(a,b,d){return new Promise(e=>{const f=ta();a.addEventListener(\\\"message\\\",function k(h){h.data&&h.data.id&&h.data.id===f&&(a.removeEventListener(\\\"message\\\",k),e(h.data))});a.start&&a.start();a.postMessage(Object.assign({id:f},b),d)})}function ta(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join(\\\"-\\\")};function ua(){}ua.prototype.ready=!1;ua.prototype.port=void 0;ua.prototype.post=()=>{};ua.prototype.broadcastPlayState=()=>{};ua.prototype.workerState=void 0;ua.prototype.vanillaWorkerState=void 0;const va=a=>()=>a.exports.csoundCreateWasi();va.toString=()=>\\\"create = async () => undefined;\\\";const wa=a=>b=>a.exports.csoundDestroy(b);wa.toString=()=>\\\"destroy = async () => undefined;\\\";const xa=a=>()=>a.exports.csoundGetAPIVersion();xa.toString=()=>\\\"getAPIVersion = async () => Number;\\\";const ya=a=>()=>a.exports.csoundGetVersion();ya.toString=()=>\\\"getVersion = async () => Number;\\\";const Aa=a=>(b,d)=>a.exports.csoundInitialize(d);Aa.toString=()=>\\\"initialize = async () => Number;\\\";const n=new TextDecoder(\\\"utf8\\\"),Ba=new TextEncoder(\\\"utf8\\\");const Ca=a=>{const b=a.indexOf(\\\"\\\\x00\\\");return-1<b?a.substr(0,b):a};const p=(a,b)=>{if(\\\"string\\\"!==typeof b)console.error(\\\"Expected string but got\\\",typeof b);else{b=Ba.encode(b);var d=a.exports.allocStringMem(b.length);({buffer:a}=a.wasi.memory);(new Uint8Array(a,d,b.length+1)).set(b);return d}};const Da=a=>(b,d)=>a.exports.csoundParseOrc(b,d);Da.toString=()=>\\\"parseOrc = async (orchestra) => Object;\\\";const Ea=a=>(b,d)=>a.exports.csoundCompileTree(b,d);Ea.toString=()=>\\\"compileTree = async (tree) => Number;\\\";const Fa=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundCompileOrc(b,d);a.exports.freeStringMem(d);return b};Fa.toString=()=>\\\"compileOrc = async (orchestra) => Number;\\\";const Ga=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundEvalCode(b,d);a.exports.freeStringMem(d);return b};Ga.toString=()=>\\\"csoundEvalCode = async (orchestra) => Number;\\\";\\nconst Ha=a=>b=>a.exports.csoundStartWasi(b);Ha.toString=()=>\\\"start = async () => Number;\\\";const Ia=a=>(b,d)=>{d=p(a,d);let e;try{e=a.exports.csoundCompileCsd(b,d)}catch(f){console.error(f)}a.exports.freeStringMem(d);return e};Ia.toString=()=>\\\"compileCsd = async (path) => Number;\\\";const Ja=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundCompileCsdText(b,d);a.exports.freeStringMem(d);return b};Ja.toString=()=>\\\"compileCsdText = async (csoundDocument) => Number;\\\";const Ka=a=>b=>a.exports.csoundPerform(b);\\nKa.toString=()=>\\\"perform = async () => Number;\\\";const La=a=>b=>a.exports.csoundPerformKsmpsWasi(b);La.toString=()=>\\\"performKsmps = async (csound) => Number;\\\";const Ma=a=>b=>a.exports.csoundPerformBuffer(b);Ma.toString=()=>\\\"performBuffer = async (csound) => Number;\\\";const Na=a=>b=>a.exports.csoundStop(b);Na.toString=()=>\\\"stop = async () => undefined;\\\";const Oa=a=>b=>a.exports.csoundCleanup(b);Oa.toString=()=>\\\"cleanup = async () => Number;\\\";const Pa=a=>b=>a.exports.csoundResetWasi(b);\\nPa.toString=()=>\\\"reset = async () => Number;\\\";const Qa={int:4,MYFLT:4,char:1},Ra=a=>a.reduce((b,[,d,...e])=>b+(\\\"char\\\"===d?Qa[d]*e[0]:Qa[d]),0);const Sa=(a,b)=>{[a]=a.reduce(([d,e],[f,g,...h])=>{h=\\\"char\\\"===g?Qa[g]*h[0]:Qa[g];g=\\\"char\\\"===g?Ca(n.decode(b.subarray(e,h)))||\\\"\\\":b[e];d[f]=g;return[d,e+h]},[{},0]);return a};const Ta=[[\\\"debug_mode\\\",\\\"int\\\"],[\\\"buffer_frames\\\",\\\"int\\\"],[\\\"hardware_buffer_frames\\\",\\\"int\\\"],[\\\"displays\\\",\\\"int\\\"],[\\\"ascii_graphs\\\",\\\"int\\\"],[\\\"postscript_graphs\\\",\\\"int\\\"],[\\\"message_level\\\",\\\"int\\\"],[\\\"tempo\\\",\\\"int\\\"],[\\\"ring_bell\\\",\\\"int\\\"],[\\\"use_cscore\\\",\\\"int\\\"],[\\\"terminate_on_midi\\\",\\\"int\\\"],[\\\"heartbeat\\\",\\\"int\\\"],[\\\"defer_gen01_load\\\",\\\"int\\\"],[\\\"midi_key\\\",\\\"int\\\"],[\\\"midi_key_cps\\\",\\\"int\\\"],[\\\"midi_key_oct\\\",\\\"int\\\"],[\\\"midi_key_pch\\\",\\\"int\\\"],[\\\"midi_velocity\\\",\\\"int\\\"],[\\\"midi_velocity_amp\\\",\\\"int\\\"],[\\\"no_default_paths\\\",\\\"int\\\"],[\\\"number_of_threads\\\",\\n\\\"int\\\"],[\\\"syntax_check_only\\\",\\\"int\\\"],[\\\"csd_line_counts\\\",\\\"int\\\"],[\\\"compute_weights\\\",\\\"int\\\"],[\\\"realtime_mode\\\",\\\"int\\\"],[\\\"sample_accurate\\\",\\\"int\\\"],[\\\"sample_rate_override\\\",\\\"MYFLT\\\"],[\\\"control_rate_override\\\",\\\"MYFLT\\\"],[\\\"nchnls_override\\\",\\\"int\\\"],[\\\"nchnls_i_override\\\",\\\"int\\\"],[\\\"e0dbfs_override\\\",\\\"MYFLT\\\"],[\\\"daemon\\\",\\\"int\\\"],[\\\"ksmps_override\\\",\\\"int\\\"],[\\\"FFT_library\\\",\\\"int\\\"]],Ua=[[\\\"device_name\\\",\\\"char\\\",64],[\\\"interface_name\\\",\\\"char\\\",64],[\\\"device_id\\\",\\\"char\\\",64],[\\\"midi_module\\\",\\\"char\\\",64],[\\\"isOutput\\\",\\\"int\\\"]];const Va=a=>b=>a.exports.csoundGetSr(b);Va.toString=()=>\\\"getSr = async () => Number;\\\";const Wa=a=>b=>a.exports.csoundGetKr(b);Wa.toString=()=>\\\"getKr = async () => Number;\\\";const Xa=a=>b=>a.exports.csoundGetKsmps(b);Xa.toString=()=>\\\"getKsmps = async () => Number;\\\";const Ya=a=>b=>a.exports.csoundGetNchnls(b);Ya.toString=()=>\\\"getNchnls = async () => Number;\\\";const Za=a=>b=>a.exports.csoundGetNchnlsInput(b);Za.toString=()=>\\\"getNchnlsInput = async () => Number;\\\";const $a=a=>b=>a.exports.csoundGet0dBFS(b);\\n$a.toString=()=>\\\"get0dBFS = async () => Number;\\\";const ab=a=>b=>a.exports.csoundGetA4(b);ab.toString=()=>\\\"getA4 = async () => Number;\\\";const bb=a=>b=>a.exports.csoundGetCurrentTimeSamples(b);bb.toString=()=>\\\"getCurrentTimeSamples = async () => Number;\\\";const cb=a=>b=>a.exports.csoundGetSizeOfMYFLT(b);cb.toString=()=>\\\"getSizeOfMYFLT = async () => Number;\\\";const db=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundSetOption(b,d);a.exports.freeStringMem(d);return b};db.toString=()=>\\\"setOption = async (option) => Number;\\\";\\nconst eb=a=>(b,d)=>{a.exports.csoundSetParams(b,d)};eb.toString=()=>\\\"setParams = async (csoundParams) => undefined;\\\";const fb=a=>b=>{var {buffer:d}=a.wasi.memory;const e=Ra(Ta),f=a.exports.allocCsoundParamsStruct();d=new Uint8Array(d,f,e);a.exports.csoundGetParams(b,f);b=Sa(Ta,d);a.exports.freeCsoundParams(f);return b};fb.toString=()=>\\\"getParams = async () => CSOUND_PARAMS;\\\";const gb=a=>b=>a.exports.csoundGetDebug(b);gb.toString=()=>\\\"getDebug = async () => Number;\\\";\\nconst hb=a=>(b,d)=>{a.exports.csoundSetDebug(b,d)};hb.toString=()=>\\\"setDebug = async (number) => undefined;\\\";const ib=a=>b=>a.exports.csoundGetInputBufferSize(b);ib.toString=()=>\\\"getInputBufferSize = async () => Number;\\\";const jb=a=>b=>a.exports.csoundGetOutputBufferSize(b);jb.toString=()=>\\\"getOutputBufferSize = async () => Number;\\\";const kb=a=>b=>a.exports.csoundGetInputBuffer(b);kb.toString=()=>\\\"getInputBuffer = async () => Number;\\\";const lb=a=>b=>a.exports.csoundGetOutputBuffer(b);lb.toString=()=>\\\"getOutputBuffer = async () => Number;\\\";const mb=a=>b=>a.exports.csoundGetSpin(b);mb.toString=()=>\\\"getSpin = async (csound) => Number;\\\";\\nconst nb=a=>b=>a.exports.csoundGetSpout(b);nb.toString=()=>\\\"getSpout = async () => Number;\\\";function t(a,b=[]){return(...d)=>{d=[...b,...d];return d.length>=a.length?a(...d):t(a,d)}}t(function(a,b,d){const e=0>a?d.length+a:a;if(a>=d.length||0>e)return d;a=Array.prototype.slice.call(d);a[e]=b(a[e]);return a});function ob(a){return()=>a}const pb=Array.isArray,qb=t(function(a,b,d){return Object.assign({},d,{[a]:b})});function rb(a){return a<<0===a}\\nfunction sb(a,b,d){const e=\\\"string\\\"===typeof a?a.split(\\\".\\\").map(f=>rb(Number(f))?Number(f):f):a;if(0===e.length)return b;a=e[0];if(1<e.length){const f=\\\"object\\\"===typeof d&&null!==d&&d.hasOwnProperty(a)?d[a]:rb(e[1])?[]:{};b=sb(Array.prototype.slice.call(e,1),b,f)}return rb(a)&&pb(d)?(d=Array.prototype.slice.call(d),d[a]=b,d):qb(a,b,d)}t(sb);t(function(a,b,d){if(a>b)throw Error(\\\"min must not be greater than max in clamp(min, max, value)\\\");if(d>=a&&d<=b)return d;if(d>b)return b;if(d<a)return a});\\nconst tb=Object.keys;function ub(a,b,d=!1){let e=0;const f=Array(b.length);for(;e<b.length;)f[e]=d?a(b[e],e):a(b[e]),e++;return f}function wb(a,b){let d=0;const e=tb(b),f=e.length,g={};for(;d<f;){const h=e[d];g[h]=a(b[h],h,b);d++}return g}function xb(a,b){if(1===arguments.length)return d=>xb(a,d);if(!b)throw Error(\\\"Incorrect iterable input\\\");return pb(b)?ub(a,b):wb(a,b)}\\nconst yb=t(function(a,b,d){if(!pb(d))throw new TypeError(\\\"reduce: list must be array or iterable\\\");let e=0;const f=d.length;for(;e<f;)b=a(b,d[e],e,d),e++;return b});function zb(a,b){return 1===arguments.length?d=>zb(a,d):void 0===b||null===b||!0===Number.isNaN(b)?a:b}function Ab(a){if(null===a)return\\\"Null\\\";if(void 0===a)return\\\"Undefined\\\";if(Number.isNaN(a))return\\\"NaN\\\";a=Object.prototype.toString.call(a).slice(8,-1);return\\\"AsyncFunction\\\"===a?\\\"Async\\\":a}\\nfunction Bb(a){const b=[];let d;for(;!(d=a.next()).done;)b.push(d.value);return b}function Cb(a,b){if(a.size!==b.size)return!1;a=Bb(a.values());const d=Bb(b.values());return 0===a.filter(e=>{if(!pb(d))throw Error(`Cannot read property 'indexOf' of ${d}`);var f=Ab(e);if([\\\"Object\\\",\\\"Array\\\",\\\"NaN\\\",\\\"RegExp\\\"].includes(f)){for(var g=f=-1,{length:h}=d;++f<h&&-1===g;)Db(d[f],e)&&(g=f);e=g}else e=d.indexOf(e);return-1===e}).length}\\nfunction Eb(a){const b=a.__proto__.toString();return[\\\"Error\\\",\\\"TypeError\\\"].includes(b)?[b,a.message]:[]}\\nfunction Db(a,b){if(1===arguments.length)return g=>Db(a,g);var d=Ab(a);if(d!==Ab(b))return!1;if(\\\"Function\\\"===d)return void 0===a.name?!1:a.name===b.name;if([\\\"NaN\\\",\\\"Undefined\\\",\\\"Null\\\"].includes(d))return!0;if(\\\"Number\\\"===d)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if([\\\"String\\\",\\\"Boolean\\\"].includes(d))return a.toString()===b.toString();if(\\\"Array\\\"===d){d=Array.from(a);const g=Array.from(b);if(d.toString()!==g.toString())return!1;let h=!0;d.forEach((k,l)=>{h&&(k===g[l]||Db(k,\\ng[l])||(h=!1))});return h}var e=a.constructor!==RegExp?[!1]:[!0,a.toString()],f=b.constructor!==RegExp?[!1]:[!0,b.toString()];if(e[0])return f[0]?e[1]===f[1]:!1;if(f[0])return!1;e=a.toDateString?[!0,a.getTime()]:[!1];f=b.toDateString?[!0,b.getTime()]:[!1];if(e[0])return f[0]?e[1]===f[1]:!1;if(f[0])return!1;e=Eb(a);f=Eb(b);if(e[0])return f[0]?e[0]===f[0]&&e[1]===f[1]:!1;if(\\\"Set\\\"===d)return Cb(a,b);if(\\\"Object\\\"===d){d=Object.keys(a);if(d.length!==Object.keys(b).length)return!1;let g=!0;d.forEach(h=>\\n{if(g){const k=a[h];h=b[h];k===h||Db(k,h)||(g=!1)}});return g}return!1}function Fb(a,b){if(1===arguments.length)return e=>Fb(a,e);if(null===b||void 0===b)return{};const d={};for(const e in b)d[e]=b[e];delete d[a];return d}function Gb(a,b){if(1===arguments.length)return d=>Gb(a,d);if(b)return b[a]}t(function(a,b,d){return Db(Gb(a,b),Gb(a,d))});\\nfunction Hb(a,b){if(1===arguments.length)return g=>Hb(a,g);if(null!==b&&void 0!==b){for(var d=b,e=0,f=\\\"string\\\"===typeof a?a.split(\\\".\\\"):a;e<f.length;){if(null===d||void 0===d||null===d[f[e]])return;d=d[f[e]];e++}return d}}t(function(a,b,d){return(...e)=>!0===(\\\"boolean\\\"===typeof a?a:a(...e))?b(...e):d(...e)});function Ib(a,b,d){let e=-1,{length:f}=a;d=d>f?f:d;0>d&&(d+=f);f=b>d?0:d-b>>>0;b>>>=0;for(d=Array(f);++e<f;)d[e]=a[e+b];return d}\\nfunction Jb(a,b){return 1===arguments.length?d=>Jb(a,d):null!=b&&b.constructor===a||b instanceof a}t(function(a,b,d){d=Array.prototype.slice.call(d);return-1===a?d.fill(b,a):d.fill(b,a,a+1)});t(function(a,b,d){return a(d)>a(b)?d:b});function Kb(a,b){return 1===arguments.length?d=>Kb(a,d):Object.assign({},a||{},b||{})}function Lb(a){let b={};xb(d=>{b=Kb(b,d)},a);return b}t(function(a,b,d){return a(d)<a(b)?d:b});\\nt(function(a,b,d){if(0>a||0>b)throw Error(\\\"Rambda.move does not support negative indexes\\\");if(a>d.length-1||b>d.length-1)return d;const e=Array.prototype.slice.call(d);e[a]=d[b];e[b]=d[a];return e});function Mb(a,b){return 1===arguments.length?d=>Mb(a,d):a*b}const Nb=a=>({x:a,map:b=>Nb(b(a))}),Ob=t(function(a,b,d){return a(e=>Nb(b(e)))(d).x});t(function(a,b,d){return Db(Hb(a,d),b)});t(function(a,b,d){return zb(a,Hb(b,d))});\\nfunction Pb(...a){if(0===a.length)throw Error(\\\"pipe requires at least one argument\\\");return(...b)=>{const d=a.slice();if(0<d.length){for(b=d.shift()(...b);0<d.length;)b=d.shift()(b);return b}}}yb(Mb,1);t(function(a,b,d){return d?d[a]===b:!1});t(function(a,b,d){return Jb(a,d[b])});t(function(a,b,d){return d?zb(a,d[b]):a});\\nfunction Qb(a,b){if(1===arguments.length)return f=>Qb(a,f);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError(\\\"Both arguments to range must be numbers\\\");if(b<a)return[];const d=b-a,e=Array(d);for(let f=0;f<d;f++)e[f]=a+f;return e}t(function(a,b,d){return d.replace(a,b)});t(function(a,b,d){return Ob(a,ob(b),d)});t(function(a,b,d){return d.slice(a,b)});function Rb(a,b){return 1===arguments.length?d=>Rb(a,d):0>a?b.slice():\\\"string\\\"===typeof b?b.slice(0,a):Ib(b,0,a)}\\nt(function(a,b,d){return a(d)?b(d):d});t(function(a,b,d){return Rb(b.length>d.length?d.length:b.length,b).map((e,f)=>a(e,d[f]))});const Sb=a=>(b,d)=>{const {buffer:e}=a.wasi.memory,f=a.exports.csoundGetMIDIDevList(b,void 0,d?1:0);if(0===f)return[];const g=Ra(Ua),h=a.exports.allocCsMidiDeviceStruct(f);a.exports.csoundGetMIDIDevList(b,h,d?1:0);const k=new Uint8Array(e,h,g*f);b=Qb(0,f).map(l=>Sa(Ua,k.subarray(l*g,g)));a.exports.freeCsMidiDeviceStruct(h);return b};Sb.toString=()=>\\\"getMIDIDevList = async (isOutput) => Object;\\\";\\nconst Tb=a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.getRtMidiName(b);d=new Uint8Array(d,b,128);return Ca(n.decode(d))||\\\"\\\"};Tb.toString=()=>\\\"getRtMidiName = async () => String;\\\";const Ub=a=>(b,d,e,f)=>{a.exports.pushMidiMessage(b,d,e,f)};Ub.toString=()=>\\\"midiMessage = async (status, data1, data2) => undefined;\\\";const Vb=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundInputMessage(b,d);a.exports.freeStringMem(d);return b};Vb.toString=()=>\\\"inputMessage = async (scoreEvent) => Number;\\\";const Wb=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundInputMessageAsync(b,d);a.exports.freeStringMem(d);return b};Wb.toString=()=>\\\"inputMessageAsync = async (scoreEvent) => Number;\\\";const Xb=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundGetControlChannelWasi(b,d);a.exports.freeStringMem(d);return b};Xb.toString=()=>\\\"getControlChannel = async (channelName) => Number;\\\";\\nconst Yb=a=>(b,d,e)=>{d=p(a,d);a.exports.csoundSetControlChannel(b,d,e);a.exports.freeStringMem(d)};Yb.toString=()=>\\\"setControlChannel = async (channelName, value) => void;\\\";const Zb=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundGetStringChannelWasi(b,d);({buffer:e}=a.wasi.memory);var e=new Uint8Array(e,b);e=n.decode(e);e=Ca(e);a.exports.freeStringMem(d);a.exports.freeStringMem(b);return e};Zb.toString=()=>\\\"getStringChannel = async (channelName) => String;\\\";\\nconst $b=a=>(b,d,e)=>{d=p(a,d);e=p(a,e);a.exports.csoundSetStringChannel(b,d,e);a.exports.freeStringMem(d);a.exports.freeStringMem(e)};$b.toString=()=>\\\"setStringChannel = async (channelName, value) => void;\\\";const ac=a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.csoundGetOutputName(b);d=new Uint8Array(d,b,64);return Ca(n.decode(d))||\\\"\\\"};ac.toString=()=>\\\"getOutputName = async () => String;\\\";const bc=a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.csoundGetInputName(b);d=new Uint8Array(d,b,64);return Ca(n.decode(d))||\\\"\\\"};bc.toString=()=>\\\"getInputName = async (csound) => String;\\\";const cc=a=>(b,d,e)=>{d=p(a,d);e=p(a,e);b=a.exports.csoundAppendEnv(b,d,e);a.exports.freeStringMem(d);a.exports.freeStringMem(e);return b};cc.toString=()=>\\\"appendEnv = async (csound, variable, value) => Number;\\\";const dc=a=>b=>a.exports.csoundIsScorePending(b);dc.toString=()=>\\\"isScorePending = async () => Number;\\\";const ec=a=>(b,d)=>a.exports.csoundSetScorePending(b,d);ec.toString=()=>\\\"setScorePending = async (pending) => Number;\\\";const fc=a=>(b,d)=>{d=p(a,d);b=a.exports.csoundReadScore(b,d);a.exports.freeStringMem(d);return b};fc.toString=()=>\\\"readScore = async (score) => Number;\\\";const gc=a=>b=>a.exports.csoundGetScoreTime(b);gc.toString=()=>\\\"getScoreTime = async () => Number;\\\";const hc=a=>b=>a.exports.csoundGetScoreOffsetSeconds(b);\\nhc.toString=()=>\\\"getScoreOffsetSeconds = async () => Number;\\\";const ic=a=>(b,d)=>a.exports.csoundSetScoreOffsetSeconds(b,d);ic.toString=()=>\\\"setScoreOffsetSeconds = async () => Number;\\\";const jc=a=>b=>a.exports.csoundRewindScore(b);jc.toString=()=>\\\"rewindScore = async () => undefined;\\\";const kc=a=>(b,d)=>a.exports.csoundTableLength(b,d);kc.toString=()=>\\\"tableLength = async (tableNum) => Number;\\\";const lc=a=>(b,d,e)=>a.exports.csoundTableGet(b,d,e);lc.toString=()=>\\\"tableGet = async (tableNum, tableIndex) => Number;\\\";const mc=a=>(b,d,e,f)=>a.exports.csoundTableSet(b,d,e,f);mc.toString=()=>\\\"tableSet = async (tableNum, tableIndex, value) => undefined;\\\";\\nconst nc=a=>(b,d,e)=>{const f=a.exports.allocFloatArray(e.length);(new Float64Array(a.wasi.memory.buffer,f,e.length)).set(e);a.exports.csoundTableCopyIn(b,d,f);a.exports.freeFloatArrayMem(f)};nc.toString=()=>\\\"tableCopyIn = async (tableNum, float64Array) => undefined;\\\";const oc=a=>(b,d)=>{var e=a.exports.csoundTableLength(b,d);if(0<e){const f=a.exports.allocFloatArray(e);a.exports.csoundTableCopyOut(b,d,f);({buffer:b}=a.wasi.memory);e=new Float64Array(b,f,e);a.exports.freeFloatArrayMem(f);return Float64Array.from(e)}};\\noc.toString=()=>\\\"tableCopyOut = async (tableNum) => ?Float64Array;\\\";oc.toString=oc.toString;const pc=a=>(b,d)=>{const e=a.exports.allocFloatArray(1024);a.exports.csoundGetTableArgs(b,e,d);({buffer:b}=a.wasi.memory);b=new Float64Array(b,e,1024);a.exports.freeFloatArrayMem(e);return b};pc.toString=()=>\\\"getTableArgs = async (tableNum) => ?Float64Array;\\\";const qc=a=>(b,d)=>a.exports.csoundIsNamedGEN(b,d);qc.toString=()=>\\\"isNamedGEN = async (tableNum) => number;\\\";\\nconst rc=a=>(b,d)=>{var e=a.exports.csoundIsNamedGEN(b,d);if(0<e){const f=a.exports.allocStringMem(e);a.exports.csoundGetNamedGEN(b,f,d,e);({buffer:b}=a.wasi.memory);e=new Uint8Array(b,f,e);return n.decode(e)}};rc.toString=()=>\\\"getNamedGEN = async (tableNum) => ?string;\\\";function sc(a){return(b,d,e)=>{b=\\\"string\\\"===typeof e?Ba.encode(e):e;a.wasi.writeFile(d,b)}}sc.toString=()=>\\\"async (path, data) => void\\\";function tc(a){return(b,d,e)=>{b=\\\"string\\\"===typeof e?Ba.encode(e):e;a.wasi.appendFile(d,b)}}tc.toString=()=>\\\"async (path, data) => void\\\";function uc(a){return(b,d)=>a.wasi.readFile(d)}uc.toString=()=>\\\"async (path) => ?Uint8Array\\\";function vc(a){return(b,d)=>a.wasi.unlink(d)}vc.toString=()=>\\\"async (path) => void\\\";function wc(a){return(b,d)=>a.wasi.readdir(d)}\\nwc.toString=()=>\\\"async (path) => string[]\\\";function xc(a){return(b,d)=>a.wasi.mkdir(d)}xc.toString=()=>\\\"async (path) => void\\\";var w={};w.appendFile=tc;w.mkdir=xc;w.readFile=uc;w.readdir=wc;w.unlink=vc;w.writeFile=sc;const yc={csoundCreate:va,csoundDestroy:wa,csoundGetAPIVersion:xa,csoundGetVersion:ya,csoundInitialize:Aa,csoundParseOrc:Da,csoundCompileTree:Ea,csoundCompileOrc:Fa,csoundEvalCode:Ga,csoundStart:Ha,csoundCompileCsd:Ia,csoundCompileCsdText:Ja,csoundPerform:Ka,csoundPerformKsmps:La,csoundPerformBuffer:Ma,csoundStop:Na,csoundCleanup:Oa,csoundReset:Pa,csoundGetSr:Va,csoundGetKr:Wa,csoundGetKsmps:Xa,csoundGetNchnls:Ya,csoundGetNchnlsInput:Za,csoundGet0dBFS:$a,csoundGetA4:ab,csoundGetCurrentTimeSamples:bb,\\ncsoundGetSizeOfMYFLT:cb,csoundSetOption:db,csoundSetParams:eb,csoundGetParams:fb,csoundGetDebug:gb,csoundSetDebug:hb,csoundGetInputBufferSize:ib,csoundGetOutputBufferSize:jb,csoundGetInputBuffer:kb,csoundGetOutputBuffer:lb,csoundGetSpin:mb,csoundGetSpout:nb,csoundGetMIDIDevList:Sb,csoundSetMidiCallbacks:a=>b=>{a.exports.csoundSetMidiCallbacks(b)},csoundGetRtMidiName:Tb,csoundGetMidiOutFileName:a=>b=>{var {buffer:d}=a.wasi.memory;b=a.exports.getMidiOutFileName(b);d=new Uint8Array(d,b,128);b&&0<b.length&&\\na.exports.freeStringMem(b);return Ca(n.decode(d))||\\\"\\\"},csoundPushMidiMessage:Ub,_isRequestingRtMidiInput:a=>b=>a.exports.isRequestingRtMidiInput(b),csoundInputMessage:Vb,csoundInputMessageAsync:Wb,csoundGetControlChannel:Xb,csoundSetControlChannel:Yb,csoundGetStringChannel:Zb,csoundSetStringChannel:$b,csoundGetInputName:bc,csoundGetOutputName:ac,csoundAppendEnv:cc,csoundShouldDaemonize:a=>b=>a.exports.csoundShouldDaemonize(b),csoundIsScorePending:dc,csoundSetScorePending:ec,csoundReadScore:fc,csoundGetScoreTime:gc,\\ncsoundGetScoreOffsetSeconds:hc,csoundSetScoreOffsetSeconds:ic,csoundRewindScore:jc,csoundTableLength:kc,csoundTableGet:lc,csoundTableSet:mc,csoundTableCopyIn:nc,csoundTableCopyOut:oc,csoundGetTable:oc,csoundGetTableArgs:pc,csoundIsNamedGEN:qc,csoundGetNamedGEN:rc,fs:w};function zc(a){return Lb([yb((b,d)=>qb(d,yc[d](a),b),{},Object.keys(Fb(\\\"fs\\\")(yc))),yb((b,d)=>qb(d,yc.fs[d](a),b),{},Object.keys(w))])};\\\"undefined\\\"===typeof c.global&&(c.global={});\\\"undefined\\\"===typeof c.global.BigInt&&(c.global.BigInt=\\\"undefined\\\"!==typeof BigInt?BigInt:Number);const Ac=c.global.BigInt(1),Bc=c.global.BigInt(2),Cc=c.global.BigInt(4),Dc=c.global.BigInt(8),Ec=c.global.BigInt(16),Fc=c.global.BigInt(32),Gc=c.global.BigInt(64),Hc=c.global.BigInt(128),Ic=c.global.BigInt(256);c.global.BigInt(512);c.global.BigInt(1024);c.global.BigInt(2048);c.global.BigInt(4096);c.global.BigInt(8192);c.global.BigInt(16384);c.global.BigInt(32768);\\nc.global.BigInt(65536);c.global.BigInt(131072);c.global.BigInt(262144);c.global.BigInt(524288);c.global.BigInt(1048576);const Jc=c.global.BigInt(2097152),Kc=c.global.BigInt(4194304),Lc=c.global.BigInt(8388608);c.global.BigInt(16777216);c.global.BigInt(33554432);c.global.BigInt(67108864);const Mc=c.global.BigInt(134217728);c.global.BigInt(268435456);const Nc=Ac|Bc|Cc|Dc|Ec|Fc|Gc|Hc|Ic|Jc|Kc|Lc|Mc,Oc=c.global.BigInt(0);c.global.BigInt(0);c.debug={};function Pc(a,b){if(Error.captureStackTrace)Error.captureStackTrace(this,Pc);else{const d=Error().stack;d&&(this.stack=d)}a&&(this.message=String(a));void 0!==b&&(this.cause=b);this.reportErrorToServer=!0}c.inherits(Pc,Error);Pc.prototype.name=\\\"CustomError\\\";c.debug.Error=Pc;c.dom={};c.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};c.asserts={};c.asserts.ENABLE_ASSERTS=c.DEBUG;c.asserts.AssertionError=function(a,b){Pc.call(this,c.asserts.subs_(a,b));this.messagePattern=a};c.inherits(c.asserts.AssertionError,Pc);c.asserts.AssertionError.prototype.name=\\\"AssertionError\\\";c.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};c.asserts.errorHandler_=c.asserts.DEFAULT_ERROR_HANDLER;c.asserts.subs_=function(a,b){a=a.split(\\\"%s\\\");for(var d=\\\"\\\",e=a.length-1,f=0;f<e;f++)d+=a[f]+(f<b.length?b[f]:\\\"%s\\\");return d+a[e]};\\nc.asserts.doAssertFailure_=function(a,b,d,e){var f=\\\"Assertion failed\\\";if(d){f+=\\\": \\\"+d;var g=e}else a&&(f+=\\\": \\\"+a,g=b);a=new c.asserts.AssertionError(\\\"\\\"+f,g||[]);c.asserts.errorHandler_(a)};c.asserts.setErrorHandler=function(a){c.asserts.ENABLE_ASSERTS&&(c.asserts.errorHandler_=a)};c.asserts.assert=function(a,b,d){c.asserts.ENABLE_ASSERTS&&!a&&c.asserts.doAssertFailure_(\\\"\\\",null,b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertExists=function(a,b,d){c.asserts.ENABLE_ASSERTS&&null==a&&c.asserts.doAssertFailure_(\\\"Expected to exist: %s.\\\",[a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.fail=function(a,b){c.asserts.ENABLE_ASSERTS&&c.asserts.errorHandler_(new c.asserts.AssertionError(\\\"Failure\\\"+(a?\\\": \\\"+a:\\\"\\\"),Array.prototype.slice.call(arguments,1)))};\\nc.asserts.assertNumber=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"number\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected number but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertString=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"string\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected string but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertFunction=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"function\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected function but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertObject=function(a,b,d){c.asserts.ENABLE_ASSERTS&&!c.isObject(a)&&c.asserts.doAssertFailure_(\\\"Expected object but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertArray=function(a,b,d){c.asserts.ENABLE_ASSERTS&&!Array.isArray(a)&&c.asserts.doAssertFailure_(\\\"Expected array but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertBoolean=function(a,b,d){c.asserts.ENABLE_ASSERTS&&\\\"boolean\\\"!==typeof a&&c.asserts.doAssertFailure_(\\\"Expected boolean but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};\\nc.asserts.assertElement=function(a,b,d){!c.asserts.ENABLE_ASSERTS||c.isObject(a)&&a.nodeType==c.dom.NodeType.ELEMENT||c.asserts.doAssertFailure_(\\\"Expected Element but got %s: %s.\\\",[c.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.assertInstanceof=function(a,b,d,e){!c.asserts.ENABLE_ASSERTS||a instanceof b||c.asserts.doAssertFailure_(\\\"Expected instanceof %s but got %s.\\\",[c.asserts.getType_(b),c.asserts.getType_(a)],d,Array.prototype.slice.call(arguments,3));return a};\\nc.asserts.assertFinite=function(a,b,d){!c.asserts.ENABLE_ASSERTS||\\\"number\\\"==typeof a&&isFinite(a)||c.asserts.doAssertFailure_(\\\"Expected %s to be a finite number but it is not.\\\",[a],b,Array.prototype.slice.call(arguments,2));return a};c.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||\\\"unknown type name\\\":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?\\\"null\\\":typeof a};c.array={};c.NATIVE_ARRAY_PROTOTYPES=c.TRUSTED_SITE;const z=2012<c.FEATURESET_YEAR;c.array.ASSUME_NATIVE_FUNCTIONS=z;function Qc(a){return a[a.length-1]}c.array.peek=Qc;c.array.last=Qc;\\nconst Rc=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.indexOf)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,d)}:function(a,b,d){d=null==d?0:0>d?Math.max(0,a.length+d):d;if(\\\"string\\\"===typeof a)return\\\"string\\\"!==typeof b||1!=b.length?-1:a.indexOf(b,d);for(;d<a.length;d++)if(d in a&&a[d]===b)return d;return-1};c.array.indexOf=Rc;\\nconst Sc=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.lastIndexOf)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==d?a.length-1:d)}:function(a,b,d){d=null==d?a.length-1:d;0>d&&(d=Math.max(0,a.length+d));if(\\\"string\\\"===typeof a)return\\\"string\\\"!==typeof b||1!=b.length?-1:a.lastIndexOf(b,d);for(;0<=d;d--)if(d in a&&a[d]===b)return d;return-1};c.array.lastIndexOf=Sc;\\nconst Tc=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.forEach)?function(a,b,d){c.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,d)}:function(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)g in f&&b.call(d,f[g],g,a)};c.array.forEach=Tc;function Uc(a,b,d){var e=a.length;const f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(--e;0<=e;--e)e in f&&b.call(d,f[e],e,a)}c.array.forEachRight=Uc;\\nc.array.filter=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.filter)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,d)}:function(a,b,d){const e=a.length,f=[];let g=0;const h=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let k=0;k<e;k++)if(k in h){const l=h[k];b.call(d,l,k,a)&&(f[g++]=l)}return f};\\nconst Vc=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.map)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,d)}:function(a,b,d){const e=a.length,f=Array(e),g=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let h=0;h<e;h++)h in g&&(f[h]=b.call(d,g[h],h,a));return f};c.array.map=Vc;\\nc.array.reduce=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.reduce)?function(a,b,d,e){c.asserts.assert(null!=a.length);e&&(b=c.bind(b,e));return Array.prototype.reduce.call(a,b,d)}:function(a,b,d,e){let f=d;Tc(a,function(g,h){f=b.call(e,f,g,h,a)});return f};\\nc.array.reduceRight=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.reduceRight)?function(a,b,d,e){c.asserts.assert(null!=a.length);c.asserts.assert(null!=b);e&&(b=c.bind(b,e));return Array.prototype.reduceRight.call(a,b,d)}:function(a,b,d,e){let f=d;Uc(a,function(g,h){f=b.call(e,f,g,h,a)});return f};\\nc.array.some=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.some)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,d)}:function(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)if(g in f&&b.call(d,f[g],g,a))return!0;return!1};\\nc.array.every=c.NATIVE_ARRAY_PROTOTYPES&&(z||Array.prototype.every)?function(a,b,d){c.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,d)}:function(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)if(g in f&&!b.call(d,f[g],g,a))return!1;return!0};c.array.count=function(a,b,d){let e=0;Tc(a,function(f,g,h){b.call(d,f,g,h)&&++e},d);return e};c.array.find=function(a,b,d){b=Wc(a,b,d);return 0>b?null:\\\"string\\\"===typeof a?a.charAt(b):a[b]};\\nfunction Wc(a,b,d){const e=a.length,f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(let g=0;g<e;g++)if(g in f&&b.call(d,f[g],g,a))return g;return-1}c.array.findIndex=Wc;c.array.findRight=function(a,b,d){b=Xc(a,b,d);return 0>b?null:\\\"string\\\"===typeof a?a.charAt(b):a[b]};function Xc(a,b,d){var e=a.length;const f=\\\"string\\\"===typeof a?a.split(\\\"\\\"):a;for(--e;0<=e;e--)if(e in f&&b.call(d,f[e],e,a))return e;return-1}c.array.findIndexRight=Xc;function Yc(a,b){return 0<=Rc(a,b)}c.array.contains=Yc;\\nc.array.isEmpty=function(a){return 0==a.length};c.array.clear=function(a){if(!Array.isArray(a))for(let b=a.length-1;0<=b;b--)delete a[b];a.length=0};c.array.insert=function(a,b){Yc(a,b)||a.push(b)};function Zc(a,b,d){$c(a,d,0,b)}c.array.insertAt=Zc;c.array.insertArrayAt=function(a,b,d){c.partial($c,a,d,0).apply(null,b)};c.array.insertBefore=function(a,b,d){let e;2==arguments.length||0>(e=Rc(a,d))?a.push(b):Zc(a,b,e)};c.array.remove=function(a,b){b=Rc(a,b);let d;(d=0<=b)&&ad(a,b);return d};\\nc.array.removeLast=function(a,b){b=Sc(a,b);return 0<=b?(ad(a,b),!0):!1};function ad(a,b){c.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length}c.array.removeAt=ad;c.array.removeIf=function(a,b,d){b=Wc(a,b,d);return 0<=b?(ad(a,b),!0):!1};c.array.removeAllIf=function(a,b,d){let e=0;Uc(a,function(f,g){b.call(d,f,g,a)&&ad(a,g)&&e++});return e};function bd(a){return Array.prototype.concat.apply([],arguments)}c.array.concat=bd;\\nc.array.join=function(a){return Array.prototype.concat.apply([],arguments)};function cd(a){const b=a.length;if(0<b){const d=Array(b);for(let e=0;e<b;e++)d[e]=a[e];return d}return[]}c.array.toArray=cd;c.array.clone=cd;c.array.extend=function(a,b){for(let d=1;d<arguments.length;d++){const e=arguments[d];if(c.isArrayLike(e)){const f=a.length||0,g=e.length||0;a.length=f+g;for(let h=0;h<g;h++)a[f+h]=e[h]}else a.push(e)}};\\nfunction $c(a,b,d,e){c.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,dd(arguments,1))}c.array.splice=$c;function dd(a,b,d){c.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,d)}c.array.slice=dd;\\nc.array.removeDuplicates=function(a,b,d){function e(k){return c.isObject(k)?\\\"o\\\"+c.getUid(k):(typeof k).charAt(0)+k}b=b||a;d=d||e;let f=0,g=0;const h={};for(;g<a.length;){const k=a[g++],l=d(k);Object.prototype.hasOwnProperty.call(h,l)||(h[l]=!0,b[f++]=k)}b.length=f};function ed(a,b,d){return fd(a,d||C,!1,b)}c.array.binarySearch=ed;c.array.binarySelect=function(a,b,d){return fd(a,b,!0,void 0,d)};\\nfunction fd(a,b,d,e,f){let g=0,h=a.length,k;for(;g<h;){const l=g+(h-g>>>1);let m;m=d?b.call(f,a[l],l,a):b(e,a[l]);0<m?g=l+1:(h=l,k=!m)}return k?g:-g-1}function gd(a,b){a.sort(b||C)}c.array.sort=gd;c.array.stableSort=function(a,b){const d=Array(a.length);for(let f=0;f<a.length;f++)d[f]={index:f,value:a[f]};const e=b||C;gd(d,function(f,g){return e(f.value,g.value)||f.index-g.index});for(b=0;b<a.length;b++)a[b]=d[b].value};function hd(a,b,d){const e=d||C;gd(a,function(f,g){return e(b(f),b(g))})}\\nc.array.sortByKey=hd;c.array.sortObjectsByKey=function(a,b,d){hd(a,function(e){return e[b]},d)};c.array.isSorted=function(a,b,d){b=b||C;for(let e=1;e<a.length;e++){const f=b(a[e-1],a[e]);if(0<f||0==f&&d)return!1}return!0};c.array.equals=function(a,b,d){if(!c.isArrayLike(a)||!c.isArrayLike(b)||a.length!=b.length)return!1;const e=a.length;d=d||id;for(let f=0;f<e;f++)if(!d(a[f],b[f]))return!1;return!0};\\nc.array.compare3=function(a,b,d){d=d||C;const e=Math.min(a.length,b.length);for(let f=0;f<e;f++){const g=d(a[f],b[f]);if(0!=g)return g}return C(a.length,b.length)};function C(a,b){return a>b?1:a<b?-1:0}c.array.defaultCompare=C;c.array.inverseDefaultCompare=function(a,b){return-C(a,b)};function id(a,b){return a===b}c.array.defaultCompareEquality=id;c.array.binaryInsert=function(a,b,d){d=ed(a,b,d);return 0>d?(Zc(a,b,-(d+1)),!0):!1};\\nc.array.binaryRemove=function(a,b,d){b=ed(a,b,d);return 0<=b?ad(a,b):!1};c.array.bucket=function(a,b,d){const e={};for(let f=0;f<a.length;f++){const g=a[f],h=b.call(d,g,f,a);void 0!==h&&(e[h]||(e[h]=[])).push(g)}return e};c.array.bucketToMap=function(a,b){const d=new Map;for(let e=0;e<a.length;e++){const f=a[e],g=b(f,e,a);if(void 0!==g){let h=d.get(g);h||(h=[],d.set(g,h));h.push(f)}}return d};c.array.toObject=function(a,b,d){const e={};Tc(a,function(f,g){e[b.call(d,f,g,a)]=f});return e};\\nc.array.toMap=function(a,b){const d=new Map;for(let e=0;e<a.length;e++){const f=a[e];d.set(b(f,e,a),f)}return d};c.array.range=function(a,b,d){const e=[];let f=0,g=a;d=d||1;void 0!==b&&(f=a,g=b);if(0>d*(g-f))return[];if(0<d)for(a=f;a<g;a+=d)e.push(a);else for(a=f;a>g;a+=d)e.push(a);return e};c.array.repeat=function(a,b){const d=[];for(let e=0;e<b;e++)d[e]=a;return d};\\nfunction jd(a){const b=[];for(let e=0;e<arguments.length;e++){const f=arguments[e];if(Array.isArray(f))for(let g=0;g<f.length;g+=8192){var d=dd(f,g,g+8192);d=jd.apply(null,d);for(let h=0;h<d.length;h++)b.push(d[h])}else b.push(f)}return b}c.array.flatten=jd;c.array.rotate=function(a,b){c.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};\\nc.array.moveItem=function(a,b,d){c.asserts.assert(0<=b&&b<a.length);c.asserts.assert(0<=d&&d<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,d,0,b[0])};c.array.zip=function(a){if(!arguments.length)return[];const b=[];let d=arguments[0].length;for(var e=1;e<arguments.length;e++)arguments[e].length<d&&(d=arguments[e].length);for(e=0;e<d;e++){const f=[];for(let g=0;g<arguments.length;g++)f.push(arguments[g][e]);b.push(f)}return b};\\nc.array.shuffle=function(a,b){b=b||Math.random;for(let d=a.length-1;0<d;d--){const e=Math.floor(b()*(d+1)),f=a[d];a[d]=a[e];a[e]=f}};c.array.copyByIndex=function(a,b){const d=[];Tc(b,function(e){d.push(a[e])});return d};c.array.concatMap=function(a,b,d){return bd.apply([],Vc(a,b,d))};c.dom.asserts={};c.dom.asserts.assertIsLocation=function(a){if(c.asserts.ENABLE_ASSERTS){var b=c.dom.asserts.getWindow_(a);b&&(!a||!(a instanceof b.Location)&&a instanceof b.Element)&&c.asserts.fail(\\\"Argument is not a Location (or a non-Element mock); got: %s\\\",c.dom.asserts.debugStringForType_(a))}return a};\\nc.dom.asserts.assertIsElementType_=function(a,b){if(c.asserts.ENABLE_ASSERTS){var d=c.dom.asserts.getWindow_(a);d&&\\\"undefined\\\"!=typeof d[b]&&(a&&(a instanceof d[b]||!(a instanceof d.Location||a instanceof d.Element))||c.asserts.fail(\\\"Argument is not a %s (or a non-Element, non-Location mock); got: %s\\\",b,c.dom.asserts.debugStringForType_(a)))}return a};c.dom.asserts.assertIsHTMLAnchorElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLAnchorElement\\\")};\\nc.dom.asserts.assertIsHTMLButtonElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLButtonElement\\\")};c.dom.asserts.assertIsHTMLLinkElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLLinkElement\\\")};c.dom.asserts.assertIsHTMLImageElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLImageElement\\\")};c.dom.asserts.assertIsHTMLAudioElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLAudioElement\\\")};\\nc.dom.asserts.assertIsHTMLVideoElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLVideoElement\\\")};c.dom.asserts.assertIsHTMLInputElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLInputElement\\\")};c.dom.asserts.assertIsHTMLTextAreaElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLTextAreaElement\\\")};c.dom.asserts.assertIsHTMLCanvasElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLCanvasElement\\\")};\\nc.dom.asserts.assertIsHTMLEmbedElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLEmbedElement\\\")};c.dom.asserts.assertIsHTMLFormElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLFormElement\\\")};c.dom.asserts.assertIsHTMLFrameElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLFrameElement\\\")};c.dom.asserts.assertIsHTMLIFrameElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLIFrameElement\\\")};\\nc.dom.asserts.assertIsHTMLObjectElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLObjectElement\\\")};c.dom.asserts.assertIsHTMLScriptElement=function(a){return c.dom.asserts.assertIsElementType_(a,\\\"HTMLScriptElement\\\")};c.dom.asserts.debugStringForType_=function(a){if(c.isObject(a))try{return a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a)}catch(b){return\\\"<object could not be stringified>\\\"}else return void 0===a?\\\"undefined\\\":null===a?\\\"null\\\":typeof a};\\nc.dom.asserts.getWindow_=function(a){try{var b=a&&a.ownerDocument,d=b&&(b.defaultView||b.parentWindow);d=d||c.global;if(d.Element&&d.Location)return d}catch(e){}return null};c.functions={};c.functions.constant=function(a){return function(){return a}};c.functions.FALSE=function(){return!1};c.functions.TRUE=function(){return!0};c.functions.NULL=function(){return null};c.functions.UNDEFINED=function(){};c.functions.EMPTY=c.functions.UNDEFINED;c.functions.identity=function(a){return a};c.functions.error=function(a){return function(){throw Error(a);}};c.functions.fail=function(a){return function(){throw a;}};\\nc.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};c.functions.nth=function(a){return function(){return arguments[a]}};c.functions.partialRight=function(a,b){const d=Array.prototype.slice.call(arguments,1);return function(){let e=this;e===c.global&&(e=void 0);const f=Array.prototype.slice.call(arguments);f.push.apply(f,d);return a.apply(e,f)}};c.functions.withReturnValue=function(a,b){return c.functions.sequence(a,c.functions.constant(b))};\\nc.functions.equalTo=function(a,b){return function(d){return b?a==d:a===d}};c.functions.compose=function(a,b){const d=arguments,e=d.length;return function(){let f;e&&(f=d[e-1].apply(this,arguments));for(let g=e-2;0<=g;g--)f=d[g].call(this,f);return f}};c.functions.sequence=function(a){const b=arguments,d=b.length;return function(){let e;for(let f=0;f<d;f++)e=b[f].apply(this,arguments);return e}};\\nc.functions.and=function(a){const b=arguments,d=b.length;return function(){for(let e=0;e<d;e++)if(!b[e].apply(this,arguments))return!1;return!0}};c.functions.or=function(a){const b=arguments,d=b.length;return function(){for(let e=0;e<d;e++)if(b[e].apply(this,arguments))return!0;return!1}};c.functions.not=function(a){return function(){return!a.apply(this,arguments)}};\\nc.functions.create=function(a,b){function d(){}d.prototype=a.prototype;const e=new d;a.apply(e,Array.prototype.slice.call(arguments,1));return e};c.functions.CACHE_RETURN_VALUE=!0;c.functions.cacheReturnValue=function(a){let b=!1,d;return function(){if(!c.functions.CACHE_RETURN_VALUE)return a();b||(d=a(),b=!0);return d}};c.functions.once=function(a){let b=a;return function(){if(b){const d=b;b=null;d()}}};\\nc.functions.debounce=function(a,b,d){let e=0;return function(f){c.global.clearTimeout(e);const g=arguments;e=c.global.setTimeout(function(){a.apply(d,g)},b)}};c.functions.throttle=function(a,b,d){function e(){g=c.global.setTimeout(f,b);let l=k;k=[];a.apply(d,l)}function f(){g=0;h&&(h=!1,e())}let g=0,h=!1,k=[];return function(l){k=arguments;g?h=!0:e()}};c.functions.rateLimit=function(a,b,d){function e(){f=0}let f=0;return function(g){f||(f=c.global.setTimeout(e,b),a.apply(d,arguments))}};\\nc.functions.isFunction=a=>\\\"function\\\"===typeof a;c.string={};c.string.TypedString=function(){};c.string.Const=function(a,b){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a===c.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&b||\\\"\\\";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=c.string.Const.TYPE_MARKER_};c.string.Const.prototype.implementsGoogStringTypedString=!0;c.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};\\nc.DEBUG&&(c.string.Const.prototype.toString=function(){return\\\"Const{\\\"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+\\\"}\\\"});c.string.Const.unwrap=function(a){if(a instanceof c.string.Const&&a.constructor===c.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===c.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;c.asserts.fail(\\\"expected object of type Const, got '\\\"+a+\\\"'\\\");return\\\"type_error:Const\\\"};\\nc.string.Const.from=function(a){return new c.string.Const(c.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,a)};c.string.Const.TYPE_MARKER_={};c.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={};c.string.Const.EMPTY=c.string.Const.from(\\\"\\\");c.i18n={};c.i18n.bidi={};c.i18n.bidi.FORCE_RTL=!1;\\nc.i18n.bidi.IS_RTL=c.i18n.bidi.FORCE_RTL||(\\\"ar\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"fa\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"he\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"iw\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"ps\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"sd\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"ug\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"ur\\\"==c.LOCALE.substring(0,2).toLowerCase()||\\\"yi\\\"==c.LOCALE.substring(0,2).toLowerCase())&&(2==c.LOCALE.length||\\\"-\\\"==c.LOCALE.substring(2,3)||\\\"_\\\"==\\nc.LOCALE.substring(2,3))||3<=c.LOCALE.length&&\\\"ckb\\\"==c.LOCALE.substring(0,3).toLowerCase()&&(3==c.LOCALE.length||\\\"-\\\"==c.LOCALE.substring(3,4)||\\\"_\\\"==c.LOCALE.substring(3,4))||7<=c.LOCALE.length&&(\\\"-\\\"==c.LOCALE.substring(2,3)||\\\"_\\\"==c.LOCALE.substring(2,3))&&(\\\"adlm\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"arab\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"hebr\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"nkoo\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"rohg\\\"==c.LOCALE.substring(3,7).toLowerCase()||\\\"thaa\\\"==c.LOCALE.substring(3,\\n7).toLowerCase())||8<=c.LOCALE.length&&(\\\"-\\\"==c.LOCALE.substring(3,4)||\\\"_\\\"==c.LOCALE.substring(3,4))&&(\\\"adlm\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"arab\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"hebr\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"nkoo\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"rohg\\\"==c.LOCALE.substring(4,8).toLowerCase()||\\\"thaa\\\"==c.LOCALE.substring(4,8).toLowerCase());c.i18n.bidi.Format={LRE:\\\"\\\\u202a\\\",RLE:\\\"\\\\u202b\\\",PDF:\\\"\\\\u202c\\\",LRM:\\\"\\\\u200e\\\",RLM:\\\"\\\\u200f\\\"};c.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};\\nc.i18n.bidi.RIGHT=\\\"right\\\";c.i18n.bidi.LEFT=\\\"left\\\";c.i18n.bidi.I18N_RIGHT=c.i18n.bidi.IS_RTL?c.i18n.bidi.LEFT:c.i18n.bidi.RIGHT;c.i18n.bidi.I18N_LEFT=c.i18n.bidi.IS_RTL?c.i18n.bidi.RIGHT:c.i18n.bidi.LEFT;c.i18n.bidi.toDir=function(a,b){return\\\"number\\\"==typeof a?0<a?c.i18n.bidi.Dir.LTR:0>a?c.i18n.bidi.Dir.RTL:b?null:c.i18n.bidi.Dir.NEUTRAL:null==a?null:a?c.i18n.bidi.Dir.RTL:c.i18n.bidi.Dir.LTR};c.i18n.bidi.ltrChars_=\\\"A-Za-z\\\\u00c0-\\\\u00d6\\\\u00d8-\\\\u00f6\\\\u00f8-\\\\u02b8\\\\u0300-\\\\u0590\\\\u0900-\\\\u1fff\\\\u200e\\\\u2c00-\\\\ud801\\\\ud804-\\\\ud839\\\\ud83c-\\\\udbff\\\\uf900-\\\\ufb1c\\\\ufe00-\\\\ufe6f\\\\ufefd-\\\\uffff\\\";\\nc.i18n.bidi.rtlChars_=\\\"\\\\u0591-\\\\u06ef\\\\u06fa-\\\\u08ff\\\\u200f\\\\ud802-\\\\ud803\\\\ud83a-\\\\ud83b\\\\ufb1d-\\\\ufdff\\\\ufe70-\\\\ufefc\\\";c.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;c.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(c.i18n.bidi.htmlSkipReg_,\\\"\\\"):a};c.i18n.bidi.rtlCharReg_=new RegExp(\\\"[\\\"+c.i18n.bidi.rtlChars_+\\\"]\\\");c.i18n.bidi.ltrCharReg_=new RegExp(\\\"[\\\"+c.i18n.bidi.ltrChars_+\\\"]\\\");c.i18n.bidi.hasAnyRtl=function(a,b){return c.i18n.bidi.rtlCharReg_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};\\nc.i18n.bidi.hasRtlChar=c.i18n.bidi.hasAnyRtl;c.i18n.bidi.hasAnyLtr=function(a,b){return c.i18n.bidi.ltrCharReg_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.ltrRe_=new RegExp(\\\"^[\\\"+c.i18n.bidi.ltrChars_+\\\"]\\\");c.i18n.bidi.rtlRe_=new RegExp(\\\"^[\\\"+c.i18n.bidi.rtlChars_+\\\"]\\\");c.i18n.bidi.isRtlChar=function(a){return c.i18n.bidi.rtlRe_.test(a)};c.i18n.bidi.isLtrChar=function(a){return c.i18n.bidi.ltrRe_.test(a)};c.i18n.bidi.isNeutralChar=function(a){return!c.i18n.bidi.isLtrChar(a)&&!c.i18n.bidi.isRtlChar(a)};\\nc.i18n.bidi.ltrDirCheckRe_=new RegExp(\\\"^[^\\\"+c.i18n.bidi.rtlChars_+\\\"]*[\\\"+c.i18n.bidi.ltrChars_+\\\"]\\\");c.i18n.bidi.rtlDirCheckRe_=new RegExp(\\\"^[^\\\"+c.i18n.bidi.ltrChars_+\\\"]*[\\\"+c.i18n.bidi.rtlChars_+\\\"]\\\");c.i18n.bidi.startsWithRtl=function(a,b){return c.i18n.bidi.rtlDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.isRtlText=c.i18n.bidi.startsWithRtl;c.i18n.bidi.startsWithLtr=function(a,b){return c.i18n.bidi.ltrDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};\\nc.i18n.bidi.isLtrText=c.i18n.bidi.startsWithLtr;c.i18n.bidi.isRequiredLtrRe_=/^http:\\\\/\\\\/.*/;c.i18n.bidi.isNeutralText=function(a,b){a=c.i18n.bidi.stripHtmlIfNeeded_(a,b);return c.i18n.bidi.isRequiredLtrRe_.test(a)||!c.i18n.bidi.hasAnyLtr(a)&&!c.i18n.bidi.hasAnyRtl(a)};c.i18n.bidi.ltrExitDirCheckRe_=new RegExp(\\\"[\\\"+c.i18n.bidi.ltrChars_+\\\"][^\\\"+c.i18n.bidi.rtlChars_+\\\"]*$\\\");c.i18n.bidi.rtlExitDirCheckRe_=new RegExp(\\\"[\\\"+c.i18n.bidi.rtlChars_+\\\"][^\\\"+c.i18n.bidi.ltrChars_+\\\"]*$\\\");\\nc.i18n.bidi.endsWithLtr=function(a,b){return c.i18n.bidi.ltrExitDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.isLtrExitText=c.i18n.bidi.endsWithLtr;c.i18n.bidi.endsWithRtl=function(a,b){return c.i18n.bidi.rtlExitDirCheckRe_.test(c.i18n.bidi.stripHtmlIfNeeded_(a,b))};c.i18n.bidi.isRtlExitText=c.i18n.bidi.endsWithRtl;c.i18n.bidi.rtlLocalesRe_=RegExp(\\\"^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)\\\",\\\"i\\\");\\nc.i18n.bidi.isRtlLanguage=function(a){return c.i18n.bidi.rtlLocalesRe_.test(a)};c.i18n.bidi.bracketGuardTextRe_=/(\\\\(.*?\\\\)+)|(\\\\[.*?\\\\]+)|(\\\\{.*?\\\\}+)|(<.*?>+)/g;c.i18n.bidi.guardBracketInText=function(a,b){b=(void 0===b?c.i18n.bidi.hasAnyRtl(a):b)?c.i18n.bidi.Format.RLM:c.i18n.bidi.Format.LRM;return a.replace(c.i18n.bidi.bracketGuardTextRe_,b+\\\"$&\\\"+b)};c.i18n.bidi.enforceRtlInHtml=function(a){return\\\"<\\\"==a.charAt(0)?a.replace(/<\\\\w+/,\\\"$& dir=rtl\\\"):\\\"\\\\n<span dir=rtl>\\\"+a+\\\"</span>\\\"};\\nc.i18n.bidi.enforceRtlInText=function(a){return c.i18n.bidi.Format.RLE+a+c.i18n.bidi.Format.PDF};c.i18n.bidi.enforceLtrInHtml=function(a){return\\\"<\\\"==a.charAt(0)?a.replace(/<\\\\w+/,\\\"$& dir=ltr\\\"):\\\"\\\\n<span dir=ltr>\\\"+a+\\\"</span>\\\"};c.i18n.bidi.enforceLtrInText=function(a){return c.i18n.bidi.Format.LRE+a+c.i18n.bidi.Format.PDF};c.i18n.bidi.dimensionsRe_=/:\\\\s*([.\\\\d][.\\\\w]*)\\\\s+([.\\\\d][.\\\\w]*)\\\\s+([.\\\\d][.\\\\w]*)\\\\s+([.\\\\d][.\\\\w]*)/g;c.i18n.bidi.leftRe_=/left/gi;c.i18n.bidi.rightRe_=/right/gi;c.i18n.bidi.tempRe_=/%%%%/g;\\nc.i18n.bidi.mirrorCSS=function(a){return a.replace(c.i18n.bidi.dimensionsRe_,\\\":$1 $4 $3 $2\\\").replace(c.i18n.bidi.leftRe_,\\\"%%%%\\\").replace(c.i18n.bidi.rightRe_,c.i18n.bidi.LEFT).replace(c.i18n.bidi.tempRe_,c.i18n.bidi.RIGHT)};c.i18n.bidi.doubleQuoteSubstituteRe_=/([\\\\u0591-\\\\u05f2])\\\"/g;c.i18n.bidi.singleQuoteSubstituteRe_=/([\\\\u0591-\\\\u05f2])'/g;c.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(c.i18n.bidi.doubleQuoteSubstituteRe_,\\\"$1\\\\u05f4\\\").replace(c.i18n.bidi.singleQuoteSubstituteRe_,\\\"$1\\\\u05f3\\\")};\\nc.i18n.bidi.wordSeparatorRe_=/\\\\s+/;c.i18n.bidi.hasNumeralsRe_=/[\\\\d\\\\u06f0-\\\\u06f9]/;c.i18n.bidi.rtlDetectionThreshold_=.4;\\nc.i18n.bidi.estimateDirection=function(a,b){let d=0,e=0,f=!1;a=c.i18n.bidi.stripHtmlIfNeeded_(a,b).split(c.i18n.bidi.wordSeparatorRe_);for(b=0;b<a.length;b++){const g=a[b];c.i18n.bidi.startsWithRtl(g)?(d++,e++):c.i18n.bidi.isRequiredLtrRe_.test(g)?f=!0:c.i18n.bidi.hasAnyLtr(g)?e++:c.i18n.bidi.hasNumeralsRe_.test(g)&&(f=!0)}return 0==e?f?c.i18n.bidi.Dir.LTR:c.i18n.bidi.Dir.NEUTRAL:d/e>c.i18n.bidi.rtlDetectionThreshold_?c.i18n.bidi.Dir.RTL:c.i18n.bidi.Dir.LTR};\\nc.i18n.bidi.detectRtlDirectionality=function(a,b){return c.i18n.bidi.estimateDirection(a,b)==c.i18n.bidi.Dir.RTL};c.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=c.i18n.bidi.toDir(b))&&(a.style.textAlign=b==c.i18n.bidi.Dir.RTL?c.i18n.bidi.RIGHT:c.i18n.bidi.LEFT,a.dir=b==c.i18n.bidi.Dir.RTL?\\\"rtl\\\":\\\"ltr\\\")};\\nc.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(c.i18n.bidi.estimateDirection(b)){case c.i18n.bidi.Dir.LTR:\\\"ltr\\\"!==a.dir&&(a.dir=\\\"ltr\\\");break;case c.i18n.bidi.Dir.RTL:\\\"rtl\\\"!==a.dir&&(a.dir=\\\"rtl\\\");break;default:a.removeAttribute(\\\"dir\\\")}};c.i18n.bidi.DirectionalString=function(){};c.html={};c.html.trustedtypes={};c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse=function(){if(!c.TRUSTED_TYPES_POLICY_NAME)return null;void 0===c.html.trustedtypes.cachedPolicy_&&(c.html.trustedtypes.cachedPolicy_=c.createTrustedTypesPolicy(c.TRUSTED_TYPES_POLICY_NAME+\\\"#html\\\"));return c.html.trustedtypes.cachedPolicy_};const kd={};\\nclass F{constructor(a,b){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=b===kd?a:\\\"\\\";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=c.string.Const.unwrap(a);return 0===a.length?F.EMPTY:F.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)}static fromJson(a){return F.createSafeScriptSecurityPrivateDoNotAccessOrElse(F.stringify_(a))}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()}static unwrap(a){return F.unwrapTrustedScript(a).toString()}static unwrapTrustedScript(a){if(a instanceof F&&\\na.constructor===F)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;(0,c.asserts.fail)(\\\"expected object of type SafeScript, got '\\\"+a+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeScript\\\"}static stringify_(a){return JSON.stringify(a).replace(/</g,\\\"\\\\\\\\x3c\\\")}static createSafeScriptSecurityPrivateDoNotAccessOrElse(a){const b=c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScript(a):a;return new F(a,kd)}}F.prototype.toString=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()};\\nF.EMPTY=F.createSafeScriptSecurityPrivateDoNotAccessOrElse(\\\"\\\");c.html.SafeScript=F;c.fs={};c.fs.url={};c.fs.url.createObjectUrl=function(a){return c.fs.url.getUrlObject_().createObjectURL(a)};c.fs.url.revokeObjectUrl=function(a){c.fs.url.getUrlObject_().revokeObjectURL(a)};c.fs.url.UrlObject_=function(){};c.fs.url.UrlObject_.prototype.createObjectURL=function(){};c.fs.url.UrlObject_.prototype.revokeObjectURL=function(){};c.fs.url.getUrlObject_=function(){const a=c.fs.url.findUrlObject_();if(null!=a)return a;throw Error(\\\"This browser doesn't seem to support blob URLs\\\");};\\nc.fs.url.findUrlObject_=function(){return void 0!==c.global.URL&&void 0!==c.global.URL.createObjectURL?c.global.URL:void 0!==c.global.createObjectURL?c.global:null};c.fs.url.browserSupportsObjectUrls=function(){return null!=c.fs.url.findUrlObject_()};c.fs.blob={};c.fs.blob.getBlob=function(a){var b=c.global.BlobBuilder||c.global.WebKitBlobBuilder;if(void 0!==b){b=new b;for(let d=0;d<arguments.length;d++)b.append(arguments[d]);return b.getBlob()}return c.fs.blob.getBlobWithProperties(Array.prototype.slice.call(arguments))};\\nc.fs.blob.getBlobWithProperties=function(a,b,d){var e=c.global.BlobBuilder||c.global.WebKitBlobBuilder;if(void 0!==e){e=new e;for(let f=0;f<a.length;f++)e.append(a[f],d);return e.getBlob(b)}if(void 0!==c.global.Blob)return e={},b&&(e.type=b),d&&(e.endings=d),new Blob(a,e);throw Error(\\\"This browser doesn't seem to support creating Blobs\\\");};c.html.TrustedResourceUrl=class{constructor(a,b){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=b===c.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:\\\"\\\"}};c.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;c.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()};c.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;\\nc.html.TrustedResourceUrl.prototype.getDirection=function(){return c.i18n.bidi.Dir.LTR};c.html.TrustedResourceUrl.prototype.cloneWithParams=function(a,b){var d=c.html.TrustedResourceUrl.unwrap(this);d=c.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(d);var e=d[3]||\\\"\\\";return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(d[1]+c.html.TrustedResourceUrl.stringifyParams_(\\\"?\\\",d[2]||\\\"\\\",a)+c.html.TrustedResourceUrl.stringifyParams_(\\\"#\\\",e,b))};\\nc.html.TrustedResourceUrl.prototype.toString=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+\\\"\\\"};c.html.TrustedResourceUrl.unwrap=function(a){return c.html.TrustedResourceUrl.unwrapTrustedScriptURL(a).toString()};\\nc.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(a){if(a instanceof c.html.TrustedResourceUrl&&a.constructor===c.html.TrustedResourceUrl)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;c.asserts.fail(\\\"expected object of type TrustedResourceUrl, got '\\\"+a+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:TrustedResourceUrl\\\"};\\nc.html.TrustedResourceUrl.format=function(a,b){var d=c.string.Const.unwrap(a);if(!c.html.TrustedResourceUrl.BASE_URL_.test(d))throw Error(\\\"Invalid TrustedResourceUrl format: \\\"+d);a=d.replace(c.html.TrustedResourceUrl.FORMAT_MARKER_,function(e,f){if(!Object.prototype.hasOwnProperty.call(b,f))throw Error('Found marker, \\\"'+f+'\\\", in format string, \\\"'+d+'\\\", but no valid label mapping found in args: '+JSON.stringify(b));e=b[f];return e instanceof c.string.Const?c.string.Const.unwrap(e):encodeURIComponent(String(e))});\\nreturn c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\\\\w+)}/g;c.html.TrustedResourceUrl.BASE_URL_=RegExp(\\\"^((https:)?//[0-9a-z.:[\\\\\\\\]-]+/|/[^/\\\\\\\\\\\\\\\\]|[^:/\\\\\\\\\\\\\\\\%]+/|[^:/\\\\\\\\\\\\\\\\%]*[?#]|about:blank#)\\\",\\\"i\\\");c.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\\\\?[^#]*)?(#[\\\\s\\\\S]*)?/;c.html.TrustedResourceUrl.formatWithParams=function(a,b,d,e){return c.html.TrustedResourceUrl.format(a,b).cloneWithParams(d,e)};\\nc.html.TrustedResourceUrl.fromConstant=function(a){return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(c.string.Const.unwrap(a))};c.html.TrustedResourceUrl.fromConstants=function(a){for(var b=\\\"\\\",d=0;d<a.length;d++)b+=c.string.Const.unwrap(a[d]);return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.TrustedResourceUrl.fromSafeScript=function(a){a=c.fs.blob.getBlobWithProperties([F.unwrap(a)],\\\"text/javascript\\\");a=c.fs.url.createObjectUrl(a);return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};\\nc.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){const b=c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=b?b.createScriptURL(a):a;return new c.html.TrustedResourceUrl(a,c.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};\\nc.html.TrustedResourceUrl.stringifyParams_=function(a,b,d){if(null==d)return b;if(\\\"string\\\"===typeof d)return d?a+encodeURIComponent(d):\\\"\\\";for(var e in d)if(Object.prototype.hasOwnProperty.call(d,e)){var f=d[e];f=Array.isArray(f)?f:[f];for(var g=0;g<f.length;g++){var h=f[g];null!=h&&(b||(b=a),b+=(b.length>a.length?\\\"&\\\":\\\"\\\")+encodeURIComponent(e)+\\\"=\\\"+encodeURIComponent(String(h)))}}return b};c.string.internal={};c.string.internal.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};c.string.internal.endsWith=function(a,b){const d=a.length-b.length;return 0<=d&&a.indexOf(b,d)==d};c.string.internal.caseInsensitiveStartsWith=function(a,b){return 0==c.string.internal.caseInsensitiveCompare(b,a.substr(0,b.length))};c.string.internal.caseInsensitiveEndsWith=function(a,b){return 0==c.string.internal.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};\\nc.string.internal.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};c.string.internal.isEmptyOrWhitespace=function(a){return/^[\\\\s\\\\xa0]*$/.test(a)};c.string.internal.trim=c.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\\\s\\\\xa0]*([\\\\s\\\\S]*?)[\\\\s\\\\xa0]*$/.exec(a)[1]};c.string.internal.caseInsensitiveCompare=function(a,b){a=String(a).toLowerCase();b=String(b).toLowerCase();return a<b?-1:a==b?0:1};\\nc.string.internal.newLineToBr=function(a,b){return a.replace(/(\\\\r\\\\n|\\\\r|\\\\n)/g,b?\\\"<br />\\\":\\\"<br>\\\")};\\nc.string.internal.htmlEscape=function(a,b){if(b)a=a.replace(c.string.internal.AMP_RE_,\\\"&amp;\\\").replace(c.string.internal.LT_RE_,\\\"&lt;\\\").replace(c.string.internal.GT_RE_,\\\"&gt;\\\").replace(c.string.internal.QUOT_RE_,\\\"&quot;\\\").replace(c.string.internal.SINGLE_QUOTE_RE_,\\\"&#39;\\\").replace(c.string.internal.NULL_RE_,\\\"&#0;\\\");else{if(!c.string.internal.ALL_RE_.test(a))return a;-1!=a.indexOf(\\\"&\\\")&&(a=a.replace(c.string.internal.AMP_RE_,\\\"&amp;\\\"));-1!=a.indexOf(\\\"<\\\")&&(a=a.replace(c.string.internal.LT_RE_,\\\"&lt;\\\"));\\n-1!=a.indexOf(\\\">\\\")&&(a=a.replace(c.string.internal.GT_RE_,\\\"&gt;\\\"));-1!=a.indexOf('\\\"')&&(a=a.replace(c.string.internal.QUOT_RE_,\\\"&quot;\\\"));-1!=a.indexOf(\\\"'\\\")&&(a=a.replace(c.string.internal.SINGLE_QUOTE_RE_,\\\"&#39;\\\"));-1!=a.indexOf(\\\"\\\\x00\\\")&&(a=a.replace(c.string.internal.NULL_RE_,\\\"&#0;\\\"))}return a};c.string.internal.AMP_RE_=/&/g;c.string.internal.LT_RE_=/</g;c.string.internal.GT_RE_=/>/g;c.string.internal.QUOT_RE_=/\\\"/g;c.string.internal.SINGLE_QUOTE_RE_=/'/g;c.string.internal.NULL_RE_=/\\\\x00/g;\\nc.string.internal.ALL_RE_=/[\\\\x00&<>\\\"']/;c.string.internal.whitespaceEscape=function(a,b){return c.string.internal.newLineToBr(a.replace(/  /g,\\\" &#160;\\\"),b)};c.string.internal.contains=function(a,b){return-1!=a.indexOf(b)};c.string.internal.caseInsensitiveContains=function(a,b){return c.string.internal.contains(a.toLowerCase(),b.toLowerCase())};\\nc.string.internal.compareVersions=function(a,b){var d=0;a=c.string.internal.trim(String(a)).split(\\\".\\\");b=c.string.internal.trim(String(b)).split(\\\".\\\");const e=Math.max(a.length,b.length);for(let h=0;0==d&&h<e;h++){var f=a[h]||\\\"\\\",g=b[h]||\\\"\\\";do{f=/(\\\\d*)(\\\\D*)(.*)/.exec(f)||[\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\"];g=/(\\\\d*)(\\\\D*)(.*)/.exec(g)||[\\\"\\\",\\\"\\\",\\\"\\\",\\\"\\\"];if(0==f[0].length&&0==g[0].length)break;d=0==f[1].length?0:parseInt(f[1],10);const k=0==g[1].length?0:parseInt(g[1],10);d=c.string.internal.compareElements_(d,k)||c.string.internal.compareElements_(0==\\nf[2].length,0==g[2].length)||c.string.internal.compareElements_(f[2],g[2]);f=f[3];g=g[3]}while(0==d)}return d};c.string.internal.compareElements_=function(a,b){return a<b?-1:a>b?1:0};c.html.SafeUrl=class{constructor(a,b){this.privateDoNotAccessOrElseSafeUrlWrappedValue_=b===c.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_?a:\\\"\\\"}};c.html.SafeUrl.INNOCUOUS_STRING=\\\"about:invalid#zClosurez\\\";c.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;c.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};c.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;c.html.SafeUrl.prototype.getDirection=function(){return c.i18n.bidi.Dir.LTR};\\nc.html.SafeUrl.prototype.toString=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()};c.html.SafeUrl.unwrap=function(a){if(a instanceof c.html.SafeUrl&&a.constructor===c.html.SafeUrl)return a.privateDoNotAccessOrElseSafeUrlWrappedValue_;c.asserts.fail(\\\"expected object of type SafeUrl, got '\\\"+a+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeUrl\\\"};c.html.SafeUrl.fromConstant=function(a){return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(c.string.Const.unwrap(a))};\\nc.html.SAFE_MIME_TYPE_PATTERN_=RegExp('^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font/\\\\\\\\w+|image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\\\\\\\w+=(?:\\\\\\\\w+|\\\"[\\\\\\\\w;,= ]+\\\"))*$',\\\"i\\\");c.html.SafeUrl.isSafeMimeType=function(a){return c.html.SAFE_MIME_TYPE_PATTERN_.test(a)};\\nc.html.SafeUrl.fromBlob=function(a){a=c.html.SafeUrl.isSafeMimeType(a.type)?c.fs.url.createObjectUrl(a):c.html.SafeUrl.INNOCUOUS_STRING;return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.SafeUrl.revokeObjectUrl=function(a){a=a.getTypedStringValue();a!==c.html.SafeUrl.INNOCUOUS_STRING&&c.fs.url.revokeObjectUrl(a)};\\nc.html.SafeUrl.fromMediaSource=function(a){c.asserts.assert(\\\"MediaSource\\\"in c.global,\\\"No support for MediaSource\\\");a=a instanceof MediaSource?c.fs.url.createObjectUrl(a):c.html.SafeUrl.INNOCUOUS_STRING;return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.DATA_URL_PATTERN_=/^data:(.*);base64,[a-z0-9+\\\\/]+=*$/i;\\nc.html.SafeUrl.tryFromDataUrl=function(a){a=String(a);a=a.replace(/(%0A|%0D)/g,\\\"\\\");var b=a.match(c.html.DATA_URL_PATTERN_);return b&&c.html.SafeUrl.isSafeMimeType(b[1])?c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):null};c.html.SafeUrl.fromDataUrl=function(a){return c.html.SafeUrl.tryFromDataUrl(a)||c.html.SafeUrl.INNOCUOUS_URL};c.html.SafeUrl.fromTelUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"tel:\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SIP_URL_PATTERN_=RegExp(\\\"^sip[s]?:[+a-z0-9_.!$%&'*\\\\\\\\/=^`{|}~-]+@([a-z0-9-]+\\\\\\\\.)+[a-z0-9]{2,63}$\\\",\\\"i\\\");c.html.SafeUrl.fromSipUrl=function(a){c.html.SIP_URL_PATTERN_.test(decodeURIComponent(a))||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.SafeUrl.fromFacebookMessengerUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"fb-messenger://share\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.fromWhatsAppUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"whatsapp://send\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};c.html.SafeUrl.fromSmsUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"sms:\\\")&&c.html.SafeUrl.isSmsUrlBodyValid_(a)||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.isSmsUrlBodyValid_=function(a){var b=a.indexOf(\\\"#\\\");0<b&&(a=a.substring(0,b));b=a.match(/[?&]body=/gi);if(!b)return!0;if(1<b.length)return!1;a=a.match(/[?&]body=([^&]*)/)[1];if(!a)return!0;try{decodeURIComponent(a)}catch(d){return!1}return/^(?:[a-z0-9\\\\-_.~]|%[0-9a-f]{2})+$/i.test(a)};c.html.SafeUrl.fromSshUrl=function(a){c.string.internal.caseInsensitiveStartsWith(a,\\\"ssh://\\\")||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.sanitizeChromeExtensionUrl=function(a,b){return c.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\\\\/\\\\/([^\\\\/]+)\\\\//,a,b)};c.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(a,b){return c.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\\\\/\\\\/([^\\\\/]+)\\\\//,a,b)};c.html.SafeUrl.sanitizeEdgeExtensionUrl=function(a,b){return c.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\\\\/\\\\/([^\\\\/]+)\\\\//,a,b)};\\nc.html.SafeUrl.sanitizeExtensionUrl_=function(a,b,d){(a=a.exec(b))?(a=a[1],-1==(d instanceof c.string.Const?[c.string.Const.unwrap(d)]:d.map(function(e){return c.string.Const.unwrap(e)})).indexOf(a)&&(b=c.html.SafeUrl.INNOCUOUS_STRING)):b=c.html.SafeUrl.INNOCUOUS_STRING;return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};c.html.SafeUrl.fromTrustedResourceUrl=function(a){return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(c.html.TrustedResourceUrl.unwrap(a))};\\nc.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;c.html.SafeUrl.SAFE_URL_PATTERN=c.html.SAFE_URL_PATTERN_;c.html.SafeUrl.trySanitize=function(a){if(a instanceof c.html.SafeUrl)return a;a=\\\"object\\\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return c.html.SAFE_URL_PATTERN_.test(a)?c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a):c.html.SafeUrl.tryFromDataUrl(a)};\\nc.html.SafeUrl.sanitize=function(a){return c.html.SafeUrl.trySanitize(a)||c.html.SafeUrl.INNOCUOUS_URL};\\nc.html.SafeUrl.sanitizeAssertUnchanged=function(a,b){if(a instanceof c.html.SafeUrl)return a;a=\\\"object\\\"==typeof a&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);if(b&&/^data:/i.test(a)&&(b=c.html.SafeUrl.fromDataUrl(a),b.getTypedStringValue()==a))return b;c.asserts.assert(c.html.SAFE_URL_PATTERN_.test(a),\\\"%s does not match the safe URL pattern\\\",a)||(a=c.html.SafeUrl.INNOCUOUS_STRING);return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};\\nc.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_={};c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){return new c.html.SafeUrl(a,c.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_)};c.html.SafeUrl.INNOCUOUS_URL=c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(c.html.SafeUrl.INNOCUOUS_STRING);c.html.SafeUrl.ABOUT_BLANK=c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\\\"about:blank\\\");const ld={};\\nclass I{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=b===ld?a:\\\"\\\";this.implementsGoogStringTypedString=!0}static fromConstant(a){a=c.string.Const.unwrap(a);if(0===a.length)return I.EMPTY;(0,c.asserts.assert)((0,c.string.internal.endsWith)(a,\\\";\\\"),`Last character of style string is not ';': ${a}`);(0,c.asserts.assert)((0,c.string.internal.contains)(a,\\\":\\\"),\\\"Style string must contain at least one ':', to specify a \\\\\\\"name: value\\\\\\\" pair: \\\"+a);return I.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_}toString(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString()}static unwrap(a){if(a instanceof I&&\\na.constructor===I)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;(0,c.asserts.fail)(`expected object of type SafeStyle, got '${a}`+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeStyle\\\"}static createSafeStyleSecurityPrivateDoNotAccessOrElse(a){return new I(a,ld)}static create(a){let b=\\\"\\\";for(let d in a)if(Object.prototype.hasOwnProperty.call(a,d)){if(!/^[-_a-zA-Z0-9]+$/.test(d))throw Error(`Name allows only [-_a-zA-Z0-9], got: ${d}`);let e=a[d];null!=e&&(e=Array.isArray(e)?e.map(md).join(\\\" \\\"):\\nmd(e),b+=`${d}:${e};`)}return b?I.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):I.EMPTY}static concat(a){let b=\\\"\\\";const d=e=>{Array.isArray(e)?e.forEach(d):b+=I.unwrap(e)};Array.prototype.forEach.call(arguments,d);return b?I.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):I.EMPTY}}I.EMPTY=I.createSafeStyleSecurityPrivateDoNotAccessOrElse(\\\"\\\");I.INNOCUOUS_STRING=\\\"zClosurez\\\";\\nfunction md(a){if(a instanceof c.html.SafeUrl)return'url(\\\"'+c.html.SafeUrl.unwrap(a).replace(/</g,\\\"%3c\\\").replace(/[\\\\\\\\\\\"]/g,\\\"\\\\\\\\$&\\\")+'\\\")';a=a instanceof c.string.Const?c.string.Const.unwrap(a):nd(String(a));if(/[{;}]/.test(a))throw new c.asserts.AssertionError(\\\"Value does not allow [{;}], got: %s.\\\",[a]);return a}\\nfunction nd(a){var b=a.replace(od,\\\"$1\\\").replace(od,\\\"$1\\\").replace(pd,\\\"url\\\");if(qd.test(b)){if(rd.test(a))return(0,c.asserts.fail)(`String value disallows comments, got: ${a}`),I.INNOCUOUS_STRING;let d=b=!0;for(let e=0;e<a.length;e++){const f=a.charAt(e);\\\"'\\\"==f&&d?b=!b:'\\\"'==f&&b&&(d=!d)}if(!b||!d)return(0,c.asserts.fail)(`String value requires balanced quotes, got: ${a}`),I.INNOCUOUS_STRING;if(!sd(a))return(0,c.asserts.fail)(\\\"String value requires balanced square brackets and one identifier per pair of brackets, got: \\\"+\\na),I.INNOCUOUS_STRING}else return(0,c.asserts.fail)(\\\"String value allows only [-,.\\\\\\\"'%_!#/ a-zA-Z0-9\\\\\\\\[\\\\\\\\]] and simple functions, got: \\\"+a),I.INNOCUOUS_STRING;return td(a)}function sd(a){let b=!0;const d=/^[-_a-zA-Z0-9]$/;for(let e=0;e<a.length;e++){const f=a.charAt(e);if(\\\"]\\\"==f){if(b)return!1;b=!0}else if(\\\"[\\\"==f){if(!b)return!1;b=!1}else if(!b&&!d.test(f))return!1}return b}\\nconst qd=RegExp(\\\"^[-,.\\\\\\\"'%_!#/ a-zA-Z0-9\\\\\\\\[\\\\\\\\]]+$\\\"),pd=RegExp(\\\"\\\\\\\\b(url\\\\\\\\([ \\\\t\\\\n]*)('[ -&(-\\\\\\\\[\\\\\\\\]-~]*'|\\\\\\\"[ !#-\\\\\\\\[\\\\\\\\]-~]*\\\\\\\"|[!#-&*-\\\\\\\\[\\\\\\\\]-~]*)([ \\\\t\\\\n]*\\\\\\\\))\\\",\\\"g\\\"),od=RegExp(\\\"\\\\\\\\b(calc|cubic-bezier|fit-content|hsl|hsla|linear-gradient|matrix|minmax|repeat|rgb|rgba|(rotate|scale|translate)(X|Y|Z|3d)?|var)\\\\\\\\([-+*/0-9a-zA-Z.%#\\\\\\\\[\\\\\\\\], ]+\\\\\\\\)\\\",\\\"g\\\"),rd=/\\\\/\\\\*/;\\nfunction td(a){return a.replace(pd,(b,d,e,f)=>{let g=\\\"\\\";e=e.replace(/^(['\\\"])(.*)\\\\1$/,(h,k,l)=>{g=k;return l});b=c.html.SafeUrl.sanitize(e).getTypedStringValue();return d+g+b+g+f})}c.html.SafeStyle=I;c.object={};function ud(a){const b=[];let d=0;for(const e in a)b[d++]=e;return b}function vd(a,b){for(const d in a)if(a[d]==b)return!0;return!1}function wd(a,b,d){for(const e in a)if(b.call(d,a[e],e,a))return e}\\nfunction xd(a){if(!a||\\\"object\\\"!==typeof a)return a;if(\\\"function\\\"===typeof a.clone)return a.clone();if(\\\"undefined\\\"!==typeof Map&&a instanceof Map)return new Map(a);if(\\\"undefined\\\"!==typeof Set&&a instanceof Set)return new Set(a);const b=Array.isArray(a)?[]:\\\"function\\\"!==typeof ArrayBuffer||\\\"function\\\"!==typeof ArrayBuffer.isView||!ArrayBuffer.isView(a)||a instanceof DataView?{}:new a.constructor(a.length);for(const d in a)b[d]=xd(a[d]);return b}const yd=\\\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\\\".split(\\\" \\\");\\nfunction zd(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return zd.apply(null,arguments[0]);if(b%2)throw Error(\\\"Uneven number of arguments\\\");const d={};for(let e=0;e<b;e+=2)d[arguments[e]]=arguments[e+1];return d}function Ad(a){const b=arguments.length;if(1==b&&Array.isArray(arguments[0]))return Ad.apply(null,arguments[0]);const d={};for(let e=0;e<b;e++)d[arguments[e]]=!0;return d}\\nc.object.add=function(a,b,d){if(null!==a&&b in a)throw Error(`The object already contains the key \\\"${b}\\\"`);a[b]=d};c.object.clear=function(a){for(const b in a)delete a[b]};c.object.clone=function(a){const b={};for(const d in a)b[d]=a[d];return b};c.object.contains=function(a,b){return vd(a,b)};c.object.containsKey=function(a,b){return null!==a&&b in a};c.object.containsValue=vd;c.object.create=zd;\\nc.object.createImmutableView=function(a){let b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};c.object.createSet=Ad;c.object.equals=function(a,b){for(const d in a)if(!(d in b)||a[d]!==b[d])return!1;for(const d in b)if(!(d in a))return!1;return!0};c.object.every=function(a,b,d){for(const e in a)if(!b.call(d,a[e],e,a))return!1;return!0};\\nc.object.extend=function(a,b){let d,e;for(let f=1;f<arguments.length;f++){e=arguments[f];for(d in e)a[d]=e[d];for(let g=0;g<yd.length;g++)d=yd[g],Object.prototype.hasOwnProperty.call(e,d)&&(a[d]=e[d])}};c.object.filter=function(a,b,d){const e={};for(const f in a)b.call(d,a[f],f,a)&&(e[f]=a[f]);return e};c.object.findKey=wd;c.object.findValue=function(a,b,d){return(b=wd(a,b,d))&&a[b]};c.object.forEach=function(a,b,d){for(const e in a)b.call(d,a[e],e,a)};\\nc.object.get=function(a,b,d){return null!==a&&b in a?a[b]:d};c.object.getAllPropertyNames=function(a,b,d){if(!a)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return ud(a);const e={};for(;a&&(a!==Object.prototype||b)&&(a!==Function.prototype||d);){const f=Object.getOwnPropertyNames(a);for(let g=0;g<f.length;g++)e[f[g]]=!0;a=Object.getPrototypeOf(a)}return ud(e)};c.object.getAnyKey=function(a){for(const b in a)return b};c.object.getAnyValue=function(a){for(const b in a)return a[b]};\\nc.object.getCount=function(a){let b=0;for(const d in a)b++;return b};c.object.getKeys=ud;c.object.getSuperClass=function(a){return(a=Object.getPrototypeOf(a.prototype))&&a.constructor};c.object.getValueByKeys=function(a,b){var d=c.isArrayLike(b);const e=d?b:arguments;for(d=d?0:1;d<e.length;d++){if(null==a)return;a=a[e[d]]}return a};c.object.getValues=function(a){const b=[];let d=0;for(const e in a)b[d++]=a[e];return b};c.object.isEmpty=function(a){for(const b in a)return!1;return!0};\\nc.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};c.object.map=function(a,b,d){const e={};for(const f in a)e[f]=b.call(d,a[f],f,a);return e};c.object.remove=function(a,b){let d;(d=b in a)&&delete a[b];return d};c.object.set=function(a,b,d){a[b]=d};c.object.setIfUndefined=function(a,b,d){return b in a?a[b]:a[b]=d};c.object.setWithReturnValueIfNotSet=function(a,b,d){if(b in a)return a[b];d=d();return a[b]=d};\\nc.object.some=function(a,b,d){for(const e in a)if(b.call(d,a[e],e,a))return!0;return!1};c.object.transpose=function(a){const b={};for(const d in a)b[a[d]]=d;return b};c.object.unsafeClone=xd;const Bd={};\\nclass J{constructor(a,b){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=b===Bd?a:\\\"\\\";this.implementsGoogStringTypedString=!0}static createRule(a,b){if((0,c.string.internal.contains)(a,\\\"<\\\"))throw Error(`Selector does not allow '<', got: ${a}`);const d=a.replace(/('|\\\")((?!\\\\1)[^\\\\r\\\\n\\\\f\\\\\\\\]|\\\\\\\\[\\\\s\\\\S])*\\\\1/g,\\\"\\\");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|]+$/.test(d))throw Error(\\\"Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\\\\\]()=^$|] and strings, got: \\\"+a);if(!J.hasBalancedBrackets_(d))throw Error(\\\"() and [] in selector must be balanced, got: \\\"+a);\\nb instanceof I||(b=I.create(b));a=`${a}{`+I.unwrap(b).replace(/</g,\\\"\\\\\\\\3C \\\")+\\\"}\\\";return J.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}static hasBalancedBrackets_(a){const b={\\\"(\\\":\\\")\\\",\\\"[\\\":\\\"]\\\"},d=[];for(let e=0;e<a.length;e++){const f=a[e];if(b[f])d.push(b[f]);else if(vd(b,f)&&d.pop()!=f)return!1}return 0==d.length}static concat(a){let b=\\\"\\\";const d=e=>{Array.isArray(e)?e.forEach(d):b+=J.unwrap(e)};Array.prototype.forEach.call(arguments,d);return J.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)}static fromConstant(a){a=\\nc.string.Const.unwrap(a);if(0===a.length)return J.EMPTY;(0,c.asserts.assert)(!(0,c.string.internal.contains)(a,\\\"<\\\"),`Forbidden '<' character in style sheet string: ${a}`);return J.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_}static unwrap(a){if(a instanceof J&&a.constructor===J)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;(0,c.asserts.fail)(\\\"expected object of type SafeStyleSheet, got '\\\"+\\na+\\\"' of type \\\"+c.typeOf(a));return\\\"type_error:SafeStyleSheet\\\"}static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a){return new J(a,Bd)}}J.prototype.toString=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString()};J.EMPTY=J.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\\\"\\\");c.html.SafeStyleSheet=J;c.dom.HtmlElement=function(){};c.dom.TagName=class{static cast(a){return a}constructor(){}toString(){}};c.dom.TagName.A=\\\"A\\\";c.dom.TagName.ABBR=\\\"ABBR\\\";c.dom.TagName.ACRONYM=\\\"ACRONYM\\\";c.dom.TagName.ADDRESS=\\\"ADDRESS\\\";c.dom.TagName.APPLET=\\\"APPLET\\\";c.dom.TagName.AREA=\\\"AREA\\\";c.dom.TagName.ARTICLE=\\\"ARTICLE\\\";c.dom.TagName.ASIDE=\\\"ASIDE\\\";c.dom.TagName.AUDIO=\\\"AUDIO\\\";c.dom.TagName.B=\\\"B\\\";c.dom.TagName.BASE=\\\"BASE\\\";c.dom.TagName.BASEFONT=\\\"BASEFONT\\\";c.dom.TagName.BDI=\\\"BDI\\\";c.dom.TagName.BDO=\\\"BDO\\\";c.dom.TagName.BIG=\\\"BIG\\\";\\nc.dom.TagName.BLOCKQUOTE=\\\"BLOCKQUOTE\\\";c.dom.TagName.BODY=\\\"BODY\\\";c.dom.TagName.BR=\\\"BR\\\";c.dom.TagName.BUTTON=\\\"BUTTON\\\";c.dom.TagName.CANVAS=\\\"CANVAS\\\";c.dom.TagName.CAPTION=\\\"CAPTION\\\";c.dom.TagName.CENTER=\\\"CENTER\\\";c.dom.TagName.CITE=\\\"CITE\\\";c.dom.TagName.CODE=\\\"CODE\\\";c.dom.TagName.COL=\\\"COL\\\";c.dom.TagName.COLGROUP=\\\"COLGROUP\\\";c.dom.TagName.COMMAND=\\\"COMMAND\\\";c.dom.TagName.DATA=\\\"DATA\\\";c.dom.TagName.DATALIST=\\\"DATALIST\\\";c.dom.TagName.DD=\\\"DD\\\";c.dom.TagName.DEL=\\\"DEL\\\";c.dom.TagName.DETAILS=\\\"DETAILS\\\";\\nc.dom.TagName.DFN=\\\"DFN\\\";c.dom.TagName.DIALOG=\\\"DIALOG\\\";c.dom.TagName.DIR=\\\"DIR\\\";c.dom.TagName.DIV=\\\"DIV\\\";c.dom.TagName.DL=\\\"DL\\\";c.dom.TagName.DT=\\\"DT\\\";c.dom.TagName.EM=\\\"EM\\\";c.dom.TagName.EMBED=\\\"EMBED\\\";c.dom.TagName.FIELDSET=\\\"FIELDSET\\\";c.dom.TagName.FIGCAPTION=\\\"FIGCAPTION\\\";c.dom.TagName.FIGURE=\\\"FIGURE\\\";c.dom.TagName.FONT=\\\"FONT\\\";c.dom.TagName.FOOTER=\\\"FOOTER\\\";c.dom.TagName.FORM=\\\"FORM\\\";c.dom.TagName.FRAME=\\\"FRAME\\\";c.dom.TagName.FRAMESET=\\\"FRAMESET\\\";c.dom.TagName.H1=\\\"H1\\\";c.dom.TagName.H2=\\\"H2\\\";\\nc.dom.TagName.H3=\\\"H3\\\";c.dom.TagName.H4=\\\"H4\\\";c.dom.TagName.H5=\\\"H5\\\";c.dom.TagName.H6=\\\"H6\\\";c.dom.TagName.HEAD=\\\"HEAD\\\";c.dom.TagName.HEADER=\\\"HEADER\\\";c.dom.TagName.HGROUP=\\\"HGROUP\\\";c.dom.TagName.HR=\\\"HR\\\";c.dom.TagName.HTML=\\\"HTML\\\";c.dom.TagName.I=\\\"I\\\";c.dom.TagName.IFRAME=\\\"IFRAME\\\";c.dom.TagName.IMG=\\\"IMG\\\";c.dom.TagName.INPUT=\\\"INPUT\\\";c.dom.TagName.INS=\\\"INS\\\";c.dom.TagName.ISINDEX=\\\"ISINDEX\\\";c.dom.TagName.KBD=\\\"KBD\\\";c.dom.TagName.KEYGEN=\\\"KEYGEN\\\";c.dom.TagName.LABEL=\\\"LABEL\\\";c.dom.TagName.LEGEND=\\\"LEGEND\\\";\\nc.dom.TagName.LI=\\\"LI\\\";c.dom.TagName.LINK=\\\"LINK\\\";c.dom.TagName.MAIN=\\\"MAIN\\\";c.dom.TagName.MAP=\\\"MAP\\\";c.dom.TagName.MARK=\\\"MARK\\\";c.dom.TagName.MATH=\\\"MATH\\\";c.dom.TagName.MENU=\\\"MENU\\\";c.dom.TagName.MENUITEM=\\\"MENUITEM\\\";c.dom.TagName.META=\\\"META\\\";c.dom.TagName.METER=\\\"METER\\\";c.dom.TagName.NAV=\\\"NAV\\\";c.dom.TagName.NOFRAMES=\\\"NOFRAMES\\\";c.dom.TagName.NOSCRIPT=\\\"NOSCRIPT\\\";c.dom.TagName.OBJECT=\\\"OBJECT\\\";c.dom.TagName.OL=\\\"OL\\\";c.dom.TagName.OPTGROUP=\\\"OPTGROUP\\\";c.dom.TagName.OPTION=\\\"OPTION\\\";c.dom.TagName.OUTPUT=\\\"OUTPUT\\\";\\nc.dom.TagName.P=\\\"P\\\";c.dom.TagName.PARAM=\\\"PARAM\\\";c.dom.TagName.PICTURE=\\\"PICTURE\\\";c.dom.TagName.PRE=\\\"PRE\\\";c.dom.TagName.PROGRESS=\\\"PROGRESS\\\";c.dom.TagName.Q=\\\"Q\\\";c.dom.TagName.RP=\\\"RP\\\";c.dom.TagName.RT=\\\"RT\\\";c.dom.TagName.RTC=\\\"RTC\\\";c.dom.TagName.RUBY=\\\"RUBY\\\";c.dom.TagName.S=\\\"S\\\";c.dom.TagName.SAMP=\\\"SAMP\\\";c.dom.TagName.SCRIPT=\\\"SCRIPT\\\";c.dom.TagName.SECTION=\\\"SECTION\\\";c.dom.TagName.SELECT=\\\"SELECT\\\";c.dom.TagName.SMALL=\\\"SMALL\\\";c.dom.TagName.SOURCE=\\\"SOURCE\\\";c.dom.TagName.SPAN=\\\"SPAN\\\";c.dom.TagName.STRIKE=\\\"STRIKE\\\";\\nc.dom.TagName.STRONG=\\\"STRONG\\\";c.dom.TagName.STYLE=\\\"STYLE\\\";c.dom.TagName.SUB=\\\"SUB\\\";c.dom.TagName.SUMMARY=\\\"SUMMARY\\\";c.dom.TagName.SUP=\\\"SUP\\\";c.dom.TagName.SVG=\\\"SVG\\\";c.dom.TagName.TABLE=\\\"TABLE\\\";c.dom.TagName.TBODY=\\\"TBODY\\\";c.dom.TagName.TD=\\\"TD\\\";c.dom.TagName.TEMPLATE=\\\"TEMPLATE\\\";c.dom.TagName.TEXTAREA=\\\"TEXTAREA\\\";c.dom.TagName.TFOOT=\\\"TFOOT\\\";c.dom.TagName.TH=\\\"TH\\\";c.dom.TagName.THEAD=\\\"THEAD\\\";c.dom.TagName.TIME=\\\"TIME\\\";c.dom.TagName.TITLE=\\\"TITLE\\\";c.dom.TagName.TR=\\\"TR\\\";c.dom.TagName.TRACK=\\\"TRACK\\\";\\nc.dom.TagName.TT=\\\"TT\\\";c.dom.TagName.U=\\\"U\\\";c.dom.TagName.UL=\\\"UL\\\";c.dom.TagName.VAR=\\\"VAR\\\";c.dom.TagName.VIDEO=\\\"VIDEO\\\";c.dom.TagName.WBR=\\\"WBR\\\";var Cd={USE_CLIENT_HINTS:!1};c.labs={};c.labs.userAgent={};c.labs.userAgent.util={};function Dd(){var a=c.global.navigator;return a&&(a=a.userAgent)?a:\\\"\\\"}function Ed(){if(!Cd.USE_CLIENT_HINTS)return null;const a=c.global.navigator;return a?a.userAgentData||null:null}let Fd=null,K=Ed();function Gd(){return null==Fd?Dd():Fd}function Hd(a){const b=K;return b?b.brands.some(({brand:d})=>d&&(0,c.string.internal.contains)(d,a)):!1}function N(a){const b=Gd();return(0,c.string.internal.contains)(b,a)}\\nfunction Id(a){const b=RegExp(\\\"([A-Z][\\\\\\\\w ]+)/([^\\\\\\\\s]+)\\\\\\\\s*(?:\\\\\\\\((.*?)\\\\\\\\))?\\\",\\\"g\\\"),d=[];let e;for(;e=b.exec(a);)d.push([e[1],e[2],e[3]||void 0]);return d}c.labs.userAgent.util.ASSUME_CLIENT_HINTS_SUPPORT=!1;c.labs.userAgent.util.extractVersionTuples=Id;c.labs.userAgent.util.getNativeUserAgentString=Dd;c.labs.userAgent.util.getUserAgent=Gd;c.labs.userAgent.util.getUserAgentData=function(){return K};c.labs.userAgent.util.matchUserAgent=N;c.labs.userAgent.util.matchUserAgentDataBrand=Hd;\\nc.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){const b=Gd();return(0,c.string.internal.caseInsensitiveContains)(b,a)};c.labs.userAgent.util.resetUserAgentData=function(){K=Ed()};c.labs.userAgent.util.setUserAgent=function(a){Fd=\\\"string\\\"===typeof a?a:Dd()};c.labs.userAgent.util.setUserAgentData=function(a){K=a};var Jd={AsyncValue:class{getIfLoaded(){}load(){}},HighEntropyValue:class{constructor(a){this.key_=a;this.promise_=this.value_=void 0;this.pending_=!1}getIfLoaded(){if(K)return this.value_}async load(){const a=K;if(a)return this.promise_||(this.pending_=!0,this.promise_=(async()=>{try{return this.value_=(await a.getHighEntropyValues([this.key_]))[this.key_]}finally{this.pending_=!1}})()),await this.promise_}resetForTesting(){if(this.pending_)throw Error(\\\"Unsafe call to resetForTesting\\\");this.value_=\\nthis.promise_=void 0;this.pending_=!1}},Version:class{constructor(a){this.versionString_=a}toVersionStringForLogging(){return this.versionString_}isAtLeast(a){return 0<=(0,c.string.internal.compareVersions)(this.versionString_,a)}}};var R={};let Kd=!1;R.hasFullVersionList=function(){return Kd};R.setHasFullVersionListForTesting=function(a){Kd=a};R.fullVersionList=new Jd.HighEntropyValue(\\\"fullVersionList\\\");R.platformVersion=new Jd.HighEntropyValue(\\\"platformVersion\\\");R.resetAllForTesting=function(){R.fullVersionList.resetForTesting();R.platformVersion.resetForTesting()};c.labs.userAgent.browser={};const S={ANDROID_BROWSER:\\\"Android Browser\\\",CHROMIUM:\\\"Chromium\\\",EDGE:\\\"Microsoft Edge\\\",FIREFOX:\\\"Firefox\\\",IE:\\\"Internet Explorer\\\",OPERA:\\\"Opera\\\",SAFARI:\\\"Safari\\\",SILK:\\\"Silk\\\"};c.labs.userAgent.browser.Brand=S;function T(){const a=K;return!!a&&0<a.brands.length}function Ld(){return T()?!1:N(\\\"Opera\\\")}function Md(){return T()?!1:N(\\\"Trident\\\")||N(\\\"MSIE\\\")}function Nd(){return T()?!1:N(\\\"Edge\\\")}function Od(){return T()?Hd(S.EDGE):N(\\\"Edg/\\\")}\\nfunction Pd(){return T()?Hd(S.OPERA):N(\\\"OPR\\\")}function Qd(){return N(\\\"Firefox\\\")||N(\\\"FxiOS\\\")}function Rd(){return N(\\\"Safari\\\")&&!(Sd()||Td()||Ld()||Nd()||Od()||Pd()||Qd()||Ud()||N(\\\"Android\\\"))}function Td(){return T()?!1:N(\\\"Coast\\\")}function Sd(){return T()?Hd(S.CHROMIUM):(N(\\\"Chrome\\\")||N(\\\"CriOS\\\"))&&!Nd()||Ud()}function Vd(){return N(\\\"Android\\\")&&!(Sd()||Qd()||Ld()||Ud())}c.labs.userAgent.browser.isOpera=Ld;c.labs.userAgent.browser.isIE=Md;c.labs.userAgent.browser.isEdge=Nd;\\nc.labs.userAgent.browser.isEdgeChromium=Od;c.labs.userAgent.browser.isOperaChromium=Pd;c.labs.userAgent.browser.isFirefox=Qd;c.labs.userAgent.browser.isSafari=Rd;c.labs.userAgent.browser.isCoast=Td;c.labs.userAgent.browser.isIosWebview=function(){return(N(\\\"iPad\\\")||N(\\\"iPhone\\\"))&&!Rd()&&!Sd()&&!Td()&&!Qd()&&N(\\\"AppleWebKit\\\")};c.labs.userAgent.browser.isChrome=Sd;c.labs.userAgent.browser.isAndroidBrowser=Vd;function Ud(){return N(\\\"Silk\\\")}c.labs.userAgent.browser.isSilk=Ud;\\nfunction Wd(a){const b={};a.forEach(d=>{b[d[0]]=d[1]});return d=>b[d.find(e=>e in b)]||\\\"\\\"}function Xd(){var a=Gd();if(Md())return Yd(a);a=Id(a);const b=Wd(a);return Ld()?b([\\\"Version\\\",\\\"Opera\\\"]):Nd()?b([\\\"Edge\\\"]):Od()?b([\\\"Edg\\\"]):Ud()?b([\\\"Silk\\\"]):Sd()?b([\\\"Chrome\\\",\\\"CriOS\\\",\\\"HeadlessChrome\\\"]):(a=a[2])&&a[1]||\\\"\\\"}c.labs.userAgent.browser.getVersion=Xd;c.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=(0,c.string.internal.compareVersions)(Xd(),a)};\\nfunction Yd(a){var b=/rv: *([\\\\d\\\\.]*)/.exec(a);if(b&&b[1])return b[1];b=\\\"\\\";const d=/MSIE +([\\\\d\\\\.]+)/.exec(a);if(d&&d[1])if(a=/Trident\\\\/(\\\\d.\\\\d)/.exec(a),\\\"7.0\\\"==d[1])if(a&&a[1])switch(a[1]){case \\\"4.0\\\":b=\\\"8.0\\\";break;case \\\"5.0\\\":b=\\\"9.0\\\";break;case \\\"6.0\\\":b=\\\"10.0\\\";break;case \\\"7.0\\\":b=\\\"11.0\\\"}else b=\\\"7.0\\\";else b=d[1];return b}\\nfunction Zd(a){var b=Gd();if(a===S.IE)return Md()?Yd(b):\\\"\\\";b=Id(b);const d=Wd(b);switch(a){case S.OPERA:if(Ld())return d([\\\"Version\\\",\\\"Opera\\\"]);if(Pd())return d([\\\"OPR\\\"]);break;case S.EDGE:if(Nd())return d([\\\"Edge\\\"]);if(Od())return d([\\\"Edg\\\"]);break;case S.CHROMIUM:if(Sd())return d([\\\"Chrome\\\",\\\"CriOS\\\",\\\"HeadlessChrome\\\"])}return a===S.FIREFOX&&Qd()||a===S.SAFARI&&Rd()||a===S.ANDROID_BROWSER&&Vd()||a===S.SILK&&Ud()?(a=b[2])&&a[1]||\\\"\\\":\\\"\\\"}\\nfunction $d(a){if(T()&&a!==S.SILK){var b=K.brands.find(({brand:d})=>d===a);if(!b||!b.version)return NaN;b=b.version.split(\\\".\\\")}else{b=Zd(a);if(\\\"\\\"===b)return NaN;b=b.split(\\\".\\\")}return 0===b.length?NaN:Number(b[0])}c.labs.userAgent.browser.versionOf=$d;c.labs.userAgent.browser.isAtLeast=function(a,b){c.asserts.assert(Math.floor(b)===b,\\\"Major version must be an integer\\\");return $d(a)>=b};\\nc.labs.userAgent.browser.isAtMost=function(a,b){c.asserts.assert(Math.floor(b)===b,\\\"Major version must be an integer\\\");return $d(a)<=b};class ae{constructor(a){this.brand_=a}getIfLoaded(){var a=R.fullVersionList.getIfLoaded();if(void 0!==a)return a=a.find(({brand:b})=>this.brand_===b),c.asserts.assertExists(a),new Jd.Version(a.version)}async load(){const a=(await R.fullVersionList.load()).find(({brand:b})=>this.brand_===b);c.asserts.assertExists(a);return new Jd.Version(a.version)}}\\nclass be{constructor(a){this.version_=new Jd.Version(a)}getIfLoaded(){return this.version_}async load(){return this.version_}}c.labs.userAgent.browser.loadFullVersions=async function(){T()&&Kd&&await R.fullVersionList.load()};function ce(a){if(T()&&Kd)return K.brands.find(({brand:d})=>d===a)?new ae(a):void 0;const b=Zd(a);return\\\"\\\"===b?void 0:new be(b)}c.labs.userAgent.browser.fullVersionOf=ce;\\nc.labs.userAgent.browser.getVersionStringForLogging=function(a){if(T()){var b=ce(a);if(b){if(b=b.getIfLoaded())return b.toVersionStringForLogging();b=K.brands.find(({brand:d})=>d===a);c.asserts.assertExists(b);return b.version}return\\\"\\\"}return Zd(a)};c.dom.tags={};c.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};c.dom.tags.isVoidTag=function(a){return!0===c.dom.tags.VOID_TAGS_[a]};const de={};\\nclass U{constructor(a,b,d){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=d===de?a:\\\"\\\";this.dir_=b;this.implementsGoogStringTypedString=this.implementsGoogI18nBidiDirectionalString=!0}getDirection(){return this.dir_}getTypedStringValue(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}toString(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()}static unwrap(a){return U.unwrapTrustedHTML(a).toString()}static unwrapTrustedHTML(a){if(a instanceof U&&a.constructor===\\nU)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;c.asserts.fail(`expected object of type SafeHtml, got '${a}' of type `+c.typeOf(a));return\\\"type_error:SafeHtml\\\"}static htmlEscape(a){if(a instanceof U)return a;const b=\\\"object\\\"==typeof a;let d=null;b&&a.implementsGoogI18nBidiDirectionalString&&(d=a.getDirection());a=b&&a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.string.internal.htmlEscape(a),d)}static htmlEscapePreservingNewlines(a){if(a instanceof\\nU)return a;a=U.htmlEscape(a);return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.string.internal.newLineToBr(U.unwrap(a)),a.getDirection())}static htmlEscapePreservingNewlinesAndSpaces(a){if(a instanceof U)return a;a=U.htmlEscape(a);return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c.string.internal.whitespaceEscape(U.unwrap(a)),a.getDirection())}static comment(a){return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\\\"\\\\x3c!--\\\"+c.string.internal.htmlEscape(a)+\\\"--\\\\x3e\\\",null)}static create(a,\\nb,d){U.verifyTagName(String(a));return U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,d)}static verifyTagName(a){if(!ee.test(a))throw Error(U.ENABLE_ERROR_MESSAGES?`Invalid tag name <${a}>.`:\\\"\\\");if(a.toUpperCase()in fe)throw Error(U.ENABLE_ERROR_MESSAGES?`Tag name <${a}> is not allowed for SafeHtml.`:\\\"\\\");}static createIframe(a,b,d,e){a&&c.html.TrustedResourceUrl.unwrap(a);const f={};f.src=a||null;f.srcdoc=b&&U.unwrap(b);a=U.combineAttributes(f,{sandbox:\\\"\\\"},d);return U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"iframe\\\",\\na,e)}static createSandboxIframe(a,b,d,e){if(!U.canUseSandboxIframe())throw Error(U.ENABLE_ERROR_MESSAGES?\\\"The browser does not support sandboxed iframes.\\\":\\\"\\\");const f={};f.src=a?c.html.SafeUrl.unwrap(c.html.SafeUrl.sanitize(a)):null;f.srcdoc=b||null;f.sandbox=\\\"\\\";a=U.combineAttributes(f,{},d);return U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"iframe\\\",a,e)}static canUseSandboxIframe(){return c.global.HTMLIFrameElement&&\\\"sandbox\\\"in c.global.HTMLIFrameElement.prototype}static createScriptSrc(a,\\nb){c.html.TrustedResourceUrl.unwrap(a);a=U.combineAttributes({src:a},{},b);return U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"script\\\",a)}static createScript(a,b){for(var d in b)if(Object.prototype.hasOwnProperty.call(b,d)){var e=d.toLowerCase();if(\\\"language\\\"==e||\\\"src\\\"==e||\\\"text\\\"==e||\\\"type\\\"==e)throw Error(U.ENABLE_ERROR_MESSAGES?`Cannot set \\\"${e}\\\" attribute`:\\\"\\\");}d=\\\"\\\";a=bd(a);for(e=0;e<a.length;e++)d+=F.unwrap(a[e]);a=U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d,c.i18n.bidi.Dir.NEUTRAL);\\nreturn U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"script\\\",b,a)}static createStyle(a,b){b=U.combineAttributes({type:\\\"text/css\\\"},{},b);let d=\\\"\\\";a=bd(a);for(let e=0;e<a.length;e++)d+=J.unwrap(a[e]);a=U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d,c.i18n.bidi.Dir.NEUTRAL);return U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"style\\\",b,a)}static createMetaRefresh(a,b){a=c.html.SafeUrl.unwrap(c.html.SafeUrl.sanitize(a));(Md()||Nd())&&c.string.internal.contains(a,\\\";\\\")&&(a=\\\"'\\\"+a.replace(/'/g,\\n\\\"%27\\\")+\\\"'\\\");return U.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\\\"meta\\\",{\\\"http-equiv\\\":\\\"refresh\\\",content:(b||0)+\\\"; url=\\\"+a})}static createWithDir(a,b,d,e){b=U.create(b,d,e);b.dir_=a;return b}static join(a,b){a=U.htmlEscape(a);let d=a.getDirection();const e=[],f=g=>{Array.isArray(g)?g.forEach(f):(g=U.htmlEscape(g),e.push(U.unwrap(g)),g=g.getDirection(),d==c.i18n.bidi.Dir.NEUTRAL?d=g:g!=c.i18n.bidi.Dir.NEUTRAL&&d!=g&&(d=null))};b.forEach(f);return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e.join(U.unwrap(a)),\\nd)}static concat(a){return U.join(U.EMPTY,Array.prototype.slice.call(arguments))}static concatWithDir(a,b){const d=U.concat(Array.prototype.slice.call(arguments,1));d.dir_=a;return d}static createSafeHtmlSecurityPrivateDoNotAccessOrElse(a,b){const d=c.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();a=d?d.createHTML(a):a;return new U(a,b,de)}static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(a,b,d){var e=null;let f;f=`<${a}`+U.stringifyAttributes(a,b);null==d?d=[]:Array.isArray(d)||(d=\\n[d]);c.dom.tags.isVoidTag(a.toLowerCase())?(c.asserts.assert(!d.length,`Void tag <${a}> does not allow content.`),f+=\\\">\\\"):(e=U.concat(d),f+=\\\">\\\"+U.unwrap(e)+\\\"</\\\"+a+\\\">\\\",e=e.getDirection());(a=b&&b.dir)&&(e=/^(ltr|rtl|auto)$/i.test(a)?c.i18n.bidi.Dir.NEUTRAL:null);return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(f,e)}static stringifyAttributes(a,b){var d=\\\"\\\";if(b)for(let h in b)if(Object.prototype.hasOwnProperty.call(b,h)){if(!ee.test(h))throw Error(U.ENABLE_ERROR_MESSAGES?`Invalid attribute name \\\"${h}\\\".`:\\n\\\"\\\");var e=b[h];if(null!=e){var f=a;var g=h;if(e instanceof c.string.Const)e=c.string.Const.unwrap(e);else if(\\\"style\\\"==g.toLowerCase())if(U.SUPPORT_STYLE_ATTRIBUTE){f=e;if(!c.isObject(f))throw Error(U.ENABLE_ERROR_MESSAGES?'The \\\"style\\\" attribute requires goog.html.SafeStyle or map of style properties, '+typeof f+\\\" given: \\\"+f:\\\"\\\");f instanceof I||(f=I.create(f));e=I.unwrap(f)}else throw Error(U.ENABLE_ERROR_MESSAGES?'Attribute \\\"style\\\" not supported.':\\\"\\\");else{if(/^on/i.test(g))throw Error(U.ENABLE_ERROR_MESSAGES?\\n`Attribute \\\"${g}`+'\\\" requires goog.string.Const value, \\\"'+e+'\\\" given.':\\\"\\\");if(g.toLowerCase()in ge)if(e instanceof c.html.TrustedResourceUrl)e=c.html.TrustedResourceUrl.unwrap(e);else if(e instanceof c.html.SafeUrl)e=c.html.SafeUrl.unwrap(e);else if(\\\"string\\\"===typeof e)e=c.html.SafeUrl.sanitize(e).getTypedStringValue();else throw Error(U.ENABLE_ERROR_MESSAGES?`Attribute \\\"${g}\\\" on tag \\\"${f}`+'\\\" requires goog.html.SafeUrl, goog.string.Const, or string, value \\\"'+e+'\\\" given.':\\\"\\\");}e.implementsGoogStringTypedString&&\\n(e=e.getTypedStringValue());c.asserts.assert(\\\"string\\\"===typeof e||\\\"number\\\"===typeof e,\\\"String or number value expected, got \\\"+typeof e+\\\" with value: \\\"+e);g=`${g}=\\\"`+c.string.internal.htmlEscape(String(e))+'\\\"';d+=\\\" \\\"+g}}return d}static combineAttributes(a,b,d){const e={};for(var f in a)Object.prototype.hasOwnProperty.call(a,f)&&(c.asserts.assert(f.toLowerCase()==f,\\\"Must be lower case\\\"),e[f]=a[f]);for(const g in b)Object.prototype.hasOwnProperty.call(b,g)&&(c.asserts.assert(g.toLowerCase()==g,\\\"Must be lower case\\\"),\\ne[g]=b[g]);if(d)for(const g in d)if(Object.prototype.hasOwnProperty.call(d,g)){f=g.toLowerCase();if(f in a)throw Error(U.ENABLE_ERROR_MESSAGES?`Cannot override \\\"${f}\\\" attribute, got \\\"`+g+'\\\" with value \\\"'+d[g]+'\\\"':\\\"\\\");f in b&&delete e[f];e[g]=d[g]}return e}}U.ENABLE_ERROR_MESSAGES=c.DEBUG;U.SUPPORT_STYLE_ATTRIBUTE=!0;U.from=U.htmlEscape;\\nconst ee=/^[a-zA-Z0-9-]+$/,ge={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},fe={[c.dom.TagName.APPLET]:!0,[c.dom.TagName.BASE]:!0,[c.dom.TagName.EMBED]:!0,[c.dom.TagName.IFRAME]:!0,[c.dom.TagName.LINK]:!0,[c.dom.TagName.MATH]:!0,[c.dom.TagName.META]:!0,[c.dom.TagName.OBJECT]:!0,[c.dom.TagName.SCRIPT]:!0,[c.dom.TagName.STYLE]:!0,[c.dom.TagName.SVG]:!0,[c.dom.TagName.TEMPLATE]:!0};U.DOCTYPE_HTML=U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\\\"<!DOCTYPE html>\\\",c.i18n.bidi.Dir.NEUTRAL);\\nU.EMPTY=new U(c.global.trustedTypes&&c.global.trustedTypes.emptyHTML||\\\"\\\",c.i18n.bidi.Dir.NEUTRAL,de);U.BR=U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\\\"<br>\\\",c.i18n.bidi.Dir.NEUTRAL);c.html.SafeHtml=U;c.html.uncheckedconversions={};c.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,d){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return U.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,d||null)};\\nc.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return F.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return I.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return J.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return c.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};\\nc.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){c.asserts.assertString(c.string.Const.unwrap(a),\\\"must provide justification\\\");c.asserts.assert(!c.string.internal.isEmptyOrWhitespace(c.string.Const.unwrap(a)),\\\"must provide non-empty justification\\\");return c.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};c.dom.safe={};c.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:\\\"afterbegin\\\",AFTEREND:\\\"afterend\\\",BEFOREBEGIN:\\\"beforebegin\\\",BEFOREEND:\\\"beforeend\\\"};c.dom.safe.insertAdjacentHtml=function(a,b,d){a.insertAdjacentHTML(b,U.unwrapTrustedHTML(d))};c.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};\\nc.dom.safe.isInnerHtmlCleanupRecursive_=c.functions.cacheReturnValue(function(){if(c.DEBUG&&\\\"undefined\\\"===typeof document)return!1;var a=document.createElement(\\\"div\\\"),b=document.createElement(\\\"div\\\");b.appendChild(document.createElement(\\\"div\\\"));a.appendChild(b);if(c.DEBUG&&!a.firstChild)return!1;b=a.firstChild.firstChild;a.innerHTML=U.unwrapTrustedHTML(U.EMPTY);return!b.parentElement});\\nc.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(a,b){if(c.dom.safe.isInnerHtmlCleanupRecursive_())for(;a.lastChild;)a.removeChild(a.lastChild);a.innerHTML=U.unwrapTrustedHTML(b)};c.dom.safe.setInnerHtml=function(a,b){if(c.asserts.ENABLE_ASSERTS&&a.tagName){var d=a.tagName.toUpperCase();if(c.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[d])throw Error(\\\"goog.dom.safe.setInnerHtml cannot be used to set content of \\\"+a.tagName+\\\".\\\");}c.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(a,b)};\\nc.dom.safe.setInnerHtmlFromConstant=function(a,b){c.dom.safe.setInnerHtml(a,c.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(c.string.Const.from(\\\"Constant HTML to be immediatelly used.\\\"),c.string.Const.unwrap(b)))};c.dom.safe.setOuterHtml=function(a,b){a.outerHTML=U.unwrapTrustedHTML(b)};c.dom.safe.setFormElementAction=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);c.dom.asserts.assertIsHTMLFormElement(a).action=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.setButtonFormAction=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);c.dom.asserts.assertIsHTMLButtonElement(a).formAction=c.html.SafeUrl.unwrap(b)};c.dom.safe.setInputFormAction=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);c.dom.asserts.assertIsHTMLInputElement(a).formAction=c.html.SafeUrl.unwrap(b)};c.dom.safe.setStyle=function(a,b){a.style.cssText=I.unwrap(b)};c.dom.safe.documentWrite=function(a,b){a.write(U.unwrapTrustedHTML(b))};\\nc.dom.safe.setAnchorHref=function(a,b){c.dom.asserts.assertIsHTMLAnchorElement(a);b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=c.html.SafeUrl.unwrap(b)};c.dom.safe.setImageSrc=function(a,b){c.dom.asserts.assertIsHTMLImageElement(a);if(!(b instanceof c.html.SafeUrl)){var d=/^data:image\\\\//i.test(b);b=c.html.SafeUrl.sanitizeAssertUnchanged(b,d)}a.src=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.setAudioSrc=function(a,b){c.dom.asserts.assertIsHTMLAudioElement(a);if(!(b instanceof c.html.SafeUrl)){var d=/^data:audio\\\\//i.test(b);b=c.html.SafeUrl.sanitizeAssertUnchanged(b,d)}a.src=c.html.SafeUrl.unwrap(b)};c.dom.safe.setVideoSrc=function(a,b){c.dom.asserts.assertIsHTMLVideoElement(a);if(!(b instanceof c.html.SafeUrl)){var d=/^data:video\\\\//i.test(b);b=c.html.SafeUrl.sanitizeAssertUnchanged(b,d)}a.src=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.setEmbedSrc=function(a,b){c.dom.asserts.assertIsHTMLEmbedElement(a);a.src=c.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};c.dom.safe.setFrameSrc=function(a,b){c.dom.asserts.assertIsHTMLFrameElement(a);a.src=c.html.TrustedResourceUrl.unwrap(b)};c.dom.safe.setIframeSrc=function(a,b){c.dom.asserts.assertIsHTMLIFrameElement(a);a.src=c.html.TrustedResourceUrl.unwrap(b)};c.dom.safe.setIframeSrcdoc=function(a,b){c.dom.asserts.assertIsHTMLIFrameElement(a);a.srcdoc=U.unwrapTrustedHTML(b)};\\nc.dom.safe.setLinkHrefAndRel=function(a,b,d){c.dom.asserts.assertIsHTMLLinkElement(a);a.rel=d;c.string.internal.caseInsensitiveContains(d,\\\"stylesheet\\\")?(c.asserts.assert(b instanceof c.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because \\\"rel\\\" contains \\\"stylesheet\\\"'),a.href=c.html.TrustedResourceUrl.unwrap(b),(b=c.dom.safe.getStyleNonce(a.ownerDocument&&a.ownerDocument.defaultView))&&a.setAttribute(\\\"nonce\\\",b)):a.href=b instanceof c.html.TrustedResourceUrl?c.html.TrustedResourceUrl.unwrap(b):\\nb instanceof c.html.SafeUrl?c.html.SafeUrl.unwrap(b):c.html.SafeUrl.unwrap(c.html.SafeUrl.sanitizeAssertUnchanged(b))};c.dom.safe.setObjectData=function(a,b){c.dom.asserts.assertIsHTMLObjectElement(a);a.data=c.html.TrustedResourceUrl.unwrapTrustedScriptURL(b)};c.dom.safe.setScriptSrc=function(a,b){c.dom.asserts.assertIsHTMLScriptElement(a);a.src=c.html.TrustedResourceUrl.unwrapTrustedScriptURL(b);c.dom.safe.setNonceForScriptElement_(a)};\\nc.dom.safe.setScriptContent=function(a,b){c.dom.asserts.assertIsHTMLScriptElement(a);a.textContent=F.unwrapTrustedScript(b);c.dom.safe.setNonceForScriptElement_(a)};c.dom.safe.setNonceForScriptElement_=function(a){const b=c.dom.safe.getScriptNonce(a.ownerDocument&&a.ownerDocument.defaultView);b&&a.setAttribute(\\\"nonce\\\",b)};c.dom.safe.setLocationHref=function(a,b){c.dom.asserts.assertIsLocation(a);b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.href=c.html.SafeUrl.unwrap(b)};\\nc.dom.safe.assignLocation=function(a,b){c.dom.asserts.assertIsLocation(a);b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.assign(c.html.SafeUrl.unwrap(b))};c.dom.safe.replaceLocation=function(a,b){b=b instanceof c.html.SafeUrl?b:c.html.SafeUrl.sanitizeAssertUnchanged(b);a.replace(c.html.SafeUrl.unwrap(b))};\\nc.dom.safe.openInWindow=function(a,b,d,e){a=a instanceof c.html.SafeUrl?a:c.html.SafeUrl.sanitizeAssertUnchanged(a);b=b||c.global;d=d instanceof c.string.Const?c.string.Const.unwrap(d):d||\\\"\\\";return void 0!==e?b.open(c.html.SafeUrl.unwrap(a),d,e):b.open(c.html.SafeUrl.unwrap(a),d)};c.dom.safe.parseFromStringHtml=function(a,b){return c.dom.safe.parseFromString(a,b,\\\"text/html\\\")};c.dom.safe.parseFromString=function(a,b,d){return a.parseFromString(U.unwrapTrustedHTML(b),d)};\\nc.dom.safe.createImageFromBlob=function(a){if(!/^image\\\\/.*/g.test(a.type))throw Error(\\\"goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.\\\");var b=c.global.URL.createObjectURL(a);a=new c.global.Image;a.onload=function(){c.global.URL.revokeObjectURL(b)};c.dom.safe.setImageSrc(a,c.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(c.string.Const.from(\\\"Image blob URL.\\\"),b));return a};c.dom.safe.createContextualFragment=function(a,b){return a.createContextualFragment(U.unwrapTrustedHTML(b))};\\nc.dom.safe.getScriptNonce=function(a){return c.dom.safe.getNonce_(\\\"script[nonce]\\\",a)};c.dom.safe.getStyleNonce=function(a){return c.dom.safe.getNonce_('style[nonce],link[rel=\\\"stylesheet\\\"][nonce]',a)};c.dom.safe.NONCE_PATTERN_=/^[\\\\w+/_-]+[=]{0,2}$/;c.dom.safe.getNonce_=function(a,b){b=(b||c.global).document;return b.querySelector?(a=b.querySelector(a))&&(a=a.nonce||a.getAttribute(\\\"nonce\\\"))&&c.dom.safe.NONCE_PATTERN_.test(a)?a:\\\"\\\":\\\"\\\"};c.string.DETECT_DOUBLE_ESCAPING=!1;c.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;c.string.Unicode={NBSP:\\\"\\\\u00a0\\\"};c.string.startsWith=c.string.internal.startsWith;c.string.endsWith=c.string.internal.endsWith;c.string.caseInsensitiveStartsWith=c.string.internal.caseInsensitiveStartsWith;c.string.caseInsensitiveEndsWith=c.string.internal.caseInsensitiveEndsWith;c.string.caseInsensitiveEquals=c.string.internal.caseInsensitiveEquals;\\nc.string.subs=function(a,b){const d=a.split(\\\"%s\\\");let e=\\\"\\\";const f=Array.prototype.slice.call(arguments,1);for(;f.length&&1<d.length;)e+=d.shift()+f.shift();return e+d.join(\\\"%s\\\")};c.string.collapseWhitespace=function(a){return a.replace(/[\\\\s\\\\xa0]+/g,\\\" \\\").replace(/^\\\\s+|\\\\s+$/g,\\\"\\\")};c.string.isEmptyOrWhitespace=c.string.internal.isEmptyOrWhitespace;c.string.isEmptyString=function(a){return 0==a.length};c.string.isEmpty=c.string.isEmptyOrWhitespace;c.string.isEmptyOrWhitespaceSafe=function(a){return c.string.isEmptyOrWhitespace(c.string.makeSafe(a))};\\nc.string.isEmptySafe=c.string.isEmptyOrWhitespaceSafe;c.string.isBreakingWhitespace=function(a){return!/[^\\\\t\\\\n\\\\r ]/.test(a)};c.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};c.string.isNumeric=function(a){return!/[^0-9]/.test(a)};c.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};c.string.isSpace=function(a){return\\\" \\\"==a};c.string.isUnicodeChar=function(a){return 1==a.length&&\\\" \\\"<=a&&\\\"~\\\">=a||\\\"\\\\u0080\\\"<=a&&\\\"\\\\ufffd\\\">=a};\\nc.string.stripNewlines=function(a){return a.replace(/(\\\\r\\\\n|\\\\r|\\\\n)+/g,\\\" \\\")};c.string.canonicalizeNewlines=function(a){return a.replace(/(\\\\r\\\\n|\\\\r|\\\\n)/g,\\\"\\\\n\\\")};c.string.normalizeWhitespace=function(a){return a.replace(/\\\\xa0|\\\\s/g,\\\" \\\")};c.string.normalizeSpaces=function(a){return a.replace(/\\\\xa0|[ \\\\t]+/g,\\\" \\\")};c.string.collapseBreakingSpaces=function(a){return a.replace(/[\\\\t\\\\r\\\\n ]+/g,\\\" \\\").replace(/^[\\\\t\\\\r\\\\n ]+|[\\\\t\\\\r\\\\n ]+$/g,\\\"\\\")};c.string.trim=c.string.internal.trim;\\nc.string.trimLeft=function(a){return a.replace(/^[\\\\s\\\\xa0]+/,\\\"\\\")};c.string.trimRight=function(a){return a.replace(/[\\\\s\\\\xa0]+$/,\\\"\\\")};c.string.caseInsensitiveCompare=c.string.internal.caseInsensitiveCompare;\\nc.string.numberAwareCompare_=function(a,b,d){if(a==b)return 0;if(!a)return-1;if(!b)return 1;const e=a.toLowerCase().match(d),f=b.toLowerCase().match(d),g=Math.min(e.length,f.length);for(let h=0;h<g;h++){d=e[h];const k=f[h];if(d!=k)return a=parseInt(d,10),!isNaN(a)&&(b=parseInt(k,10),!isNaN(b)&&a-b)?a-b:d<k?-1:1}return e.length!=f.length?e.length-f.length:a<b?-1:1};c.string.intAwareCompare=function(a,b){return c.string.numberAwareCompare_(a,b,/\\\\d+|\\\\D+/g)};\\nc.string.floatAwareCompare=function(a,b){return c.string.numberAwareCompare_(a,b,/\\\\d+|\\\\.\\\\d+|\\\\D+/g)};c.string.numerateCompare=c.string.floatAwareCompare;c.string.urlEncode=function(a){return encodeURIComponent(String(a))};c.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\\\\+/g,\\\" \\\"))};c.string.newLineToBr=c.string.internal.newLineToBr;c.string.htmlEscape=function(a,b){a=c.string.internal.htmlEscape(a,b);c.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(c.string.E_RE_,\\\"&#101;\\\"));return a};\\nc.string.E_RE_=/e/g;c.string.unescapeEntities=function(a){return c.string.contains(a,\\\"&\\\")?!c.string.FORCE_NON_DOM_HTML_UNESCAPING&&\\\"document\\\"in c.global?c.string.unescapeEntitiesUsingDom_(a):c.string.unescapePureXmlEntities_(a):a};c.string.unescapeEntitiesWithDocument=function(a,b){return c.string.contains(a,\\\"&\\\")?c.string.unescapeEntitiesUsingDom_(a,b):a};\\nc.string.unescapeEntitiesUsingDom_=function(a,b){const d={\\\"&amp;\\\":\\\"&\\\",\\\"&lt;\\\":\\\"<\\\",\\\"&gt;\\\":\\\">\\\",\\\"&quot;\\\":'\\\"'};let e;e=b?b.createElement(\\\"div\\\"):c.global.document.createElement(\\\"div\\\");return a.replace(c.string.HTML_ENTITY_PATTERN_,function(f,g){let h=d[f];if(h)return h;\\\"#\\\"==g.charAt(0)&&(g=Number(\\\"0\\\"+g.substr(1)),isNaN(g)||(h=String.fromCharCode(g)));h||(c.dom.safe.setInnerHtml(e,c.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(c.string.Const.from(\\\"Single HTML entity.\\\"),f+\\\" \\\")),\\nh=e.firstChild.nodeValue.slice(0,-1));return d[f]=h})};c.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(b,d){switch(d){case \\\"amp\\\":return\\\"&\\\";case \\\"lt\\\":return\\\"<\\\";case \\\"gt\\\":return\\\">\\\";case \\\"quot\\\":return'\\\"';default:return\\\"#\\\"!=d.charAt(0)||(d=Number(\\\"0\\\"+d.substr(1)),isNaN(d))?b:String.fromCharCode(d)}})};c.string.HTML_ENTITY_PATTERN_=/&([^;\\\\s<&]+);?/g;c.string.whitespaceEscape=function(a,b){return c.string.newLineToBr(a.replace(/  /g,\\\" &#160;\\\"),b)};\\nc.string.preserveSpaces=function(a){return a.replace(/(^|[\\\\n ]) /g,\\\"$1\\\"+c.string.Unicode.NBSP)};c.string.stripQuotes=function(a,b){const d=b.length;for(let e=0;e<d;e++){const f=1==d?b:b.charAt(e);if(a.charAt(0)==f&&a.charAt(a.length-1)==f)return a.substring(1,a.length-1)}return a};c.string.truncate=function(a,b,d){d&&(a=c.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+\\\"...\\\");d&&(a=c.string.htmlEscape(a));return a};\\nc.string.truncateMiddle=function(a,b,d,e){d&&(a=c.string.unescapeEntities(a));if(e&&a.length>b){e>b&&(e=b);var f=a.length-e;a=a.substring(0,b-e)+\\\"...\\\"+a.substring(f)}else a.length>b&&(e=Math.floor(b/2),f=a.length-e,e+=b%2,a=a.substring(0,e)+\\\"...\\\"+a.substring(f));d&&(a=c.string.htmlEscape(a));return a};c.string.specialEscapeChars_={\\\"\\\\x00\\\":\\\"\\\\\\\\0\\\",\\\"\\\\b\\\":\\\"\\\\\\\\b\\\",\\\"\\\\f\\\":\\\"\\\\\\\\f\\\",\\\"\\\\n\\\":\\\"\\\\\\\\n\\\",\\\"\\\\r\\\":\\\"\\\\\\\\r\\\",\\\"\\\\t\\\":\\\"\\\\\\\\t\\\",\\\"\\\\x0B\\\":\\\"\\\\\\\\x0B\\\",'\\\"':'\\\\\\\\\\\"',\\\"\\\\\\\\\\\":\\\"\\\\\\\\\\\\\\\\\\\",\\\"<\\\":\\\"\\\\\\\\u003C\\\"};c.string.jsEscapeCache_={\\\"'\\\":\\\"\\\\\\\\'\\\"};\\nc.string.quote=function(a){a=String(a);const b=['\\\"'];for(let d=0;d<a.length;d++){const e=a.charAt(d),f=e.charCodeAt(0);b[d+1]=c.string.specialEscapeChars_[e]||(31<f&&127>f?e:c.string.escapeChar(e))}b.push('\\\"');return b.join(\\\"\\\")};c.string.escapeString=function(a){const b=[];for(let d=0;d<a.length;d++)b[d]=c.string.escapeChar(a.charAt(d));return b.join(\\\"\\\")};\\nc.string.escapeChar=function(a){if(a in c.string.jsEscapeCache_)return c.string.jsEscapeCache_[a];if(a in c.string.specialEscapeChars_)return c.string.jsEscapeCache_[a]=c.string.specialEscapeChars_[a];let b;const d=a.charCodeAt(0);if(31<d&&127>d)b=a;else{if(256>d){if(b=\\\"\\\\\\\\x\\\",16>d||256<d)b+=\\\"0\\\"}else b=\\\"\\\\\\\\u\\\",4096>d&&(b+=\\\"0\\\");b+=d.toString(16).toUpperCase()}return c.string.jsEscapeCache_[a]=b};c.string.contains=c.string.internal.contains;c.string.caseInsensitiveContains=c.string.internal.caseInsensitiveContains;\\nc.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};c.string.removeAt=function(a,b,d){let e=a;0<=b&&b<a.length&&0<d&&(e=a.substr(0,b)+a.substr(b+d,a.length-b-d));return e};c.string.remove=function(a,b){return a.replace(b,\\\"\\\")};c.string.removeAll=function(a,b){b=new RegExp(c.string.regExpEscape(b),\\\"g\\\");return a.replace(b,\\\"\\\")};c.string.replaceAll=function(a,b,d){b=new RegExp(c.string.regExpEscape(b),\\\"g\\\");return a.replace(b,d.replace(/\\\\$/g,\\\"$$$$\\\"))};\\nc.string.regExpEscape=function(a){return String(a).replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g,\\\"\\\\\\\\$1\\\").replace(/\\\\x08/g,\\\"\\\\\\\\x08\\\")};c.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};c.string.padNumber=function(a,b,d){if(!Number.isFinite(a))return String(a);a=void 0!==d?a.toFixed(d):String(a);d=a.indexOf(\\\".\\\");-1===d&&(d=a.length);const e=\\\"-\\\"===a[0]?\\\"-\\\":\\\"\\\";e&&(a=a.substring(1));return e+c.string.repeat(\\\"0\\\",Math.max(0,b-d))+a};\\nc.string.makeSafe=function(a){return null==a?\\\"\\\":String(a)};c.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^c.now()).toString(36)};c.string.compareVersions=c.string.internal.compareVersions;c.string.hashCode=function(a){let b=0;for(let d=0;d<a.length;++d)b=31*b+a.charCodeAt(d)>>>0;return b};c.string.uniqueStringCounter_=2147483648*Math.random()|0;c.string.createUniqueString=function(){return\\\"goog_\\\"+c.string.uniqueStringCounter_++};\\nc.string.toNumber=function(a){const b=Number(a);return 0==b&&c.string.isEmptyOrWhitespace(a)?NaN:b};c.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};c.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};c.string.toCamelCase=function(a){return String(a).replace(/\\\\-([a-z])/g,function(b,d){return d.toUpperCase()})};c.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,\\\"-$1\\\").toLowerCase()};\\nc.string.toTitleCase=function(a,b){b=\\\"string\\\"===typeof b?c.string.regExpEscape(b):\\\"\\\\\\\\s\\\";return a.replace(new RegExp(\\\"(^\\\"+(b?\\\"|[\\\"+b+\\\"]+\\\":\\\"\\\")+\\\")([a-z])\\\",\\\"g\\\"),function(d,e,f){return e+f.toUpperCase()})};c.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};c.string.parseInt=function(a){isFinite(a)&&(a=String(a));return\\\"string\\\"===typeof a?/^\\\\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};\\nc.string.splitLimit=function(a,b,d){a=a.split(b);const e=[];for(;0<d&&a.length;)e.push(a.shift()),d--;a.length&&e.push(a.join(b));return e};c.string.lastComponent=function(a,b){if(b)\\\"string\\\"==typeof b&&(b=[b]);else return a;let d=-1;for(let e=0;e<b.length;e++){if(\\\"\\\"==b[e])continue;const f=a.lastIndexOf(b[e]);f>d&&(d=f)}return-1==d?a:a.slice(d+1)};\\nc.string.editDistance=function(a,b){const d=[],e=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var f=0;f<b.length+1;f++)d[f]=f;for(f=0;f<a.length;f++){e[0]=f+1;for(var g=0;g<b.length;g++)e[g+1]=Math.min(e[g]+1,d[g+1]+1,d[g]+Number(a[f]!=b[g]));for(g=0;g<d.length;g++)d[g]=e[g]}return e[b.length]};c.string.path={};c.string.path.baseName=function(a){const b=a.lastIndexOf(\\\"/\\\")+1;return a.slice(b)};c.string.path.basename=c.string.path.baseName;c.string.path.dirname=function(a){const b=a.lastIndexOf(\\\"/\\\")+1;a=a.slice(0,b);/^\\\\/+$/.test(a)||(a=a.replace(/\\\\/+$/,\\\"\\\"));return a};c.string.path.extension=function(a){a=c.string.path.baseName(a).replace(/\\\\.+/g,\\\".\\\");const b=a.lastIndexOf(\\\".\\\");return 0>=b?\\\"\\\":a.substr(b+1)};\\nc.string.path.join=function(a){let b=arguments[0];for(let d=1;d<arguments.length;d++){const e=arguments[d];b=c.string.startsWith(e,\\\"/\\\")?e:\\\"\\\"==b||c.string.endsWith(b,\\\"/\\\")?b+e:b+(\\\"/\\\"+e)}return b};\\nc.string.path.normalizePath=function(a){if(\\\"\\\"==a)return\\\".\\\";let b=\\\"\\\";c.string.startsWith(a,\\\"/\\\")&&(b=\\\"/\\\",c.string.startsWith(a,\\\"//\\\")&&!c.string.startsWith(a,\\\"///\\\")&&(b=\\\"//\\\"));a=a.split(\\\"/\\\");const d=[];for(let e=0;e<a.length;e++){const f=a[e];\\\"\\\"!=f&&\\\".\\\"!=f&&(\\\"..\\\"!=f||!b&&!d.length||\\\"..\\\"==Qc(d)?d.push(f):d.pop())}return b+d.join(\\\"/\\\")||\\\".\\\"};c.string.path.split=function(a){const b=c.string.path.dirname(a);a=c.string.path.baseName(a);return[b,a]};function he(a){return/^\\\\//g.test(a)?a:`/${a}`}function ie(){if(\\\"undefined\\\"===typeof performance||\\\"undefined\\\"===typeof performance.now){const a=Date.now();return Date.now()-a}return performance.now()}function je(a){var b=a.reduce((e,f)=>e+f.length,0);if(0!==a.length){b=new Uint8Array(b);var d=0;for(const e of a)b.set(e,d),d+=e.length;return b}}\\nfunction V(){this.fd=Array.from({length:4});this.fd[0]={fd:0,path:\\\"/dev/stdin\\\",seekPos:c.global.BigInt(0),buffers:[]};this.fd[1]={fd:1,path:\\\"/dev/stdout\\\",seekPos:c.global.BigInt(0),buffers:[]};this.fd[2]={fd:2,path:\\\"/dev/stderr\\\",seekPos:c.global.BigInt(0),buffers:[]};this.fd[3]={fd:3,path:\\\"/\\\",seekPos:c.global.BigInt(0),buffers:[]};this.getMemory=this.getMemory.bind(this);this.CPUTIME_START=0}V.prototype.start=function(a){this.CPUTIME_START=ie();a.exports._start()};\\nV.prototype.getImports=function(a){const b={};a=WebAssembly.Module.imports(a);for(const d of a)\\\"function\\\"===d.kind&&d.module.startsWith(\\\"wasi_\\\")&&(\\\"object\\\"!==typeof b[d.module]&&(b[d.module]={}),b[d.module][d.name]=this[d.name].bind(this));return b};V.prototype.setMemory=function(a){this.memory=a};V.prototype.getMemory=function(){this.view&&this.view.buffer&&this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer));return this.view};\\nV.prototype.msToNs=function(a){const b=Math.trunc(a);a=c.global.BigInt(Math.round(1E6*(a-b)));return c.global.BigInt(b)*c.global.BigInt(1E6)+a};V.prototype.now=function(a){switch(a){case 1:return Math.floor(ie());case 0:return this.msToNs(Date.now());case 2:case 3:return Math.floor(ie()-this.CPUTIME_START);default:return 0}};V.prototype.args_get=function(){return 0};V.prototype.args_sizes_get=function(){return 0};V.prototype.clock_res_get=function(){return 0};\\nV.prototype.clock_time_get=function(a,b,d){b=this.getMemory();a=this.now(a);b.setBigUint64(d,c.global.BigInt(a),!0);return 0};V.prototype.environ_get=function(){return 0};V.prototype.environ_sizes_get=function(){return 0};V.prototype.fd_advise=function(){return 52};V.prototype.fd_allocate=function(){return 52};V.prototype.fd_close=function(){return 0};V.prototype.fd_datasync=function(){return 0};\\nV.prototype.fd_fdstat_get=function(a,b){a=this.getMemory();a.setUint8(b+4,4);a.setUint16(b+2,0,!0);a.setUint16(b+4,0,!0);a.setBigUint64(b+8,c.global.BigInt(Nc),!0);a.setBigUint64(b+8+8,c.global.BigInt(Oc),!0);return 0};V.prototype.fd_fdstat_set_flags=function(){return 52};V.prototype.fd_fdstat_set_rights=function(){return 0};\\nV.prototype.fd_filestat_get=function(a,b){let d=0;this.fd[a]&&(d=this.fd[a].buffers.reduce(function(f,g){return f+(null==g?void 0:g.byteLength)?null==g?void 0:g.byteLength:0},0));const e=this.getMemory();e.setBigUint64(b,c.global.BigInt(a),!0);b+=8;e.setBigUint64(b,c.global.BigInt(a),!0);b+=8;e.setUint8(b,4);b+=8;e.setBigUint64(b,c.global.BigInt(1),!0);b+=8;e.setBigUint64(b,c.global.BigInt(d),!0);b+=8;e.setBigUint64(b,this.msToNs(this.CPUTIME_START),!0);b+=8;e.setBigUint64(b,this.msToNs(this.CPUTIME_START),\\n!0);e.setBigUint64(b+8,this.msToNs(this.CPUTIME_START),!0);return 0};V.prototype.fd_filestat_set_size=function(){return 0};V.prototype.fd_filestat_set_times=function(){return 0};V.prototype.fd_pread=function(){return 0};V.prototype.fd_prestat_dir_name=function(a,b){if(!this.fd[a]&&!this.fd[a-1])return 8;var {path:d}=this.fd[a];a=this.getMemory();d=Ba.encode(d);(new Uint8Array(a.buffer)).set(d,b);return 0};\\nV.prototype.fd_prestat_get=function(a,b){if(!this.fd[a])return 8;var {path:d}=this.fd[a];a=this.getMemory();d=Ba.encode(d);a.setUint8(b,0);a.setUint32(b+4,d.byteLength,!0);return 0};V.prototype.fd_pwrite=function(a,b,d,e,f){console.log(\\\"fd_pwrite\\\",a,b,d,e,f,arguments);return 0};\\nV.prototype.fd_read=function(a,b,d,e){const f=this.fd[a]&&this.fd[a].buffers;var g=f.reduce((u,r)=>u+r.length,0);const h=this.getMemory();if(f&&0!==f.length){var k=Number(this.fd[a].seekPos),l=0,m=!1;if(k>=g)return-1;for(g=0;g<d;g++){var q=b+8*g;const u=h.getUint32(q,!0);q=h.getUint32(q+4,!0);m||(l+=q,Array.from({length:q},(r,x)=>x).reduce((r,x)=>{if(m)return r;const [Q,A]=r;let D=r=0,W=!1,O=0,B;if(0===x)for(;!W;)B=f[r]?f[r].byteLength:0,O<=k&&B+O>k?(W=!0,D=k-O):(O+=B,r+=1);else r=Q,D=A;f[r]?(h.setUint8(u+\\nx,f[r][D]),D+1>=f[r].byteLength?(r=Q+1,D=0):D+=1):(h.setUint8(u+x,\\\"\\\\x00\\\"),k+=x,m=!0);return[r,D]},[0,0]),m||(k+=q))}this.fd[a].seekPos=c.global.BigInt(k);h.setUint32(e,l,!0);return 0}console.error(\\\"Reading non existent file\\\",a,this.fd[a])};V.prototype.fd_readdir=function(){return 0};V.prototype.fd_renumber=function(){return 0};\\nV.prototype.fd_seek=function(a,b,d,e){const f=this.getMemory();switch(d){case 1:this.fd[a].seekPos=(this.fd[a].seekPos?this.fd[a].seekPos:c.global.BigInt(0))+c.global.BigInt(b);break;case 2:d=this.fd[a].writer?c.global.BigInt(this.fd[a].writer.length):c.global.BigInt(0);this.fd[a].seekPos=d+BigInt(b);break;case 0:this.fd[a].seekPos=BigInt(b)}f.setBigUint64(e,this.fd[a].seekPos,!0);return 0};V.prototype.fd_sync=function(){return 0};\\nV.prototype.fd_tell=function(a,b){const d=this.getMemory();this.fd[a].seekPos||(this.fd[a].seekPos=c.global.BigInt(0));d.setBigUint64(b,this.fd[a].seekPos,!0);return 0};\\nV.prototype.fd_write=function(a,b,d,e){let f=!1;const g=this.getMemory();this.fd[a].buffers=this.fd[a].buffers||[];this.fd[a].seekPos===c.global.BigInt(0)&&0<this.fd[a].buffers.length&&(f=!0);let h=0;for(let m=0;m<d;m++){var k=b+8*m,l=g.getUint32(k,!0);k=g.getUint32(k+4,!0);h+=k;l=new Uint8Array(g.buffer,l,k);f?this.fd[a].buffers.unshift(l.slice(0,k)):this.fd[a].buffers.push(l.slice(0,k))}this.fd[a].seekPos+=c.global.BigInt(h);g.setUint32(e,h,!0);[1,2].includes(a)&&console.log(n.decode(je(this.fd[a].buffers)));\\nreturn 0};V.prototype.path_create_directory=function(){return 0};V.prototype.path_filestat_get=function(){return 0};V.prototype.path_filestat_set_times=function(){return 0};V.prototype.path_link=function(){return 0};\\nV.prototype.path_open=function(a,b,d,e,f,g,h,k,l){b=this.getMemory();f=(this.fd[a]||{path:\\\"/\\\"}).path;d=new Uint8Array(b.buffer,d,e);d=n.decode(d);const m=he(c.string.path.normalizePath(c.string.path.join(3===a?\\\"\\\":f,d)));if(m.startsWith(\\\"/..\\\")||\\\"/._\\\"===m||\\\"/.AppleDouble\\\"===m)return 8;(a=Object.values(this.fd).find(q=>q.path===m&&Array.isArray(q.buffers)))?d=a.fd:(d=this.fd.length,this.fd[d]={fd:d});this.fd[d]={...this.fd[d],path:m,type:\\\"file\\\",seekPos:c.global.BigInt(0),buffers:a?this.fd[d].buffers:\\n[]};c.global.BigInt(0);b.setUint32(l,d,!0);return 0};V.prototype.path_readlink=function(){return 0};V.prototype.path_remove_directory=function(){return 0};V.prototype.path_rename=function(){return 0};V.prototype.path_symlink=function(){return 0};V.prototype.path_unlink_file=function(){return 0};V.prototype.poll_oneoff=function(){return 0};V.prototype.proc_exit=function(){return 0};V.prototype.proc_raise=function(){return 0};V.prototype.random_get=function(){return 0};V.prototype.sched_yield=function(){return 0};\\nV.prototype.sock_recv=function(){return 52};V.prototype.sock_send=function(){return 52};V.prototype.sock_shutdown=function(){return 52};V.prototype.findBuffers=function(a){const b=Object.values(this.fd).find(({path:d})=>d===a);return b&&b.buffers};\\nV.prototype.readdir=function(a){const b=(he((0,c.string.path.normalizePath)(a))+\\\"/\\\").replace(\\\"//\\\",\\\"/\\\"),d=[];Object.values(this.fd).forEach(({path:e})=>!/\\\\//g.test(e.replace(b,\\\"\\\"))&&d.push(e));return d.map(e=>e.replace(b,\\\"\\\").replace(/^\\\\//g,\\\"\\\")).filter(e=>!!e)};V.prototype.writeFile=function(a,b){const d=he((0,c.string.path.normalizePath)(a));a=Object.keys(this.fd).length;const e=Object.values(this.fd).find(({path:f})=>f===d);this.fd[a]={fd:a,path:d,seekPos:c.global.BigInt(0),buffers:[b]};e&&delete this.fd[e]};\\nV.prototype.appendFile=function(a,b){var d=he((0,c.string.path.normalizePath)(a));(d=this.findBuffers(d))?d.push(b):console.error(`Can't append to non-existing file ${a}`)};V.prototype.readFile=function(a){a=he((0,c.string.path.normalizePath)(a));if(a=this.findBuffers(a))return je(a)};V.prototype.readStdOut=function(){const a=Object.values(this.fd[0]);return je(a&&a.buffers||[])};\\nV.prototype.unlink=function(a){const b=he((0,c.string.path.normalizePath)(a));(a=Object.values(this.fd).find(({path:d})=>d===b))?delete this.fd[a]:console.error(`While trying to unlink ${b}, path not found`)};V.prototype.mkdir=function(a){const b=he((0,c.string.path.normalizePath)(a)),d=[];Object.values(this.fd).forEach(({path:e})=>e.startsWith(b)&&d.push(e));0<d.length?console.warn(`mkdir: path ${a} already exists`):(a=Object.keys(this.fd).length,this.fd[a]={fd:a,path:b})};function ke(a){for(;0<a.length;)a.pop()};var le={__esModule:!0};le.LoggerFactory=le.logLevels=void 0;le.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};\\nvar me=function(){function a(b,d){if(void 0===b&&(b=\\\"log_with_warnings\\\"),void 0===d&&(d=null),this.logLevel=b,!le.logLevels[b])throw Error(\\\"Invalid log level \\\"+b+\\\" allowed: \\\"+JSON.stringify(le.logLevels));this.mockConsole=d||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=function(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,d,e){return this.getSingleLoggerStyle(b,this.getColorStyle(d),e)},a.prototype.getSingleLogger=\\nfunction(b,d){var e=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(e),d)},a.prototype.getSingleLoggerStyle=function(b,d,e,f){var g=this;return void 0===f&&(f=\\\"log_with_warnings\\\"),function(){for(var h=[],k=0;k<arguments.length;k++)h[k]=arguments[k];if(le.logLevels[g.logLevel]>le.logLevels[f])return g.dummy;h=Array.prototype.slice.call(h);k=h.shift().split(\\\"{}\\\");for(var l=[g.mockConsole,\\\"%c\\\"+b,d],m=0;m<k.length;m++)l.push(k[m]),void 0!==h[m]&&l.push(h[m]);if(k.length-1!==\\nh.length)if(\\\"log_with_warnings\\\"===g.logLevel)g.mockConsole.error(\\\"MissMatch amount of arguments\\\");else if(\\\"log_raise_error\\\"===g.logLevel)throw Error(\\\"MissMatch amount of arguments\\\");return Function.prototype.bind.apply(e,l)}},a.prototype.getLoggerColor=function(b,d){return this.getLoggerStyle(b,this.getColorStyle(d))},a.prototype.getColorStyle=function(b){return\\\"color: white; background-color: \\\"+b+\\\"; padding: 2px 6px; border-radius: 2px; font-size: 10px\\\"},a.getHash=function(b,d){void 0===d&&(d=0);\\nvar e=3735928559^d;d^=1103547991;for(var f=0,g;f<b.length;f++)g=b.charCodeAt(f),e=Math.imul(e^g,2654435761),d=Math.imul(d^g,1597334677);return e=Math.imul(e^e>>>16,2246822507)^Math.imul(d^d>>>13,3266489909),4294967296*(2097151&(Math.imul(d^d>>>16,2246822507)^Math.imul(e^e>>>13,3266489909)))+(e>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b=\\\"\\\");b=a.getHash(b);for(var d=\\\"#\\\",e=0;3>e;e++)d+=(\\\"00\\\"+(8+(b>>7*e&127)).toString(16)).substr(-2);return d},a.prototype.getLogger=function(b){return this.getLoggerColor(b,\\nthis.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,d){return{trace:this.getSingleLoggerStyle(b,d,this.mockConsole.trace,\\\"trace\\\"),debug:this.getSingleLoggerStyle(b,d,this.mockConsole.debug,\\\"debug\\\"),log:this.getSingleLoggerStyle(b,d,this.mockConsole.log,\\\"info\\\"),warn:this.getSingleLoggerStyle(b,d,this.mockConsole.warn,\\\"warn\\\"),error:this.getSingleLoggerStyle(b,d,this.mockConsole.error,\\\"error\\\")}},a}();le.LoggerFactory=me;let ne,oe,pe;ne=()=>()=>{};oe=()=>()=>{};pe=()=>()=>{};var X={CompressionMethod:{DEFLATE:8,RESERVED:15}};X.Util={};X.Util.stringToByteArray=function(a){a=[...a];let b,d;b=0;for(d=a.length;b<d;b++)a[b]=(a[b].charPointAt(0)&255)>>>0;return new Uint8Array([a])};X.Adler32=function(a){\\\"string\\\"===typeof a&&(a=X.Util.stringToByteArray(a));return X.Adler32.update(1,a)};X.Adler32.update=function(a,b){let d=a&65535;a=a>>>16&65535;let e=b.length,f,g=0;for(;0<e;){f=e>X.Adler32.OptimizationParameter?X.Adler32.OptimizationParameter:e;e-=f;do d+=b[g++],a+=d;while(--f);d%=65521;a%=65521}return(a<<16|d)>>>0};X.Adler32.OptimizationParameter=1024;/*\\n zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\\nX.Huffman={};X.Huffman.buildHuffmanTable=function(a){const b=a.length;let d=0,e=Number.POSITIVE_INFINITY,f,g,h,k;let l,m;for(l=0;l<b;++l)a[l]>d&&(d=a[l]),a[l]<e&&(e=a[l]);const q=1<<d,u=new Uint32Array(q);f=1;g=0;for(h=2;f<=d;){for(l=0;l<b;++l)if(a[l]===f){k=0;var r=g;for(m=0;m<f;++m)k=k<<1|r&1,r>>=1;r=f<<16|l;for(m=k;m<q;m+=h)u[m]=r;++g}++f;g<<=1;h<<=1}return[u,d,e]};X.RawInflate=function(a,b){this.blocks=[];this.bufferSize=32768;this.bitsbuflen=this.bitsbuf=this.ip=this.totalpos=0;this.input=new Uint8Array(a);this.bfinal=!1;this.bufferType=X.RawInflate.BufferType.ADAPTIVE;this.resize=!1;if(b||!(b={}))b.index&&(this.ip=b.index),b.bufferSize&&(this.bufferSize=b.bufferSize),b.bufferType&&(this.bufferType=b.bufferType),b.resize&&(this.resize=b.resize);switch(this.bufferType){case X.RawInflate.BufferType.BLOCK:this.op=X.RawInflate.MaxBackwardLength;this.output=new Uint8Array(X.RawInflate.MaxBackwardLength+\\nthis.bufferSize+X.RawInflate.MaxCopyLength);break;case X.RawInflate.BufferType.ADAPTIVE:this.op=0;this.output=new Uint8Array(this.bufferSize);break;default:throw Error(\\\"invalid inflate mode\\\");}};X.RawInflate.BufferType={BLOCK:0,ADAPTIVE:1};\\nX.RawInflate.prototype.decompress=function(){for(;!this.bfinal;)this.parseBlock();switch(this.bufferType){case X.RawInflate.BufferType.BLOCK:return this.concatBufferBlock();case X.RawInflate.BufferType.ADAPTIVE:return this.concatBufferDynamic();default:throw Error(\\\"invalid inflate mode\\\");}};X.RawInflate.MaxBackwardLength=32768;X.RawInflate.MaxCopyLength=258;X.RawInflate.Order=new Uint16Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\\nX.RawInflate.LengthCodeTable=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258]);X.RawInflate.LengthExtraTable=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0]);X.RawInflate.DistCodeTable=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577]);\\nX.RawInflate.DistExtraTable=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);var qe=X.RawInflate,re;const se=new Uint8Array(288);let te,ue;te=0;for(ue=se.length;te<ue;++te)se[te]=143>=te?8:255>=te?9:279>=te?7:8;re=(0,X.Huffman.buildHuffmanTable)(se);qe.FixedLiteralLengthTable=re;var ve=X.RawInflate,we;const xe=new Uint8Array(30);let ye,ze;ye=0;for(ze=xe.length;ye<ze;++ye)xe[ye]=5;we=(0,X.Huffman.buildHuffmanTable)(xe);ve.FixedDistanceTable=we;\\nX.RawInflate.prototype.parseBlock=function(){let a=this.readBits(3);a&1&&(this.bfinal=!0);a>>>=1;switch(a){case 0:this.parseUncompressedBlock();break;case 1:this.parseFixedHuffmanBlock();break;case 2:this.parseDynamicHuffmanBlock();break;default:throw Error(\\\"unknown BTYPE: \\\"+a);}};\\nX.RawInflate.prototype.readBits=function(a){let b=this.bitsbuf,d=this.bitsbuflen;const e=this.input;let f=this.ip;if(f+(a-d+7>>3)>=e.length)throw Error(\\\"input buffer is broken\\\");for(;d<a;)b|=e[f++]<<d,d+=8;this.bitsbuf=b>>>a;this.bitsbuflen=d-a;this.ip=f;return b&(1<<a)-1};\\nX.RawInflate.prototype.readCodeByTable=function(a){let b=this.bitsbuf,d=this.bitsbuflen;var e=this.input;let f=this.ip;var g=e.length;const h=a[0];for(a=a[1];d<a&&!(f>=g);)b|=e[f++]<<d,d+=8;e=h[b&(1<<a)-1];g=e>>>16;if(g>d)throw Error(\\\"invalid code length: \\\"+g);this.bitsbuf=b>>g;this.bitsbuflen=d-g;this.ip=f;return e&65535};\\nX.RawInflate.prototype.parseUncompressedBlock=function(){const a=this.input;let b=this.ip,d=this.output,e=this.op;var f=a.length;let g;const h=d.length;this.bitsbuflen=this.bitsbuf=0;if(b+1>=f)throw Error(\\\"invalid uncompressed block header: LEN\\\");g=a[b++]|a[b++]<<8;if(b+1>=f)throw Error(\\\"invalid uncompressed block header: NLEN\\\");f=a[b++]|a[b++]<<8;if(g===~f)throw Error(\\\"invalid uncompressed block header: length verify\\\");if(b+g>a.length)throw Error(\\\"input buffer is broken\\\");switch(this.bufferType){case X.RawInflate.BufferType.BLOCK:for(;e+\\ng>d.length;)f=h-e,g-=f,d.set(a.subarray(b,b+f),e),e+=f,b+=f,this.op=e,d=this.expandBufferBlock(),e=this.op;break;case X.RawInflate.BufferType.ADAPTIVE:for(;e+g>d.length;)d=this.expandBufferAdaptive({fixRatio:2});break;default:throw Error(\\\"invalid inflate mode\\\");}d.set(a.subarray(b,b+g),e);this.ip=b+g;this.op=e+g;this.output=d};\\nX.RawInflate.prototype.parseFixedHuffmanBlock=function(){switch(this.bufferType){case X.RawInflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(X.RawInflate.FixedLiteralLengthTable,X.RawInflate.FixedDistanceTable);break;case X.RawInflate.BufferType.BLOCK:this.decodeHuffmanBlock(X.RawInflate.FixedLiteralLengthTable,X.RawInflate.FixedDistanceTable);break;default:throw Error(\\\"invalid inflate mode\\\");}};\\nX.RawInflate.prototype.parseDynamicHuffmanBlock=function(){var a=this.readBits(5)+257,b=this.readBits(5)+1,d=this.readBits(4)+4,e=new Uint8Array(X.RawInflate.Order.length);let f;for(f=0;f<d;++f)e[X.RawInflate.Order[f]]=this.readBits(3);e=(0,X.Huffman.buildHuffmanTable)(e);d=new Uint8Array(a+b);f=0;for(b=a+b;f<b;){var g=this.readCodeByTable(e);switch(g){case 16:for(g=3+this.readBits(2);g--;)d[f++]=h;break;case 17:for(g=3+this.readBits(3);g--;)d[f++]=0;var h=0;break;case 18:for(g=11+this.readBits(7);g--;)d[f++]=\\n0;h=0;break;default:h=d[f++]=g}}h=(0,X.Huffman.buildHuffmanTable)(d.subarray(0,a));a=(0,X.Huffman.buildHuffmanTable)(d.subarray(a));switch(this.bufferType){case X.RawInflate.BufferType.ADAPTIVE:this.decodeHuffmanAdaptive(h,a);break;case X.RawInflate.BufferType.BLOCK:this.decodeHuffmanBlock(h,a);break;default:throw Error(\\\"invalid inflate mode\\\");}};\\nX.RawInflate.prototype.decodeHuffmanBlock=function(a,b){let d=this.output,e=this.op;this.currentLitlenTable=a;const f=d.length-X.RawInflate.MaxCopyLength;var g;let h,k;const l=X.RawInflate.LengthCodeTable,m=X.RawInflate.LengthExtraTable,q=X.RawInflate.DistCodeTable,u=X.RawInflate.DistExtraTable;for(;256!==(g=this.readCodeByTable(a));)if(256>g)e>=f&&(this.op=e,d=this.expandBufferBlock(),e=this.op),d[e++]=g;else for(g-=257,k=l[g],0<m[g]&&(k+=this.readBits(m[g])),g=this.readCodeByTable(b),h=q[g],0<u[g]&&\\n(h+=this.readBits(u[g])),e>=f&&(this.op=e,d=this.expandBufferBlock(),e=this.op);k--;)d[e]=d[e++-h];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=e};\\nX.RawInflate.prototype.decodeHuffmanAdaptive=function(a,b){let d=this.output,e=this.op;this.currentLitlenTable=a;let f=d.length;var g;let h,k;const l=X.RawInflate.LengthCodeTable,m=X.RawInflate.LengthExtraTable,q=X.RawInflate.DistCodeTable,u=X.RawInflate.DistExtraTable;for(;256!==(g=this.readCodeByTable(a));)if(256>g)e>=f&&(d=this.expandBufferAdaptive(),f=d.length),d[e++]=g;else for(g-=257,k=l[g],0<m[g]&&(k+=this.readBits(m[g])),g=this.readCodeByTable(b),h=q[g],0<u[g]&&(h+=this.readBits(u[g])),e+\\nk>f&&(d=this.expandBufferAdaptive(),f=d.length);k--;)d[e]=d[e++-h];for(;8<=this.bitsbuflen;)this.bitsbuflen-=8,this.ip--;this.op=e};X.RawInflate.prototype.expandBufferBlock=function(){const a=new Uint8Array(this.op-X.RawInflate.MaxBackwardLength),b=this.op-X.RawInflate.MaxBackwardLength,d=this.output;a.set(d.subarray(X.RawInflate.MaxBackwardLength,a.length));this.blocks.push(a);this.totalpos+=a.length;d.set(d.subarray(b,b+X.RawInflate.MaxBackwardLength));this.op=X.RawInflate.MaxBackwardLength;return d};\\nX.RawInflate.prototype.expandBufferAdaptive=function(a){let b=Math.trunc(this.input.length/this.ip+1);const d=this.input,e=this.output;a&&(\\\"number\\\"===typeof a.fixRatio&&(b=a.fixRatio),\\\"number\\\"===typeof a.addRatio&&(b+=a.addRatio));2>b?(a=(d.length-this.ip)/this.currentLitlenTable[2],a=Math.trunc(a/2*258),a=a<e.length?e.length+a:e.length<<1):a=e.length*b;a=new Uint8Array(a);a.set(e);return this.output=a};\\nX.RawInflate.prototype.concatBufferBlock=function(){let a=0;const b=this.output,d=this.blocks;let e;const f=new Uint8Array(this.totalpos+(this.op-X.RawInflate.MaxBackwardLength));let g,h,k,l;if(0===d.length)return this.output.subarray(X.RawInflate.MaxBackwardLength,this.op);g=0;for(h=d.length;g<h;++g)for(e=d[g],k=0,l=e.length;k<l;++k)f[a++]=e[k];g=X.RawInflate.MaxBackwardLength;for(h=this.op;g<h;++g)f[a++]=b[g];this.blocks=[];return this.buffer=f};\\nX.RawInflate.prototype.concatBufferDynamic=function(){let a;const b=this.op;this.resize?(a=new Uint8Array(b),a.set(this.output.subarray(0,b))):a=this.output.subarray(0,b);return this.buffer=a};X.Inflate=function(a,b){this.input=a;this.ip=0;if(b||!(b={}))b.index&&(this.ip=b.index),b.verify&&(this.verify=b.verify);const d=a[this.ip++],e=a[this.ip++];switch(d&15){case X.CompressionMethod.DEFLATE:this.method=X.CompressionMethod.DEFLATE;break;default:throw Error(\\\"unsupported compression method\\\");}if(0!==((d<<8)+e)%31)throw Error(\\\"invalid fcheck flag:\\\"+((d<<8)+e)%31);if(e&32)throw Error(\\\"fdict flag is not supported\\\");this.rawinflate=new X.RawInflate(a,{index:this.ip,bufferSize:b.bufferSize,bufferType:b.bufferType,\\nresize:b.resize})};X.Inflate.BufferType=X.RawInflate.BufferType;X.Inflate.prototype.decompress=function(){var a=this.input;const b=this.rawinflate.decompress();this.ip=this.rawinflate.ip;if(this.verify&&(a=(a[this.ip++]<<24|a[this.ip++]<<16|a[this.ip++]<<8|a[this.ip++])>>>0,a!==X.Adler32(b)))throw Error(\\\"invalid adler-32 checksum\\\");return b};const Ae=({memory:a,messagePort:b,streamBuffer:d})=>function(e,f,g,h){if(a){e=new Uint8Array(a.buffer,h,g);e=n.decode(e);var k=/\\\\n$/g.test(e);f=/^\\\\n/g.test(e);var l=e.split(\\\"\\\\n\\\").filter(q=>0<q.length),m=[];if(0===l.length&&k||f)m.push(d.join(\\\"\\\")),ke(d);l.forEach((q,u)=>{u+1===l.length?k?0===u?(m.push(d.join(\\\"\\\")+q),ke(d)):m.push(q):d.push(q):0===u?(m.push(d.join(\\\"\\\")+q),ke(d)):m.push(q)});m.forEach(q=>{q.replace(/(\\\\r\\\\n|\\\\n|\\\\r)/gm,\\\"\\\")&&b.post({log:q})})}},Be=a=>{if(a&&\\\"object\\\"===typeof a&&\\\"object\\\"===\\ntypeof a.exports){if(a.exports.__wasm_call_ctors){if(a.exports.csoundModuleCreate||a.exports.csound_opcode_init||a.exports.csound_fgen_init)return!0;console.error(a.exports,\\\"A csound plugin turns out to be neither a plugin, opcode or module.\\\\nPerhaps csdl.h or module.h wasn't imported correctly?\\\");return!1}console.error(\\\"A csound plugin didn't export __wasm_call_ctors.\\\\nPlease re-run wasm-ld with either --export-all or include --export=__wasm_call_ctors\\\");return!1}console.error(\\\"Error instantiating a csound plugin, instance and/or export is missing!\\\");\\nreturn!1},Ce=a=>{function b(){let m=0,q=1;for(;;){const u=a[d++];m+=(u&127)*q;q*=128;if(!(u&128))break}return m}1836278016!==(new Uint32Array((new Uint8Array(a.subarray(0,24))).buffer))[0]&&console.error(\\\"Wasm magic number is missing!\\\");if(0!==a[8])return pe(\\\"Dylink section wasn't found in wasm binary, assuming static wasm.\\\"),\\\"static\\\";let d=9;const e=b();d++;(0,c.asserts.assert)(a[d]===\\\"d\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"y\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"l\\\".codePointAt(0));\\nd++;(0,c.asserts.assert)(a[d]===\\\"i\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"n\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"k\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\".\\\".codePointAt(0));d++;(0,c.asserts.assert)(a[d]===\\\"0\\\".codePointAt(0));d+=3;const f=b(),g=b(),h=b(),k=b(),l=b();return{sectionSize:e,memorySize:f,memoryAlign:g,neededDynlibsCount:l,tableSize:h,tableAlign:k}},De=async({wasmBytes:a,wasi:b,messagePort:d})=>{const e=await WebAssembly.compile(a);a=new WebAssembly.Memory({initial:16384});\\nconst f=b.getImports(e);f.env=f.env||{};f.env.csoundLoadModules=()=>0;f.env.memory=a;f.env.csoundWasiJsMessageCallback=Ae({memory:f.env.memory,streamBuffer:[],messagePort:d});d=await WebAssembly.instantiate(e,f);b.setMemory(a);b.start(d);d.exports.__wasi_js_csoundSetMessageStringCallback();return[d,b]};\\nasync function Ee({wasmDataURI:a,withPlugins:b=[],messagePort:d}){var e={};const f=new V({preopens:{\\\"/\\\":\\\"/\\\"}});a=new Uint8Array(a);a=(new X.Inflate(a)).decompress();var g=Ce(a);if(\\\"static\\\"===g)return await De({messagePort:d,wasmBytes:a,wasmFs:e,wasi:f});const {memorySize:h,memoryAlign:k,tableSize:l}=g;b=await b.reduce(async(B,y)=>{B=await B;let L,G;try{L=new Uint8Array(y),G=Ce(L)}catch(P){console.error(\\\"Error in plugin\\\",P)}G&&B.push({headerData:G,wasmPluginBytes:L});return B},[]);e=Math.ceil((h+k)/\\n65536);g=Math.ceil(b.reduce((B,{headerData:y})=>\\\"static\\\"===y?0:B+(y.memorySize+k),0)/65536);g=e+g+2048;const m=new WebAssembly.Memory({initial:g,maximum:16384}),q=new WebAssembly.Table({initial:l+1,element:\\\"anyfunc\\\"});f.setMemory(m);const u=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},65536*g);g=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},65536*g);const r=new WebAssembly.Global({value:\\\"i32\\\",mutable:!1},2048),x=new WebAssembly.Global({value:\\\"i32\\\",mutable:!1},1),Q=new WebAssembly.Global({value:\\\"i32\\\",\\nmutable:!0},0);a=await WebAssembly.compile(a);const A=f.getImports(a);let D=[],W=e;A.env=A.env||{};A.env.memory=m;A.env.__indirect_function_table=q;A.env.__stack_pointer=u;A.env.__memory_base=r;A.env.__table_base=x;A.env.csoundLoadModules=B=>{D.forEach(y=>{if(\\\"undefined\\\"!==typeof O){var L=O;if(y.exports.csoundModuleInit){var G=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),P=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),H=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0);const ba=new WebAssembly.Global({value:\\\"i32\\\",\\nmutable:!0},0);let v=q.length;\\\"function\\\"===typeof y.exports.csoundModuleCreate&&(q.grow(1),G.value=v,q.set(v,y.exports.csoundModuleCreate),v+=1);\\\"function\\\"===typeof y.exports.csoundModuleInit&&(q.grow(1),P.value=v,q.set(v,y.exports.csoundModuleInit),v+=1);\\\"function\\\"===typeof y.exports.csoundModuleDestroy&&(q.grow(1),H.value=v,q.set(v,y.exports.csoundModuleDestroy),v+=1);\\\"function\\\"===typeof y.exports.csoundModuleErrorCodeToString&&(q.grow(1),ba.value=v,q.set(v,y.exports.csoundModuleErrorCodeToString));\\nL.exports.csoundWasiLoadPlugin(B,G,P,H,ba)}else y.exports.csound_opcode_init||y.exports.csound_fgen_init?(G=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),P=new WebAssembly.Global({value:\\\"i32\\\",mutable:!0},0),H=q.length,\\\"function\\\"===typeof y.exports.csound_opcode_init&&(G.value=H,q.grow(1),q.set(H,y.exports.csound_opcode_init),H+=1),\\\"function\\\"===typeof y.exports.csound_fgen_init&&(P.value=H,q.grow(1),q.set(H,y.exports.csound_fgen_init)),L.exports.csoundWasiLoadOpcodeLibrary(B,P,G)):console.error(\\\"Plugin doesn't export nececcary functions to quality as csound plugin.\\\")}else console.error(\\\"csound-wasm internal: timing problem detected!\\\")});\\nreturn 0};A.env._ZTH5errno=function(){};A.env.csoundWasiJsMessageCallback=Ae({memory:m,messagePort:d,streamBuffer:[]});A.env.printDebugCallback=(B,y)=>{B=new Uint8Array(m.buffer,B,y);B=n.decode(B);console.log(B)};A[\\\"GOT.mem\\\"]=A[\\\"GOT.mem\\\"]||{};A[\\\"GOT.mem\\\"].__heap_base=g;A[\\\"GOT.func\\\"]=A[\\\"GOT.func\\\"]||{};const O=await WebAssembly.instantiate(a,A);d=Object.assign({},O.exports);a={};a.exports=Object.assign(d,{memory:m});D=await b.reduce(async(B,{headerData:y,wasmPluginBytes:L})=>{B=await B;try{const {memorySize:G,\\nmemoryAlign:P,tableSize:H}=y,ba=await WebAssembly.compile(L),v=f.getImports(ba),Y=new WebAssembly.Global({value:\\\"i32\\\",mutable:!1},65536*W);q.grow(H);v.env=Object.assign({},v.env);v.env.memory=m;v.env.__indirect_function_table=q;v.env.__memory_base=Y;v.env.__stack_pointer=u;v.env.__table_base=x;v.env.csoundLoadModules=Q;delete v.env.csoundWasiJsMessageCallback;W+=Math.ceil((G+P)/65536);const M=await WebAssembly.instantiate(ba,v);Be(M)&&(M.exports.__wasm_call_ctors(),B.push(M))}catch(G){console.error(\\\"Error while compiling csound-plugin\\\",\\nG)}return B},[]);f.start(a);a.exports.__wasi_js_csoundSetMessageStringCallback();return[a,f]};const Fe=(a,b,d,e,f)=>g=>{const {csound:h}=g,k=1===b.csoundShouldDaemonize(h);k&&(b.csoundSetOption(h,\\\"--daemon\\\"),b.csoundSetOption(h,\\\"-odac\\\"));const l=b.csoundStart(h),m=b.csoundGetOutputName(h)||\\\"test.wav\\\";oe(`handleCsoundStart: actual csoundStart result ${l}, outputName: ${m}`)();0!==l&&a.post(`error: csoundStart failed while trying to render ${m},`+\\\" look out for errors in options and syntax\\\");setTimeout(()=>{const q=b._isRequestingRtMidiInput(h);if(k||q||m.includes(\\\"dac\\\"))e(g);else if(a.broadcastPlayState(\\\"renderStarted\\\"),\\nf)f(g);else for(;0===b.csoundPerformKsmps(h););},0);return l};const Ge=[0,4096,0,0,0,0,-1,-1,-1,-1,0,128,0,0,0,0,0,0,0,0],Z={CSOUND_LOCK:0,FRAMES_REQUESTED:1,IS_PERFORMING:2,IS_RENDERING:3,IS_PAUSED:4,STOP:5,SAMPLE_RATE:6,KSMPS:7,NCHNLS:8,NCHNLS_I:9,IS_REQUESTING_MIC:10,BUFFER_LEN:11,OUTPUT_READ_INDEX:12,OUTPUT_WRITE_INDEX:13,AVAIL_IN_BUFS:14,AVAIL_OUT_BUFS:15,IS_REQUESTING_RTMIDI:16,RTMIDI_INDEX:17,AVAIL_RTMIDI_EVENTS:18,HAS_PENDING_CALLBACKS:19};let He,Ie,Je;\\nconst Ke=({libraryCsound:a,callbacksRequest:b,releaseStop:d,releasePause:e,releaseResumed:f,wasm:g,workerMessagePort:h})=>async({audioStateBuffer:k,audioStreamIn:l,audioStreamOut:m,midiBuffer:q,csound:u})=>{const r=new Int32Array(k);Ge.forEach((qa,vb)=>{Atomics.store(r,vb,qa)});k=a._isRequestingRtMidiInput(u);var x=0===Atomics.load(r,Z.NCHNLS_I)&&a.csoundGetInputName(u).includes(\\\"adc\\\"),Q=Atomics.load(r,Z.NCHNLS),A=Atomics.load(r,Z.NCHNLS_I),D=Atomics.load(r,Z.SAMPLE_RATE);-1<Q&&a.csoundSetOption(u,`--nchnls=${Q}`);\\n-1<A&&a.csoundSetOption(u,`--nchnls_i=${A}`);-1<D&&a.csoundSetOption(u,`--sr=${D}`);const W=a.csoundGetNchnls(u),O=A||x?a.csoundGetNchnlsInput(u):0,B=Atomics.load(r,Z.SAMPLE_RATE)||a.csoundGetSr(u);Atomics.store(r,Z.NCHNLS,W);Atomics.store(r,Z.NCHNLS_I,O);Atomics.store(r,Z.IS_REQUESTING_MIC,x?1:0);Atomics.store(r,Z.SAMPLE_RATE,a.csoundGetSr(u));Atomics.store(r,Z.IS_REQUESTING_RTMIDI,k);x=a.csoundGetKsmps(u);Atomics.store(r,Z.KSMPS,x);const y=a.csoundGet0dBFS(u);Q=[];A=[];for(D=0;D<W;++D)Q.push(new Float64Array(m,\\n16384*D,16384));for(m=0;m<O;++m)A.push(new Float64Array(l,16384*m,16384));h.broadcastPlayState(\\\"realtimePerformanceStarted\\\");Atomics.store(r,Z.IS_PERFORMING,1);ne(\\\"Atomic.wait started (thread is now locked)\\\\n\\\")();l=!0;let L=0,G=0,P=0,H=0,ba;m=(qa=!1)=>1===Atomics.load(r,Z.STOP)||1!==Atomics.load(r,Z.IS_PERFORMING)||0!==L||qa?(0===L&&(ne(\\\"calling csoundStop and one performKsmps to trigger endof logs\\\")(),a.csoundStop(u),a.csoundPerformKsmps(u)),ne(\\\"triggering realtimePerformanceEnded event\\\")(),h.broadcastPlayState(\\\"realtimePerformanceEnded\\\"),\\nne(\\\"End of realtimePerformance loop!\\\")(),d(),!0):!1;for(D=!0;!D||(ba=Atomics.wait(r,Z.CSOUND_LOCK,1,1E4));){if(\\\"timed-out\\\"===ba){m(!0);break}l&&(l=!1,await new Promise(E=>{Je=E;h.broadcastSabUnlocked()}),ne(\\\"Atomic.wait unlocked, performance started\\\")());1===Atomics.load(r,Z.IS_PAUSED)&&(await new Promise(E=>setTimeout(E,0)),e(),await new Promise(E=>setTimeout(E,0)),Atomics.wait(r,Z.IS_PAUSED,0),await new Promise(E=>setTimeout(E,0)),f(),await new Promise(E=>setTimeout(E,0)));if(m())break;if(k){var v=\\nAtomics.load(r,Z.AVAIL_RTMIDI_EVENTS);if(0<v){var Y=Atomics.load(r,Z.RTMIDI_INDEX),M=Y;for(let E=0;E<v;E++){M=(Y+3*E)%1024;const za=Atomics.load(q,M),Le=Atomics.load(q,M+1),Me=Atomics.load(q,M+2);a.csoundPushMidiMessage(u,za,Le,Me)}Atomics.store(r,Z.RTMIDI_INDEX,(M+1)%1024);Atomics.sub(r,Z.AVAIL_RTMIDI_EVENTS,v)}}const qa=Atomics.load(r,Z.BUFFER_LEN);v=Atomics.load(r,Z.AVAIL_IN_BUFS)>=qa;Y=a.csoundGetSpin(u);M=a.csoundGetSpout(u);const vb=v&&new Float64Array(g.wasi.memory.buffer,Y,x*O),Ne=new Float64Array(g.wasi.memory.buffer,\\nM,x*W);Y=Atomics.load(r,Z.FRAMES_REQUESTED);for(M=0;M<Y;M++){if(0===G)if(0===L)L=a.csoundPerformKsmps(u),!D&&Atomics.add(r,Z.AVAIL_OUT_BUFS,x),D=!1;else if(0!==L){Atomics.store(r,Z.IS_PERFORMING,0);m(!0);return}Q.forEach((E,za)=>{E[H]=(Ne[G*W+za]||0)/y});v&&(A.forEach((E,za)=>{vb[G*O+za]=(E[P]||0)*y}),P=v&&(P+1)%16384);H=(H+1)%16384;G=(G+1)%x}v&&Atomics.sub(r,Z.AVAIL_IN_BUFS,Y);1===Atomics.compareExchange(r,Z.HAS_PENDING_CALLBACKS,1,0)&&await new Promise(E=>{Ie=E;b()});if(m())break;v=Atomics.load(r,\\nZ.OUTPUT_READ_INDEX);v=Math.max(2048-(H<v?H+16384-v:H-v),0);Atomics.store(r,Z.FRAMES_REQUESTED,v);0===v&&await new Promise(E=>setTimeout(E,qa/B*1E3))}},Oe=({port:a})=>{const b=new ua;b.post=d=>a.postMessage({log:d});b.broadcastPlayState=d=>a.postMessage({playStateChange:d});b.broadcastSabUnlocked=()=>a.postMessage({sabWorker:\\\"unlocked\\\"});b.ready=!0;return b},Pe=({port:a})=>{a.addEventListener(\\\"message\\\",b=>{if(b.data&&b.data.unlock)b=Je,Je=void 0,b&&b();else{b=b.data;var d=b.reduce((e,{id:f,argumentz:g,\\napiKey:h})=>{try{const k=He.get(h),l=k&&k.apply({},g||[]);e.push({id:f,answer:l})}catch(k){throw Error(k);}return e},[]);a.postMessage(d);d=Ie;Ie=void 0;d&&d(b)}});a.start()},Qe=({libraryCsound:a,callbacksRequest:b,releaseStop:d,releasePause:e,releaseResumed:f,workerMessagePort:g})=>async({audioStateBuffer:h,csound:k})=>{h=new Int32Array(h);Atomics.store(h,Z.IS_RENDERING,1);for(g.broadcastSabUnlocked();1!==Atomics.load(h,Z.STOP)&&0===a.csoundPerformKsmps(k);)1===Atomics.load(h,Z.IS_PAUSED)&&(e(),\\nAtomics.wait(h,Z.IS_PAUSED,0),f()),1===Atomics.compareExchange(h,Z.HAS_PENDING_CALLBACKS,1,0)&&await new Promise(l=>{Ie=l;b()});Atomics.store(h,Z.IS_RENDERING,0);g.broadcastPlayState(\\\"renderEnded\\\");d()},Re={initialize:async({wasmDataURI:a,withPlugins:b=[],messagePort:d,callbackPort:e})=>{ne(\\\"initializing SABWorker and WASM\\\")();const f=Oe({port:d}),g=()=>e.postMessage(\\\"poll\\\"),h=()=>e.postMessage(\\\"releaseStop\\\"),k=()=>e.postMessage(\\\"releasePause\\\"),l=()=>e.postMessage(\\\"releaseResumed\\\");Pe({port:e});const [m,\\nq]=await Ee({wasmDataURI:a,withPlugins:b,messagePort:f});m.wasi=q;const u=zc(m);a=Pb(qb(\\\"csoundStart\\\",(r,x)=>Fe(f,u,q,Ke({libraryCsound:u,callbacksRequest:g,wasm:m,workerMessagePort:f,releaseStop:h,releasePause:k,releaseResumed:l}),Qe({libraryCsound:u,callbacksRequest:g,workerMessagePort:f,wasi:q,releaseStop:h,releasePause:k,releaseResumed:l}))(x)),qb(\\\"wasm\\\",m))(u);He=new Map(Object.entries(a));u.csoundInitialize(0);return u.csoundCreate()},callUncloned:async(a,b)=>(a=He.get(a))&&a.apply({},b||[])};\\nia({initialize:Re.initialize,callUncloned:Re.callUncloned});}).call(this);\\n//# sourceMappingURL=__compiled.sab.worker.js.map\\n\"]));\n         })","import * as Comlink from \"comlink/dist/esm/comlink.mjs\";\nimport { api as API } from \"../libcsound\";\nimport { messageEventHandler, IPCMessagePorts } from \"./messages.main\";\nimport {\n  AUDIO_STATE,\n  MAX_CHANNELS,\n  RING_BUFFER_SIZE,\n  MIDI_BUFFER_PAYLOAD_SIZE,\n  MIDI_BUFFER_SIZE,\n  initialSharedState,\n} from \"../constants\";\nimport { logSABMain as log } from \"../logger\";\nimport { isEmpty } from \"rambda/dist/rambda.esm.js\";\nimport { csoundApiRename, fetchPlugins, makeProxyCallback, stopableStates } from \"../utils\";\nimport { EventPromises } from \"../utils/event-promises\";\nimport { PublicEventAPI } from \"../events\";\n\nconst SABWorker = goog.require(\"worker.sab\");\n\nclass SharedArrayBufferMainThread {\n  constructor({\n    audioContext,\n    audioWorker,\n    audioContextIsProvided,\n    inputChannelCount,\n    outputChannelCount,\n  }) {\n    this.hasSharedArrayBuffer = true;\n    this.ipcMessagePorts = new IPCMessagePorts();\n    this.eventPromises = new EventPromises();\n    this.publicEvents = new PublicEventAPI(this);\n    audioWorker.ipcMessagePorts = this.ipcMessagePorts;\n\n    this.audioContextIsProvided = audioContextIsProvided;\n    this.audioWorker = audioWorker;\n    this.audioWorker.onPlayStateChange = this.audioWorker.onPlayStateChange.bind(audioWorker);\n    this.csoundInstance = undefined;\n    this.currentPlayState = undefined;\n    this.currentDerivedPlayState = \"stop\";\n    this.exportApi = {};\n\n    this.callbackId = 0;\n    this.callbackBuffer = {};\n\n    this.audioStateBuffer = new SharedArrayBuffer(\n      initialSharedState.length * Int32Array.BYTES_PER_ELEMENT,\n    );\n\n    this.audioStatePointer = new Int32Array(this.audioStateBuffer);\n\n    if (audioContextIsProvided) {\n      Atomics.store(this.audioStatePointer, AUDIO_STATE.SAMPLE_RATE, audioContext.sampleRate);\n    }\n\n    if (inputChannelCount) {\n      Atomics.store(this.audioStatePointer, AUDIO_STATE.NCHNLS_I, inputChannelCount);\n    }\n\n    if (outputChannelCount) {\n      Atomics.store(this.audioStatePointer, AUDIO_STATE.NCHNLS, outputChannelCount);\n    }\n\n    this.audioStreamIn = new SharedArrayBuffer(\n      MAX_CHANNELS * RING_BUFFER_SIZE * Float64Array.BYTES_PER_ELEMENT,\n    );\n    this.audioStreamOut = new SharedArrayBuffer(\n      MAX_CHANNELS * RING_BUFFER_SIZE * Float64Array.BYTES_PER_ELEMENT,\n    );\n\n    this.midiBufferSAB = new SharedArrayBuffer(\n      MIDI_BUFFER_SIZE * MIDI_BUFFER_PAYLOAD_SIZE * Int32Array.BYTES_PER_ELEMENT,\n    );\n\n    this.midiBuffer = new Int32Array(this.midiBufferSAB);\n\n    this.onPlayStateChange = this.onPlayStateChange.bind(this);\n    this.prepareRealtimePerformance = this.prepareRealtimePerformance.bind(this);\n\n    log(`SharedArrayBufferMainThread got constructed`)();\n  }\n\n  async terminateInstance() {\n    if (this.csoundWorker) {\n      this.csoundWorker.terminate();\n      delete this.csoundWorker;\n    }\n    if (this.audioWorker && this.audioWorker.terminateInstance) {\n      await this.audioWorker.terminateInstance();\n      delete this.audioWorker.terminateInstance;\n    }\n    if (this.proxyPort) {\n      this.proxyPort[Comlink.releaseProxy]();\n      delete this.proxyPort;\n    }\n    if (this.publicEvents) {\n      this.publicEvents.terminateInstance();\n    }\n    Object.keys(this.exportApi).forEach((key) => delete this.exportApi[key]);\n    Object.keys(this).forEach((key) => delete this[key]);\n  }\n\n  get api() {\n    return this.exportApi;\n  }\n\n  handleMidiInput({ data: [status, data1, data2] }) {\n    const currentQueueLength = Atomics.load(\n      this.audioStatePointer,\n      AUDIO_STATE.AVAIL_RTMIDI_EVENTS,\n    );\n    const rtmidiBufferIndex = Atomics.load(this.audioStatePointer, AUDIO_STATE.RTMIDI_INDEX);\n    const nextIndex =\n      (currentQueueLength * MIDI_BUFFER_PAYLOAD_SIZE + rtmidiBufferIndex) % MIDI_BUFFER_SIZE;\n\n    Atomics.store(this.midiBuffer, nextIndex, status);\n    Atomics.store(this.midiBuffer, nextIndex + 1, data1);\n    Atomics.store(this.midiBuffer, nextIndex + 2, data2);\n    Atomics.add(this.audioStatePointer, AUDIO_STATE.AVAIL_RTMIDI_EVENTS, 1);\n  }\n\n  async csoundPause() {\n    if (this.eventPromises.isWaiting(\"pause\")) {\n      return -1;\n    } else {\n      this.eventPromises.createPausePromise();\n\n      Atomics.store(this.audioStatePointer, AUDIO_STATE.IS_PAUSED, 1);\n      await this.eventPromises.waitForPause();\n      this.onPlayStateChange(\"realtimePerformancePaused\");\n      return 0;\n    }\n  }\n\n  async csoundResume() {\n    if (\n      Atomics.load(this.audioStatePointer, AUDIO_STATE.IS_PAUSED) === 1 &&\n      Atomics.load(this.audioStatePointer, AUDIO_STATE.STOP) !== 1 &&\n      Atomics.load(this.audioStatePointer, AUDIO_STATE.IS_PERFORMING) === 1\n    ) {\n      Atomics.store(this.audioStatePointer, AUDIO_STATE.IS_PAUSED, 0);\n      Atomics.notify(this.audioStatePointer, AUDIO_STATE.IS_PAUSED);\n      this.onPlayStateChange(\"realtimePerformanceResumed\");\n    }\n  }\n\n  async onPlayStateChange(newPlayState) {\n    if (typeof this === \"undefined\") {\n      console.log(\"Failed to announce playstatechange\", newPlayState);\n      return;\n    }\n    this.currentPlayState = newPlayState;\n    if (!this.publicEvents || !newPlayState) {\n      // prevent late timers from calling terminated fn\n      return;\n    }\n    switch (newPlayState) {\n      case \"realtimePerformanceStarted\": {\n        log(\n          `event: realtimePerformanceStarted received,` +\n            ` proceeding to call prepareRealtimePerformance`,\n        )();\n        try {\n          await this.prepareRealtimePerformance();\n        } catch (error) {\n          console.error(error);\n        }\n        break;\n      }\n      case \"realtimePerformanceEnded\": {\n        this.eventPromises.createStopPromise();\n\n        // flush out events sent during the time which the worker was stopping\n        Object.values(this.callbackBuffer).forEach(({ argumentz, apiKey, resolveCallback }) =>\n          this.proxyPort.callUncloned(apiKey, argumentz).then(resolveCallback),\n        );\n        this.callbackBuffer = {};\n        log(`event: realtimePerformanceEnded received, beginning cleanup`)();\n        // re-initialize SAB\n        initialSharedState.forEach((value, index) => {\n          Atomics.store(this.audioStatePointer, index, value);\n        });\n        break;\n      }\n      case \"renderStarted\": {\n        this.publicEvents.triggerRenderStarted(this);\n        this.eventPromises.releaseStartPromise();\n        break;\n      }\n      case \"renderEnded\": {\n        log(`event: renderEnded received, beginning cleanup`)();\n        this.publicEvents.triggerRenderEnded(this);\n        this.eventPromises && this.eventPromises.releaseStopPromise();\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n\n    // forward the message from worker to the audioWorker\n    try {\n      await this.audioWorker.onPlayStateChange(newPlayState);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async prepareRealtimePerformance() {\n    log(`prepareRealtimePerformance`)();\n    const outputsCount = Atomics.load(this.audioStatePointer, AUDIO_STATE.NCHNLS);\n    const inputCount = Atomics.load(this.audioStatePointer, AUDIO_STATE.NCHNLS_I);\n\n    this.audioWorker.isRequestingInput = Atomics.load(\n      this.audioStatePointer,\n      AUDIO_STATE.IS_REQUESTING_MIC,\n    );\n    this.audioWorker.isRequestingMidi = Atomics.load(\n      this.audioStatePointer,\n      AUDIO_STATE.IS_REQUESTING_RTMIDI,\n    );\n\n    const ksmps = Atomics.load(this.audioStatePointer, AUDIO_STATE.KSMPS);\n    const sampleRate = Atomics.load(this.audioStatePointer, AUDIO_STATE.SAMPLE_RATE);\n\n    this.audioWorker.ksmps = ksmps;\n    this.audioWorker.sampleRate = sampleRate;\n    this.audioWorker.inputCount = inputCount;\n    this.audioWorker.outputsCount = outputsCount;\n  }\n\n  async initialize({ wasmDataURI, withPlugins }) {\n    if (withPlugins && !isEmpty(withPlugins)) {\n      withPlugins = await fetchPlugins(withPlugins);\n    }\n\n    log(`initialization: instantiate the SABWorker Thread`)();\n    // clearFsLastmods();\n    const csoundWorker = new Worker(SABWorker());\n    this.csoundWorker = csoundWorker;\n    const audioStateBuffer = this.audioStateBuffer;\n    const audioStatePointer = this.audioStatePointer;\n    const audioStreamIn = this.audioStreamIn;\n    const audioStreamOut = this.audioStreamOut;\n    const midiBuffer = this.midiBuffer;\n\n    log(`providing the audioWorker a pointer to SABMain's instance`)();\n    this.audioWorker.csoundWorkerMain = this;\n\n    // both audio worker and csound worker use 1 handler\n    // simplifies flow of data (csound main.worker is always first to receive)\n    log(`adding message eventListeners for mainMessagePort and mainMessagePortAudio`)();\n    this.ipcMessagePorts.mainMessagePort.addEventListener(\"message\", messageEventHandler(this));\n    this.ipcMessagePorts.mainMessagePort.start();\n    this.ipcMessagePorts.mainMessagePortAudio.addEventListener(\n      \"message\",\n      messageEventHandler(this),\n    );\n    this.ipcMessagePorts.mainMessagePortAudio.start();\n    log(`(postMessage) making a message channel from SABMain to SABWorker via workerMessagePort`)();\n\n    this.ipcMessagePorts.sabMainCallbackReply.addEventListener(\"message\", (event) => {\n      switch (event.data) {\n        case \"poll\": {\n          this.ipcMessagePorts &&\n            this.ipcMessagePorts.sabMainCallbackReply.postMessage(\n              Object.keys(this.callbackBuffer).map((id) => ({\n                id,\n                apiKey: this.callbackBuffer[id].apiKey,\n                argumentz: this.callbackBuffer[id].argumentz,\n              })),\n            );\n          break;\n        }\n        case \"releaseStop\": {\n          this.onPlayStateChange(\n            this.currentPlayState === \"renderStarted\" ? \"renderEnded\" : \"realtimePerformanceEnded\",\n          );\n          this.publicEvents && this.publicEvents.triggerRealtimePerformanceEnded(this);\n          this.eventPromises && this.eventPromises.releaseStopPromise();\n          break;\n        }\n        case \"releasePause\": {\n          this.publicEvents.triggerRealtimePerformancePaused(this);\n          this.eventPromises.releasePausePromise();\n          break;\n        }\n        case \"releaseResumed\": {\n          this.publicEvents.triggerRealtimePerformanceResumed(this);\n          this.eventPromises.releaseResumePromise();\n          break;\n        }\n        default: {\n          event.data.forEach(({ id, answer }) => {\n            this.callbackBuffer[id].resolveCallback(answer);\n            delete this.callbackBuffer[id];\n          });\n        }\n      }\n    });\n    this.ipcMessagePorts.sabMainCallbackReply.start();\n\n    const proxyPort = Comlink.wrap(csoundWorker);\n    const wasmBytes = wasmDataURI();\n    this.proxyPort = proxyPort;\n    const csoundInstance = await proxyPort.initialize(\n      Comlink.transfer(\n        {\n          wasmDataURI: wasmBytes,\n          wasmTransformerDataURI: this.wasmTransformerDataURI,\n          messagePort: this.ipcMessagePorts.workerMessagePort,\n          callbackPort: this.ipcMessagePorts.sabWorkerCallbackReply,\n          withPlugins,\n        },\n        [\n          wasmBytes,\n          this.ipcMessagePorts.workerMessagePort,\n          this.ipcMessagePorts.sabWorkerCallbackReply,\n        ],\n      ),\n    );\n    this.csoundInstance = csoundInstance;\n\n    this.ipcMessagePorts.mainMessagePort.start();\n    this.ipcMessagePorts.mainMessagePortAudio.start();\n\n    log(`A proxy port from SABMain to SABWorker established`)();\n\n    this.exportApi.pause = this.csoundPause.bind(this);\n    this.exportApi.resume = this.csoundResume.bind(this);\n    this.exportApi.terminateInstance = this.terminateInstance.bind(this);\n    // this.exportApi.fs = this.fs;\n\n    this.exportApi.enableAudioInput = () =>\n      console.warn(\n        `enableAudioInput was ignored: please use -iadc option before calling start with useWorker=true`,\n      );\n\n    this.exportApi.getNode = async () => {\n      const maybeNode = this.audioWorker.audioWorkletNode;\n      if (maybeNode) {\n        return maybeNode;\n      } else {\n        const node = await new Promise((resolve) => {\n          this.exportApi.once(\"onAudioNodeCreated\", resolve);\n        });\n        return node;\n      }\n    };\n\n    this.exportApi.getAudioContext = async () => this.audioWorker.audioContext;\n\n    this.exportApi = this.publicEvents.decorateAPI(this.exportApi);\n\n    // the default message listener\n    this.exportApi.addListener(\"message\", console.log);\n\n    for (const apiKey of Object.keys(API)) {\n      const proxyCallback = makeProxyCallback(\n        proxyPort,\n        csoundInstance,\n        apiKey,\n        this.currentPlayState,\n      );\n      const reference = API[apiKey];\n\n      switch (apiKey) {\n        case \"csoundCreate\": {\n          break;\n        }\n        case \"csoundStart\": {\n          const csoundStart = async function () {\n            if (!csoundInstance || typeof csoundInstance !== \"number\") {\n              console.error(\"starting csound failed because csound instance wasn't created\");\n              return -1;\n            }\n            if (this.eventPromises.isWaiting(\"start\")) {\n              return -1;\n            } else {\n              this.eventPromises.createStartPromise();\n\n              const startResult = await proxyCallback({\n                audioStateBuffer,\n                audioStreamIn,\n                audioStreamOut,\n                midiBuffer,\n                csound: csoundInstance,\n              });\n\n              await this.eventPromises.waitForStart();\n\n              this.ipcMessagePorts &&\n                this.ipcMessagePorts.sabMainCallbackReply.postMessage({ unlock: true });\n\n              return startResult;\n            }\n          };\n\n          csoundStart.toString = () => reference.toString();\n          this.exportApi.start = csoundStart.bind(this);\n          break;\n        }\n        case \"csoundStop\": {\n          const csoundStop = async () => {\n            log(\n              [\n                \"Checking if it's safe to call stop:\",\n                stopableStates.has(this.currentPlayState),\n                \"currentPlayState is\",\n                this.currentPlayState,\n              ].join(\"\\n\"),\n            )();\n            if (this.eventPromises.isWaiting(\"stop\")) {\n              log(\"already waiting to stop, doing nothing\")();\n              return -1;\n            } else if (stopableStates.has(this.currentPlayState)) {\n              log(\"Marking SAB's state to STOP\")();\n\n              this.eventPromises.createStopPromise();\n\n              Atomics.store(this.audioStatePointer, AUDIO_STATE.STOP, 1);\n              log(\"Marking that performance is not running anymore (stops the audio too)\")();\n              Atomics.store(this.audioStatePointer, AUDIO_STATE.IS_PERFORMING, 0);\n\n              // A potential case where the thread is locked because of pause\n              if (this.currentPlayState === \"realtimePerformancePaused\") {\n                Atomics.store(this.audioStatePointer, AUDIO_STATE.IS_PAUSED, 0);\n                Atomics.notify(this.audioStatePointer, AUDIO_STATE.IS_PAUSED);\n              }\n              if (this.currentPlayState !== \"renderStarted\") {\n                !Atomics.compareExchange(this.audioStatePointer, AUDIO_STATE.CSOUND_LOCK, 0, 1) &&\n                  Atomics.notify(this.audioStatePointer, AUDIO_STATE.CSOUND_LOCK);\n              }\n              await this.eventPromises.waitForStop();\n              return 0;\n            } else {\n              return -1;\n            }\n          };\n          this.exportApi.stop = csoundStop.bind(this);\n          csoundStop.toString = () => reference.toString();\n          break;\n        }\n\n        case \"csoundReset\": {\n          const csoundReset = async () => {\n            // no start = noReset\n            if (!this.currentPlayState) {\n              return;\n            }\n\n            if (this.eventPromises.isWaiting(\"reset\")) {\n              return -1;\n            } else {\n              if (stopableStates.has(this.currentPlayState)) {\n                await this.exportApi.stop();\n              }\n              this.ipcMessagePorts.restartAudioWorkerPorts();\n              if (!this.audioContextIsProvided) {\n                await this.audioWorker.terminateInstance();\n                delete this.audioWorker.audioContext;\n              }\n              const resetResult = await proxyCallback([]);\n              return resetResult;\n            }\n          };\n          this.exportApi.reset = csoundReset.bind(this);\n          csoundReset.toString = () => reference.toString();\n          break;\n        }\n        case \"csoundPushMidiMessage\": {\n          const midiMessage = async (status = 0, data1 = 0, data2 = 0) => {\n            this.handleMidiInput({ data: [status, data1, data2] });\n          };\n          this.exportApi.midiMessage = midiMessage.bind(this);\n          midiMessage.toString = () => reference.toString();\n          break;\n        }\n\n        case \"fs\": {\n          this.exportApi.fs = {};\n          Object.keys(reference).forEach((method) => {\n            const proxyFsCallback = makeProxyCallback(\n              proxyPort,\n              csoundInstance,\n              method,\n              this.currentPlayState,\n            );\n            proxyFsCallback.toString = () => reference[method].toString();\n            this.exportApi.fs[method] = proxyFsCallback;\n          });\n          break;\n        }\n\n        default: {\n          // avoiding deadlock by sending the IPC callback\n          // while thread is unlocked\n          const bufferWrappedCallback = async (...arguments_) => {\n            if (\n              this.currentPlayState === \"realtimePerformanceStarted\" ||\n              this.currentPlayState === \"renderStarted\" ||\n              this.eventPromises.isWaitingToStart()\n              // startPromiz indicates that startup is in progress\n              // and any events send before it's resolved are swallowed\n            ) {\n              const callbackId = this.callbackId;\n              this.callbackId += 1;\n              const returnPromise = new Promise((resolve, reject) => {\n                const timeout = setTimeout(\n                  () =>\n                    reject(\n                      new Error(`Worker timed out so ${csoundApiRename(apiKey)}() wasn't called!`),\n                    ),\n                  10000,\n                );\n                const resolveCallback = (answer) => {\n                  clearTimeout(timeout);\n                  resolve(answer);\n                };\n                this.callbackBuffer[callbackId] = {\n                  resolveCallback,\n                  apiKey,\n                  argumentz: [csoundInstance, ...arguments_],\n                };\n              });\n              Atomics.compareExchange(audioStatePointer, AUDIO_STATE.HAS_PENDING_CALLBACKS, 0, 1);\n              return await returnPromise;\n            } else {\n              return await proxyCallback.apply(undefined, arguments_);\n            }\n          };\n          bufferWrappedCallback.toString = () => reference.toString();\n          this.exportApi[csoundApiRename(apiKey)] = bufferWrappedCallback;\n          break;\n        }\n      }\n    }\n    log(`PUBLIC API Generated and stored`)();\n  }\n}\n\nexport default SharedArrayBufferMainThread;\n","import { logMidiRequest as log } from \"../logger\";\n\nexport async function requestMidi({ onMidiMessage /** function(number,number,number):void */ }) {\n  log(\"requesting for web-midi connection\")();\n\n  if (navigator && navigator.requestMIDIAccess) {\n    try {\n      const midiDevices = await navigator.requestMIDIAccess();\n\n      if (midiDevices.inputs) {\n        /** @type {Iterator}\n         *  @supress {JSC_WRONG_ARGUMENT_COUNT}\n         */\n        const midiInputs = midiDevices.inputs.values();\n        for (let input = midiInputs.next(); input && !input.done; input = midiInputs.next()) {\n          log(`Connecting midi-input: ${input.value.name || \"unkown\"}`)();\n          input.value.onmidimessage = onMidiMessage;\n        }\n      } else {\n        log(\"no midi-device detected\")();\n      }\n    } catch (error) {\n      log(\"error while connecting web-midi: \" + error)();\n    }\n  } else {\n    log(\"no web-midi support found, midi-input will not work!\")();\n  }\n}\n","goog.provide(\"worker.worklet\");\n         goog.scope(function () {\n             worker.worklet = () => \"data:application/javascript;base64,\";\n          })\n            ","import * as Comlink from \"comlink/dist/esm/comlink.mjs\";\nimport { logWorkletMain as log } from \"../logger\";\nimport { WebkitAudioContext } from \"../utils\";\nimport { requestMidi } from \"../utils/request-midi\";\nimport { messageEventHandler } from \"./messages.main\";\n\nconst WorkletWorker = goog.require(\"worker.worklet\");\n\nlet UID = 0;\n\nclass AudioWorkletMainThread {\n  constructor({ audioContext, audioContextIsProvided, autoConnect }) {\n    this.autoConnect = autoConnect;\n    this.audioContextIsProvided = audioContextIsProvided;\n    this.ipcMessagePorts = undefined;\n    this.audioContext = audioContext;\n    this.audioWorkletNode = undefined;\n    this.currentPlayState = undefined;\n    this.csoundWorkerMain = undefined;\n    this.workletProxy = undefined;\n\n    // never default these, get it from\n    // csound-worker before starting\n    this.ksmps = undefined;\n    this.sampleRate = undefined;\n    this.inputsCount = undefined;\n    this.outputsCount = undefined;\n    this.hardwareBufferSize = undefined;\n    this.softwareBufferSize = undefined;\n\n    this.initialize = this.initialize.bind(this);\n    this.onPlayStateChange = this.onPlayStateChange.bind(this);\n    this.terminateInstance = this.terminateInstance.bind(this);\n    this.createWorkletNode = this.createWorkletNode.bind(this);\n    log(\"AudioWorkletMainThread was constructed\")();\n  }\n\n  async terminateInstance() {\n    if (this.audioWorkletNode) {\n      this.audioWorkletNode.disconnect();\n      delete this.audioWorkletNode;\n    }\n    if (this.audioContext) {\n      if (this.audioContext.state !== \"closed\") {\n        try {\n          await this.audioContext.close();\n        } catch {}\n      }\n      delete this.audioContext;\n    }\n    if (this.workletProxy) {\n      this.workletProxy[Comlink.releaseProxy]();\n      delete this.workletProxy;\n    }\n  }\n\n  createWorkletNode(audioContext, inputsCount, contextUid) {\n    const audioNode = new AudioWorkletNode(audioContext, \"csound-worklet-processor\", {\n      inputChannelCount: inputsCount ? [inputsCount] : 0,\n      outputChannelCount: [this.outputsCount || 2],\n      processorOptions: {\n        contextUid,\n        isRequestingInput: this.isRequestingInput,\n        inputsCount,\n        outputsCount: this.outputsCount,\n        ksmps: this.ksmps,\n        maybeSharedArrayBuffer:\n          this.csoundWorkerMain.hasSharedArrayBuffer && this.csoundWorkerMain.audioStatePointer,\n        maybeSharedArrayBufferAudioIn:\n          this.csoundWorkerMain.hasSharedArrayBuffer && this.csoundWorkerMain.audioStreamIn,\n        maybeSharedArrayBufferAudioOut:\n          this.csoundWorkerMain.hasSharedArrayBuffer && this.csoundWorkerMain.audioStreamOut,\n      },\n    });\n    this.csoundWorkerMain.publicEvents.triggerOnAudioNodeCreated(audioNode);\n    return audioNode;\n  }\n\n  async onPlayStateChange(newPlayState) {\n    this.currentPlayState = newPlayState;\n\n    switch (newPlayState) {\n      case \"realtimePerformanceStarted\": {\n        log(\"event received: realtimePerformanceStarted\")();\n        await this.initialize();\n\n        if (this.csoundWorkerMain && this.csoundWorkerMain.eventPromises) {\n          this.csoundWorkerMain.publicEvents &&\n            this.csoundWorkerMain.publicEvents.triggerRealtimePerformanceStarted(this);\n          this.csoundWorkerMain.eventPromises &&\n            (await this.csoundWorkerMain.eventPromises.releaseStartPromise());\n        }\n        break;\n      }\n      case \"realtimePerformanceEnded\": {\n        log(\n          \"event received: realtimePerformanceEnded\" + !this.csoundWorkerMain.hasSharedArrayBuffer\n            ? ` cleaning up ports`\n            : \"\",\n        )();\n        if (\n          !this.audioContextIsProvided &&\n          this.autoConnect &&\n          this.audioContext &&\n          this.audioContext.state !== \"closed\"\n        ) {\n          try {\n            await this.audioContext.close();\n          } catch {}\n        }\n\n        if (this.autoConnect && this.audioWorkletNode) {\n          this.audioWorkletNode.disconnect();\n          delete this.audioWorkletNode;\n        }\n        if (this.workletProxy) {\n          this.workletProxy[Comlink.releaseProxy]();\n          delete this.workletProxy;\n        }\n\n        if (this.workletWorkerUrl) {\n          (window.URL || window.webkitURL).revokeObjectURL(this.workletWorkerUrl);\n        }\n\n        this.audioWorkletNode && delete this.audioWorkletNode;\n        this.currentPlayState = undefined;\n        this.sampleRate = undefined;\n        this.inputsCount = undefined;\n        this.outputsCount = undefined;\n        this.hardwareBufferSize = undefined;\n        this.softwareBufferSize = undefined;\n        break;\n      }\n\n      case \"realtimePerformancePaused\": {\n        if (this.csoundWorkerMain && this.csoundWorkerMain.eventPromises) {\n          this.csoundWorkerMain.publicEvents &&\n            this.csoundWorkerMain.publicEvents.triggerRealtimePerformancePaused(this);\n          await this.csoundWorkerMain.eventPromises.releasePausePromise();\n        }\n        break;\n      }\n\n      case \"realtimePerformanceResumed\": {\n        if (this.csoundWorkerMain && this.csoundWorkerMain.eventPromises) {\n          this.csoundWorkerMain.publicEvents &&\n            this.csoundWorkerMain.publicEvents.triggerRealtimePerformanceResumed(this);\n          await this.csoundWorkerMain.eventPromises.releaseResumePromise();\n        }\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  async initialize() {\n    if (!this.audioContext) {\n      if (this.audioContextIsProvided) {\n        console.error(`fatal: the provided AudioContext was undefined`);\n      }\n      this.audioContext = new (WebkitAudioContext())({ sampleRate: this.sampleRate });\n    }\n\n    if (this.audioContext.state === \"closed\") {\n      if (this.audioContextIsProvided) {\n        console.error(`fatal: the provided AudioContext was closed, falling back new AudioContext`);\n      }\n      this.audioContext = new (WebkitAudioContext())({ sampleRate: this.sampleRate });\n    }\n\n    if (this.sampleRate !== this.audioContext.sampleRate) {\n      this.audioContext = new (WebkitAudioContext())({ sampleRate: this.sampleRate });\n      // if this.audioContextIsProvided is true\n      // it should already be picked\n      if (this.audioContextIsProvided) {\n        console.error(\"Internal error: sample rate was ignored from provided audioContext\");\n      }\n    }\n    this.workletWorkerUrl = WorkletWorker();\n\n    try {\n      await this.audioContext.audioWorklet.addModule(this.workletWorkerUrl);\n    } catch (error) {\n      console.error(\"Error calling audioWorklet.addModule\", error);\n    }\n\n    log(\"WorkletWorker module added\")();\n\n    if (!this.csoundWorkerMain) {\n      console.error(`fatal: worker not reachable from worklet-main thread`);\n      return;\n    }\n\n    const contextUid = `audioWorklet${UID}`;\n    UID += 1;\n\n    if (this.isRequestingMidi) {\n      log(\"requesting for web-midi connection\");\n      requestMidi({\n        onMidiMessage: this.csoundWorkerMain.handleMidiInput.bind(this.csoundWorkerMain),\n      });\n    }\n\n    let microphonePromise;\n\n    if (this.isRequestingInput) {\n      let resolveMicrophonePromise;\n      microphonePromise = new Promise((resolve) => {\n        resolveMicrophonePromise = resolve;\n      });\n      const getUserMedia =\n        typeof navigator.mediaDevices !== \"undefined\"\n          ? navigator.mediaDevices.getUserMedia\n          : navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n      const microphoneCallback = (stream) => {\n        if (stream) {\n          const liveInput = this.audioContext.createMediaStreamSource(stream);\n          this.inputsCount = liveInput.channelCount;\n          const newNode = this.createWorkletNode(\n            this.audioContext,\n            liveInput.channelCount,\n            contextUid,\n          );\n          this.audioWorkletNode = newNode;\n          if (this.autoConnect) {\n            liveInput.connect(newNode).connect(this.audioContext.destination);\n          }\n        } else {\n          // Continue as before if user cancels\n          this.inputsCount = 0;\n          const newNode = this.createWorkletNode(this.audioContext, 0, contextUid);\n          this.audioWorkletNode = newNode;\n          if (this.autoConnect) {\n            this.audioWorkletNode.connect(this.audioContext.destination);\n          }\n        }\n        resolveMicrophonePromise && resolveMicrophonePromise();\n      };\n\n      log(\"requesting microphone access\")();\n      typeof navigator.mediaDevices !== \"undefined\"\n        ? getUserMedia\n            .call(navigator.mediaDevices, {\n              audio: { echoCancellation: false, sampleSize: 32 },\n            })\n            .then(microphoneCallback)\n            .catch(console.error)\n        : getUserMedia.call(\n            navigator,\n            {\n              audio: {\n                optional: [{ echoCancellation: false, sampleSize: 32 }],\n              },\n            },\n            microphoneCallback,\n            console.error,\n          );\n    } else {\n      const newNode = this.createWorkletNode(this.audioContext, 0, contextUid);\n      this.audioWorkletNode = newNode;\n\n      log(\"connecting Node to AudioContext destination\")();\n      if (this.autoConnect) {\n        this.audioWorkletNode.connect(this.audioContext.destination);\n      }\n    }\n\n    microphonePromise && (await microphonePromise);\n    this.workletProxy = Comlink.wrap(this.audioWorkletNode.port);\n\n    this.ipcMessagePorts.mainMessagePortAudio.addEventListener(\n      \"message\",\n      messageEventHandler(this),\n    );\n    this.ipcMessagePorts.mainMessagePortAudio.start();\n\n    await this.workletProxy.initialize(\n      Comlink.transfer(\n        {\n          contextUid,\n          messagePort: this.ipcMessagePorts.workerMessagePortAudio,\n          requestPort: this.ipcMessagePorts.audioWorkerFrameRequestPort,\n          inputPort: this.ipcMessagePorts.audioWorkerAudioInputPort,\n        },\n        [\n          this.ipcMessagePorts.workerMessagePortAudio,\n          this.ipcMessagePorts.audioWorkerFrameRequestPort,\n          this.ipcMessagePorts.audioWorkerAudioInputPort,\n        ],\n      ),\n    );\n\n    log(\"initialization finished in main\")();\n  }\n}\n\nexport default AudioWorkletMainThread;\n","export const requestMicrophoneNode = (microphoneCallback) => {\n  const getUserMedia =\n    typeof navigator.mediaDevices !== \"undefined\"\n      ? navigator.mediaDevices.getUserMedia\n      : navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n  console.log(\"requesting microphone access\");\n  typeof navigator.mediaDevices !== \"undefined\"\n    ? getUserMedia\n        .call(navigator.mediaDevices, {\n          audio: { echoCancellation: false, sampleSize: 32 },\n        })\n        .then(microphoneCallback)\n        .catch(console.error)\n    : getUserMedia.call(\n        navigator,\n        {\n          audio: {\n            optional: [{ echoCancellation: false, sampleSize: 32 }],\n          },\n        },\n        microphoneCallback,\n        console.error,\n      );\n};\n\n// rebind this to exportApi instance to use\nexport async function enableAudioInput() {\n  console.log(\"enabling audio input\");\n  requestMicrophoneNode(async (stream) => {\n    if (stream) {\n      const audioContext = await this.getAudioContext();\n      const liveInput = audioContext.createMediaStreamSource(stream);\n      this.inputsCount = liveInput.channelCount;\n\n      // if (this.autoConnect) {\n      const node = await this.getNode();\n      liveInput.connect(node);\n      // }\n    }\n  });\n}\n","goog.provide(\"worker.old_spn\");\n         goog.scope(function () {\n         worker.old_spn = () => (window.URL || window.webkitURL).createObjectURL(new Blob([\"(function(){/*\\n\\n Copyright The Closure Library Authors.\\n SPDX-License-Identifier: Apache-2.0\\n*/\\nvar d=d||{};d.scope={};var n=n||{};n.global=this||self;n.exportPath_=function(a,b,c,e){a=a.split(\\\".\\\");e=e||n.global;a[0]in e||\\\"undefined\\\"==typeof e.execScript||e.execScript(\\\"var \\\"+a[0]);for(var f;a.length&&(f=a.shift());)if(a.length||void 0===b)e=e[f]&&e[f]!==Object.prototype[f]?e[f]:e[f]={};else if(!c&&n.isObject(b)&&n.isObject(e[f]))for(var g in b)b.hasOwnProperty(g)&&(e[f][g]=b[g]);else e[f]=b};n.define=function(a,b){return b};n.FEATURESET_YEAR=2020;n.DEBUG=!0;n.LOCALE=\\\"en\\\";n.getLocale=function(){return n.LOCALE};\\nn.TRUSTED_SITE=!0;n.DISALLOW_TEST_ONLY_CODE=!n.DEBUG;n.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;n.provide=function(a){if(n.isInModuleLoader_())throw Error(\\\"goog.provide cannot be used within a module.\\\");n.constructNamespace_(a)};n.constructNamespace_=function(a,b,c){n.exportPath_(a,b,c)};n.NONCE_PATTERN_=/^[\\\\w+/_-]+[=]{0,2}$/;\\nn.getScriptNonce_=function(a){a=(a||n.global).document;return(a=a.querySelector&&a.querySelector(\\\"script[nonce]\\\"))&&(a=a.nonce||a.getAttribute(\\\"nonce\\\"))&&n.NONCE_PATTERN_.test(a)?a:\\\"\\\"};n.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\\nn.module=function(a){if(\\\"string\\\"!==typeof a||!a||-1==a.search(n.VALID_MODULE_RE_))throw Error(\\\"Invalid module identifier\\\");if(!n.isInGoogModuleLoader_())throw Error(\\\"Module \\\"+a+\\\" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.\\\");if(n.moduleLoaderState_.moduleName)throw Error(\\\"goog.module may only be called once per module.\\\");\\nn.moduleLoaderState_.moduleName=a};n.module.get=function(a){return n.module.getInternal_(a)};n.module.getInternal_=function(){return null};n.ModuleType={ES6:\\\"es6\\\",GOOG:\\\"goog\\\"};n.moduleLoaderState_=null;n.isInModuleLoader_=function(){return n.isInGoogModuleLoader_()||n.isInEs6ModuleLoader_()};n.isInGoogModuleLoader_=function(){return!!n.moduleLoaderState_&&n.moduleLoaderState_.type==n.ModuleType.GOOG};\\nn.isInEs6ModuleLoader_=function(){if(n.moduleLoaderState_&&n.moduleLoaderState_.type==n.ModuleType.ES6)return!0;var a=n.global.$jscomp;return a?\\\"function\\\"!=typeof a.getCurrentModulePath?!1:!!a.getCurrentModulePath():!1};n.module.declareLegacyNamespace=function(){n.moduleLoaderState_.declareLegacyNamespace=!0};\\nn.declareModuleId=function(a){if(n.moduleLoaderState_)n.moduleLoaderState_.moduleName=a;else{var b=n.global.$jscomp;if(!b||\\\"function\\\"!=typeof b.getCurrentModulePath)throw Error('Module with namespace \\\"'+a+'\\\" has been loaded incorrectly.');b=b.require(b.getCurrentModulePath());n.loadedModules_[a]={exports:b,type:n.ModuleType.ES6,moduleId:a}}};n.setTestOnly=function(a){if(n.DISALLOW_TEST_ONLY_CODE)throw a=a||\\\"\\\",Error(\\\"Importing test-only code into non-debug environment\\\"+(a?\\\": \\\"+a:\\\".\\\"));};\\nn.forwardDeclare=function(){};n.getObjectByName=function(a,b){a=a.split(\\\".\\\");b=b||n.global;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b};n.addDependency=function(){};n.ENABLE_DEBUG_LOADER=!0;n.logToConsole_=function(a){n.global.console&&n.global.console.error(a)};n.require=function(){};n.requireType=function(){return{}};n.basePath=\\\"\\\";n.nullFunction=function(){};n.abstractMethod=function(){throw Error(\\\"unimplemented abstract method\\\");};\\nn.addSingletonGetter=function(a){a.instance_=void 0;a.getInstance=function(){if(a.instance_)return a.instance_;n.DEBUG&&(n.instantiatedSingletons_[n.instantiatedSingletons_.length]=a);return a.instance_=new a}};n.instantiatedSingletons_=[];n.LOAD_MODULE_USING_EVAL=!0;n.SEAL_MODULE_EXPORTS=n.DEBUG;n.loadedModules_={};n.DEPENDENCIES_ENABLED=!1;n.TRANSPILE=\\\"detect\\\";n.ASSUME_ES_MODULES_TRANSPILED=!1;n.TRANSPILE_TO_LANGUAGE=\\\"\\\";n.TRANSPILER=\\\"transpile.js\\\";n.TRUSTED_TYPES_POLICY_NAME=\\\"goog\\\";\\nn.hasBadLetScoping=null;\\nn.loadModule=function(a){var b=n.moduleLoaderState_;try{n.moduleLoaderState_={moduleName:\\\"\\\",declareLegacyNamespace:!1,type:n.ModuleType.GOOG};var c={},e=c;if(\\\"function\\\"===typeof a)e=a.call(void 0,e);else if(\\\"string\\\"===typeof a)e=n.loadModuleFromSource_.call(void 0,e,a);else throw Error(\\\"Invalid module definition\\\");var f=n.moduleLoaderState_.moduleName;if(\\\"string\\\"===typeof f&&f)n.moduleLoaderState_.declareLegacyNamespace?n.constructNamespace_(f,e,c!==e):n.SEAL_MODULE_EXPORTS&&Object.seal&&\\\"object\\\"==\\ntypeof e&&null!=e&&Object.seal(e),n.loadedModules_[f]={exports:e,type:n.ModuleType.GOOG,moduleId:n.moduleLoaderState_.moduleName};else throw Error('Invalid module name \\\"'+f+'\\\"');}finally{n.moduleLoaderState_=b}};n.loadModuleFromSource_=function(a,b){eval(n.CLOSURE_EVAL_PREFILTER_.createScript(b));return a};n.normalizePath_=function(a){a=a.split(\\\"/\\\");for(var b=0;b<a.length;)\\\".\\\"==a[b]?a.splice(b,1):b&&\\\"..\\\"==a[b]&&a[b-1]&&\\\"..\\\"!=a[b-1]?a.splice(--b,2):b++;return a.join(\\\"/\\\")};\\nn.loadFileSync_=function(a){if(n.global.CLOSURE_LOAD_FILE_SYNC)return n.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new n.global.XMLHttpRequest;b.open(\\\"get\\\",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};\\nn.transpile_=function(a,b,c){var e=n.global.$jscomp;e||(n.global.$jscomp=e={});var f=e.transpile;if(!f){var g=n.basePath+n.TRANSPILER,k=n.loadFileSync_(g);if(k){(function(){(0,eval)(k+\\\"\\\\n//# sourceURL=\\\"+g)}).call(n.global);if(n.global.$gwtExport&&n.global.$gwtExport.$jscomp&&!n.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the \\\"transpile\\\" method. $gwtExport: '+JSON.stringify(n.global.$gwtExport));n.global.$jscomp.transpile=n.global.$gwtExport.$jscomp.transpile;\\ne=n.global.$jscomp;f=e.transpile}}f||(f=e.transpile=function(h,l){n.logToConsole_(l+\\\" requires transpilation but no transpiler was found.\\\");return h});return f(a,b,c)};n.typeOf=function(a){var b=typeof a;return\\\"object\\\"!=b?b:a?Array.isArray(a)?\\\"array\\\":b:\\\"null\\\"};n.isArrayLike=function(a){var b=n.typeOf(a);return\\\"array\\\"==b||\\\"object\\\"==b&&\\\"number\\\"==typeof a.length};n.isDateLike=function(a){return n.isObject(a)&&\\\"function\\\"==typeof a.getFullYear};\\nn.isObject=function(a){var b=typeof a;return\\\"object\\\"==b&&null!=a||\\\"function\\\"==b};n.getUid=function(a){return Object.prototype.hasOwnProperty.call(a,n.UID_PROPERTY_)&&a[n.UID_PROPERTY_]||(a[n.UID_PROPERTY_]=++n.uidCounter_)};n.hasUid=function(a){return!!a[n.UID_PROPERTY_]};n.removeUid=function(a){null!==a&&\\\"removeAttribute\\\"in a&&a.removeAttribute(n.UID_PROPERTY_);try{delete a[n.UID_PROPERTY_]}catch(b){}};n.UID_PROPERTY_=\\\"closure_uid_\\\"+(1E9*Math.random()>>>0);n.uidCounter_=0;\\nn.cloneObject=function(a){var b=n.typeOf(a);if(\\\"object\\\"==b||\\\"array\\\"==b){if(\\\"function\\\"===typeof a.clone)return a.clone();if(\\\"undefined\\\"!==typeof Map&&a instanceof Map)return new Map(a);if(\\\"undefined\\\"!==typeof Set&&a instanceof Set)return new Set(a);b=\\\"array\\\"==b?[]:{};for(var c in a)b[c]=n.cloneObject(a[c]);return b}return a};n.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};\\nn.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var e=Array.prototype.slice.call(arguments,2);return function(){var f=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(f,e);return a.apply(b,f)}}return function(){return a.apply(b,arguments)}};n.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\\\"native code\\\")?n.bind=n.bindNative_:n.bind=n.bindJs_;return n.bind.apply(null,arguments)};\\nn.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var e=c.slice();e.push.apply(e,arguments);return a.apply(this,e)}};n.mixin=function(a,b){for(var c in b)a[c]=b[c]};n.now=function(){return Date.now()};n.globalEval=function(a){(0,eval)(a)};\\nn.getCssName=function(a,b){function c(g){g=g.split(\\\"-\\\");for(var k=[],h=0;h<g.length;h++)k.push(e(g[h]));return k.join(\\\"-\\\")}function e(g){return n.cssNameMapping_[g]||g}if(\\\".\\\"==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with \\\".\\\". You passed: '+a);var f=n.cssNameMapping_?\\\"BY_WHOLE\\\"==n.cssNameMappingStyle_?e:c:function(g){return g};a=b?a+\\\"-\\\"+f(b):f(a);return n.global.CLOSURE_CSS_NAME_MAP_FN?n.global.CLOSURE_CSS_NAME_MAP_FN(a):a};\\nn.setCssNameMapping=function(a,b){n.cssNameMapping_=a;n.cssNameMappingStyle_=b};n.getMsg=function(a,b,c){c&&c.html&&(a=a.replace(/</g,\\\"&lt;\\\"));c&&c.unescapeHtmlEntities&&(a=a.replace(/&lt;/g,\\\"<\\\").replace(/&gt;/g,\\\">\\\").replace(/&apos;/g,\\\"'\\\").replace(/&quot;/g,'\\\"').replace(/&amp;/g,\\\"&\\\"));b&&(a=a.replace(/\\\\{\\\\$([^}]+)}/g,function(e,f){return null!=b&&f in b?b[f]:e}));return a};n.getMsgWithFallback=function(a){return a};n.exportSymbol=function(a,b,c){n.exportPath_(a,b,!0,c)};\\nn.exportProperty=function(a,b,c){a[b]=c};n.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(e,f,g){for(var k=Array(arguments.length-2),h=2;h<arguments.length;h++)k[h-2]=arguments[h];return b.prototype[f].apply(e,k)}};n.scope=function(a){if(n.isInModuleLoader_())throw Error(\\\"goog.scope is not supported within a module.\\\");a.call(n.global)};\\nn.defineClass=function(a,b){var c=b.constructor,e=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error(\\\"cannot instantiate an interface (no constructor defined).\\\");});c=n.defineClass.createSealingConstructor_(c,a);a&&n.inherits(c,a);delete b.constructor;delete b.statics;n.defineClass.applyProperties_(c.prototype,b);null!=e&&(e instanceof Function?e(c):n.defineClass.applyProperties_(c,e));return c};n.defineClass.SEAL_CLASS_INSTANCES=n.DEBUG;\\nn.defineClass.createSealingConstructor_=function(a){return n.defineClass.SEAL_CLASS_INSTANCES?function(){var b=a.apply(this,arguments)||this;b[n.UID_PROPERTY_]=b[n.UID_PROPERTY_];return b}:a};n.defineClass.OBJECT_PROTOTYPE_FIELDS_=\\\"constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf\\\".split(\\\" \\\");\\nn.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var e=0;e<n.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;e++)c=n.defineClass.OBJECT_PROTOTYPE_FIELDS_[e],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};n.identity_=function(a){return a};n.createTrustedTypesPolicy=function(a){var b=null,c=n.global.trustedTypes;if(!c||!c.createPolicy)return b;try{b=c.createPolicy(a,{createHTML:n.identity_,createScript:n.identity_,createScriptURL:n.identity_})}catch(e){n.logToConsole_(e.message)}return b};const t=Symbol(\\\"Comlink.proxy\\\"),aa=Symbol(\\\"Comlink.endpoint\\\"),ba=Symbol(\\\"Comlink.releaseProxy\\\"),u=Symbol(\\\"Comlink.thrown\\\"),w=a=>\\\"object\\\"===typeof a&&null!==a||\\\"function\\\"===typeof a,z=new Map([[\\\"proxy\\\",{canHandle:a=>w(a)&&a[t],serialize(a){const {port1:b,port2:c}=new MessageChannel;x(a,b);return[c,[c]]},deserialize(a){a.start();return y(a,[],void 0)}}],[\\\"throw\\\",{canHandle:a=>w(a)&&u in a,serialize({value:a}){return[a instanceof Error?{isError:!0,value:{message:a.message,name:a.name,stack:a.stack}}:\\n{isError:!1,value:a},[]]},deserialize(a){if(a.isError)throw Object.assign(Error(a.value.message),a.value);throw a.value;}}]]);\\nfunction x(a,b=self){b.addEventListener(\\\"message\\\",function f(e){if(e&&e.data){var {id:g,type:k,path:h}=Object.assign({path:[]},e.data),l=(e.data.argumentList||[]).map(A);try{const p=h.slice(0,-1).reduce((q,r)=>q[r],a),v=h.reduce((q,r)=>q[r],a);switch(k){case \\\"GET\\\":var m=v;break;case \\\"SET\\\":p[h.slice(-1)[0]]=A(e.data.value);m=!0;break;case \\\"APPLY\\\":m=v.apply(p,l);break;case \\\"CONSTRUCT\\\":const q=new v(...l);m=Object.assign(q,{[t]:!0});break;case \\\"ENDPOINT\\\":const {port1:r,port2:E}=new MessageChannel;x(a,\\nE);m=ca(r,[r]);break;case \\\"RELEASE\\\":m=void 0;break;default:return}}catch(p){m={value:p,[u]:0}}Promise.resolve(m).catch(p=>({value:p,[u]:0})).then(p=>{const [v,q]=B(p);b.postMessage(Object.assign(Object.assign({},v),{id:g}),q);\\\"RELEASE\\\"===k&&(b.removeEventListener(\\\"message\\\",f),\\\"MessagePort\\\"===b.constructor.name&&b.close())})}});b.start&&b.start()}function C(a){if(a)throw Error(\\\"Proxy has been released and is not useable\\\");}\\nfunction y(a,b=[],c=function(){}){let e=!1;const f=new Proxy(c,{get(g,k){C(e);if(k===ba)return()=>D(a,{type:\\\"RELEASE\\\",path:b.map(h=>h.toString())}).then(()=>{\\\"MessagePort\\\"===a.constructor.name&&a.close();e=!0});if(\\\"then\\\"===k){if(0===b.length)return{then:()=>f};g=D(a,{type:\\\"GET\\\",path:b.map(h=>h.toString())}).then(A);return g.then.bind(g)}return y(a,[...b,k])},set(g,k,h){C(e);const [l,m]=B(h);return D(a,{type:\\\"SET\\\",path:[...b,k].map(p=>p.toString()),value:l},m).then(A)},apply(g,k,h){C(e);g=b[b.length-\\n1];if(g===aa)return D(a,{type:\\\"ENDPOINT\\\"}).then(A);if(\\\"bind\\\"===g)return y(a,b.slice(0,-1));const [l,m]=F(h);return D(a,{type:\\\"APPLY\\\",path:b.map(p=>p.toString()),argumentList:l},m).then(A)},construct(g,k){C(e);const [h,l]=F(k);return D(a,{type:\\\"CONSTRUCT\\\",path:b.map(m=>m.toString()),argumentList:h},l).then(A)}});return f}function F(a){a=a.map(B);return[a.map(b=>b[0]),Array.prototype.concat.apply([],a.map(b=>b[1]))]}const G=new WeakMap;function ca(a,b){G.set(a,b);return a}\\nfunction B(a){for(const [b,c]of z)if(c.canHandle(a)){const [e,f]=c.serialize(a);return[{type:\\\"HANDLER\\\",name:b,value:e},f]}return[{type:\\\"RAW\\\",value:a},G.get(a)||[]]}function A(a){switch(a.type){case \\\"HANDLER\\\":return z.get(a.name).deserialize(a.value);case \\\"RAW\\\":return a.value}}\\nfunction D(a,b,c){return new Promise(e=>{const f=da();a.addEventListener(\\\"message\\\",function h(k){k.data&&k.data.id&&k.data.id===f&&(a.removeEventListener(\\\"message\\\",h),e(k.data))});a.start&&a.start();a.postMessage(Object.assign({id:f},b),c)})}function da(){return Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join(\\\"-\\\")};var H={__esModule:!0};H.LoggerFactory=H.logLevels=void 0;H.logLevels={log_raise_error:1,log_with_warnings:2,trace:3,debug:4,info:5,warn:6,error:7,disable:8};\\nvar ea=function(){function a(b,c){if(void 0===b&&(b=\\\"log_with_warnings\\\"),void 0===c&&(c=null),this.logLevel=b,!H.logLevels[b])throw Error(\\\"Invalid log level \\\"+b+\\\" allowed: \\\"+JSON.stringify(H.logLevels));this.mockConsole=c||console}return a.prototype.dummy=function(){},a.prototype.setLogWarnings=function(b){this.logLevel=b},a.prototype.getLogWarnings=function(){return this.logLevel},a.prototype.getSingleLoggerColor=function(b,c,e){return this.getSingleLoggerStyle(b,this.getColorStyle(c),e)},a.prototype.getSingleLogger=\\nfunction(b,c){var e=this.getRandomColor(b);return this.getSingleLoggerStyle(b,this.getColorStyle(e),c)},a.prototype.getSingleLoggerStyle=function(b,c,e,f){var g=this;return void 0===f&&(f=\\\"log_with_warnings\\\"),function(){for(var k=[],h=0;h<arguments.length;h++)k[h]=arguments[h];if(H.logLevels[g.logLevel]>H.logLevels[f])return g.dummy;k=Array.prototype.slice.call(k);h=k.shift().split(\\\"{}\\\");for(var l=[g.mockConsole,\\\"%c\\\"+b,c],m=0;m<h.length;m++)l.push(h[m]),void 0!==k[m]&&l.push(k[m]);if(h.length-1!==\\nk.length)if(\\\"log_with_warnings\\\"===g.logLevel)g.mockConsole.error(\\\"MissMatch amount of arguments\\\");else if(\\\"log_raise_error\\\"===g.logLevel)throw Error(\\\"MissMatch amount of arguments\\\");return Function.prototype.bind.apply(e,l)}},a.prototype.getLoggerColor=function(b,c){return this.getLoggerStyle(b,this.getColorStyle(c))},a.prototype.getColorStyle=function(b){return\\\"color: white; background-color: \\\"+b+\\\"; padding: 2px 6px; border-radius: 2px; font-size: 10px\\\"},a.getHash=function(b,c){void 0===c&&(c=0);\\nvar e=3735928559^c;c^=1103547991;for(var f=0,g;f<b.length;f++)g=b.charCodeAt(f),e=Math.imul(e^g,2654435761),c=Math.imul(c^g,1597334677);return e=Math.imul(e^e>>>16,2246822507)^Math.imul(c^c>>>13,3266489909),4294967296*(2097151&(Math.imul(c^c>>>16,2246822507)^Math.imul(e^e>>>13,3266489909)))+(e>>>0)},a.prototype.getRandomColor=function(b){void 0===b&&(b=\\\"\\\");b=a.getHash(b);for(var c=\\\"#\\\",e=0;3>e;e++)c+=(\\\"00\\\"+(8+(b>>7*e&127)).toString(16)).substr(-2);return c},a.prototype.getLogger=function(b){return this.getLoggerColor(b,\\nthis.getRandomColor(b))},a.prototype.getLoggerStyle=function(b,c){return{trace:this.getSingleLoggerStyle(b,c,this.mockConsole.trace,\\\"trace\\\"),debug:this.getSingleLoggerStyle(b,c,this.mockConsole.debug,\\\"debug\\\"),log:this.getSingleLoggerStyle(b,c,this.mockConsole.log,\\\"info\\\"),warn:this.getSingleLoggerStyle(b,c,this.mockConsole.warn,\\\"warn\\\"),error:this.getSingleLoggerStyle(b,c,this.mockConsole.error,\\\"error\\\")}},a}();H.LoggerFactory=ea;let I;I=()=>()=>{};const J=(a,b)=>{const c=[];for(let e=0;e<a;e++)c.push(new Float64Array(b));return c};function K(){}K.prototype.ready=!1;K.prototype.port=void 0;K.prototype.post=()=>{};K.prototype.broadcastPlayState=()=>{};K.prototype.workerState=void 0;K.prototype.vanillaWorkerState=void 0;const fa=()=>{var a=\\\"undefined\\\"!==typeof window.webkitAudioContext?window.webkitAudioContext:\\\"undefined\\\"!==typeof window.AudioContext?window.AudioContext:void 0;if(a)return new a};function L(a,b=[]){return(...c)=>{c=[...b,...c];return c.length>=a.length?a(...c):L(a,c)}}L(function(a,b,c){const e=0>a?c.length+a:a;if(a>=c.length||0>e)return c;a=Array.prototype.slice.call(c);a[e]=b(a[e]);return a});function ha(a){return()=>a}const M=Array.isArray,ia=L(function(a,b,c){return Object.assign({},c,{[a]:b})});function N(a){return a<<0===a}\\nfunction O(a,b,c){const e=\\\"string\\\"===typeof a?a.split(\\\".\\\").map(f=>N(Number(f))?Number(f):f):a;if(0===e.length)return b;a=e[0];if(1<e.length){const f=\\\"object\\\"===typeof c&&null!==c&&c.hasOwnProperty(a)?c[a]:N(e[1])?[]:{};b=O(Array.prototype.slice.call(e,1),b,f)}return N(a)&&M(c)?(c=Array.prototype.slice.call(c),c[a]=b,c):ia(a,b,c)}L(O);L(function(a,b,c){if(a>b)throw Error(\\\"min must not be greater than max in clamp(min, max, value)\\\");if(c>=a&&c<=b)return c;if(c>b)return b;if(c<a)return a});\\nconst ja=L(function(a,b,c){if(!M(c))throw new TypeError(\\\"reduce: list must be array or iterable\\\");let e=0;const f=c.length;for(;e<f;)b=a(b,c[e],e,c),e++;return b});function P(a,b){return 1===arguments.length?c=>P(a,c):void 0===b||null===b||!0===Number.isNaN(b)?a:b}function Q(a){if(null===a)return\\\"Null\\\";if(void 0===a)return\\\"Undefined\\\";if(Number.isNaN(a))return\\\"NaN\\\";a=Object.prototype.toString.call(a).slice(8,-1);return\\\"AsyncFunction\\\"===a?\\\"Async\\\":a}\\nfunction R(a){const b=[];let c;for(;!(c=a.next()).done;)b.push(c.value);return b}function ka(a,b){if(a.size!==b.size)return!1;a=R(a.values());const c=R(b.values());return 0===a.filter(e=>{if(!M(c))throw Error(`Cannot read property 'indexOf' of ${c}`);var f=Q(e);if([\\\"Object\\\",\\\"Array\\\",\\\"NaN\\\",\\\"RegExp\\\"].includes(f)){for(var g=f=-1,{length:k}=c;++f<k&&-1===g;)S(c[f],e)&&(g=f);e=g}else e=c.indexOf(e);return-1===e}).length}\\nfunction T(a){const b=a.__proto__.toString();return[\\\"Error\\\",\\\"TypeError\\\"].includes(b)?[b,a.message]:[]}\\nfunction S(a,b){if(1===arguments.length)return g=>S(a,g);var c=Q(a);if(c!==Q(b))return!1;if(\\\"Function\\\"===c)return void 0===a.name?!1:a.name===b.name;if([\\\"NaN\\\",\\\"Undefined\\\",\\\"Null\\\"].includes(c))return!0;if(\\\"Number\\\"===c)return Object.is(-0,a)!==Object.is(-0,b)?!1:a.toString()===b.toString();if([\\\"String\\\",\\\"Boolean\\\"].includes(c))return a.toString()===b.toString();if(\\\"Array\\\"===c){c=Array.from(a);const g=Array.from(b);if(c.toString()!==g.toString())return!1;let k=!0;c.forEach((h,l)=>{k&&(h===g[l]||S(h,g[l])||\\n(k=!1))});return k}var e=a.constructor!==RegExp?[!1]:[!0,a.toString()],f=b.constructor!==RegExp?[!1]:[!0,b.toString()];if(e[0])return f[0]?e[1]===f[1]:!1;if(f[0])return!1;e=a.toDateString?[!0,a.getTime()]:[!1];f=b.toDateString?[!0,b.getTime()]:[!1];if(e[0])return f[0]?e[1]===f[1]:!1;if(f[0])return!1;e=T(a);f=T(b);if(e[0])return f[0]?e[0]===f[0]&&e[1]===f[1]:!1;if(\\\"Set\\\"===c)return ka(a,b);if(\\\"Object\\\"===c){c=Object.keys(a);if(c.length!==Object.keys(b).length)return!1;let g=!0;c.forEach(k=>{if(g){const h=\\na[k];k=b[k];h===k||S(h,k)||(g=!1)}});return g}return!1}function U(a,b){if(1===arguments.length)return c=>U(a,c);if(b)return b[a]}L(function(a,b,c){return S(U(a,b),U(a,c))});function V(a,b){if(1===arguments.length)return g=>V(a,g);if(null!==b&&void 0!==b){for(var c=b,e=0,f=\\\"string\\\"===typeof a?a.split(\\\".\\\"):a;e<f.length;){if(null===c||void 0===c||null===c[f[e]])return;c=c[f[e]];e++}return c}}L(function(a,b,c){return(...e)=>!0===(\\\"boolean\\\"===typeof a?a:a(...e))?b(...e):c(...e)});\\nfunction la(a,b,c){let e=-1,{length:f}=a;c=c>f?f:c;0>c&&(c+=f);f=b>c?0:c-b>>>0;b>>>=0;for(c=Array(f);++e<f;)c[e]=a[e+b];return c}function W(a,b){return 1===arguments.length?c=>W(a,c):null!=b&&b.constructor===a||b instanceof a}L(function(a,b,c){c=Array.prototype.slice.call(c);return-1===a?c.fill(b,a):c.fill(b,a,a+1)});L(function(a,b,c){return a(c)>a(b)?c:b});L(function(a,b,c){return a(c)<a(b)?c:b});\\nL(function(a,b,c){if(0>a||0>b)throw Error(\\\"Rambda.move does not support negative indexes\\\");if(a>c.length-1||b>c.length-1)return c;const e=Array.prototype.slice.call(c);e[a]=c[b];e[b]=c[a];return e});function ma(a,b){return 1===arguments.length?c=>ma(a,c):a*b}const na=a=>({x:a,map:b=>na(b(a))}),oa=L(function(a,b,c){return a(e=>na(b(e)))(c).x});L(function(a,b,c){return S(V(a,c),b)});L(function(a,b,c){return P(a,V(b,c))});ja(ma,1);L(function(a,b,c){return c?c[a]===b:!1});\\nL(function(a,b,c){return W(a,c[b])});L(function(a,b,c){return c?P(a,c[b]):a});function X(a,b){if(1===arguments.length)return f=>X(a,f);if(Number.isNaN(Number(a))||Number.isNaN(Number(b)))throw new TypeError(\\\"Both arguments to range must be numbers\\\");if(b<a)return[];const c=b-a,e=Array(c);for(let f=0;f<c;f++)e[f]=a+f;return e}L(function(a,b,c){return c.replace(a,b)});L(function(a,b,c){return oa(a,ha(b),c)});L(function(a,b,c){return c.slice(a,b)});\\nfunction pa(a,b){return 1===arguments.length?c=>pa(a,c):0>a?b.slice():\\\"string\\\"===typeof b?b.slice(0,a):la(b,0,a)}L(function(a,b,c){return a(c)?b(c):c});L(function(a,b,c){return pa(b.length>c.length?c.length:b.length,b).map((e,f)=>a(e,c[f]))});let Y;const qa=async a=>{const b=window[a],c=window.parent[`__csound_wasm_iframe_parent_${a}`];if(b){if(\\\"closed\\\"!==b.state)try{await b.close()}catch(e){}delete window[a]}if(c){if(b!==c&&\\\"closed\\\"!==c.state)try{await c.close()}catch(e){}delete window.parent[`__csound_wasm_iframe_parent_${a}`]}},ra=(a,b)=>{window[a]?window[`${a}Node`]=b:window.parent[`__csound_wasm_iframe_parent_${a}Node`]=b},Z=new Map;\\nclass sa{constructor({audioContext:a,contextUid:b,hardwareBufferSize:c,softwareBufferSize:e,inputsCount:f,outputsCount:g,sampleRate:k,audioContextIsProvided:h,autoConnect:l}){this.autoConnect=l;this.audioContextIsProvided=h;this.hardwareBufferSize=c;this.softwareBufferSize=e;this.inputsCount=f;this.outputsCount=g;this.sampleRate=k;this.vanillaOutputChannels=[];this.vanillaInputChannels=[];this.pendingFrames=this.vanillaAvailableFrames=this.vanillaInputReadIndex=this.vanillaOutputReadIndex=0;this.vanillaFirstTransferDone=\\nthis.vanillaInitialized=!1;this.vanillaInputChannels=J(f,c);this.vanillaOutputChannels=J(g,c);this.audioContext=a;this.contextUid=b;this.scriptNode=this.audioContext.createScriptProcessor(this.softwareBufferSize,f,g);this.process=this.process.bind(this);a=this.process.bind(this);this.scriptNode.onaudioprocess=a;this.autoConnect?ra(b,this.scriptNode.connect(this.audioContext.destination)):ra(b,this.scriptNode.context.destination);this.updateVanillaFrames=this.updateVanillaFrames.bind(this);this.initCallbacks=\\nthis.initCallbacks.bind(this)}async initCallbacks({workerMessagePort:a,transferInputFrames:b,requestPort:c}){this.workerMessagePort=a;this.transferInputFrames=b;this.requestPort=c;if(\\\"suspended\\\"===this.audioContext.state){for(a=0;100>a;)if(await new Promise(e=>setTimeout(e,100)),\\\"suspended\\\"===this.audioContext.state)a+=1;else return;this.workerMessagePort.broadcastPlayState(\\\"realtimePerformancePaused\\\")}}updateVanillaFrames({audioPacket:a,numFrames:b,readIndex:c}){this.pendingFrames-=b;if(a){for(let e=\\n0;e<this.outputsCount;++e){let f=!1,g=b;(c+b)%this.hardwareBufferSize<c&&(f=!0,g=this.hardwareBufferSize-c);this.vanillaOutputChannels[e].set(a[e].subarray(0,g),c);f&&this.vanillaOutputChannels[e].set(a[e].subarray(g))}this.vanillaAvailableFrames+=b}this.vanillaFirstTransferDone||(this.vanillaFirstTransferDone=!0,Y&&Y())}process({inputBuffer:a,outputBuffer:b}){if(\\\"realtimePerformanceEnded\\\"===this.workerMessagePort.vanillaWorkerState)return ta({contextUid:this.contextUid,newPlayState:\\\"realtimePerformanceEnded\\\"}),\\n!0;if(!this.vanillaInitialized){var c=4*this.softwareBufferSize;this.requestPort.postMessage({readIndex:0,numFrames:c});this.pendingFrames+=c;return this.vanillaInitialized=!0}if(!this.vanillaFirstTransferDone)return!0;c=X(0,this.inputsCount).map(h=>a.getChannelData(h));const e=X(0,this.outputsCount).map(h=>b.getChannelData(h));var f=0<c.length;const g=(this.vanillaOutputReadIndex+e[0].length)%this.hardwareBufferSize,k=f?(this.vanillaInputReadIndex+c[0].length)%this.hardwareBufferSize:0;if(\\\"realtimePerformanceStarted\\\"!==\\nthis.workerMessagePort.vanillaWorkerState&&\\\"realtimePerformanceResumed\\\"!==this.workerMessagePort.vanillaWorkerState)return e.forEach(h=>{h.fill(0)}),!0;if(this.vanillaAvailableFrames>=e[0].length){e.forEach((h,l)=>{h.set(this.vanillaOutputChannels[l].subarray(this.vanillaOutputReadIndex,g<this.vanillaOutputReadIndex?this.hardwareBufferSize:g))});if(0<this.inputsCount&&f&&0<c[0].length&&(f=4*this.softwareBufferSize,c.forEach((h,l)=>{this.vanillaInputChannels[l].set(h,this.vanillaInputReadIndex)}),\\n0===k%f)){const h=[],l=(0===k?this.hardwareBufferSize:k)-f,m=0===k?this.hardwareBufferSize:k;this.vanillaInputChannels.forEach(p=>{h.push(p.subarray(l,m))});this.transferInputFrames(h)}this.vanillaOutputReadIndex=g;this.vanillaInputReadIndex=k;this.vanillaAvailableFrames-=e[0].length;this.bufferUnderrunCount=0}else 1<this.bufferUnderrunCount&&12>this.bufferUnderrunCount&&(this.workerMessagePort.post(\\\"Buffer underrun\\\"),this.bufferUnderrunCount+=1),100===this.bufferUnderrunCount&&(this.workerMessagePort.post(\\\"FATAL: 100 buffers failed in a row\\\"),\\nthis.workerMessagePort.broadcastPlayState(\\\"realtimePerformanceEnded\\\"));this.vanillaAvailableFrames<4*this.softwareBufferSize&&this.pendingFrames<4*this.softwareBufferSize&&(this.requestPort.postMessage({readIndex:(this.vanillaAvailableFrames+g+this.pendingFrames)%this.hardwareBufferSize,numFrames:4*this.softwareBufferSize}),this.pendingFrames+=4*this.softwareBufferSize);return!0}}\\nconst ua=({audioInputPort:a})=>b=>a.postMessage(b),va=({port:a})=>{const b=new K;b.post=c=>a.postMessage({log:c});b.broadcastPlayState=c=>{\\\"realtimePerformanceStarted\\\"===b.vanillaWorkerState&&\\\"realtimePerformanceStarted\\\"===c||a.postMessage({playStateChange:c})};b.ready=!0;return b},wa=({requestPort:a,spnClassInstance:b})=>{a.addEventListener(\\\"message\\\",c=>{const {audioPacket:e,readIndex:f,numFrames:g}=c.data;b.updateVanillaFrames({audioPacket:e,numFrames:g,readIndex:f})});a.start();return a},ta=async({contextUid:a,\\nnewPlayState:b})=>{const c=Z.get(a);if(c)if(\\\"resume\\\"===b)\\\"suspended\\\"===c.audioContext.state&&c.audioContext.resume(),\\\"running\\\"===c.audioContext.state&&c.workerMessagePort.broadcastPlayState(\\\"realtimePerformanceResumed\\\");else if(c.workerMessagePort){if(\\\"realtimePerformanceEnded\\\"===b&&\\\"realtimePerformanceEnded\\\"!==c.workerMessagePort.vanillaWorkerState){c.workerMessagePort.broadcastPlayState(\\\"realtimePerformanceEnded\\\");if(c.autoConnect){const e=window[a+\\\"Node\\\"]||window.parent[`__csound_wasm_iframe_parent_${a}Node`];\\ne&&e.disconnect()}window[a+\\\"Node\\\"]&&delete window[a+\\\"Node\\\"];window.parent[`__csound_wasm_iframe_parent_${a}Node`]&&delete window.parent[`__csound_wasm_iframe_parent_${a}Node`];Z.delete(a);c.autoConnect&&!c.audioContextIsProvided&&qa(a)}else\\\"realtimePerformanceResumed\\\"===b&&\\\"suspended\\\"===c.audioContext.state&&c.audioContext.resume();c.workerMessagePort.vanillaWorkerState=b}};\\nx({initialize:async({contextUid:a,hardwareBufferSize:b,softwareBufferSize:c,inputsCount:e,outputsCount:f,sampleRate:g,audioInputPort:k,messagePort:h,requestPort:l,audioContextIsProvided:m,autoConnect:p,initialPlayState:v})=>{I(\\\"initializing old-spn worker in iframe\\\")();Y=void 0;const q=window[a]||window.parent[`__csound_wasm_iframe_parent_${a}`]||fa();b=new sa({audioContext:q,contextUid:a,hardwareBufferSize:b,softwareBufferSize:c,inputsCount:e,outputsCount:f,sampleRate:g,audioContextIsProvided:m,\\nautoConnect:p});h=va({port:h});k=ua({audioInputPort:k,spnClassInstance:b});wa({requestPort:l,spnClassInstance:b});b.initCallbacks({workerMessagePort:h,transferInputFrames:k,requestPort:l});Z.set(a,b);if(\\\"realtimePerformanceStarted\\\"===v)return await new Promise((r,E)=>{Y=r;setTimeout(()=>{if(\\\"function\\\"===typeof Y)return E(Error(\\\"a call to start() timed out\\\")),Y=void 0,-1},6E5)})},setPlayState:ta},function(a,b=self,c=\\\"*\\\"){return{postMessage:(e,f)=>a.postMessage(e,c,f),addEventListener:b.addEventListener.bind(b),\\nremoveEventListener:b.removeEventListener.bind(b)}}(window.parent));}).call(this);\\n//# sourceMappingURL=__compiled.old-spn.worker.js.map\\n\"]));\n         })","import * as Comlink from \"comlink/dist/esm/comlink.mjs\";\nimport { logOldSpnMain as log } from \"../logger\";\nimport { WebkitAudioContext } from \"../utils\";\nimport { requestMidi } from \"../utils/request-midi\";\nimport { requestMicrophoneNode } from \"./io.utils\";\n\nconst ScriptProcessorNodeWorker = goog.require(\"worker.old_spn\");\n\n// we reuse the spnWorker\n// since it handles multiple\n// audio Contexts via UID.\nlet spnWorker;\nlet proxyPort;\n\nlet UID = 0;\n\nclass ScriptProcessorNodeMainThread {\n  constructor({ audioContext, audioContextIsProvided, autoConnect }) {\n    this.autoConnect = autoConnect;\n    this.audioContextIsProvided = audioContextIsProvided;\n\n    this.audioContext = audioContext;\n    this.currentPlayState = undefined;\n    this.csoundWorkerMain = undefined;\n\n    // never default these, get it from\n    // csound-worker before starting\n    this.sampleRate = undefined;\n    this.inputsCount = undefined;\n    this.outputsCount = undefined;\n    this.hardwareBufferSize = undefined;\n    this.softwareBufferSize = undefined;\n\n    this.scriptProcessorNode = true;\n    log(\"ScriptProcessorNodeMainThread was constructed\")();\n  }\n\n  async terminateInstance() {\n    if (window[`__csound_wasm_iframe_parent_${this.contextUid}Node`]) {\n      window[`__csound_wasm_iframe_parent_${this.contextUid}Node`].disconnect();\n      delete window[`__csound_wasm_iframe_parent_${this.contextUid}Node`];\n    }\n    if (this.audioContext) {\n      if (this.audioContext.state !== \"closed\") {\n        try {\n          await this.audioContext.close();\n        } catch (error) {}\n      }\n      delete this.audioContext;\n    }\n    if (proxyPort) {\n      proxyPort[Comlink.releaseProxy]();\n      proxyPort = undefined;\n    }\n    if (this.iFrameElement) {\n      this.iFrameElement.remove();\n    }\n    spnWorker = undefined;\n    UID = 0;\n  }\n\n  async onPlayStateChange(newPlayState) {\n    if (this.currentPlayState === newPlayState) {\n      return;\n    }\n\n    switch (newPlayState) {\n      case \"realtimePerformanceStarted\": {\n        log(\"event received: realtimePerformanceStarted\")();\n        this.currentPlayState = newPlayState;\n        await this.initialize();\n        await this.csoundWorkerMain.eventPromises.releaseStartPromise();\n        this.publicEvents.triggerRealtimePerformanceStarted(this.csoundWorkerMain);\n        break;\n      }\n      case \"realtimePerformanceEnded\": {\n        log(\"event received: realtimePerformanceEnded\")();\n        if (window[`__csound_wasm_iframe_parent_${this.contextUid}Node`]) {\n          window[`__csound_wasm_iframe_parent_${this.contextUid}Node`].disconnect();\n          delete window[`__csound_wasm_iframe_parent_${this.contextUid}Node`];\n        }\n        break;\n      }\n\n      case \"realtimePerformancePaused\": {\n        if (this.csoundWorkerMain && this.csoundWorkerMain.eventPromises) {\n          this.csoundWorkerMain.publicEvents &&\n            this.csoundWorkerMain.publicEvents.triggerRealtimePerformancePaused(this);\n          await this.csoundWorkerMain.eventPromises.releasePausePromise();\n        }\n        break;\n      }\n\n      case \"realtimePerformanceResumed\": {\n        if (this.csoundWorkerMain && this.csoundWorkerMain.eventPromises) {\n          this.csoundWorkerMain.publicEvents &&\n            this.csoundWorkerMain.publicEvents.triggerRealtimePerformanceResumed(this);\n          await this.csoundWorkerMain.eventPromises.releaseResumePromise();\n        }\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n    this.currentPlayState = newPlayState;\n    if (\n      proxyPort &&\n      (newPlayState !== \"realtimePerformanceStarted\" || newPlayState !== \"renderStarted\")\n    ) {\n      await proxyPort.setPlayState({\n        contextUid: this.contextUid,\n        newPlayState,\n      });\n    }\n  }\n\n  async initIframe() {\n    // HACK FROM (but it works just fine when adding modern security models)\n    // https://github.com/GoogleChromeLabs/audioworklet-polyfill/blob/274792e5e3d189e04c9496bed24129118539b4b5/src/realm.js#L18-L20\n    if (typeof window === \"undefined\" || typeof window.document === \"undefined\") {\n      throw new TypeError(\"Can only run SPN in Browser scope\");\n    }\n\n    const parentScope = window.document;\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const iFrameHtml = [\n      `<!doctype html>`,\n      `<html lang=\"en\">`,\n      `<head>`,\n      `<meta charset=\"UTF-8\">`,\n      `</head>`,\n      `<body>`,\n      `<script type=\"text/javascript\" src=\"${ScriptProcessorNodeWorker()}\">\u003c/script>`,\n      `</body>`,\n    ].join(\"\\n\");\n\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const iFrameBlob = new Blob([iFrameHtml], { type: \"text/html\" });\n    this.iFrameElement = document.createElement(\"iframe\");\n\n    this.iFrameElement.src = URL.createObjectURL(iFrameBlob);\n    this.iFrameElement.sandbox.add(\"allow-scripts\", \"allow-same-origin\");\n\n    this.iFrameElement.style.cssText = \"position:absolute;left:0;top:-999px;width:1px;height:1px;\";\n\n    // appending early to have access to contentWindow\n    // eslint-disable-next-line unicorn/prevent-abbreviations\n    const iFrameOnLoad = new Promise((resolve) => {\n      // eslint-disable-next-line unicorn/prefer-add-event-listener\n      this.iFrameElement.onload = () => {\n        resolve();\n      };\n    });\n\n    parentScope.body.append(this.iFrameElement);\n\n    try {\n      await iFrameOnLoad;\n    } catch (error) {\n      console.error(error);\n    }\n\n    spnWorker = this.iFrameElement.contentWindow;\n  }\n\n  async initialize() {\n    if (!spnWorker) {\n      await this.initIframe();\n      if (!spnWorker) {\n        console.error(\"SPN FATAL: Couldn't create iFrame\");\n        return;\n      }\n    }\n    const contextUid = `audioWorklet${UID}`;\n    this.contextUid = contextUid;\n    UID += 1;\n\n    if (!proxyPort) {\n      proxyPort = Comlink.wrap(Comlink.windowEndpoint(spnWorker));\n    }\n\n    if (!this.audioContext) {\n      if (this.audioContextIsProvided) {\n        console.error(`fatal: the provided AudioContext was undefined`);\n      }\n      this.audioContext = new (WebkitAudioContext())({ sampleRate: this.sampleRate });\n    }\n    if (this.audioContext.state === \"closed\") {\n      if (this.audioContextIsProvided) {\n        console.error(`fatal: the provided AudioContext was closed, falling back new AudioContext`);\n      }\n      this.audioContext = new (WebkitAudioContext())({ sampleRate: this.sampleRate });\n    }\n\n    if (!this.audioContextIsProvided && this.sampleRate !== this.audioContext.sampleRate) {\n      this.audioContext = new (WebkitAudioContext())({ sampleRate: this.sampleRate });\n    }\n\n    // just set it both on parent and iframe\n    // since 1 works on linux and other one on mac\n    // leaking globals indeed\n    spnWorker[contextUid] = this.audioContext;\n    window[`__csound_wasm_iframe_parent_${contextUid}`] = this.audioContext;\n\n    let liveInput;\n    if (this.isRequestingInput) {\n      await new Promise((resolve) => {\n        const microphoneCallback = (stream) => {\n          if (stream) {\n            liveInput = this.audioContext.createMediaStreamSource(stream);\n          }\n          resolve();\n        };\n        requestMicrophoneNode(microphoneCallback);\n      });\n    }\n\n    log(\"initializing proxyPort\")();\n\n    await proxyPort.initialize(\n      Comlink.transfer(\n        {\n          contextUid,\n          hardwareBufferSize: 32768,\n          softwareBufferSize: 2048,\n          inputsCount: this.inputsCount,\n          outputsCount: this.outputsCount,\n          sampleRate: this.sampleRate,\n          audioInputPort: this.ipcMessagePorts.audioWorkerAudioInputPort,\n          messagePort: this.ipcMessagePorts.workerMessagePort2,\n          requestPort: this.ipcMessagePorts.audioWorkerFrameRequestPort,\n          audioContextIsProvided: this.audioContextIsProvided,\n          autoConnect: this.autoConnect,\n          initialPlayState: this.currentPlayState,\n        },\n        [\n          this.ipcMessagePorts.audioWorkerAudioInputPort,\n          this.ipcMessagePorts.workerMessagePort2,\n          this.ipcMessagePorts.audioWorkerFrameRequestPort,\n        ],\n      ),\n    );\n    log(\"done initializing proxyPort\")();\n\n    const audioNode =\n      spnWorker[`${contextUid}Node`] || window[`__csound_wasm_iframe_parent_${contextUid}Node`];\n    audioNode && liveInput && liveInput.connect(audioNode);\n\n    this.publicEvents.triggerOnAudioNodeCreated(audioNode);\n\n    if (this.isRequestingMidi && this.csoundWorkerMain && this.csoundWorkerMain.handleMidiInput) {\n      log(\"requesting for web-midi connection\")();\n      requestMidi({\n        onMidiMessage: this.csoundWorkerMain.handleMidiInput.bind(this.csoundWorkerMain),\n      });\n    }\n  }\n}\n\nexport default ScriptProcessorNodeMainThread;\n","/*\nThis file is based on @wasmerio/wasi-js which in turn is based on\nwasi Node implementation made by Gus Caplan.\n * https://github.com/wasmerio/wasmer-js\n * https://github.com/devsnek/node-wasi\n\nCopyright 2017 Syrus <me@syrusakbary.com>\nCopyright 2019 Gus Caplan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n*/\n\nif (typeof goog.global === \"undefined\") {\n  goog.global = {};\n}\n\nif (typeof goog.global.BigInt === \"undefined\") {\n  goog.global.BigInt = typeof BigInt !== \"undefined\" ? BigInt : Number;\n}\n\nexport const WASI_ESUCCESS = 0;\nexport const WASI_E2BIG = 1;\nexport const WASI_EACCES = 2;\nexport const WASI_EADDRINUSE = 3;\nexport const WASI_EADDRNOTAVAIL = 4;\nexport const WASI_EAFNOSUPPORT = 5;\nexport const WASI_EAGAIN = 6;\nexport const WASI_EALREADY = 7;\nexport const WASI_EBADF = 8;\nexport const WASI_EBADMSG = 9;\nexport const WASI_EBUSY = 10;\nexport const WASI_ECANCELED = 11;\nexport const WASI_ECHILD = 12;\nexport const WASI_ECONNABORTED = 13;\nexport const WASI_ECONNREFUSED = 14;\nexport const WASI_ECONNRESET = 15;\nexport const WASI_EDEADLK = 16;\nexport const WASI_EDESTADDRREQ = 17;\nexport const WASI_EDOM = 18;\nexport const WASI_EDQUOT = 19;\nexport const WASI_EEXIST = 20;\nexport const WASI_EFAULT = 21;\nexport const WASI_EFBIG = 22;\nexport const WASI_EHOSTUNREACH = 23;\nexport const WASI_EIDRM = 24;\nexport const WASI_EILSEQ = 25;\nexport const WASI_EINPROGRESS = 26;\nexport const WASI_EINTR = 27;\nexport const WASI_EINVAL = 28;\nexport const WASI_EIO = 29;\nexport const WASI_EISCONN = 30;\nexport const WASI_EISDIR = 31;\nexport const WASI_ELOOP = 32;\nexport const WASI_EMFILE = 33;\nexport const WASI_EMLINK = 34;\nexport const WASI_EMSGSIZE = 35;\nexport const WASI_EMULTIHOP = 36;\nexport const WASI_ENAMETOOLONG = 37;\nexport const WASI_ENETDOWN = 38;\nexport const WASI_ENETRESET = 39;\nexport const WASI_ENETUNREACH = 40;\nexport const WASI_ENFILE = 41;\nexport const WASI_ENOBUFS = 42;\nexport const WASI_ENODEV = 43;\nexport const WASI_ENOENT = 44;\nexport const WASI_ENOEXEC = 45;\nexport const WASI_ENOLCK = 46;\nexport const WASI_ENOLINK = 47;\nexport const WASI_ENOMEM = 48;\nexport const WASI_ENOMSG = 49;\nexport const WASI_ENOPROTOOPT = 50;\nexport const WASI_ENOSPC = 51;\nexport const WASI_ENOSYS = 52;\nexport const WASI_ENOTCONN = 53;\nexport const WASI_ENOTDIR = 54;\nexport const WASI_ENOTEMPTY = 55;\nexport const WASI_ENOTRECOVERABLE = 56;\nexport const WASI_ENOTSOCK = 57;\nexport const WASI_ENOTSUP = 58;\nexport const WASI_ENOTTY = 59;\nexport const WASI_ENXIO = 60;\nexport const WASI_EOVERFLOW = 61;\nexport const WASI_EOWNERDEAD = 62;\nexport const WASI_EPERM = 63;\nexport const WASI_EPIPE = 64;\nexport const WASI_EPROTO = 65;\nexport const WASI_EPROTONOSUPPORT = 66;\nexport const WASI_EPROTOTYPE = 67;\nexport const WASI_ERANGE = 68;\nexport const WASI_EROFS = 69;\nexport const WASI_ESPIPE = 70;\nexport const WASI_ESRCH = 71;\nexport const WASI_ESTALE = 72;\nexport const WASI_ETIMEDOUT = 73;\nexport const WASI_ETXTBSY = 74;\nexport const WASI_EXDEV = 75;\nexport const WASI_ENOTCAPABLE = 76;\n\nexport const WASI_SIGABRT = 0;\nexport const WASI_SIGALRM = 1;\nexport const WASI_SIGBUS = 2;\nexport const WASI_SIGCHLD = 3;\nexport const WASI_SIGCONT = 4;\nexport const WASI_SIGFPE = 5;\nexport const WASI_SIGHUP = 6;\nexport const WASI_SIGILL = 7;\nexport const WASI_SIGINT = 8;\nexport const WASI_SIGKILL = 9;\nexport const WASI_SIGPIPE = 10;\nexport const WASI_SIGQUIT = 11;\nexport const WASI_SIGSEGV = 12;\nexport const WASI_SIGSTOP = 13;\nexport const WASI_SIGTERM = 14;\nexport const WASI_SIGTRAP = 15;\nexport const WASI_SIGTSTP = 16;\nexport const WASI_SIGTTIN = 17;\nexport const WASI_SIGTTOU = 18;\nexport const WASI_SIGURG = 19;\nexport const WASI_SIGUSR1 = 20;\nexport const WASI_SIGUSR2 = 21;\nexport const WASI_SIGVTALRM = 22;\nexport const WASI_SIGXCPU = 23;\nexport const WASI_SIGXFSZ = 24;\n\nexport const WASI_FILETYPE_UNKNOWN = 0;\nexport const WASI_FILETYPE_BLOCK_DEVICE = 1;\nexport const WASI_FILETYPE_CHARACTER_DEVICE = 2;\nexport const WASI_FILETYPE_DIRECTORY = 3;\nexport const WASI_FILETYPE_REGULAR_FILE = 4;\nexport const WASI_FILETYPE_SOCKET_DGRAM = 5;\nexport const WASI_FILETYPE_SOCKET_STREAM = 6;\nexport const WASI_FILETYPE_SYMBOLIC_LINK = 7;\n\nexport const WASI_FDFLAG_APPEND = 0x0001;\nexport const WASI_FDFLAG_DSYNC = 0x0002;\nexport const WASI_FDFLAG_NONBLOCK = 0x0004;\nexport const WASI_FDFLAG_RSYNC = 0x0008;\nexport const WASI_FDFLAG_SYNC = 0x0010;\n\nexport const WASI_RIGHT_FD_DATASYNC = goog.global.BigInt(0x0000000000000001);\nexport const WASI_RIGHT_FD_READ = goog.global.BigInt(0x0000000000000002);\nexport const WASI_RIGHT_FD_SEEK = goog.global.BigInt(0x0000000000000004);\nexport const WASI_RIGHT_FD_FDSTAT_SET_FLAGS = goog.global.BigInt(0x0000000000000008);\nexport const WASI_RIGHT_FD_SYNC = goog.global.BigInt(0x0000000000000010);\nexport const WASI_RIGHT_FD_TELL = goog.global.BigInt(0x0000000000000020);\nexport const WASI_RIGHT_FD_WRITE = goog.global.BigInt(0x0000000000000040);\nexport const WASI_RIGHT_FD_ADVISE = goog.global.BigInt(0x0000000000000080);\nexport const WASI_RIGHT_FD_ALLOCATE = goog.global.BigInt(0x0000000000000100);\nexport const WASI_RIGHT_PATH_CREATE_DIRECTORY = goog.global.BigInt(0x0000000000000200);\nexport const WASI_RIGHT_PATH_CREATE_FILE = goog.global.BigInt(0x0000000000000400);\nexport const WASI_RIGHT_PATH_LINK_SOURCE = goog.global.BigInt(0x0000000000000800);\nexport const WASI_RIGHT_PATH_LINK_TARGET = goog.global.BigInt(0x0000000000001000);\nexport const WASI_RIGHT_PATH_OPEN = goog.global.BigInt(0x0000000000002000);\nexport const WASI_RIGHT_FD_READDIR = goog.global.BigInt(0x0000000000004000);\nexport const WASI_RIGHT_PATH_READLINK = goog.global.BigInt(0x0000000000008000);\nexport const WASI_RIGHT_PATH_RENAME_SOURCE = goog.global.BigInt(0x0000000000010000);\nexport const WASI_RIGHT_PATH_RENAME_TARGET = goog.global.BigInt(0x0000000000020000);\nexport const WASI_RIGHT_PATH_FILESTAT_GET = goog.global.BigInt(0x0000000000040000);\nexport const WASI_RIGHT_PATH_FILESTAT_SET_SIZE = goog.global.BigInt(0x0000000000080000);\nexport const WASI_RIGHT_PATH_FILESTAT_SET_TIMES = goog.global.BigInt(0x0000000000100000);\nexport const WASI_RIGHT_FD_FILESTAT_GET = goog.global.BigInt(0x0000000000200000);\nexport const WASI_RIGHT_FD_FILESTAT_SET_SIZE = goog.global.BigInt(0x0000000000400000);\nexport const WASI_RIGHT_FD_FILESTAT_SET_TIMES = goog.global.BigInt(0x0000000000800000);\nexport const WASI_RIGHT_PATH_SYMLINK = goog.global.BigInt(0x0000000001000000);\nexport const WASI_RIGHT_PATH_REMOVE_DIRECTORY = goog.global.BigInt(0x0000000002000000);\nexport const WASI_RIGHT_PATH_UNLINK_FILE = goog.global.BigInt(0x0000000004000000);\nexport const WASI_RIGHT_POLL_FD_READWRITE = goog.global.BigInt(0x0000000008000000);\nexport const WASI_RIGHT_SOCK_SHUTDOWN = goog.global.BigInt(0x0000000010000000);\n\nexport const RIGHTS_ALL =\n  WASI_RIGHT_FD_DATASYNC |\n  WASI_RIGHT_FD_READ |\n  WASI_RIGHT_FD_SEEK |\n  WASI_RIGHT_FD_FDSTAT_SET_FLAGS |\n  WASI_RIGHT_FD_SYNC |\n  WASI_RIGHT_FD_TELL |\n  WASI_RIGHT_FD_WRITE |\n  WASI_RIGHT_FD_ADVISE |\n  WASI_RIGHT_FD_ALLOCATE |\n  WASI_RIGHT_PATH_CREATE_DIRECTORY |\n  WASI_RIGHT_PATH_CREATE_FILE |\n  WASI_RIGHT_PATH_LINK_SOURCE |\n  WASI_RIGHT_PATH_LINK_TARGET |\n  WASI_RIGHT_PATH_OPEN |\n  WASI_RIGHT_FD_READDIR |\n  WASI_RIGHT_PATH_READLINK |\n  WASI_RIGHT_PATH_RENAME_SOURCE |\n  WASI_RIGHT_PATH_RENAME_TARGET |\n  WASI_RIGHT_PATH_FILESTAT_GET |\n  WASI_RIGHT_PATH_FILESTAT_SET_SIZE |\n  WASI_RIGHT_PATH_FILESTAT_SET_TIMES |\n  WASI_RIGHT_FD_FILESTAT_GET |\n  WASI_RIGHT_FD_FILESTAT_SET_TIMES |\n  WASI_RIGHT_FD_FILESTAT_SET_SIZE |\n  WASI_RIGHT_PATH_SYMLINK |\n  WASI_RIGHT_PATH_UNLINK_FILE |\n  WASI_RIGHT_PATH_REMOVE_DIRECTORY |\n  WASI_RIGHT_POLL_FD_READWRITE |\n  WASI_RIGHT_SOCK_SHUTDOWN;\n\nexport const RIGHTS_BLOCK_DEVICE_BASE = RIGHTS_ALL;\nexport const RIGHTS_BLOCK_DEVICE_INHERITING = RIGHTS_ALL;\n\nexport const RIGHTS_CHARACTER_DEVICE_BASE = RIGHTS_ALL;\nexport const RIGHTS_CHARACTER_DEVICE_INHERITING = RIGHTS_ALL;\n\nexport const RIGHTS_REGULAR_FILE_BASE =\n  WASI_RIGHT_FD_DATASYNC |\n  WASI_RIGHT_FD_READ |\n  WASI_RIGHT_FD_SEEK |\n  WASI_RIGHT_FD_FDSTAT_SET_FLAGS |\n  WASI_RIGHT_FD_SYNC |\n  WASI_RIGHT_FD_TELL |\n  WASI_RIGHT_FD_WRITE |\n  WASI_RIGHT_FD_ADVISE |\n  WASI_RIGHT_FD_ALLOCATE |\n  WASI_RIGHT_FD_FILESTAT_GET |\n  WASI_RIGHT_FD_FILESTAT_SET_SIZE |\n  WASI_RIGHT_FD_FILESTAT_SET_TIMES |\n  WASI_RIGHT_POLL_FD_READWRITE;\n\nexport const RIGHTS_REGULAR_FILE_INHERITING = goog.global.BigInt(0);\n\nexport const RIGHTS_DIRECTORY_BASE =\n  WASI_RIGHT_FD_FDSTAT_SET_FLAGS |\n  WASI_RIGHT_FD_SYNC |\n  WASI_RIGHT_FD_ADVISE |\n  WASI_RIGHT_PATH_CREATE_DIRECTORY |\n  WASI_RIGHT_PATH_CREATE_FILE |\n  WASI_RIGHT_PATH_LINK_SOURCE |\n  WASI_RIGHT_PATH_LINK_TARGET |\n  WASI_RIGHT_PATH_OPEN |\n  WASI_RIGHT_FD_READDIR |\n  WASI_RIGHT_PATH_READLINK |\n  WASI_RIGHT_PATH_RENAME_SOURCE |\n  WASI_RIGHT_PATH_RENAME_TARGET |\n  WASI_RIGHT_PATH_FILESTAT_GET |\n  WASI_RIGHT_PATH_FILESTAT_SET_SIZE |\n  WASI_RIGHT_PATH_FILESTAT_SET_TIMES |\n  WASI_RIGHT_FD_FILESTAT_GET |\n  WASI_RIGHT_FD_FILESTAT_SET_TIMES |\n  WASI_RIGHT_PATH_SYMLINK |\n  WASI_RIGHT_PATH_UNLINK_FILE |\n  WASI_RIGHT_PATH_REMOVE_DIRECTORY |\n  WASI_RIGHT_POLL_FD_READWRITE;\n\nexport const RIGHTS_DIRECTORY_INHERITING = RIGHTS_DIRECTORY_BASE | RIGHTS_REGULAR_FILE_BASE;\n\nexport const RIGHTS_SOCKET_BASE =\n  WASI_RIGHT_FD_READ |\n  WASI_RIGHT_FD_FDSTAT_SET_FLAGS |\n  WASI_RIGHT_FD_WRITE |\n  WASI_RIGHT_FD_FILESTAT_GET |\n  WASI_RIGHT_POLL_FD_READWRITE |\n  WASI_RIGHT_SOCK_SHUTDOWN;\n\nexport const RIGHTS_SOCKET_INHERITING = RIGHTS_ALL;\n\nexport const RIGHTS_TTY_BASE =\n  WASI_RIGHT_FD_READ |\n  WASI_RIGHT_FD_FDSTAT_SET_FLAGS |\n  WASI_RIGHT_FD_WRITE |\n  WASI_RIGHT_FD_FILESTAT_GET |\n  WASI_RIGHT_POLL_FD_READWRITE;\n\nexport const RIGHTS_TTY_INHERITING = goog.global.BigInt(0);\n\nexport const WASI_CLOCK_REALTIME = 0;\nexport const WASI_CLOCK_MONOTONIC = 1;\nexport const WASI_CLOCK_PROCESS_CPUTIME_ID = 2;\nexport const WASI_CLOCK_THREAD_CPUTIME_ID = 3;\n\nexport const WASI_EVENTTYPE_CLOCK = 0;\nexport const WASI_EVENTTYPE_FD_READ = 1;\nexport const WASI_EVENTTYPE_FD_WRITE = 2;\n\nexport const WASI_FILESTAT_SET_ATIM = Math.trunc(1);\nexport const WASI_FILESTAT_SET_ATIM_NOW = 1 << 1;\nexport const WASI_FILESTAT_SET_MTIM = 1 << 2;\nexport const WASI_FILESTAT_SET_MTIM_NOW = 1 << 3;\n\nexport const WASI_O_CREAT = Math.trunc(1);\nexport const WASI_O_DIRECTORY = 1 << 1;\nexport const WASI_O_EXCL = 1 << 2;\nexport const WASI_O_TRUNC = 1 << 3;\n\nexport const WASI_PREOPENTYPE_DIR = 0;\n\nexport const WASI_DIRCOOKIE_START = 0;\n\nexport const WASI_STDIN_FILENO = 0;\nexport const WASI_STDOUT_FILENO = 1;\nexport const WASI_STDERR_FILENO = 2;\n\nexport const WASI_WHENCE_SET = 0;\nexport const WASI_WHENCE_CUR = 1;\nexport const WASI_WHENCE_END = 2;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Provides a base class for custom Error objects such that the\n * stack is correctly maintained.\n *\n * You should never need to throw DebugError(msg) directly, Error(msg) is\n * sufficient.\n */\n\ngoog.module('goog.debug.Error');\ngoog.module.declareLegacyNamespace();\n\n\n\n/**\n * Base class for custom error objects.\n * @param {*=} msg The message associated with the error.\n * @param {{\n *    message: (?|undefined),\n *    name: (?|undefined),\n *    lineNumber: (?|undefined),\n *    fileName: (?|undefined),\n *    stack: (?|undefined),\n *    cause: (?|undefined),\n * }=} cause The original error object to chain with.\n * @constructor\n * @extends {Error}\n */\nfunction DebugError(msg = undefined, cause = undefined) {\n  // Attempt to ensure there is a stack trace.\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, DebugError);\n  } else {\n    const stack = new Error().stack;\n    if (stack) {\n      /** @override */\n      this.stack = stack;\n    }\n  }\n\n  if (msg) {\n    /** @override */\n    this.message = String(msg);\n  }\n\n  if (cause !== undefined) {\n    /** @type {?} */\n    this.cause = cause;\n  }\n\n  /**\n   * Whether to report this error to the server. Setting this to false will\n   * cause the error reporter to not report the error back to the server,\n   * which can be useful if the client knows that the error has already been\n   * logged on the server.\n   * @type {boolean}\n   */\n  this.reportErrorToServer = true;\n}\ngoog.inherits(DebugError, Error);\n\n\n/** @override @type {string} */\nDebugError.prototype.name = 'CustomError';\n\n\nexports = DebugError;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Definition of goog.dom.NodeType.\n */\n\ngoog.provide('goog.dom.NodeType');\n\n\n/**\n * Constants for the nodeType attribute in the Node interface.\n *\n * These constants match those specified in the Node interface. These are\n * usually present on the Node object in recent browsers, but not in older\n * browsers (specifically, early IEs) and thus are given here.\n *\n * In some browsers (early IEs), these are not defined on the Node object,\n * so they are provided here.\n *\n * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247\n * @enum {number}\n */\ngoog.dom.NodeType = {\n  ELEMENT: 1,\n  ATTRIBUTE: 2,\n  TEXT: 3,\n  CDATA_SECTION: 4,\n  ENTITY_REFERENCE: 5,\n  ENTITY: 6,\n  PROCESSING_INSTRUCTION: 7,\n  COMMENT: 8,\n  DOCUMENT: 9,\n  DOCUMENT_TYPE: 10,\n  DOCUMENT_FRAGMENT: 11,\n  NOTATION: 12\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities to check the preconditions, postconditions and\n * invariants runtime.\n *\n * Methods in this package are given special treatment by the compiler\n * for type-inference. For example, <code>goog.asserts.assert(foo)</code>\n * will make the compiler treat <code>foo</code> as non-nullable. Similarly,\n * <code>goog.asserts.assertNumber(foo)</code> informs the compiler about the\n * type of <code>foo</code>. Where applicable, such assertions are preferable to\n * casts by jsdoc with <code>@type</code>.\n *\n * The compiler has an option to disable asserts. So code like:\n * <code>\n * var x = goog.asserts.assert(foo());\n * goog.asserts.assert(bar());\n * </code>\n * will be transformed into:\n * <code>\n * var x = foo();\n * </code>\n * The compiler will leave in foo() (because its return value is used),\n * but it will remove bar() because it assumes it does not have side-effects.\n *\n * Additionally, note the compiler will consider the type to be \"tightened\" for\n * all statements <em>after</em> the assertion. For example:\n * <code>\n * const /** ?Object &#ast;/ value = foo();\n * goog.asserts.assert(value);\n * // \"value\" is of type {!Object} at this point.\n * </code>\n */\n\ngoog.provide('goog.asserts');\ngoog.provide('goog.asserts.AssertionError');\n\ngoog.require('goog.debug.Error');\ngoog.require('goog.dom.NodeType');\n\n\n/**\n * @define {boolean} Whether to strip out asserts or to leave them in.\n */\ngoog.asserts.ENABLE_ASSERTS =\n    goog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);\n\n\n\n/**\n * Error object for failed assertions.\n * @param {string} messagePattern The pattern that was used to form message.\n * @param {!Array<*>} messageArgs The items to substitute into the pattern.\n * @constructor\n * @extends {goog.debug.Error}\n * @final\n */\ngoog.asserts.AssertionError = function(messagePattern, messageArgs) {\n  'use strict';\n  goog.debug.Error.call(this, goog.asserts.subs_(messagePattern, messageArgs));\n\n  /**\n   * The message pattern used to format the error message. Error handlers can\n   * use this to uniquely identify the assertion.\n   * @type {string}\n   */\n  this.messagePattern = messagePattern;\n};\ngoog.inherits(goog.asserts.AssertionError, goog.debug.Error);\n\n\n/** @override @type {string} */\ngoog.asserts.AssertionError.prototype.name = 'AssertionError';\n\n\n/**\n * The default error handler.\n * @param {!goog.asserts.AssertionError} e The exception to be handled.\n * @return {void}\n */\ngoog.asserts.DEFAULT_ERROR_HANDLER = function(e) {\n  'use strict';\n  throw e;\n};\n\n\n/**\n * The handler responsible for throwing or logging assertion errors.\n * @private {function(!goog.asserts.AssertionError)}\n */\ngoog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\"foo%s hot%s\", \"bar\", \"dog\") becomes \"foobar hotdog\".\n * @param {string} pattern The string containing the pattern.\n * @param {!Array<*>} subs The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n * @private\n */\ngoog.asserts.subs_ = function(pattern, subs) {\n  'use strict';\n  var splitParts = pattern.split('%s');\n  var returnString = '';\n\n  // Replace up to the last split part. We are inserting in the\n  // positions between split parts.\n  var subLast = splitParts.length - 1;\n  for (var i = 0; i < subLast; i++) {\n    // keep unsupplied as '%s'\n    var sub = (i < subs.length) ? subs[i] : '%s';\n    returnString += splitParts[i] + sub;\n  }\n  return returnString + splitParts[subLast];\n};\n\n\n/**\n * Throws an exception with the given message and \"Assertion failed\" prefixed\n * onto it.\n * @param {string} defaultMessage The message to use if givenMessage is empty.\n * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.\n * @param {string|undefined} givenMessage Message supplied by the caller.\n * @param {Array<*>} givenArgs The substitution arguments for givenMessage.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @private\n */\ngoog.asserts.doAssertFailure_ = function(\n    defaultMessage, defaultArgs, givenMessage, givenArgs) {\n  'use strict';\n  var message = 'Assertion failed';\n  if (givenMessage) {\n    message += ': ' + givenMessage;\n    var args = givenArgs;\n  } else if (defaultMessage) {\n    message += ': ' + defaultMessage;\n    args = defaultArgs;\n  }\n  // The '' + works around an Opera 10 bug in the unit tests. Without it,\n  // a stack trace is added to var message above. With this, a stack trace is\n  // not added until this line (it causes the extra garbage to be added after\n  // the assertion message instead of in the middle of it).\n  var e = new goog.asserts.AssertionError('' + message, args || []);\n  goog.asserts.errorHandler_(e);\n};\n\n\n/**\n * Sets a custom error handler that can be used to customize the behavior of\n * assertion failures, for example by turning all assertion failures into log\n * messages.\n * @param {function(!goog.asserts.AssertionError)} errorHandler\n * @return {void}\n */\ngoog.asserts.setErrorHandler = function(errorHandler) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_ = errorHandler;\n  }\n};\n\n\n/**\n * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is\n * true.\n * @template T\n * @param {T} condition The condition to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {T} The value of the condition.\n * @throws {goog.asserts.AssertionError} When the condition evaluates to false.\n * @closurePrimitive {asserts.truthy}\n */\ngoog.asserts.assert = function(condition, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && !condition) {\n    goog.asserts.doAssertFailure_(\n        '', null, opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return condition;\n};\n\n\n/**\n * Checks if `value` is `null` or `undefined` if goog.asserts.ENABLE_ASSERTS is\n * true.\n *\n * @param {T} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {R} `value` with its type narrowed to exclude `null` and `undefined`.\n *\n * @template T\n * @template R :=\n *     mapunion(T, (V) =>\n *         cond(eq(V, 'null'),\n *             none(),\n *             cond(eq(V, 'undefined'),\n *                 none(),\n *                 V)))\n *  =:\n *\n * @throws {!goog.asserts.AssertionError} When `value` is `null` or `undefined`.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertExists = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && value == null) {\n    goog.asserts.doAssertFailure_(\n        'Expected to exist: %s.', [value], opt_message,\n        Array.prototype.slice.call(arguments, 2));\n  }\n  return value;\n};\n\n\n/**\n * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case\n * when we want to add a check in the unreachable area like switch-case\n * statement:\n *\n * <pre>\n *  switch(type) {\n *    case FOO: doSomething(); break;\n *    case BAR: doSomethingElse(); break;\n *    default: goog.asserts.fail('Unrecognized type: ' + type);\n *      // We have only 2 types - \"default:\" section is unreachable code.\n *  }\n * </pre>\n *\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {void}\n * @throws {goog.asserts.AssertionError} Failure.\n * @closurePrimitive {asserts.fail}\n */\ngoog.asserts.fail = function(opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS) {\n    goog.asserts.errorHandler_(new goog.asserts.AssertionError(\n        'Failure' + (opt_message ? ': ' + opt_message : ''),\n        Array.prototype.slice.call(arguments, 1)));\n  }\n};\n\n\n/**\n * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {number} The value, guaranteed to be a number when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a number.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertNumber = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && typeof value !== 'number') {\n    goog.asserts.doAssertFailure_(\n        'Expected number but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n\n/**\n * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {string} The value, guaranteed to be a string when asserts enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a string.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertString = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && typeof value !== 'string') {\n    goog.asserts.doAssertFailure_(\n        'Expected string but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {string} */ (value);\n};\n\n\n/**\n * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Function} The value, guaranteed to be a function when asserts\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a function.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertFunction = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && typeof value !== 'function') {\n    goog.asserts.doAssertFailure_(\n        'Expected function but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Function} */ (value);\n};\n\n\n/**\n * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Object} The value, guaranteed to be a non-null object.\n * @throws {goog.asserts.AssertionError} When the value is not an object.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertObject = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected object but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Object} */ (value);\n};\n\n\n/**\n * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Array<?>} The value, guaranteed to be a non-null array.\n * @throws {goog.asserts.AssertionError} When the value is not an array.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertArray = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && !Array.isArray(value)) {\n    goog.asserts.doAssertFailure_(\n        'Expected array but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Array<?>} */ (value);\n};\n\n\n/**\n * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {boolean} The value, guaranteed to be a boolean when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not a boolean.\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertBoolean = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && typeof value !== 'boolean') {\n    goog.asserts.doAssertFailure_(\n        'Expected boolean but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {boolean} */ (value);\n};\n\n\n/**\n * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @return {!Element} The value, likely to be a DOM Element when asserts are\n *     enabled.\n * @throws {goog.asserts.AssertionError} When the value is not an Element.\n * @closurePrimitive {asserts.matchesReturn}\n * @deprecated Use goog.asserts.dom.assertIsElement instead.\n */\ngoog.asserts.assertElement = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS &&\n      (!goog.isObject(value) ||\n       /** @type {!Node} */ (value).nodeType != goog.dom.NodeType.ELEMENT)) {\n    goog.asserts.doAssertFailure_(\n        'Expected Element but got %s: %s.', [goog.typeOf(value), value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {!Element} */ (value);\n};\n\n\n/**\n * Checks if the value is an instance of the user-defined type if\n * goog.asserts.ENABLE_ASSERTS is true.\n *\n * The compiler may tighten the type returned by this function.\n *\n * Do not use this to ensure a value is an HTMLElement or a subclass! Cross-\n * document DOM inherits from separate - though identical - browser classes, and\n * such a check will unexpectedly fail. Please use the methods in\n * goog.asserts.dom for these purposes.\n *\n * @param {?} value The value to check.\n * @param {function(new: T, ...)} type A user-defined constructor.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not an instance of\n *     type.\n * @return {T}\n * @template T\n * @closurePrimitive {asserts.matchesReturn}\n */\ngoog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {\n    goog.asserts.doAssertFailure_(\n        'Expected instanceof %s but got %s.',\n        [goog.asserts.getType_(type), goog.asserts.getType_(value)],\n        opt_message, Array.prototype.slice.call(arguments, 3));\n  }\n  return value;\n};\n\n\n/**\n * Checks whether the value is a finite number, if goog.asserts.ENABLE_ASSERTS\n * is true.\n *\n * @param {*} value The value to check.\n * @param {string=} opt_message Error message in case of failure.\n * @param {...*} var_args The items to substitute into the failure message.\n * @throws {goog.asserts.AssertionError} When the value is not a number, or is\n *     a non-finite number such as NaN, Infinity or -Infinity.\n * @return {number} The value initially passed in.\n */\ngoog.asserts.assertFinite = function(value, opt_message, var_args) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS &&\n      (typeof value != 'number' || !isFinite(value))) {\n    goog.asserts.doAssertFailure_(\n        'Expected %s to be a finite number but it is not.', [value],\n        opt_message, Array.prototype.slice.call(arguments, 2));\n  }\n  return /** @type {number} */ (value);\n};\n\n/**\n * Returns the type of a value. If a constructor is passed, and a suitable\n * string cannot be found, 'unknown type name' will be returned.\n * @param {*} value A constructor, object, or primitive.\n * @return {string} The best display name for the value, or 'unknown type name'.\n * @private\n */\ngoog.asserts.getType_ = function(value) {\n  'use strict';\n  if (value instanceof Function) {\n    return value.displayName || value.name || 'unknown type name';\n  } else if (value instanceof Object) {\n    return /** @type {string} */ (value.constructor.displayName) ||\n        value.constructor.name || Object.prototype.toString.call(value);\n  } else {\n    return value === null ? 'null' : typeof value;\n  }\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for manipulating arrays.\n */\n\n\ngoog.module('goog.array');\ngoog.module.declareLegacyNamespace();\n\nconst asserts = goog.require('goog.asserts');\n\n\n/**\n * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should\n * rely on Array.prototype functions, if available.\n *\n * The Array.prototype functions can be defined by external libraries like\n * Prototype and setting this flag to false forces closure to use its own\n * goog.array implementation.\n *\n * If your javascript can be loaded by a third party site and you are wary about\n * relying on the prototype functions, specify\n * \"--define goog.NATIVE_ARRAY_PROTOTYPES=false\" to the JSCompiler.\n *\n * Setting goog.TRUSTED_SITE to false will automatically set\n * NATIVE_ARRAY_PROTOTYPES to false.\n */\ngoog.NATIVE_ARRAY_PROTOTYPES =\n    goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);\n\n\n/**\n * @define {boolean} If true, JSCompiler will use the native implementation of\n * array functions where appropriate (e.g., `Array#filter`) and remove the\n * unused pure JS implementation.\n */\nconst ASSUME_NATIVE_FUNCTIONS = goog.define(\n    'goog.array.ASSUME_NATIVE_FUNCTIONS', goog.FEATURESET_YEAR > 2012);\nexports.ASSUME_NATIVE_FUNCTIONS = ASSUME_NATIVE_FUNCTIONS;\n\n\n/**\n * Returns the last element in an array without removing it.\n * Same as {@link goog.array.last}.\n * @param {IArrayLike<T>|string} array The array.\n * @return {T} Last item in array.\n * @template T\n */\nfunction peek(array) {\n  return array[array.length - 1];\n}\nexports.peek = peek;\n\n\n/**\n * Returns the last element in an array without removing it.\n * Same as {@link goog.array.peek}.\n * @param {IArrayLike<T>|string} array The array.\n * @return {T} Last item in array.\n * @template T\n */\nexports.last = peek;\n\n// NOTE(arv): Since most of the array functions are generic it allows you to\n// pass an array-like object. Strings have a length and are considered array-\n// like. However, the 'in' operator does not work on strings so we cannot just\n// use the array path even if the browser supports indexing into strings. We\n// therefore end up splitting the string.\n\n\n/**\n * Returns the index of the first element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}\n *\n * @param {IArrayLike<T>|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at index 0.\n * @return {number} The index of the first matching array element.\n * @template T\n */\nconst indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      const fromIndex = opt_fromIndex == null ?\n          0 :\n          (opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) :\n                               opt_fromIndex);\n\n      if (typeof arr === 'string') {\n        // Array.prototype.indexOf uses === so only strings should be found.\n        if (typeof obj !== 'string' || obj.length != 1) {\n          return -1;\n        }\n        return arr.indexOf(obj, fromIndex);\n      }\n\n      for (let i = fromIndex; i < arr.length; i++) {\n        if (i in arr && arr[i] === obj) return i;\n      }\n      return -1;\n    };\nexports.indexOf = indexOf;\n\n\n/**\n * Returns the index of the last element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}\n *\n * @param {!IArrayLike<T>|string} arr The array to be searched.\n * @param {T} obj The object for which we are searching.\n * @param {?number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at the end of the array.\n * @return {number} The index of the last matching array element.\n * @template T\n */\nconst lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?\n    function(arr, obj, opt_fromIndex) {\n      asserts.assert(arr.length != null);\n\n      // Firefox treats undefined and null as 0 in the fromIndex argument which\n      // leads it to always return -1\n      const fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n      return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      let fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n\n      if (fromIndex < 0) {\n        fromIndex = Math.max(0, arr.length + fromIndex);\n      }\n\n      if (typeof arr === 'string') {\n        // Array.prototype.lastIndexOf uses === so only strings should be found.\n        if (typeof obj !== 'string' || obj.length != 1) {\n          return -1;\n        }\n        return arr.lastIndexOf(obj, fromIndex);\n      }\n\n      for (let i = fromIndex; i >= 0; i--) {\n        if (i in arr && arr[i] === obj) return i;\n      }\n      return -1;\n    };\nexports.lastIndexOf = lastIndexOf;\n\n\n/**\n * Calls a function for each element in an array. Skips holes in the array.\n * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}\n *\n * @param {IArrayLike<T>|string} arr Array or array like object over\n *     which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function takes 3 arguments (the element, the index and the\n *     array). The return value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @template T,S\n */\nconst forEach = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      Array.prototype.forEach.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  // must be fixed during loop... see docs\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2) {\n          f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n        }\n      }\n    };\nexports.forEach = forEach;\n\n\n/**\n * Calls a function for each element in an array, starting from the last\n * element rather than the first.\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function\n *     takes 3 arguments (the element, the index and the array). The return\n *     value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @template T,S\n */\nfunction forEachRight(arr, f, opt_obj) {\n  const l = arr.length;  // must be fixed during loop... see docs\n  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (let i = l - 1; i >= 0; --i) {\n    if (i in arr2) {\n      f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n    }\n  }\n}\nexports.forEachRight = forEachRight;\n\n\n/**\n * Calls a function for each element in an array, and if the function returns\n * true adds the element to a new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?):boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and must\n *     return a Boolean. If the return value is true the element is added to the\n *     result array. If it is false the element is not included.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {!Array<T>} a new array in which only elements that passed the test\n *     are present.\n * @template T,S\n */\nconst filter = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.filter.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  // must be fixed during loop... see docs\n      const res = [];\n      let resLength = 0;\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2) {\n          const val = arr2[i];  // in case f mutates arr2\n          if (f.call(/** @type {?} */ (opt_obj), val, i, arr)) {\n            res[resLength++] = val;\n          }\n        }\n      }\n      return res;\n    };\nexports.filter = filter;\n\n\n/**\n * Calls a function for each element in an array and inserts the result into a\n * new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-map}\n *\n * @param {IArrayLike<VALUE>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call\n *     for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return something. The result will be\n *     inserted into a new array.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.\n * @return {!Array<RESULT>} a new array with the results from f.\n * @template THIS, VALUE, RESULT\n */\nconst map = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.map.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  // must be fixed during loop... see docs\n      const res = new Array(l);\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2) {\n          res[i] = f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);\n        }\n      }\n      return res;\n    };\nexports.map = map;\n\n\n/**\n * Passes every element of an array into a function and accumulates the result.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}\n * Note that this implementation differs from the native Array.prototype.reduce\n * in that the initial value is assumed to be defined (the MDN docs linked above\n * recommend not omitting this parameter, although it is technically optional).\n *\n * For example:\n * var a = [1, 2, 3, 4];\n * reduce(a, function(r, v, i, arr) {return r + v;}, 0);\n * returns 10\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {R} Result of evaluating f repeatedly across the values of the array.\n * @template T,S,R\n */\nconst reduce = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?\n    function(arr, f, val, opt_obj) {\n      asserts.assert(arr.length != null);\n      if (opt_obj) {\n        f = goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduce.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      let rval = val;\n      forEach(arr, function(val, index) {\n        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\nexports.reduce = reduce;\n\n\n/**\n * Passes every element of an array into a function and accumulates the result,\n * starting from the last element and working towards the first.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}\n *\n * For example:\n * var a = ['a', 'b', 'c'];\n * reduceRight(a, function(r, v, i, arr) {return r + v;}, '');\n * returns 'cba'\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {R} Object returned as a result of evaluating f repeatedly across the\n *     values of the array.\n * @template T,S,R\n */\nconst reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?\n    function(arr, f, val, opt_obj) {\n      asserts.assert(arr.length != null);\n      asserts.assert(f != null);\n      if (opt_obj) {\n        f = goog.bind(f, opt_obj);\n      }\n      return Array.prototype.reduceRight.call(arr, f, val);\n    } :\n    function(arr, f, val, opt_obj) {\n      let rval = val;\n      forEachRight(arr, function(val, index) {\n        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);\n      });\n      return rval;\n    };\nexports.reduceRight = reduceRight;\n\n\n/**\n * Calls f for each element of an array. If any call returns true, some()\n * returns true (without checking the remaining elements). If all calls\n * return false, some() returns false.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-some}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} true if any element passes the test.\n * @template T,S\n */\nconst some = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.some.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  // must be fixed during loop... see docs\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n          return true;\n        }\n      }\n      return false;\n    };\nexports.some = some;\n\n\n/**\n * Call f for each element of an array. If all calls return true, every()\n * returns true. If any call returns false, every() returns false and\n * does not continue to check the remaining elements.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-every}\n *\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} false if any element fails the test.\n * @template T,S\n */\nconst every = goog.NATIVE_ARRAY_PROTOTYPES &&\n        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?\n    function(arr, f, opt_obj) {\n      asserts.assert(arr.length != null);\n\n      return Array.prototype.every.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      const l = arr.length;  // must be fixed during loop... see docs\n      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n      for (let i = 0; i < l; i++) {\n        if (i in arr2 && !f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n          return false;\n        }\n      }\n      return true;\n    };\nexports.every = every;\n\n\n/**\n * Counts the array elements that fulfill the predicate, i.e. for which the\n * callback function returns true. Skips holes in the array.\n *\n * @param {!IArrayLike<T>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this: S, T, number, ?): boolean} f The function to call for\n *     every element. Takes 3 arguments (the element, the index and the array).\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @return {number} The number of the matching elements.\n * @template T,S\n */\nfunction count(arr, f, opt_obj) {\n  let count = 0;\n  forEach(arr, function(element, index, arr) {\n    if (f.call(/** @type {?} */ (opt_obj), element, index, arr)) {\n      ++count;\n    }\n  }, opt_obj);\n  return count;\n}\nexports.count = count;\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return that element.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T|null} The first array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\nfunction find(arr, f, opt_obj) {\n  const i = findIndex(arr, f, opt_obj);\n  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];\n}\nexports.find = find;\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return its index.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the first array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\nfunction findIndex(arr, f, opt_obj) {\n  const l = arr.length;  // must be fixed during loop... see docs\n  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (let i = 0; i < l; i++) {\n    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n}\nexports.findIndex = findIndex;\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return that element.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T|null} The last array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\nfunction findRight(arr, f, opt_obj) {\n  const i = findIndexRight(arr, f, opt_obj);\n  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];\n}\nexports.findRight = findRight;\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return its index.\n * @param {IArrayLike<T>|string} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the last array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\nfunction findIndexRight(arr, f, opt_obj) {\n  const l = arr.length;  // must be fixed during loop... see docs\n  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;\n  for (let i = l - 1; i >= 0; i--) {\n    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n}\nexports.findIndexRight = findIndexRight;\n\n\n/**\n * Whether the array contains the given object.\n * @param {IArrayLike<?>|string} arr The array to test for the presence of the\n *     element.\n * @param {*} obj The object for which to test.\n * @return {boolean} true if obj is present.\n */\nfunction contains(arr, obj) {\n  return indexOf(arr, obj) >= 0;\n}\nexports.contains = contains;\n\n\n/**\n * Whether the array is empty.\n * @param {IArrayLike<?>|string} arr The array to test.\n * @return {boolean} true if empty.\n */\nfunction isEmpty(arr) {\n  return arr.length == 0;\n}\nexports.isEmpty = isEmpty;\n\n\n/**\n * Clears the array.\n * @param {IArrayLike<?>} arr Array or array like object to clear.\n */\nfunction clear(arr) {\n  // For non real arrays we don't have the magic length so we delete the\n  // indices.\n  if (!Array.isArray(arr)) {\n    for (let i = arr.length - 1; i >= 0; i--) {\n      delete arr[i];\n    }\n  }\n  arr.length = 0;\n}\nexports.clear = clear;\n\n\n/**\n * Pushes an item into an array, if it's not already in the array.\n * @param {Array<T>} arr Array into which to insert the item.\n * @param {T} obj Value to add.\n * @template T\n */\nfunction insert(arr, obj) {\n  if (!contains(arr, obj)) {\n    arr.push(obj);\n  }\n}\nexports.insert = insert;\n\n\n/**\n * Inserts an object at the given index of the array.\n * @param {IArrayLike<?>} arr The array to modify.\n * @param {*} obj The object to insert.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\nfunction insertAt(arr, obj, opt_i) {\n  splice(arr, opt_i, 0, obj);\n}\nexports.insertAt = insertAt;\n\n\n/**\n * Inserts at the given index of the array, all elements of another array.\n * @param {IArrayLike<?>} arr The array to modify.\n * @param {IArrayLike<?>} elementsToAdd The array of elements to add.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\nfunction insertArrayAt(arr, elementsToAdd, opt_i) {\n  goog.partial(splice, arr, opt_i, 0).apply(null, elementsToAdd);\n}\nexports.insertArrayAt = insertArrayAt;\n\n\n/**\n * Inserts an object into an array before a specified object.\n * @param {Array<T>} arr The array to modify.\n * @param {T} obj The object to insert.\n * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2\n *     is omitted or not found, obj is inserted at the end of the array.\n * @template T\n */\nfunction insertBefore(arr, obj, opt_obj2) {\n  let i;\n  if (arguments.length == 2 || (i = indexOf(arr, opt_obj2)) < 0) {\n    arr.push(obj);\n  } else {\n    insertAt(arr, obj, i);\n  }\n}\nexports.insertBefore = insertBefore;\n\n\n/**\n * Removes the first occurrence of a particular value from an array.\n * @param {IArrayLike<T>} arr Array from which to remove\n *     value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n */\nfunction remove(arr, obj) {\n  const i = indexOf(arr, obj);\n  let rv;\n  if ((rv = i >= 0)) {\n    removeAt(arr, i);\n  }\n  return rv;\n}\nexports.remove = remove;\n\n\n/**\n * Removes the last occurrence of a particular value from an array.\n * @param {!IArrayLike<T>} arr Array from which to remove value.\n * @param {T} obj Object to remove.\n * @return {boolean} True if an element was removed.\n * @template T\n */\nfunction removeLast(arr, obj) {\n  const i = lastIndexOf(arr, obj);\n  if (i >= 0) {\n    removeAt(arr, i);\n    return true;\n  }\n  return false;\n}\nexports.removeLast = removeLast;\n\n\n/**\n * Removes from an array the element at index i\n * @param {IArrayLike<?>} arr Array or array like object from which to\n *     remove value.\n * @param {number} i The index to remove.\n * @return {boolean} True if an element was removed.\n */\nfunction removeAt(arr, i) {\n  asserts.assert(arr.length != null);\n\n  // use generic form of splice\n  // splice returns the removed items and if successful the length of that\n  // will be 1\n  return Array.prototype.splice.call(arr, i, 1).length == 1;\n}\nexports.removeAt = removeAt;\n\n\n/**\n * Removes the first value that satisfies the given condition.\n * @param {IArrayLike<T>} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {boolean} True if an element was removed.\n * @template T,S\n */\nfunction removeIf(arr, f, opt_obj) {\n  const i = findIndex(arr, f, opt_obj);\n  if (i >= 0) {\n    removeAt(arr, i);\n    return true;\n  }\n  return false;\n}\nexports.removeIf = removeIf;\n\n\n/**\n * Removes all values that satisfy the given condition.\n * @param {IArrayLike<T>} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The number of items removed\n * @template T,S\n */\nfunction removeAllIf(arr, f, opt_obj) {\n  let removedCount = 0;\n  forEachRight(arr, function(val, index) {\n    if (f.call(/** @type {?} */ (opt_obj), val, index, arr)) {\n      if (removeAt(arr, index)) {\n        removedCount++;\n      }\n    }\n  });\n  return removedCount;\n}\nexports.removeAllIf = removeAllIf;\n\n\n/**\n * Returns a new array that is the result of joining the arguments.  If arrays\n * are passed then their items are added, however, if non-arrays are passed they\n * will be added to the return array as is.\n *\n * Note that ArrayLike objects will be added as is, rather than having their\n * items added.\n *\n * concat([1, 2], [3, 4]) -> [1, 2, 3, 4]\n * concat(0, [1, 2]) -> [0, 1, 2]\n * concat([1, 2], null) -> [1, 2, null]\n *\n * There is bug in all current versions of IE (6, 7 and 8) where arrays created\n * in an iframe become corrupted soon (not immediately) after the iframe is\n * destroyed. This is common if loading data via goog.net.IframeIo, for example.\n * This corruption only affects the concat method which will start throwing\n * Catastrophic Errors (#-2147418113).\n *\n * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.\n *\n * Internally goog.array should use this, so that all methods will continue to\n * work on these broken array objects.\n *\n * @param {...*} var_args Items to concatenate.  Arrays will have each item\n *     added, while primitives and objects will be added as is.\n * @return {!Array<?>} The new resultant array.\n */\nfunction concat(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n}\nexports.concat = concat;\n\n\n/**\n * Returns a new array that contains the contents of all the arrays passed.\n * @param {...!Array<T>} var_args\n * @return {!Array<T>}\n * @template T\n */\nfunction join(var_args) {\n  return Array.prototype.concat.apply([], arguments);\n}\nexports.join = join;\n\n\n/**\n * Converts an object to an array.\n * @param {IArrayLike<T>|string} object  The object to convert to an\n *     array.\n * @return {!Array<T>} The object converted into an array. If object has a\n *     length property, every property indexed with a non-negative number\n *     less than length will be included in the result. If object does not\n *     have a length property, an empty array will be returned.\n * @template T\n */\nfunction toArray(object) {\n  const length = object.length;\n\n  // If length is not a number the following is false. This case is kept for\n  // backwards compatibility since there are callers that pass objects that are\n  // not array like.\n  if (length > 0) {\n    const rv = new Array(length);\n    for (let i = 0; i < length; i++) {\n      rv[i] = object[i];\n    }\n    return rv;\n  }\n  return [];\n}\nexports.toArray = toArray;\n\n\n/**\n * Does a shallow copy of an array.\n * @param {IArrayLike<T>|string} arr  Array or array-like object to\n *     clone.\n * @return {!Array<T>} Clone of the input array.\n * @template T\n */\nconst clone = toArray;\nexports.clone = clone;\n\n\n/**\n * Extends an array with another array, element, or \"array like\" object.\n * This function operates 'in-place', it does not create a new Array.\n *\n * Example:\n * var a = [];\n * extend(a, [0, 1]);\n * a; // [0, 1]\n * extend(a, 2);\n * a; // [0, 1, 2]\n *\n * @param {Array<VALUE>} arr1  The array to modify.\n * @param {...(IArrayLike<VALUE>|VALUE)} var_args The elements or arrays of\n *     elements to add to arr1.\n * @template VALUE\n */\nfunction extend(arr1, var_args) {\n  for (let i = 1; i < arguments.length; i++) {\n    const arr2 = arguments[i];\n    if (goog.isArrayLike(arr2)) {\n      const len1 = arr1.length || 0;\n      const len2 = arr2.length || 0;\n      arr1.length = len1 + len2;\n      for (let j = 0; j < len2; j++) {\n        arr1[len1 + j] = arr2[j];\n      }\n    } else {\n      arr1.push(arr2);\n    }\n  }\n}\nexports.extend = extend;\n\n\n/**\n * Adds or removes elements from an array. This is a generic version of Array\n * splice. This means that it might work on other objects similar to arrays,\n * such as the arguments object.\n *\n * @param {IArrayLike<T>} arr The array to modify.\n * @param {number|undefined} index The index at which to start changing the\n *     array. If not defined, treated as 0.\n * @param {number} howMany How many elements to remove (0 means no removal. A\n *     value below 0 is treated as zero and so is any other non number. Numbers\n *     are floored).\n * @param {...T} var_args Optional, additional elements to insert into the\n *     array.\n * @return {!Array<T>} the removed elements.\n * @template T\n */\nfunction splice(arr, index, howMany, var_args) {\n  asserts.assert(arr.length != null);\n\n  return Array.prototype.splice.apply(arr, slice(arguments, 1));\n}\nexports.splice = splice;\n\n\n/**\n * Returns a new array from a segment of an array. This is a generic version of\n * Array slice. This means that it might work on other objects similar to\n * arrays, such as the arguments object.\n *\n * @param {IArrayLike<T>|string} arr The array from\n * which to copy a segment.\n * @param {number} start The index of the first element to copy.\n * @param {number=} opt_end The index after the last element to copy.\n * @return {!Array<T>} A new array containing the specified segment of the\n *     original array.\n * @template T\n */\nfunction slice(arr, start, opt_end) {\n  asserts.assert(arr.length != null);\n\n  // passing 1 arg to slice is not the same as passing 2 where the second is\n  // null or undefined (in that case the second argument is treated as 0).\n  // we could use slice on the arguments object and then use apply instead of\n  // testing the length\n  if (arguments.length <= 2) {\n    return Array.prototype.slice.call(arr, start);\n  } else {\n    return Array.prototype.slice.call(arr, start, opt_end);\n  }\n}\nexports.slice = slice;\n\n\n/**\n * Removes all duplicates from an array (retaining only the first\n * occurrence of each array element).  This function modifies the\n * array in place and doesn't change the order of the non-duplicate items.\n *\n * For objects, duplicates are identified as having the same unique ID as\n * defined by {@link goog.getUid}.\n *\n * Alternatively you can specify a custom hash function that returns a unique\n * value for each item in the array it should consider unique.\n *\n * Runtime: N,\n * Worstcase space: 2N (no dupes)\n *\n * @param {IArrayLike<T>} arr The array from which to remove\n *     duplicates.\n * @param {Array=} opt_rv An optional array in which to return the results,\n *     instead of performing the removal inplace.  If specified, the original\n *     array will remain unchanged.\n * @param {function(T):string=} opt_hashFn An optional function to use to\n *     apply to every item in the array. This function should return a unique\n *     value for each item in the array it should consider unique.\n * @template T\n */\nfunction removeDuplicates(arr, opt_rv, opt_hashFn) {\n  const returnArray = opt_rv || arr;\n  const defaultHashFn = function(item) {\n    // Prefix each type with a single character representing the type to\n    // prevent conflicting keys (e.g. true and 'true').\n    return goog.isObject(item) ? 'o' + goog.getUid(item) :\n                                 (typeof item).charAt(0) + item;\n  };\n  const hashFn = opt_hashFn || defaultHashFn;\n\n  let cursorInsert = 0;\n  let cursorRead = 0;\n  const seen = {};\n\n  while (cursorRead < arr.length) {\n    const current = arr[cursorRead++];\n    const key = hashFn(current);\n    if (!Object.prototype.hasOwnProperty.call(seen, key)) {\n      seen[key] = true;\n      returnArray[cursorInsert++] = current;\n    }\n  }\n  returnArray.length = cursorInsert;\n}\nexports.removeDuplicates = removeDuplicates;\n\n\n/**\n * Searches the specified array for the specified target using the binary\n * search algorithm.  If no opt_compareFn is specified, elements are compared\n * using <code>defaultCompare</code>, which compares the elements\n * using the built in < and > operators.  This will produce the expected\n * behavior for homogeneous arrays of String(s) and Number(s). The array\n * specified <b>must</b> be sorted in ascending order (as defined by the\n * comparison function).  If the array is not sorted, results are undefined.\n * If the array contains multiple instances of the specified target value, the\n * left-most instance will be found.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<VALUE>} arr The array to be searched.\n * @param {TARGET} target The sought value.\n * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, the target value and an element from your array, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @template TARGET, VALUE\n */\nfunction binarySearch(arr, target, opt_compareFn) {\n  return binarySearch_(\n      arr, opt_compareFn || defaultCompare, false /* isEvaluator */, target);\n}\nexports.binarySearch = binarySearch;\n\n\n/**\n * Selects an index in the specified array using the binary search algorithm.\n * The evaluator receives an element and determines whether the desired index\n * is before, at, or after it.  The evaluator must be consistent (formally,\n * map(map(arr, evaluator, opt_obj), goog.math.sign)\n * must be monotonically non-increasing).\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<VALUE>} arr The array to be searched.\n * @param {function(this:THIS, VALUE, number, ?): number} evaluator\n *     Evaluator function that receives 3 arguments (the element, the index and\n *     the array). Should return a negative number, zero, or a positive number\n *     depending on whether the desired index is before, at, or after the\n *     element passed to it.\n * @param {THIS=} opt_obj The object to be used as the value of 'this'\n *     within evaluator.\n * @return {number} Index of the leftmost element matched by the evaluator, if\n *     such exists; otherwise (-(insertion point) - 1). The insertion point is\n *     the index of the first element for which the evaluator returns negative,\n *     or arr.length if no such element exists. The return value is non-negative\n *     iff a match is found.\n * @template THIS, VALUE\n */\nfunction binarySelect(arr, evaluator, opt_obj) {\n  return binarySearch_(\n      arr, evaluator, true /* isEvaluator */, undefined /* opt_target */,\n      opt_obj);\n}\nexports.binarySelect = binarySelect;\n\n\n/**\n * Implementation of a binary search algorithm which knows how to use both\n * comparison functions and evaluators. If an evaluator is provided, will call\n * the evaluator with the given optional data object, conforming to the\n * interface defined in binarySelect. Otherwise, if a comparison function is\n * provided, will call the comparison function against the given data object.\n *\n * This implementation purposefully does not use goog.bind or goog.partial for\n * performance reasons.\n *\n * Runtime: O(log n)\n *\n * @param {IArrayLike<?>} arr The array to be searched.\n * @param {function(?, ?, ?): number | function(?, ?): number} compareFn\n *     Either an evaluator or a comparison function, as defined by binarySearch\n *     and binarySelect above.\n * @param {boolean} isEvaluator Whether the function is an evaluator or a\n *     comparison function.\n * @param {?=} opt_target If the function is a comparison function, then\n *     this is the target to binary search for.\n * @param {Object=} opt_selfObj If the function is an evaluator, this is an\n *     optional this object for the evaluator.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @private\n */\nfunction binarySearch_(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {\n  let left = 0;            // inclusive\n  let right = arr.length;  // exclusive\n  let found;\n  while (left < right) {\n    const middle = left + ((right - left) >>> 1);\n    let compareResult;\n    if (isEvaluator) {\n      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);\n    } else {\n      // NOTE(dimvar): To avoid this cast, we'd have to use function overloading\n      // for the type of binarySearch_, which the type system can't express yet.\n      compareResult = /** @type {function(?, ?): number} */ (compareFn)(\n          opt_target, arr[middle]);\n    }\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // We are looking for the lowest index so we can't return immediately.\n      found = !compareResult;\n    }\n  }\n  // left is the index if found, or the insertion point otherwise.\n  // Avoiding bitwise not operator, as that causes a loss in precision for array\n  // indexes outside the bounds of a 32-bit signed integer.  Array indexes have\n  // a maximum value of 2^32-2 https://tc39.es/ecma262/#array-index\n  return found ? left : -left - 1;\n}\n\n\n/**\n * Sorts the specified array into ascending order.  If no opt_compareFn is\n * specified, elements are compared using\n * <code>defaultCompare</code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s), unlike the native sort,\n * but will give unpredictable results for heterogeneous lists of strings and\n * numbers with different numbers of digits.\n *\n * This sort is not guaranteed to be stable.\n *\n * Runtime: Same as `Array.prototype.sort`\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {?function(T,T):number=} opt_compareFn Optional comparison\n *     function by which the\n *     array is to be ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @template T\n */\nfunction sort(arr, opt_compareFn) {\n  // TODO(arv): Update type annotation since null is not accepted.\n  arr.sort(opt_compareFn || defaultCompare);\n}\nexports.sort = sort;\n\n\n/**\n * Sorts the specified array into ascending order in a stable way.  If no\n * opt_compareFn is specified, elements are compared using\n * <code>defaultCompare</code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s).\n *\n * Runtime: Same as `Array.prototype.sort`, plus an additional\n * O(n) overhead of copying the array twice.\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {?function(T, T): number=} opt_compareFn Optional comparison function\n *     by which the array is to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T\n */\nfunction stableSort(arr, opt_compareFn) {\n  const compArr = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    compArr[i] = {index: i, value: arr[i]};\n  }\n  const valueCompareFn = opt_compareFn || defaultCompare;\n  function stableCompareFn(obj1, obj2) {\n    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;\n  }\n  sort(compArr, stableCompareFn);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = compArr[i].value;\n  }\n}\nexports.stableSort = stableSort;\n\n\n/**\n * Sort the specified array into ascending order based on item keys\n * returned by the specified key function.\n * If no opt_compareFn is specified, the keys are compared in ascending order\n * using <code>defaultCompare</code>.\n *\n * Runtime: O(S(f(n)), where S is runtime of <code>sort</code>\n * and f(n) is runtime of the key function.\n *\n * @param {Array<T>} arr The array to be sorted.\n * @param {function(T): K} keyFn Function taking array element and returning\n *     a key used for sorting this element.\n * @param {?function(K, K): number=} opt_compareFn Optional comparison function\n *     by which the keys are to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T,K\n */\nfunction sortByKey(arr, keyFn, opt_compareFn) {\n  const keyCompareFn = opt_compareFn || defaultCompare;\n  sort(arr, function(a, b) {\n    return keyCompareFn(keyFn(a), keyFn(b));\n  });\n}\nexports.sortByKey = sortByKey;\n\n\n/**\n * Sorts an array of objects by the specified object key and compare\n * function. If no compare function is provided, the key values are\n * compared in ascending order using <code>defaultCompare</code>.\n * This won't work for keys that get renamed by the compiler. So use\n * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.\n * @param {Array<Object>} arr An array of objects to sort.\n * @param {string} key The object key to sort by.\n * @param {Function=} opt_compareFn The function to use to compare key\n *     values.\n */\nfunction sortObjectsByKey(arr, key, opt_compareFn) {\n  sortByKey(arr, function(obj) {\n    return obj[key];\n  }, opt_compareFn);\n}\nexports.sortObjectsByKey = sortObjectsByKey;\n\n\n/**\n * Tells if the array is sorted.\n * @param {!IArrayLike<T>} arr The array.\n * @param {?function(T,T):number=} opt_compareFn Function to compare the\n *     array elements.\n *     Should take 2 arguments to compare, and return a negative number, zero,\n *     or a positive number depending on whether the first argument is less\n *     than, equal to, or greater than the second.\n * @param {boolean=} opt_strict If true no equal elements are allowed.\n * @return {boolean} Whether the array is sorted.\n * @template T\n */\nfunction isSorted(arr, opt_compareFn, opt_strict) {\n  const compare = opt_compareFn || defaultCompare;\n  for (let i = 1; i < arr.length; i++) {\n    const compareResult = compare(arr[i - 1], arr[i]);\n    if (compareResult > 0 || compareResult == 0 && opt_strict) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isSorted = isSorted;\n\n\n/**\n * Compares two arrays for equality. Two arrays are considered equal if they\n * have the same length and their corresponding elements are equal according to\n * the comparison function.\n *\n * @param {IArrayLike<A>} arr1 The first array to compare.\n * @param {IArrayLike<B>} arr2 The second array to compare.\n * @param {?function(A,B):boolean=} opt_equalsFn Optional comparison function.\n *     Should take 2 arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} Whether the two arrays are equal.\n * @template A\n * @template B\n */\nfunction equals(arr1, arr2, opt_equalsFn) {\n  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||\n      arr1.length != arr2.length) {\n    return false;\n  }\n  const l = arr1.length;\n  const equalsFn = opt_equalsFn || defaultCompareEquality;\n  for (let i = 0; i < l; i++) {\n    if (!equalsFn(arr1[i], arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.equals = equals;\n\n\n/**\n * 3-way array compare function.\n * @param {!IArrayLike<VALUE>} arr1 The first array to\n *     compare.\n * @param {!IArrayLike<VALUE>} arr2 The second array to\n *     compare.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is to be ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {number} Negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template VALUE\n */\nfunction compare3(arr1, arr2, opt_compareFn) {\n  const compare = opt_compareFn || defaultCompare;\n  const l = Math.min(arr1.length, arr2.length);\n  for (let i = 0; i < l; i++) {\n    const result = compare(arr1[i], arr2[i]);\n    if (result != 0) {\n      return result;\n    }\n  }\n  return defaultCompare(arr1.length, arr2.length);\n}\nexports.compare3 = compare3;\n\n\n/**\n * Compares its two arguments for order, using the built in < and >\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second,\n *     respectively.\n * @template VALUE\n */\nfunction defaultCompare(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\nexports.defaultCompare = defaultCompare;\n\n\n/**\n * Compares its two arguments for inverse order, using the built in < and >\n * operators.\n * @param {VALUE} a The first object to be compared.\n * @param {VALUE} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second,\n *     respectively.\n * @template VALUE\n */\nfunction inverseDefaultCompare(a, b) {\n  return -defaultCompare(a, b);\n}\nexports.inverseDefaultCompare = inverseDefaultCompare;\n\n\n/**\n * Compares its two arguments for equality, using the built in === operator.\n * @param {*} a The first object to compare.\n * @param {*} b The second object to compare.\n * @return {boolean} True if the two arguments are equal, false otherwise.\n */\nfunction defaultCompareEquality(a, b) {\n  return a === b;\n}\nexports.defaultCompareEquality = defaultCompareEquality;\n\n\n/**\n * Inserts a value into a sorted array. The array is not modified if the\n * value is already present.\n * @param {IArrayLike<VALUE>} array The array to modify.\n * @param {VALUE} value The object to insert.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was inserted.\n * @template VALUE\n */\nfunction binaryInsert(array, value, opt_compareFn) {\n  const index = binarySearch(array, value, opt_compareFn);\n  if (index < 0) {\n    insertAt(array, value, -(index + 1));\n    return true;\n  }\n  return false;\n}\nexports.binaryInsert = binaryInsert;\n\n\n/**\n * Removes a value from a sorted array.\n * @param {!IArrayLike<VALUE>} array The array to modify.\n * @param {VALUE} value The object to remove.\n * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison\n *     function by which the array is ordered. Should take 2 arguments to\n *     compare, and return a negative number, zero, or a positive number\n *     depending on whether the first argument is less than, equal to, or\n *     greater than the second.\n * @return {boolean} True if an element was removed.\n * @template VALUE\n */\nfunction binaryRemove(array, value, opt_compareFn) {\n  const index = binarySearch(array, value, opt_compareFn);\n  return (index >= 0) ? removeAt(array, index) : false;\n}\nexports.binaryRemove = binaryRemove;\n\n\n/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {IArrayLike<T>} array The array.\n * @param {function(this:S, T, number, !IArrayLike<T>):?} sorter Function to\n *     call for every element.  This takes 3 arguments (the element, the index\n *     and the array) and must return a valid object key (a string, number,\n *     etc), or undefined, if that object should not be placed in a bucket.\n * @param {S=} opt_obj The object to be used as the value of 'this' within\n *     sorter.\n * @return {!Object<!Array<T>>} An object, with keys being all of the unique\n *     return values of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template T,S\n */\nfunction bucket(array, sorter, opt_obj) {\n  const buckets = {};\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    const key = sorter.call(/** @type {?} */ (opt_obj), value, i, array);\n    if (key !== undefined) {\n      // Push the value to the right bucket, creating it if necessary.\n      const bucket = buckets[key] || (buckets[key] = []);\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n}\nexports.bucket = bucket;\n\n\n/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {!IArrayLike<V>} array The array.\n * @param {function(V, number, !IArrayLike<V>):(K|undefined)} sorter Function to\n *     call for every element.  This takes 3 arguments (the element, the index,\n *     and the array) and must return a value to use as a key, or undefined, if\n *     that object should not be placed in a bucket.\n * @return {!Map<K, !Array<V>>} A map, with keys being all of the unique\n *     return values of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template K,V\n */\nfunction bucketToMap(array, sorter) {\n  const /** !Map<K, !Array<V>> */ buckets = new Map();\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    const key = sorter(value, i, array);\n    if (key !== undefined) {\n      // Push the value to the right bucket, creating it if necessary.\n      let bucket = buckets.get(key);\n      if (!bucket) {\n        bucket = [];\n        buckets.set(key, bucket);\n      }\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n}\nexports.bucketToMap = bucketToMap;\n\n\n/**\n * Creates a new object built from the provided array and the key-generation\n * function.\n * @param {IArrayLike<T>} arr Array or array like object over\n *     which to iterate whose elements will be the values in the new object.\n * @param {?function(this:S, T, number, ?) : string} keyFunc The function to\n *     call for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a string that will be used as the\n *     key for the element in the new object. If the function returns the same\n *     key for more than one element, the value for that key is\n *     implementation-defined.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within keyFunc.\n * @return {!Object<T>} The new object.\n * @template T,S\n */\nfunction toObject(arr, keyFunc, opt_obj) {\n  const ret = {};\n  forEach(arr, function(element, index) {\n    ret[keyFunc.call(/** @type {?} */ (opt_obj), element, index, arr)] =\n        element;\n  });\n  return ret;\n}\nexports.toObject = toObject;\n\n\n/**\n * Creates a new ES6 Map built from the provided array and the key-generation\n * function.\n * @param {!IArrayLike<V>} arr Array or array like object over which to iterate\n *     whose elements will be the values in the new object.\n * @param {?function(V, number, ?) : K} keyFunc The function to call for every\n *     element. This function takes 3 arguments (the element, the index, and the\n *     array) and should return a value that will be used as the key for the\n *     element in the new object. If the function returns the same key for more\n *     than one element, the value for that key is implementation-defined.\n * @return {!Map<K, V>} The new map.\n * @template K,V\n */\nfunction toMap(arr, keyFunc) {\n  const /** !Map<K, V> */ map = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n    map.set(keyFunc(element, i, arr), element);\n  }\n\n  return map;\n}\nexports.toMap = toMap;\n\n\n/**\n * Creates a range of numbers in an arithmetic progression.\n *\n * Range takes 1, 2, or 3 arguments:\n * <pre>\n * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]\n * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]\n * range(-2, -5, -1) produces [-2, -3, -4]\n * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.\n * </pre>\n *\n * @param {number} startOrEnd The starting value of the range if an end argument\n *     is provided. Otherwise, the start value is 0, and this is the end value.\n * @param {number=} opt_end The optional end value of the range.\n * @param {number=} opt_step The step size between range values. Defaults to 1\n *     if opt_step is undefined or 0.\n * @return {!Array<number>} An array of numbers for the requested range. May be\n *     an empty array if adding the step would not converge toward the end\n *     value.\n */\nfunction range(startOrEnd, opt_end, opt_step) {\n  const array = [];\n  let start = 0;\n  let end = startOrEnd;\n  const step = opt_step || 1;\n  if (opt_end !== undefined) {\n    start = startOrEnd;\n    end = opt_end;\n  }\n\n  if (step * (end - start) < 0) {\n    // Sign mismatch: start + step will never reach the end value.\n    return [];\n  }\n\n  if (step > 0) {\n    for (let i = start; i < end; i += step) {\n      array.push(i);\n    }\n  } else {\n    for (let i = start; i > end; i += step) {\n      array.push(i);\n    }\n  }\n  return array;\n}\nexports.range = range;\n\n\n/**\n * Returns an array consisting of the given value repeated N times.\n *\n * @param {VALUE} value The value to repeat.\n * @param {number} n The repeat count.\n * @return {!Array<VALUE>} An array with the repeated value.\n * @template VALUE\n */\nfunction repeat(value, n) {\n  const array = [];\n  for (let i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\nexports.repeat = repeat;\n\n\n/**\n * Returns an array consisting of every argument with all arrays\n * expanded in-place recursively.\n *\n * @param {...*} var_args The values to flatten.\n * @return {!Array<?>} An array containing the flattened values.\n */\nfunction flatten(var_args) {\n  const CHUNK_SIZE = 8192;\n\n  const result = [];\n  for (let i = 0; i < arguments.length; i++) {\n    const element = arguments[i];\n    if (Array.isArray(element)) {\n      for (let c = 0; c < element.length; c += CHUNK_SIZE) {\n        const chunk = slice(element, c, c + CHUNK_SIZE);\n        const recurseResult = flatten.apply(null, chunk);\n        for (let r = 0; r < recurseResult.length; r++) {\n          result.push(recurseResult[r]);\n        }\n      }\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n}\nexports.flatten = flatten;\n\n\n/**\n * Rotates an array in-place. After calling this method, the element at\n * index i will be the element previously at index (i - n) %\n * array.length, for all values of i between 0 and array.length - 1,\n * inclusive.\n *\n * For example, suppose list comprises [t, a, n, k, s]. After invoking\n * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].\n *\n * @param {!Array<T>} array The array to rotate.\n * @param {number} n The amount to rotate.\n * @return {!Array<T>} The array.\n * @template T\n */\nfunction rotate(array, n) {\n  asserts.assert(array.length != null);\n\n  if (array.length) {\n    n %= array.length;\n    if (n > 0) {\n      Array.prototype.unshift.apply(array, array.splice(-n, n));\n    } else if (n < 0) {\n      Array.prototype.push.apply(array, array.splice(0, -n));\n    }\n  }\n  return array;\n}\nexports.rotate = rotate;\n\n\n/**\n * Moves one item of an array to a new position keeping the order of the rest\n * of the items. Example use case: keeping a list of JavaScript objects\n * synchronized with the corresponding list of DOM elements after one of the\n * elements has been dragged to a new position.\n * @param {!IArrayLike<?>} arr The array to modify.\n * @param {number} fromIndex Index of the item to move between 0 and\n *     `arr.length - 1`.\n * @param {number} toIndex Target index between 0 and `arr.length - 1`.\n */\nfunction moveItem(arr, fromIndex, toIndex) {\n  asserts.assert(fromIndex >= 0 && fromIndex < arr.length);\n  asserts.assert(toIndex >= 0 && toIndex < arr.length);\n  // Remove 1 item at fromIndex.\n  const removedItems = Array.prototype.splice.call(arr, fromIndex, 1);\n  // Insert the removed item at toIndex.\n  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);\n  // We don't use goog.array.insertAt and goog.array.removeAt, because they're\n  // significantly slower than splice.\n}\nexports.moveItem = moveItem;\n\n\n/**\n * Creates a new array for which the element at position i is an array of the\n * ith element of the provided arrays.  The returned array will only be as long\n * as the shortest array provided; additional values are ignored.  For example,\n * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].\n *\n * This is similar to the zip() function in Python.  See {@link\n * http://docs.python.org/library/functions.html#zip}\n *\n * @param {...!IArrayLike<?>} var_args Arrays to be combined.\n * @return {!Array<!Array<?>>} A new array of arrays created from\n *     provided arrays.\n */\nfunction zip(var_args) {\n  if (!arguments.length) {\n    return [];\n  }\n  const result = [];\n  let minLen = arguments[0].length;\n  for (let i = 1; i < arguments.length; i++) {\n    if (arguments[i].length < minLen) {\n      minLen = arguments[i].length;\n    }\n  }\n  for (let i = 0; i < minLen; i++) {\n    const value = [];\n    for (let j = 0; j < arguments.length; j++) {\n      value.push(arguments[j][i]);\n    }\n    result.push(value);\n  }\n  return result;\n}\nexports.zip = zip;\n\n\n/**\n * Shuffles the values in the specified array using the Fisher-Yates in-place\n * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()\n * and so resets the state of that random number generator. Similarly, may reset\n * the state of any other specified random number generator.\n *\n * Runtime: O(n)\n *\n * @param {!Array<?>} arr The array to be shuffled.\n * @param {function():number=} opt_randFn Optional random function to use for\n *     shuffling.\n *     Takes no arguments, and returns a random number on the interval [0, 1).\n *     Defaults to Math.random() using JavaScript's built-in Math library.\n */\nfunction shuffle(arr, opt_randFn) {\n  const randFn = opt_randFn || Math.random;\n\n  for (let i = arr.length - 1; i > 0; i--) {\n    // Choose a random array index in [0, i] (inclusive with i).\n    const j = Math.floor(randFn() * (i + 1));\n\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n}\nexports.shuffle = shuffle;\n\n\n/**\n * Returns a new array of elements from arr, based on the indexes of elements\n * provided by index_arr. For example, the result of index copying\n * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].\n *\n * @param {!IArrayLike<T>} arr The array to get a indexed copy from.\n * @param {!IArrayLike<number>} index_arr An array of indexes to get from arr.\n * @return {!Array<T>} A new array of elements from arr in index_arr order.\n * @template T\n */\nfunction copyByIndex(arr, index_arr) {\n  const result = [];\n  forEach(index_arr, function(index) {\n    result.push(arr[index]);\n  });\n  return result;\n}\nexports.copyByIndex = copyByIndex;\n\n\n/**\n * Maps each element of the input array into zero or more elements of the output\n * array.\n *\n * @param {!IArrayLike<VALUE>|string} arr Array or array like object\n *     over which to iterate.\n * @param {function(this:THIS, VALUE, number, ?): !Array<RESULT>} f The function\n *     to call for every element. This function takes 3 arguments (the element,\n *     the index and the array) and should return an array. The result will be\n *     used to extend a new array.\n * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.\n * @return {!Array<RESULT>} a new array with the concatenation of all arrays\n *     returned from f.\n * @template THIS, VALUE, RESULT\n */\nfunction concatMap(arr, f, opt_obj) {\n  return concat.apply([], map(arr, f, opt_obj));\n}\nexports.concatMap = concatMap;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\ngoog.provide('goog.dom.asserts');\n\ngoog.require('goog.asserts');\n\n/**\n * @fileoverview Custom assertions to ensure that an element has the appropriate\n * type.\n *\n * Using a goog.dom.safe wrapper on an object on the incorrect type (via an\n * incorrect static type cast) can result in security bugs: For instance,\n * g.d.s.setAnchorHref ensures that the URL assigned to the .href attribute\n * satisfies the SafeUrl contract, i.e., is safe to dereference as a hyperlink.\n * However, the value assigned to a HTMLLinkElement's .href property requires\n * the stronger TrustedResourceUrl contract, since it can refer to a stylesheet.\n * Thus, using g.d.s.setAnchorHref on an (incorrectly statically typed) object\n * of type HTMLLinkElement can result in a security vulnerability.\n * Assertions of the correct run-time type help prevent such incorrect use.\n *\n * In some cases, code using the DOM API is tested using mock objects (e.g., a\n * plain object such as {'href': url} instead of an actual Location object).\n * To allow such mocking, the assertions permit objects of types that are not\n * relevant DOM API objects at all (for instance, not Element or Location).\n *\n * Note that instanceof checks don't work straightforwardly in older versions of\n * IE, or across frames (see,\n * http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object,\n * http://stackoverflow.com/questions/26248599/instanceof-htmlelement-in-iframe-is-not-element-or-object).\n *\n * Hence, these assertions may pass vacuously in such scenarios. The resulting\n * risk of security bugs is limited by the following factors:\n *  - A bug can only arise in scenarios involving incorrect static typing (the\n *    wrapper methods are statically typed to demand objects of the appropriate,\n *    precise type).\n *  - Typically, code is tested and exercised in multiple browsers.\n */\n\n/**\n * Asserts that a given object is a Location.\n *\n * To permit this assertion to pass in the context of tests where DOM APIs might\n * be mocked, also accepts any other type except for subtypes of {!Element}.\n * This is to ensure that, for instance, HTMLLinkElement is not being used in\n * place of a Location, since this could result in security bugs due to stronger\n * contracts required for assignments to the href property of the latter.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!Location}\n */\ngoog.dom.asserts.assertIsLocation = function(o) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (win) {\n      if (!o || (!(o instanceof win.Location) && o instanceof win.Element)) {\n        goog.asserts.fail(\n            'Argument is not a Location (or a non-Element mock); got: %s',\n            goog.dom.asserts.debugStringForType_(o));\n      }\n    }\n  }\n  return /** @type {!Location} */ (o);\n};\n\n\n/**\n * Asserts that a given object is either the given subtype of Element\n * or a non-Element, non-Location Mock.\n *\n * To permit this assertion to pass in the context of tests where DOM\n * APIs might be mocked, also accepts any other type except for\n * subtypes of {!Element}.  This is to ensure that, for instance,\n * HTMLScriptElement is not being used in place of a HTMLImageElement,\n * since this could result in security bugs due to stronger contracts\n * required for assignments to the src property of the latter.\n *\n * The DOM type is looked up in the window the object belongs to.  In\n * some contexts, this might not be possible (e.g. when running tests\n * outside a browser, cross-domain lookup). In this case, the\n * assertions are skipped.\n *\n * @param {?Object} o The object whose type to assert.\n * @param {string} typename The name of the DOM type.\n * @return {!Element} The object.\n * @private\n */\n// TODO(bangert): Make an analog of goog.dom.TagName to correctly handle casts?\ngoog.dom.asserts.assertIsElementType_ = function(o, typename) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS) {\n    var win = goog.dom.asserts.getWindow_(o);\n    if (win && typeof win[typename] != 'undefined') {\n      if (!o ||\n          (!(o instanceof win[typename]) &&\n           (o instanceof win.Location || o instanceof win.Element))) {\n        goog.asserts.fail(\n            'Argument is not a %s (or a non-Element, non-Location mock); ' +\n                'got: %s',\n            typename, goog.dom.asserts.debugStringForType_(o));\n      }\n    }\n  }\n  return /** @type {!Element} */ (o);\n};\n\n/**\n * Asserts that a given object is a HTMLAnchorElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not of type Location nor a subtype\n * of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLAnchorElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlAnchorElement instead.\n */\ngoog.dom.asserts.assertIsHTMLAnchorElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLAnchorElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLAnchorElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLButtonElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLButtonElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlButtonElement instead.\n */\ngoog.dom.asserts.assertIsHTMLButtonElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLButtonElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLButtonElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLLinkElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLLinkElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlLinkElement instead.\n */\ngoog.dom.asserts.assertIsHTMLLinkElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLLinkElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLLinkElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLImageElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLImageElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlImageElement instead.\n */\ngoog.dom.asserts.assertIsHTMLImageElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLImageElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLImageElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLAudioElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLAudioElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlAudioElement instead.\n */\ngoog.dom.asserts.assertIsHTMLAudioElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLAudioElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLAudioElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLVideoElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLVideoElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlVideoElement instead.\n */\ngoog.dom.asserts.assertIsHTMLVideoElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLVideoElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLVideoElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLInputElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLInputElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlInputElement instead.\n */\ngoog.dom.asserts.assertIsHTMLInputElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLInputElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLInputElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLTextAreaElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLTextAreaElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlTextAreaElement instead.\n */\ngoog.dom.asserts.assertIsHTMLTextAreaElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLTextAreaElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLTextAreaElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLCanvasElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLCanvasElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlCanvasElement instead.\n */\ngoog.dom.asserts.assertIsHTMLCanvasElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLCanvasElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLCanvasElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLEmbedElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLEmbedElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlEmbedElement instead.\n */\ngoog.dom.asserts.assertIsHTMLEmbedElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLEmbedElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLEmbedElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLFormElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFormElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlFormElement instead.\n */\ngoog.dom.asserts.assertIsHTMLFormElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLFormElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLFormElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLFrameElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlFrameElement instead.\n */\ngoog.dom.asserts.assertIsHTMLFrameElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLFrameElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLFrameElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLIFrameElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLIFrameElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlIFrameElement instead.\n */\ngoog.dom.asserts.assertIsHTMLIFrameElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLIFrameElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLIFrameElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLObjectElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLObjectElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlObjectElement instead.\n */\ngoog.dom.asserts.assertIsHTMLObjectElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLObjectElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLObjectElement'));\n};\n\n/**\n * Asserts that a given object is a HTMLScriptElement.\n *\n * To permit this assertion to pass in the context of tests where elements might\n * be mocked, also accepts objects that are not a subtype of Element.\n *\n * @param {?Object} o The object whose type to assert.\n * @return {!HTMLScriptElement}\n * @deprecated Use goog.asserts.dom.assertIsHtmlScriptElement instead.\n */\ngoog.dom.asserts.assertIsHTMLScriptElement = function(o) {\n  'use strict';\n  return /** @type {!HTMLScriptElement} */ (\n      goog.dom.asserts.assertIsElementType_(o, 'HTMLScriptElement'));\n};\n\n/**\n * Returns a string representation of a value's type.\n *\n * @param {*} value An object, or primitive.\n * @return {string} The best display name for the value.\n * @private\n */\ngoog.dom.asserts.debugStringForType_ = function(value) {\n  'use strict';\n  if (goog.isObject(value)) {\n    try {\n      return /** @type {string|undefined} */ (value.constructor.displayName) ||\n          value.constructor.name || Object.prototype.toString.call(value);\n    } catch (e) {\n      return '<object could not be stringified>';\n    }\n  } else {\n    return value === undefined ? 'undefined' :\n                                 value === null ? 'null' : typeof value;\n  }\n};\n\n/**\n * Gets window of element.\n * @param {?Object} o\n * @return {?Window}\n * @private\n * @suppress {strictMissingProperties} ownerDocument not defined on Object\n */\ngoog.dom.asserts.getWindow_ = function(o) {\n  'use strict';\n  try {\n    var doc = o && o.ownerDocument;\n    // This can throw \u201cBlocked a frame with origin \"chrome-extension://...\" from\n    // accessing a cross-origin frame\u201d in Chrome extension.\n    var win =\n        doc && /** @type {?Window} */ (doc.defaultView || doc.parentWindow);\n    win = win || /** @type {!Window} */ (goog.global);\n    // This can throw \u201cPermission denied to access property \"Element\" on\n    // cross-origin object\u201d.\n    if (win.Element && win.Location) {\n      return win;\n    }\n  } catch (ex) {\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for creating functions. Loosely inspired by these\n * java classes from the Guava library:\n * com.google.common.base.Functions\n * https://google.github.io/guava/releases/snapshot-jre/api/docs/index.html?com/google/common/base/Functions.html\n *\n * com.google.common.base.Predicates\n * https://google.github.io/guava/releases/snapshot-jre/api/docs/index.html?com/google/common/base/Predicates.html\n *\n * More about these can be found at\n * https://github.com/google/guava/wiki/FunctionalExplained\n */\n\n\ngoog.provide('goog.functions');\n\n\n/**\n * Creates a function that always returns the same value.\n * @param {T} retValue The value to return.\n * @return {function():T} The new function.\n * @template T\n */\ngoog.functions.constant = function(retValue) {\n  'use strict';\n  return function() {\n    'use strict';\n    return retValue;\n  };\n};\n\n\n/**\n * Always returns false.\n * @type {function(...): boolean}\n */\ngoog.functions.FALSE = function() {\n  'use strict';\n  return false;\n};\n\n\n/**\n * Always returns true.\n * @type {function(...): boolean}\n */\ngoog.functions.TRUE = function() {\n  'use strict';\n  return true;\n};\n\n\n/**\n * Always returns `null`.\n * @type {function(...): null}\n */\ngoog.functions.NULL = function() {\n  'use strict';\n  return null;\n};\n\n\n/**\n * Always returns `undefined`.\n * @type {function(...): undefined}\n */\ngoog.functions.UNDEFINED = function() {\n  return undefined;\n};\n\n/**\n * Always returns `undefined` (loosely-typed version).\n * @type {!Function}\n */\ngoog.functions.EMPTY = /** @type {?} */ (goog.functions.UNDEFINED);\n\n\n/**\n * A simple function that returns the first argument of whatever is passed\n * into it.\n * @param {T=} opt_returnValue The single value that will be returned.\n * @param {...*} var_args Optional trailing arguments. These are ignored.\n * @return {T} The first argument passed in, or undefined if nothing was passed.\n * @template T\n */\ngoog.functions.identity = function(opt_returnValue, var_args) {\n  'use strict';\n  return opt_returnValue;\n};\n\n\n/**\n * Creates a function that always throws an error with the given message.\n * @param {string} message The error message.\n * @return {!Function} The error-throwing function.\n */\ngoog.functions.error = function(message) {\n  'use strict';\n  return function() {\n    'use strict';\n    throw new Error(message);\n  };\n};\n\n\n/**\n * Creates a function that throws the given object.\n * @param {*} err An object to be thrown.\n * @return {!Function} The error-throwing function.\n */\ngoog.functions.fail = function(err) {\n  'use strict';\n  return function() {\n    'use strict';\n    throw err;\n  };\n};\n\n\n/**\n * Given a function, create a function that keeps opt_numArgs arguments and\n * silently discards all additional arguments.\n * @param {Function} f The original function.\n * @param {number=} opt_numArgs The number of arguments to keep. Defaults to 0.\n * @return {!Function} A version of f that only keeps the first opt_numArgs\n *     arguments.\n */\ngoog.functions.lock = function(f, opt_numArgs) {\n  'use strict';\n  opt_numArgs = opt_numArgs || 0;\n  return function() {\n    'use strict';\n    const self = /** @type {*} */ (this);\n    return f.apply(self, Array.prototype.slice.call(arguments, 0, opt_numArgs));\n  };\n};\n\n\n/**\n * Creates a function that returns its nth argument.\n * @param {number} n The position of the return argument.\n * @return {!Function} A new function.\n */\ngoog.functions.nth = function(n) {\n  'use strict';\n  return function() {\n    'use strict';\n    return arguments[n];\n  };\n};\n\n\n/**\n * Like goog.partial(), except that arguments are added after arguments to the\n * returned function.\n *\n * Usage:\n * function f(arg1, arg2, arg3, arg4) { ... }\n * var g = goog.functions.partialRight(f, arg3, arg4);\n * g(arg1, arg2);\n *\n * @param {!Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn\n *     at the end.\n * @return {!Function} A partially-applied form of the function goog.partial()\n *     was invoked as a method of.\n */\ngoog.functions.partialRight = function(fn, var_args) {\n  'use strict';\n  const rightArgs = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    'use strict';\n    // Even in strict mode, IE10/11 and Edge (non-Chromium) use global context\n    // when free-calling functions. To catch cases where people were using this\n    // erroneously, we explicitly change the context to undefined to match\n    // strict mode specifications.\n    let self = /** @type {*} */ (this);\n    if (self === goog.global) {\n      self = undefined;\n    }\n    const newArgs = Array.prototype.slice.call(arguments);\n    newArgs.push.apply(newArgs, rightArgs);\n    return fn.apply(self, newArgs);\n  };\n};\n\n\n/**\n * Given a function, create a new function that swallows its return value\n * and replaces it with a new one.\n * @param {Function} f A function.\n * @param {T} retValue A new return value.\n * @return {function(...?):T} A new function.\n * @template T\n */\ngoog.functions.withReturnValue = function(f, retValue) {\n  'use strict';\n  return goog.functions.sequence(f, goog.functions.constant(retValue));\n};\n\n\n/**\n * Creates a function that returns whether its argument equals the given value.\n *\n * Example:\n * var key = goog.object.findKey(obj, goog.functions.equalTo('needle'));\n *\n * @param {*} value The value to compare to.\n * @param {boolean=} opt_useLooseComparison Whether to use a loose (==)\n *     comparison rather than a strict (===) one. Defaults to false.\n * @return {function(*):boolean} The new function.\n */\ngoog.functions.equalTo = function(value, opt_useLooseComparison) {\n  'use strict';\n  return function(other) {\n    'use strict';\n    return opt_useLooseComparison ? (value == other) : (value === other);\n  };\n};\n\n\n/**\n * Creates the composition of the functions passed in.\n * For example, (goog.functions.compose(f, g))(a) is equivalent to f(g(a)).\n * @param {function(...?):T} fn The final function.\n * @param {...Function} var_args A list of functions.\n * @return {function(...?):T} The composition of all inputs.\n * @template T\n */\ngoog.functions.compose = function(fn, var_args) {\n  'use strict';\n  const functions = arguments;\n  const length = functions.length;\n  return function() {\n    'use strict';\n    const self = /** @type {*} */ (this);\n    let result;\n    if (length) {\n      result = functions[length - 1].apply(self, arguments);\n    }\n\n    for (let i = length - 2; i >= 0; i--) {\n      result = functions[i].call(self, result);\n    }\n    return result;\n  };\n};\n\n\n/**\n * Creates a function that calls the functions passed in in sequence, and\n * returns the value of the last function. For example,\n * (goog.functions.sequence(f, g))(x) is equivalent to f(x),g(x).\n * @param {...Function} var_args A list of functions.\n * @return {!Function} A function that calls all inputs in sequence.\n */\ngoog.functions.sequence = function(var_args) {\n  'use strict';\n  const functions = arguments;\n  const length = functions.length;\n  return function() {\n    'use strict';\n    const self = /** @type {*} */ (this);\n    let result;\n    for (let i = 0; i < length; i++) {\n      result = functions[i].apply(self, arguments);\n    }\n    return result;\n  };\n};\n\n\n/**\n * Creates a function that returns true if each of its components evaluates\n * to true. The components are evaluated in order, and the evaluation will be\n * short-circuited as soon as a function returns false.\n * For example, (goog.functions.and(f, g))(x) is equivalent to f(x) && g(x).\n * @param {...Function} var_args A list of functions.\n * @return {function(...?):boolean} A function that ANDs its component\n *      functions.\n */\ngoog.functions.and = function(var_args) {\n  'use strict';\n  const functions = arguments;\n  const length = functions.length;\n  return function() {\n    'use strict';\n    const self = /** @type {*} */ (this);\n    for (let i = 0; i < length; i++) {\n      if (!functions[i].apply(self, arguments)) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n\n\n/**\n * Creates a function that returns true if any of its components evaluates\n * to true. The components are evaluated in order, and the evaluation will be\n * short-circuited as soon as a function returns true.\n * For example, (goog.functions.or(f, g))(x) is equivalent to f(x) || g(x).\n * @param {...Function} var_args A list of functions.\n * @return {function(...?):boolean} A function that ORs its component\n *    functions.\n */\ngoog.functions.or = function(var_args) {\n  'use strict';\n  const functions = arguments;\n  const length = functions.length;\n  return function() {\n    'use strict';\n    const self = /** @type {*} */ (this);\n    for (let i = 0; i < length; i++) {\n      if (functions[i].apply(self, arguments)) {\n        return true;\n      }\n    }\n    return false;\n  };\n};\n\n\n/**\n * Creates a function that returns the Boolean opposite of a provided function.\n * For example, (goog.functions.not(f))(x) is equivalent to !f(x).\n * @param {!Function} f The original function.\n * @return {function(...?):boolean} A function that delegates to f and returns\n * opposite.\n */\ngoog.functions.not = function(f) {\n  'use strict';\n  return function() {\n    'use strict';\n    const self = /** @type {*} */ (this);\n    return !f.apply(self, arguments);\n  };\n};\n\n\n/**\n * Generic factory function to construct an object given the constructor\n * and the arguments. Intended to be bound to create object factories.\n *\n * Example:\n *\n * var factory = goog.partial(goog.functions.create, Class);\n *\n * @param {function(new:T, ...)} constructor The constructor for the Object.\n * @param {...*} var_args The arguments to be passed to the constructor.\n * @return {T} A new instance of the class given in `constructor`.\n * @template T\n * @deprecated This function does not work with ES6 class constructors. Use\n *     arrow functions + spread args instead.\n */\ngoog.functions.create = function(constructor, var_args) {\n  'use strict';\n  /**\n   * @constructor\n   * @final\n   */\n  const temp = function() {};\n  temp.prototype = constructor.prototype;\n\n  // obj will have constructor's prototype in its chain and\n  // 'obj instanceof constructor' will be true.\n  const obj = new temp();\n\n  // obj is initialized by constructor.\n  // arguments is only array-like so lacks shift(), but can be used with\n  // the Array prototype function.\n  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));\n  return obj;\n};\n\n\n/**\n * @define {boolean} Whether the return value cache should be used.\n *    This should only be used to disable caches when testing.\n */\ngoog.functions.CACHE_RETURN_VALUE =\n    goog.define('goog.functions.CACHE_RETURN_VALUE', true);\n\n\n/**\n * Gives a wrapper function that caches the return value of a parameterless\n * function when first called.\n *\n * When called for the first time, the given function is called and its\n * return value is cached (thus this is only appropriate for idempotent\n * functions).  Subsequent calls will return the cached return value. This\n * allows the evaluation of expensive functions to be delayed until first used.\n *\n * To cache the return values of functions with parameters, see goog.memoize.\n *\n * @param {function():T} fn A function to lazily evaluate.\n * @return {function():T} A wrapped version the function.\n * @template T\n */\ngoog.functions.cacheReturnValue = function(fn) {\n  'use strict';\n  let called = false;\n  let value;\n\n  return function() {\n    'use strict';\n    if (!goog.functions.CACHE_RETURN_VALUE) {\n      return fn();\n    }\n\n    if (!called) {\n      value = fn();\n      called = true;\n    }\n\n    return value;\n  };\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once. All\n * additional calls are no-ops.\n *\n * This is particularly useful for initialization functions\n * that should be called, at most, once.\n *\n * @param {function():*} f Function to call.\n * @return {function():undefined} Wrapped function.\n */\ngoog.functions.once = function(f) {\n  'use strict';\n  // Keep a reference to the function that we null out when we're done with\n  // it -- that way, the function can be GC'd when we're done with it.\n  let inner = f;\n  return function() {\n    'use strict';\n    if (inner) {\n      const tmp = inner;\n      inner = null;\n      tmp();\n    }\n  };\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once per interval\n * (specified in milliseconds). If the wrapper function is called N times within\n * that interval, only the Nth call will go through.\n *\n * This is particularly useful for batching up repeated actions where the\n * last action should win. This can be used, for example, for refreshing an\n * autocomplete pop-up every so often rather than updating with every keystroke,\n * since the final text typed by the user is the one that should produce the\n * final autocomplete results. For more stateful debouncing with support for\n * pausing, resuming, and canceling debounced actions, use\n * `goog.async.Debouncer`.\n *\n * @param {function(this:SCOPE, ...?)} f Function to call.\n * @param {number} interval Interval over which to debounce. The function will\n *     only be called after the full interval has elapsed since the last call.\n * @param {SCOPE=} opt_scope Object in whose scope to call the function.\n * @return {function(...?): undefined} Wrapped function.\n * @template SCOPE\n */\ngoog.functions.debounce = function(f, interval, opt_scope) {\n  'use strict';\n  let timeout = 0;\n  return /** @type {function(...?)} */ (function(var_args) {\n    'use strict';\n    goog.global.clearTimeout(timeout);\n    const args = arguments;\n    timeout = goog.global.setTimeout(function() {\n      'use strict';\n      f.apply(opt_scope, args);\n    }, interval);\n  });\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once per interval\n * (specified in milliseconds). If the wrapper function is called N times in\n * that interval, both the 1st and the Nth calls will go through.\n *\n * This is particularly useful for limiting repeated user requests where the\n * the last action should win, but you also don't want to wait until the end of\n * the interval before sending a request out, as it leads to a perception of\n * slowness for the user.\n *\n * @param {function(this:SCOPE, ...?)} f Function to call.\n * @param {number} interval Interval over which to throttle. The function can\n *     only be called once per interval.\n * @param {SCOPE=} opt_scope Object in whose scope to call the function.\n * @return {function(...?): undefined} Wrapped function.\n * @template SCOPE\n */\ngoog.functions.throttle = function(f, interval, opt_scope) {\n  'use strict';\n  let timeout = 0;\n  let shouldFire = false;\n  let storedArgs = [];\n\n  const handleTimeout = function() {\n    'use strict';\n    timeout = 0;\n    if (shouldFire) {\n      shouldFire = false;\n      fire();\n    }\n  };\n\n  const fire = function() {\n    'use strict';\n    timeout = goog.global.setTimeout(handleTimeout, interval);\n    let args = storedArgs;\n    storedArgs = [];  // Avoid a space leak by clearing stored arguments.\n    f.apply(opt_scope, args);\n  };\n\n  return /** @type {function(...?)} */ (function(var_args) {\n    'use strict';\n    storedArgs = arguments;\n    if (!timeout) {\n      fire();\n    } else {\n      shouldFire = true;\n    }\n  });\n};\n\n\n/**\n * Wraps a function to allow it to be called, at most, once per interval\n * (specified in milliseconds). If the wrapper function is called N times within\n * that interval, only the 1st call will go through.\n *\n * This is particularly useful for limiting repeated user requests where the\n * first request is guaranteed to have all the data required to perform the\n * final action, so there's no need to wait until the end of the interval before\n * sending the request out.\n *\n * @param {function(this:SCOPE, ...?)} f Function to call.\n * @param {number} interval Interval over which to rate-limit. The function will\n *     only be called once per interval, and ignored for the remainer of the\n *     interval.\n * @param {SCOPE=} opt_scope Object in whose scope to call the function.\n * @return {function(...?): undefined} Wrapped function.\n * @template SCOPE\n */\ngoog.functions.rateLimit = function(f, interval, opt_scope) {\n  'use strict';\n  let timeout = 0;\n\n  const handleTimeout = function() {\n    'use strict';\n    timeout = 0;\n  };\n\n  return /** @type {function(...?)} */ (function(var_args) {\n    'use strict';\n    if (!timeout) {\n      timeout = goog.global.setTimeout(handleTimeout, interval);\n      f.apply(opt_scope, arguments);\n    }\n  });\n};\n\n/**\n * Returns true if the specified value is a function.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.functions.isFunction = (val) => {\n  return typeof val === 'function';\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\ngoog.provide('goog.string.TypedString');\n\n\n\n/**\n * Wrapper for strings that conform to a data type or language.\n *\n * Implementations of this interface are wrappers for strings, and typically\n * associate a type contract with the wrapped string.  Concrete implementations\n * of this interface may choose to implement additional run-time type checking,\n * see for example `goog.html.SafeHtml`. If available, client code that\n * needs to ensure type membership of an object should use the type's function\n * to assert type membership, such as `goog.html.SafeHtml.unwrap`.\n * @interface\n */\ngoog.string.TypedString = function() {};\n\n\n/**\n * Interface marker of the TypedString interface.\n *\n * This property can be used to determine at runtime whether or not an object\n * implements this interface.  All implementations of this interface set this\n * property to `true`.\n * @type {boolean}\n */\ngoog.string.TypedString.prototype.implementsGoogStringTypedString;\n\n\n/**\n * Retrieves this wrapped string's value.\n * @return {string} The wrapped string's value.\n */\ngoog.string.TypedString.prototype.getTypedStringValue;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\ngoog.provide('goog.string.Const');\n\ngoog.require('goog.asserts');\ngoog.require('goog.string.TypedString');\n\n\n\n/**\n * Wrapper for compile-time-constant strings.\n *\n * Const is a wrapper for strings that can only be created from program\n * constants (i.e., string literals).  This property relies on a custom Closure\n * compiler check that `goog.string.Const.from` is only invoked on\n * compile-time-constant expressions.\n *\n * Const is useful in APIs whose correct and secure use requires that certain\n * arguments are not attacker controlled: Compile-time constants are inherently\n * under the control of the application and not under control of external\n * attackers, and hence are safe to use in such contexts.\n *\n * Instances of this type must be created via its factory method\n * `goog.string.Const.from` and not by invoking its constructor.  The\n * constructor intentionally takes no parameters and the type is immutable;\n * hence only a default instance corresponding to the empty string can be\n * obtained via constructor invocation.  Use goog.string.Const.EMPTY\n * instead of using this constructor to get an empty Const string.\n *\n * @see goog.string.Const#from\n * @constructor\n * @final\n * @struct\n * @implements {goog.string.TypedString}\n * @param {Object=} opt_token package-internal implementation detail.\n * @param {string=} opt_content package-internal implementation detail.\n */\ngoog.string.Const = function(opt_token, opt_content) {\n  'use strict';\n  /**\n   * The wrapped value of this Const object.  The field has a purposely ugly\n   * name to make (non-compiled) code that attempts to directly access this\n   * field stand out.\n   * @private {string}\n   */\n  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ =\n      ((opt_token ===\n        goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_) &&\n       opt_content) ||\n      '';\n\n  /**\n   * A type marker used to implement additional run-time type checking.\n   * @see goog.string.Const#unwrap\n   * @const {!Object}\n   * @private\n   */\n  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ =\n      goog.string.Const.TYPE_MARKER_;\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.string.Const.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Returns this Const's value as a string.\n *\n * IMPORTANT: In code where it is security-relevant that an object's type is\n * indeed `goog.string.Const`, use `goog.string.Const.unwrap`\n * instead of this method.\n *\n * @see goog.string.Const#unwrap\n * @override\n * @return {string}\n */\ngoog.string.Const.prototype.getTypedStringValue = function() {\n  'use strict';\n  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n};\n\n\nif (goog.DEBUG) {\n  /**\n   * Returns a debug-string representation of this value.\n   *\n   * To obtain the actual string value wrapped inside an object of this type,\n   * use `goog.string.Const.unwrap`.\n   *\n   * @see goog.string.Const#unwrap\n   * @override\n   * @return {string}\n   */\n  goog.string.Const.prototype.toString = function() {\n    'use strict';\n    return 'Const{' +\n        this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +\n        '}';\n  };\n}\n\n\n/**\n * Performs a runtime check that the provided object is indeed an instance\n * of `goog.string.Const`, and returns its value.\n * @param {!goog.string.Const} stringConst The object to extract from.\n * @return {string} The Const object's contained string, unless the run-time\n *     type check fails. In that case, `unwrap` returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.string.Const.unwrap = function(stringConst) {\n  'use strict';\n  // Perform additional run-time type-checking to ensure that stringConst is\n  // indeed an instance of the expected type.  This provides some additional\n  // protection against security bugs due to application code that disables type\n  // checks.\n  if (stringConst instanceof goog.string.Const &&\n      stringConst.constructor === goog.string.Const &&\n      stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ ===\n          goog.string.Const.TYPE_MARKER_) {\n    return stringConst\n        .stringConstValueWithSecurityContract__googStringSecurityPrivate_;\n  } else {\n    goog.asserts.fail(\n        'expected object of type Const, got \\'' + stringConst + '\\'');\n    return 'type_error:Const';\n  }\n};\n\n\n/**\n * Creates a Const object from a compile-time constant string.\n *\n * It is illegal to invoke this function on an expression whose\n * compile-time-constant value cannot be determined by the Closure compiler.\n *\n * Correct invocations include,\n * <pre>\n *   var s = goog.string.Const.from('hello');\n *   var t = goog.string.Const.from('hello' + 'world');\n * </pre>\n *\n * In contrast, the following are illegal:\n * <pre>\n *   var s = goog.string.Const.from(getHello());\n *   var t = goog.string.Const.from('hello' + world);\n * </pre>\n *\n * @param {string} s A constant string from which to create a Const.\n * @return {!goog.string.Const} A Const object initialized to stringConst.\n */\ngoog.string.Const.from = function(s) {\n  'use strict';\n  return new goog.string.Const(\n      goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_, s);\n};\n\n/**\n * Type marker for the Const type, used to implement additional run-time\n * type checking.\n * @const {!Object}\n * @private\n */\ngoog.string.Const.TYPE_MARKER_ = {};\n\n/**\n * @type {!Object}\n * @private\n * @const\n */\ngoog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ = {};\n\n/**\n * A Const instance wrapping the empty string.\n * @const {!goog.string.Const}\n */\ngoog.string.Const.EMPTY = goog.string.Const.from('');\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utility functions for supporting Bidi issues.\n */\n\n\n/**\n * Namespace for bidi supporting functions.\n */\ngoog.provide('goog.i18n.bidi');\ngoog.provide('goog.i18n.bidi.Dir');\ngoog.provide('goog.i18n.bidi.DirectionalString');\ngoog.provide('goog.i18n.bidi.Format');\n\n\n/**\n * @define {boolean} FORCE_RTL forces the {@link goog.i18n.bidi.IS_RTL} constant\n * to say that the current locale is a RTL locale.  This should only be used\n * if you want to override the default behavior for deciding whether the\n * current locale is RTL or not.\n *\n * {@see goog.i18n.bidi.IS_RTL}\n */\ngoog.i18n.bidi.FORCE_RTL = goog.define('goog.i18n.bidi.FORCE_RTL', false);\n\n\n/**\n * Constant that defines whether or not the current locale is a RTL locale.\n * If {@link goog.i18n.bidi.FORCE_RTL} is not true, this constant will default\n * to check that {@link goog.LOCALE} is one of a few major RTL locales.\n *\n * <p>This is designed to be a maximally efficient compile-time constant. For\n * example, for the default goog.LOCALE, compiling\n * \"if (goog.i18n.bidi.IS_RTL) alert('rtl') else {}\" should produce no code. It\n * is this design consideration that limits the implementation to only\n * supporting a few major RTL locales, as opposed to the broader repertoire of\n * something like goog.i18n.bidi.isRtlLanguage.\n *\n * <p>Since this constant refers to the directionality of the locale, it is up\n * to the caller to determine if this constant should also be used for the\n * direction of the UI.\n *\n * {@see goog.LOCALE}\n *\n * @type {boolean}\n *\n * TODO(user): write a test that checks that this is a compile-time constant.\n */\n// LINT.IfChange\ngoog.i18n.bidi.IS_RTL =\n    goog.i18n.bidi.FORCE_RTL ||\n    ((goog.LOCALE.substring(0, 2).toLowerCase() == 'ar' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'fa' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'he' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'iw' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'ps' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'sd' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'ug' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'ur' ||\n      goog.LOCALE.substring(0, 2).toLowerCase() == 'yi') &&\n     (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == '-' ||\n      goog.LOCALE.substring(2, 3) == '_')) ||\n    (  // Specific to CKB (Central Kurdish)\n        goog.LOCALE.length >= 3 &&\n        goog.LOCALE.substring(0, 3).toLowerCase() == 'ckb' &&\n        (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == '-' ||\n         goog.LOCALE.substring(3, 4) == '_')) ||\n    (  // 2 letter language codes with RTL scripts\n        goog.LOCALE.length >= 7 &&\n        ((goog.LOCALE.substring(2, 3) == '-' ||\n          goog.LOCALE.substring(2, 3) == '_') &&\n         (goog.LOCALE.substring(3, 7).toLowerCase() == 'adlm' ||\n          goog.LOCALE.substring(3, 7).toLowerCase() == 'arab' ||\n          goog.LOCALE.substring(3, 7).toLowerCase() == 'hebr' ||\n          goog.LOCALE.substring(3, 7).toLowerCase() == 'nkoo' ||\n          goog.LOCALE.substring(3, 7).toLowerCase() == 'rohg' ||\n          goog.LOCALE.substring(3, 7).toLowerCase() == 'thaa'))) ||\n    (  // 3 letter languages codes with RTL scripts\n        goog.LOCALE.length >= 8 &&\n        ((goog.LOCALE.substring(3, 4) == '-' ||\n          goog.LOCALE.substring(3, 4) == '_') &&\n         (goog.LOCALE.substring(4, 8).toLowerCase() == 'adlm' ||\n          goog.LOCALE.substring(4, 8).toLowerCase() == 'arab' ||\n          goog.LOCALE.substring(4, 8).toLowerCase() == 'hebr' ||\n          goog.LOCALE.substring(4, 8).toLowerCase() == 'nkoo' ||\n          goog.LOCALE.substring(4, 8).toLowerCase() == 'rohg' ||\n          goog.LOCALE.substring(4, 8).toLowerCase() == 'thaa')));\n//    closure/RtlLocalesTest.java)\n\n// TODO(user): Add additional scripts and languages that are RTL,\n// e.g., mende, samaritan, etc.\n\n\n/**\n * Unicode formatting characters and directionality string constants.\n * @enum {string}\n */\ngoog.i18n.bidi.Format = {\n  /** Unicode \"Left-To-Right Embedding\" (LRE) character. */\n  LRE: '\\u202A',\n  /** Unicode \"Right-To-Left Embedding\" (RLE) character. */\n  RLE: '\\u202B',\n  /** Unicode \"Pop Directional Formatting\" (PDF) character. */\n  PDF: '\\u202C',\n  /** Unicode \"Left-To-Right Mark\" (LRM) character. */\n  LRM: '\\u200E',\n  /** Unicode \"Right-To-Left Mark\" (RLM) character. */\n  RLM: '\\u200F'\n};\n\n\n/**\n * Directionality enum.\n * @enum {number}\n */\ngoog.i18n.bidi.Dir = {\n  /**\n   * Left-to-right.\n   */\n  LTR: 1,\n\n  /**\n   * Right-to-left.\n   */\n  RTL: -1,\n\n  /**\n   * Neither left-to-right nor right-to-left.\n   */\n  NEUTRAL: 0\n};\n\n\n/**\n * 'right' string constant.\n * @type {string}\n */\ngoog.i18n.bidi.RIGHT = 'right';\n\n\n/**\n * 'left' string constant.\n * @type {string}\n */\ngoog.i18n.bidi.LEFT = 'left';\n\n\n/**\n * 'left' if locale is RTL, 'right' if not.\n * @type {string}\n */\ngoog.i18n.bidi.I18N_RIGHT =\n    goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;\n\n\n/**\n * 'right' if locale is RTL, 'left' if not.\n * @type {string}\n */\ngoog.i18n.bidi.I18N_LEFT =\n    goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;\n\n\n/**\n * Convert a directionality given in various formats to a goog.i18n.bidi.Dir\n * constant. Useful for interaction with different standards of directionality\n * representation.\n *\n * @param {goog.i18n.bidi.Dir|number|boolean|null} givenDir Directionality given\n *     in one of the following formats:\n *     1. A goog.i18n.bidi.Dir constant.\n *     2. A number (positive = LTR, negative = RTL, 0 = neutral).\n *     3. A boolean (true = RTL, false = LTR).\n *     4. A null for unknown directionality.\n * @param {boolean=} opt_noNeutral Whether a givenDir of zero or\n *     goog.i18n.bidi.Dir.NEUTRAL should be treated as null, i.e. unknown, in\n *     order to preserve legacy behavior.\n * @return {?goog.i18n.bidi.Dir} A goog.i18n.bidi.Dir constant matching the\n *     given directionality. If given null, returns null (i.e. unknown).\n */\ngoog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {\n  'use strict';\n  if (typeof givenDir == 'number') {\n    // This includes the non-null goog.i18n.bidi.Dir case.\n    return givenDir > 0 ?\n        goog.i18n.bidi.Dir.LTR :\n        givenDir < 0 ? goog.i18n.bidi.Dir.RTL :\n                       opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;\n  } else if (givenDir == null) {\n    return null;\n  } else {\n    // Must be typeof givenDir == 'boolean'.\n    return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;\n  }\n};\n\n\n/**\n * A practical pattern to identify strong LTR character in the BMP.\n * This pattern is not theoretically correct according to the Unicode\n * standard. It is simplified for performance and small code size.\n * It also partially supports LTR scripts beyond U+FFFF by including\n * UTF-16 high surrogate values corresponding to mostly L-class code\n * point ranges.\n * However, low surrogate values and private-use regions are not included\n * in this RegEx.\n * @type {string}\n * @private\n */\ngoog.i18n.bidi.ltrChars_ =\n    'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02B8\\u0300-\\u0590\\u0900-\\u1FFF' +\n    '\\u200E\\u2C00-\\uD801\\uD804-\\uD839\\uD83C-\\uDBFF' +\n    '\\uF900-\\uFB1C\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n/**\n * A practical pattern to identify strong RTL character. This pattern is not\n * theoretically correct according to the Unicode standard. It is simplified\n * for performance and small code size.\n * It also partially supports RTL scripts beyond U+FFFF by including\n * UTF-16 high surrogate values corresponding to mostly R- or AL-class\n * code point ranges.\n * However, low surrogate values and private-use regions are not included\n * in this RegEx.\n * @type {string}\n * @private\n */\ngoog.i18n.bidi.rtlChars_ =\n    '\\u0591-\\u06EF\\u06FA-\\u08FF\\u200F\\uD802-\\uD803\\uD83A-\\uD83B' +\n    '\\uFB1D-\\uFDFF\\uFE70-\\uFEFC';\n\n/**\n * Simplified regular expression for an HTML tag (opening or closing) or an HTML\n * escape. We might want to skip over such expressions when estimating the text\n * directionality.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;\n\n\n/**\n * Returns the input text with spaces instead of HTML tags or HTML escapes, if\n * opt_isStripNeeded is true. Else returns the input as is.\n * Useful for text directionality estimation.\n * Note: the function should not be used in other contexts; it is not 100%\n * correct, but rather a good-enough implementation for directionality\n * estimation purposes.\n * @param {string} str The given string.\n * @param {boolean=} opt_isStripNeeded Whether to perform the stripping.\n *     Default: false (to retain consistency with calling functions).\n * @return {string} The given string cleaned of HTML tags / escapes.\n * @private\n */\ngoog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {\n  'use strict';\n  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, '') : str;\n};\n\n\n/**\n * Regular expression to check for RTL characters, BMP and high surrogate.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlCharReg_ = new RegExp('[' + goog.i18n.bidi.rtlChars_ + ']');\n\n\n/**\n * Regular expression to check for LTR characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrCharReg_ = new RegExp('[' + goog.i18n.bidi.ltrChars_ + ']');\n\n\n/**\n * Test whether the given string has any RTL characters in it.\n * @param {string} str The given string that need to be tested.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether the string contains RTL characters.\n */\ngoog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.rtlCharReg_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Test whether the given string has any RTL characters in it.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the string contains RTL characters.\n * @deprecated Use hasAnyRtl.\n */\ngoog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;\n\n\n/**\n * Test whether the given string has any LTR characters in it.\n * @param {string} str The given string that need to be tested.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether the string contains LTR characters.\n */\ngoog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.ltrCharReg_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Regular expression pattern to check if the first character in the string\n * is LTR.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrRe_ = new RegExp('^[' + goog.i18n.bidi.ltrChars_ + ']');\n\n\n/**\n * Regular expression pattern to check if the first character in the string\n * is RTL.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlRe_ = new RegExp('^[' + goog.i18n.bidi.rtlChars_ + ']');\n\n\n/**\n * Check if the first character in the string is RTL or not.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the first character in str is an RTL char.\n */\ngoog.i18n.bidi.isRtlChar = function(str) {\n  'use strict';\n  return goog.i18n.bidi.rtlRe_.test(str);\n};\n\n\n/**\n * Check if the first character in the string is LTR or not.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the first character in str is an LTR char.\n */\ngoog.i18n.bidi.isLtrChar = function(str) {\n  'use strict';\n  return goog.i18n.bidi.ltrRe_.test(str);\n};\n\n\n/**\n * Check if the first character in the string is neutral or not.\n * @param {string} str The given string that need to be tested.\n * @return {boolean} Whether the first character in str is a neutral char.\n */\ngoog.i18n.bidi.isNeutralChar = function(str) {\n  'use strict';\n  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);\n};\n\n\n/**\n * Regular expressions to check if a piece of text is of LTR directionality\n * on first character with strong directionality.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrDirCheckRe_ = new RegExp(\n    '^[^' + goog.i18n.bidi.rtlChars_ + ']*[' + goog.i18n.bidi.ltrChars_ + ']');\n\n\n/**\n * Regular expressions to check if a piece of text is of RTL directionality\n * on first character with strong directionality.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlDirCheckRe_ = new RegExp(\n    '^[^' + goog.i18n.bidi.ltrChars_ + ']*[' + goog.i18n.bidi.rtlChars_ + ']');\n\n\n/**\n * Check whether the first strongly directional character (if any) is RTL.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL directionality is detected using the first\n *     strongly-directional character method.\n */\ngoog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.rtlDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check whether the first strongly directional character (if any) is RTL.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL directionality is detected using the first\n *     strongly-directional character method.\n * @deprecated Use startsWithRtl.\n */\ngoog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;\n\n\n/**\n * Check whether the first strongly directional character (if any) is LTR.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR directionality is detected using the first\n *     strongly-directional character method.\n */\ngoog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.ltrDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check whether the first strongly directional character (if any) is LTR.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR directionality is detected using the first\n *     strongly-directional character method.\n * @deprecated Use startsWithLtr.\n */\ngoog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;\n\n\n/**\n * Regular expression to check if a string looks like something that must\n * always be LTR even in RTL text, e.g. a URL. When estimating the\n * directionality of text containing these, we treat these as weakly LTR,\n * like numbers.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.isRequiredLtrRe_ = /^http:\\/\\/.*/;\n\n\n/**\n * Check whether the input string either contains no strongly directional\n * characters or looks like a url.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether neutral directionality is detected.\n */\ngoog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {\n  'use strict';\n  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);\n  return goog.i18n.bidi.isRequiredLtrRe_.test(str) ||\n      !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);\n};\n\n\n/**\n * Regular expressions to check if the last strongly-directional character in a\n * piece of text is LTR.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp(\n    '[' + goog.i18n.bidi.ltrChars_ + ']' +\n    '[^' + goog.i18n.bidi.rtlChars_ + ']*$');\n\n\n/**\n * Regular expressions to check if the last strongly-directional character in a\n * piece of text is RTL.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp(\n    '[' + goog.i18n.bidi.rtlChars_ + ']' +\n    '[^' + goog.i18n.bidi.ltrChars_ + ']*$');\n\n\n/**\n * Check if the exit directionality a piece of text is LTR, i.e. if the last\n * strongly-directional character in the string is LTR.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR exit directionality was detected.\n */\ngoog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.ltrExitDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check if the exit directionality a piece of text is LTR, i.e. if the last\n * strongly-directional character in the string is LTR.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether LTR exit directionality was detected.\n * @deprecated Use endsWithLtr.\n */\ngoog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;\n\n\n/**\n * Check if the exit directionality a piece of text is RTL, i.e. if the last\n * strongly-directional character in the string is RTL.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL exit directionality was detected.\n */\ngoog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.rtlExitDirCheckRe_.test(\n      goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));\n};\n\n\n/**\n * Check if the exit directionality a piece of text is RTL, i.e. if the last\n * strongly-directional character in the string is RTL.\n * @param {string} str String being checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether RTL exit directionality was detected.\n * @deprecated Use endsWithRtl.\n */\ngoog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;\n\n\n/**\n * A regular expression for matching right-to-left language codes.\n * See {@link #isRtlLanguage} for the design.\n * Note that not all RTL scripts are included.\n * @type {!RegExp}\n * @private\n */\ngoog.i18n.bidi.rtlLocalesRe_ = new RegExp(\n    '^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|' +\n        '.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))' +\n        '(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)',\n    'i');\n\n\n/**\n * Check if a BCP 47 / III language code indicates an RTL language, i.e. either:\n * - a language code explicitly specifying one of the right-to-left scripts,\n *   e.g. \"az-Arab\", or<p>\n * - a language code specifying one of the languages normally written in a\n *   right-to-left script, e.g. \"fa\" (Farsi), except ones explicitly specifying\n *   Latin or Cyrillic script (which are the usual LTR alternatives).<p>\n * The list of right-to-left scripts appears in the 100-199 range in\n * http://www.unicode.org/iso15924/iso15924-num.html, of which Arabic and\n * Hebrew are by far the most widely used. We also recognize Thaana, and N'Ko,\n * which also have significant modern usage. Adlam and Rohingya\n * scripts are now included since they can be expected to be used in the\n * future. The rest (Syriac, Samaritan, Mandaic, etc.) seem to have extremely\n * limited or no modern usage and are not recognized to save on code size. The\n * languages usually written in a right-to-left script are taken as those with\n * Suppress-Script: Hebr|Arab|Thaa|Nkoo|Adlm|Rohg in\n * http://www.iana.org/assignments/language-subtag-registry,\n * as well as Central (or Sorani) Kurdish (ckb), Sindhi (sd) and Uyghur (ug).\n * Other subtags of the language code, e.g. regions like EG (Egypt), are\n * ignored.\n * @param {string} lang BCP 47 (a.k.a III) language code.\n * @return {boolean} Whether the language code is an RTL language.\n */\ngoog.i18n.bidi.isRtlLanguage = function(lang) {\n  'use strict';\n  return goog.i18n.bidi.rtlLocalesRe_.test(lang);\n};\n\n\n/**\n * Regular expression for bracket guard replacement in text.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.bracketGuardTextRe_ =\n    /(\\(.*?\\)+)|(\\[.*?\\]+)|(\\{.*?\\}+)|(<.*?>+)/g;\n\n\n/**\n * Apply bracket guard using LRM and RLM. This is to address the problem of\n * messy bracket display frequently happens in RTL layout.\n * This function works for plain text, not for HTML. In HTML, the opening\n * bracket might be in a different context than the closing bracket (such as\n * an attribute value).\n * @param {string} s The string that need to be processed.\n * @param {boolean=} opt_isRtlContext specifies default direction (usually\n *     direction of the UI).\n * @return {string} The processed string, with all bracket guarded.\n */\ngoog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {\n  'use strict';\n  const useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) :\n                                                  opt_isRtlContext;\n  const mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;\n  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + '$&' + mark);\n};\n\n\n/**\n * Enforce the html snippet in RTL directionality regardless of overall context.\n * If the html piece was enclosed by tag, dir will be applied to existing\n * tag, otherwise a span tag will be added as wrapper. For this reason, if\n * html snippet starts with a tag, this tag must enclose the whole piece. If\n * the tag already has a dir specified, this new one will override existing\n * one in behavior (tested on FF and IE).\n * @param {string} html The string that need to be processed.\n * @return {string} The processed string, with directionality enforced to RTL.\n */\ngoog.i18n.bidi.enforceRtlInHtml = function(html) {\n  'use strict';\n  if (html.charAt(0) == '<') {\n    return html.replace(/<\\w+/, '$& dir=rtl');\n  }\n  // '\\n' is important for FF so that it won't incorrectly merge span groups\n  return '\\n<span dir=rtl>' + html + '</span>';\n};\n\n\n/**\n * Enforce RTL on both end of the given text piece using unicode BiDi formatting\n * characters RLE and PDF.\n * @param {string} text The piece of text that need to be wrapped.\n * @return {string} The wrapped string after process.\n */\ngoog.i18n.bidi.enforceRtlInText = function(text) {\n  'use strict';\n  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;\n};\n\n\n/**\n * Enforce the html snippet in RTL directionality regardless or overall context.\n * If the html piece was enclosed by tag, dir will be applied to existing\n * tag, otherwise a span tag will be added as wrapper. For this reason, if\n * html snippet starts with a tag, this tag must enclose the whole piece. If\n * the tag already has a dir specified, this new one will override existing\n * one in behavior (tested on FF and IE).\n * @param {string} html The string that need to be processed.\n * @return {string} The processed string, with directionality enforced to RTL.\n */\ngoog.i18n.bidi.enforceLtrInHtml = function(html) {\n  'use strict';\n  if (html.charAt(0) == '<') {\n    return html.replace(/<\\w+/, '$& dir=ltr');\n  }\n  // '\\n' is important for FF so that it won't incorrectly merge span groups\n  return '\\n<span dir=ltr>' + html + '</span>';\n};\n\n\n/**\n * Enforce LTR on both end of the given text piece using unicode BiDi formatting\n * characters LRE and PDF.\n * @param {string} text The piece of text that need to be wrapped.\n * @return {string} The wrapped string after process.\n */\ngoog.i18n.bidi.enforceLtrInText = function(text) {\n  'use strict';\n  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;\n};\n\n\n/**\n * Regular expression to find dimensions such as \"padding: .3 0.4ex 5px 6;\"\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.dimensionsRe_ =\n    /:\\s*([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)\\s+([.\\d][.\\w]*)/g;\n\n\n/**\n * Regular expression for left.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.leftRe_ = /left/gi;\n\n\n/**\n * Regular expression for right.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.rightRe_ = /right/gi;\n\n\n/**\n * Placeholder regular expression for swapping.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.tempRe_ = /%%%%/g;\n\n\n/**\n * Swap location parameters and 'left'/'right' in CSS specification. The\n * processed string will be suited for RTL layout. Though this function can\n * cover most cases, there are always exceptions. It is suggested to put\n * those exceptions in separate group of CSS string.\n * @param {string} cssStr CSS spefication string.\n * @return {string} Processed CSS specification string.\n */\ngoog.i18n.bidi.mirrorCSS = function(cssStr) {\n  'use strict';\n  return cssStr\n      .\n      // reverse dimensions\n      replace(goog.i18n.bidi.dimensionsRe_, ':$1 $4 $3 $2')\n      .replace(goog.i18n.bidi.leftRe_, '%%%%')\n      .  // swap left and right\n      replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT)\n      .replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);\n};\n\n\n/**\n * Regular expression for hebrew double quote substitution, finding quote\n * directly after hebrew characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\\u0591-\\u05f2])\"/g;\n\n\n/**\n * Regular expression for hebrew single quote substitution, finding quote\n * directly after hebrew characters.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.singleQuoteSubstituteRe_ = /([\\u0591-\\u05f2])'/g;\n\n\n/**\n * Replace the double and single quote directly after a Hebrew character with\n * GERESH and GERSHAYIM. In such case, most likely that's user intention.\n * @param {string} str String that need to be processed.\n * @return {string} Processed string with double/single quote replaced.\n */\ngoog.i18n.bidi.normalizeHebrewQuote = function(str) {\n  'use strict';\n  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, '$1\\u05f4')\n      .replace(goog.i18n.bidi.singleQuoteSubstituteRe_, '$1\\u05f3');\n};\n\n\n/**\n * Regular expression to split a string into \"words\" for directionality\n * estimation based on relative word counts.\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.wordSeparatorRe_ = /\\s+/;\n\n\n/**\n * Regular expression to check if a string contains any numerals. Used to\n * differentiate between completely neutral strings and those containing\n * numbers, which are weakly LTR.\n *\n * Native Arabic digits (\\u0660 - \\u0669) are not included because although they\n * do flow left-to-right inside a number, this is the case even if the  overall\n * directionality is RTL, and a mathematical expression using these digits is\n * supposed to flow right-to-left overall, including unary plus and minus\n * appearing to the right of a number, and this does depend on the overall\n * directionality being RTL. The digits used in Farsi (\\u06F0 - \\u06F9), on the\n * other hand, are included, since Farsi math (including unary plus and minus)\n * does flow left-to-right.\n * TODO: Consider other systems of digits, e.g., Adlam.\n *\n * @type {RegExp}\n * @private\n */\ngoog.i18n.bidi.hasNumeralsRe_ = /[\\d\\u06f0-\\u06f9]/;\n\n\n/**\n * This constant controls threshold of RTL directionality.\n * @type {number}\n * @private\n */\ngoog.i18n.bidi.rtlDetectionThreshold_ = 0.40;\n\n\n/**\n * Estimates the directionality of a string based on relative word counts.\n * If the number of RTL words is above a certain percentage of the total number\n * of strongly directional words, returns RTL.\n * Otherwise, if any words are strongly or weakly LTR, returns LTR.\n * Otherwise, returns UNKNOWN, which is used to mean \"neutral\".\n * Numbers are counted as weakly LTR.\n * @param {string} str The string to be checked.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {goog.i18n.bidi.Dir} Estimated overall directionality of `str`.\n */\ngoog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {\n  'use strict';\n  let rtlCount = 0;\n  let totalCount = 0;\n  let hasWeaklyLtr = false;\n  const tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml)\n                     .split(goog.i18n.bidi.wordSeparatorRe_);\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (goog.i18n.bidi.startsWithRtl(token)) {\n      rtlCount++;\n      totalCount++;\n    } else if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {\n      hasWeaklyLtr = true;\n    } else if (goog.i18n.bidi.hasAnyLtr(token)) {\n      totalCount++;\n    } else if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {\n      hasWeaklyLtr = true;\n    }\n  }\n\n  return totalCount == 0 ?\n      (hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL) :\n      (rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ?\n           goog.i18n.bidi.Dir.RTL :\n           goog.i18n.bidi.Dir.LTR);\n};\n\n\n/**\n * Check the directionality of a piece of text, return true if the piece of\n * text should be laid out in RTL direction.\n * @param {string} str The piece of text that need to be detected.\n * @param {boolean=} opt_isHtml Whether str is HTML / HTML-escaped.\n *     Default: false.\n * @return {boolean} Whether this piece of text should be laid out in RTL.\n */\ngoog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {\n  'use strict';\n  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) ==\n      goog.i18n.bidi.Dir.RTL;\n};\n\n\n/**\n * Sets text input element's directionality and text alignment based on a\n * given directionality. Does nothing if the given directionality is unknown or\n * neutral.\n * @param {Element} element Input field element to set directionality to.\n * @param {goog.i18n.bidi.Dir|number|boolean|null} dir Desired directionality,\n *     given in one of the following formats:\n *     1. A goog.i18n.bidi.Dir constant.\n *     2. A number (positive = LRT, negative = RTL, 0 = neutral).\n *     3. A boolean (true = RTL, false = LTR).\n *     4. A null for unknown directionality.\n * @return {void}\n */\ngoog.i18n.bidi.setElementDirAndAlign = function(element, dir) {\n  'use strict';\n  if (element) {\n    const htmlElement = /** @type {!HTMLElement} */ (element);\n    dir = goog.i18n.bidi.toDir(dir);\n    if (dir) {\n      htmlElement.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ?\n          goog.i18n.bidi.RIGHT :\n          goog.i18n.bidi.LEFT;\n      htmlElement.dir = dir == goog.i18n.bidi.Dir.RTL ? 'rtl' : 'ltr';\n    }\n  }\n};\n\n\n/**\n * Sets element dir based on estimated directionality of the given text.\n * @param {!Element} element\n * @param {string} text\n * @return {void}\n */\ngoog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {\n  'use strict';\n  const htmlElement = /** @type {!HTMLElement} */ (element);\n  switch (goog.i18n.bidi.estimateDirection(text)) {\n    case (goog.i18n.bidi.Dir.LTR):\n      if (htmlElement.dir !== 'ltr') {\n        htmlElement.dir = 'ltr';\n      }\n      break;\n    case (goog.i18n.bidi.Dir.RTL):\n      if (htmlElement.dir !== 'rtl') {\n        htmlElement.dir = 'rtl';\n      }\n      break;\n    default:\n      // Default for no direction, inherit from document.\n      htmlElement.removeAttribute('dir');\n  }\n};\n\n\n\n/**\n * Strings that have an (optional) known direction.\n *\n * Implementations of this interface are string-like objects that carry an\n * attached direction, if known.\n * @interface\n */\ngoog.i18n.bidi.DirectionalString = function() {};\n\n\n/**\n * Interface marker of the DirectionalString interface.\n *\n * This property can be used to determine at runtime whether or not an object\n * implements this interface.  All implementations of this interface set this\n * property to `true`.\n * @type {boolean}\n */\ngoog.i18n.bidi.DirectionalString.prototype\n    .implementsGoogI18nBidiDirectionalString;\n\n\n/**\n * Retrieves this object's known direction (if any).\n * @return {?goog.i18n.bidi.Dir} The known direction. Null if unknown.\n */\ngoog.i18n.bidi.DirectionalString.prototype.getDirection;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Policy to convert strings to Trusted Types. See\n * https://github.com/WICG/trusted-types for details.\n */\n\ngoog.provide('goog.html.trustedtypes');\n\n\n/**\n * Cached result of goog.createTrustedTypesPolicy.\n * @type {?TrustedTypePolicy|undefined}\n * @private\n */\ngoog.html.trustedtypes.cachedPolicy_;\n\n\n/**\n * Creates a (singleton) Trusted Type Policy for Safe HTML Types.\n * @return {?TrustedTypePolicy}\n * @package\n */\ngoog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse = function() {\n  'use strict';\n  if (!goog.TRUSTED_TYPES_POLICY_NAME) {\n    // Binary not configured for Trusted Types.\n    return null;\n  }\n\n  if (goog.html.trustedtypes.cachedPolicy_ === undefined) {\n    goog.html.trustedtypes.cachedPolicy_ =\n        goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + '#html');\n  }\n\n  return goog.html.trustedtypes.cachedPolicy_;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The SafeScript type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.module('goog.html.SafeScript');\ngoog.module.declareLegacyNamespace();\n\nconst Const = goog.require('goog.string.Const');\nconst TypedString = goog.require('goog.string.TypedString');\nconst trustedtypes = goog.require('goog.html.trustedtypes');\nconst {fail} = goog.require('goog.asserts');\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @const {!Object}\n */\nconst CONSTRUCTOR_TOKEN_PRIVATE = {};\n\n/**\n * A string-like object which represents JavaScript code and that carries the\n * security type contract that its value, as a string, will not cause execution\n * of unconstrained attacker controlled code (XSS) when evaluated as JavaScript\n * in a browser.\n *\n * Instances of this type must be created via the factory method\n * `SafeScript.fromConstant` and not by invoking its constructor. The\n * constructor intentionally takes an extra parameter that cannot be constructed\n * outside of this file and the type is immutable; hence only a default instance\n * corresponding to the empty string can be obtained via constructor invocation.\n *\n * A SafeScript's string representation can safely be interpolated as the\n * content of a script element within HTML. The SafeScript string should not be\n * escaped before interpolation.\n *\n * Note that the SafeScript might contain text that is attacker-controlled but\n * that text should have been interpolated with appropriate escaping,\n * sanitization and/or validation into the right location in the script, such\n * that it is highly constrained in its effect (for example, it had to match a\n * set of whitelisted words).\n *\n * A SafeScript can be constructed via security-reviewed unchecked\n * conversions. In this case producers of SafeScript must ensure themselves that\n * the SafeScript does not contain unsafe script. Note in particular that\n * `&lt;` is dangerous, even when inside JavaScript strings, and so should\n * always be forbidden or JavaScript escaped in user controlled input. For\n * example, if `&lt;/script&gt;&lt;script&gt;evil&lt;/script&gt;\"` were\n * interpolated inside a JavaScript string, it would break out of the context\n * of the original script element and `evil` would execute. Also note\n * that within an HTML script (raw text) element, HTML character references,\n * such as \"&lt;\" are not allowed. See\n * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.\n * Creating SafeScript objects HAS SIDE-EFFECTS due to calling Trusted Types Web\n * API.\n *\n * @see SafeScript#fromConstant\n * @final\n * @implements {TypedString}\n */\nclass SafeScript {\n  /**\n   * @param {!TrustedScript|string} value\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, token) {\n    /**\n     * The contained value of this SafeScript.  The field has a purposely ugly\n     * name to make (non-compiled) code that attempts to directly access this\n     * field stand out.\n     * @private {!TrustedScript|string}\n     */\n    this.privateDoNotAccessOrElseSafeScriptWrappedValue_ =\n        (token === CONSTRUCTOR_TOKEN_PRIVATE) ? value : '';\n\n    /**\n     * @override\n     * @const\n     */\n    this.implementsGoogStringTypedString = true;\n  }\n\n  /**\n   * Creates a SafeScript object from a compile-time constant string.\n   *\n   * @param {!Const} script A compile-time-constant string from which to create\n   *     a SafeScript.\n   * @return {!SafeScript} A SafeScript object initialized to `script`.\n   */\n  static fromConstant(script) {\n    const scriptString = Const.unwrap(script);\n    if (scriptString.length === 0) {\n      return SafeScript.EMPTY;\n    }\n    return SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\n        scriptString);\n  }\n\n  /**\n   * Creates a SafeScript JSON representation from anything that could be passed\n   * to JSON.stringify.\n   * @param {*} val\n   * @return {!SafeScript}\n   */\n  static fromJson(val) {\n    return SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\n        SafeScript.stringify_(val));\n  }\n\n  /**\n   * Returns this SafeScript's value as a string.\n   *\n   * IMPORTANT: In code where it is security relevant that an object's type is\n   * indeed `SafeScript`, use `SafeScript.unwrap` instead of\n   * this method. If in doubt, assume that it's security relevant. In\n   * particular, note that goog.html functions which return a goog.html type do\n   * not guarantee the returned instance is of the right type. For example:\n   *\n   * <pre>\n   * var fakeSafeHtml = new String('fake');\n   * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n   * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n   * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n   * // instanceof goog.html.SafeHtml.\n   * </pre>\n   *\n   * @see SafeScript#unwrap\n   * @override\n   */\n  getTypedStringValue() {\n    return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();\n  }\n\n  /**\n   * Performs a runtime check that the provided object is indeed a\n   * SafeScript object, and returns its value.\n   *\n   * @param {!SafeScript} safeScript The object to extract from.\n   * @return {string} The safeScript object's contained string, unless\n   *     the run-time type check fails. In that case, `unwrap` returns an\n   *     innocuous string, or, if assertions are enabled, throws\n   *     `asserts.AssertionError`.\n   */\n  static unwrap(safeScript) {\n    return SafeScript.unwrapTrustedScript(safeScript).toString();\n  }\n\n  /**\n   * Unwraps value as TrustedScript if supported or as a string if not.\n   * @param {!SafeScript} safeScript\n   * @return {!TrustedScript|string}\n   * @see SafeScript.unwrap\n   */\n  static unwrapTrustedScript(safeScript) {\n    // Perform additional Run-time type-checking to ensure that\n    // safeScript is indeed an instance of the expected type.  This\n    // provides some additional protection against security bugs due to\n    // application code that disables type checks.\n    // Specifically, the following checks are performed:\n    // 1. The object is an instance of the expected type.\n    // 2. The object is not an instance of a subclass.\n    if (safeScript instanceof SafeScript &&\n        safeScript.constructor === SafeScript) {\n      return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;\n    } else {\n      fail(\n          'expected object of type SafeScript, got \\'' + safeScript +\n          '\\' of type ' + goog.typeOf(safeScript));\n      return 'type_error:SafeScript';\n    }\n  }\n\n  /**\n   * Converts the given value to an embeddable JSON string and returns it. The\n   * resulting string can be embedded in HTML because the '<' character is\n   * encoded.\n   *\n   * @param {*} val\n   * @return {string}\n   * @private\n   */\n  static stringify_(val) {\n    const json = JSON.stringify(val);\n    return json.replace(/</g, '\\\\x3c');\n  }\n\n  /**\n   * Package-internal utility method to create SafeScript instances.\n   *\n   * @param {string} script The string to initialize the SafeScript object with.\n   * @return {!SafeScript} The initialized SafeScript object.\n   * @package\n   */\n  static createSafeScriptSecurityPrivateDoNotAccessOrElse(script) {\n    const policy = trustedtypes.getPolicyPrivateDoNotAccessOrElse();\n    const trustedScript = policy ? policy.createScript(script) : script;\n    return new SafeScript(trustedScript, CONSTRUCTOR_TOKEN_PRIVATE);\n  }\n}\n\n/**\n * Returns a string-representation of this value.\n *\n * To obtain the actual string value wrapped in a SafeScript, use\n * `SafeScript.unwrap`.\n *\n * @return {string}\n * @see SafeScript#unwrap\n * @override\n */\nSafeScript.prototype.toString = function() {\n  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();\n};\n\n\n/**\n * A SafeScript instance corresponding to the empty string.\n * @const {!SafeScript}\n */\nSafeScript.EMPTY = /** @type {!SafeScript} */ ({\n  // NOTE: this compiles to nothing, but hides the possible side effect of\n  // SafeScript creation (due to calling trustedTypes.createPolicy) from the\n  // compiler so that the entire call can be removed if the result is not used.\n  valueOf: function() {\n    return SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse('');\n  },\n}.valueOf());\n\n\nexports = SafeScript;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Wrapper for URL and its createObjectUrl and revokeObjectUrl\n * methods that are part of the HTML5 File API.\n */\n\ngoog.provide('goog.fs.url');\n\n\n/**\n * Creates a blob URL for a blob object.\n * Throws an error if the browser does not support Object Urls.\n *\n * @param {!File|!Blob|!MediaSource|!MediaStream} obj The object for which\n *   to create the URL.\n * @return {string} The URL for the object.\n */\ngoog.fs.url.createObjectUrl = function(obj) {\n  'use strict';\n  return goog.fs.url.getUrlObject_().createObjectURL(obj);\n};\n\n\n/**\n * Revokes a URL created by {@link goog.fs.url.createObjectUrl}.\n * Throws an error if the browser does not support Object Urls.\n *\n * @param {string} url The URL to revoke.\n * @return {void}\n */\ngoog.fs.url.revokeObjectUrl = function(url) {\n  'use strict';\n  goog.fs.url.getUrlObject_().revokeObjectURL(url);\n};\n\n\n/**\n * @record\n * @private\n */\ngoog.fs.url.UrlObject_ = function() {};\n\n/**\n * @param {!File|!Blob|!MediaSource|!MediaStream} arg\n * @return {string}\n */\ngoog.fs.url.UrlObject_.prototype.createObjectURL = function(arg) {};\n\n/**\n * @param {string} s\n * @return {void}\n */\ngoog.fs.url.UrlObject_.prototype.revokeObjectURL = function(s) {};\n\n\n/**\n * Get the object that has the createObjectURL and revokeObjectURL functions for\n * this browser.\n *\n * @return {!goog.fs.url.UrlObject_} The object for this browser.\n * @private\n */\ngoog.fs.url.getUrlObject_ = function() {\n  'use strict';\n  const urlObject = goog.fs.url.findUrlObject_();\n  if (urlObject != null) {\n    return urlObject;\n  } else {\n    throw new Error('This browser doesn\\'t seem to support blob URLs');\n  }\n};\n\n\n/**\n * Finds the object that has the createObjectURL and revokeObjectURL functions\n * for this browser.\n *\n * @return {?goog.fs.url.UrlObject_} The object for this browser or null if the\n *     browser does not support Object Urls.\n * @private\n */\ngoog.fs.url.findUrlObject_ = function() {\n  'use strict';\n  // This is what the spec says to do\n  // http://dev.w3.org/2006/webapi/FileAPI/#dfn-createObjectURL\n  if (goog.global.URL !== undefined &&\n      goog.global.URL.createObjectURL !== undefined) {\n    return /** @type {!goog.fs.url.UrlObject_} */ (goog.global.URL);\n    // This is what the spec used to say to do\n  } else if (goog.global.createObjectURL !== undefined) {\n    return /** @type {!goog.fs.url.UrlObject_} */ (goog.global);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * Checks whether this browser supports Object Urls. If not, calls to\n * createObjectUrl and revokeObjectUrl will result in an error.\n *\n * @return {boolean} True if this browser supports Object Urls.\n */\ngoog.fs.url.browserSupportsObjectUrls = function() {\n  'use strict';\n  return goog.fs.url.findUrlObject_() != null;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Wrappers for the HTML5 File API. These wrappers closely mirror\n * the underlying APIs, but use Closure-style events and Deferred return values.\n * Their existence also makes it possible to mock the FileSystem API for testing\n * in browsers that don't support it natively.\n *\n * When adding public functions to anything under this namespace, be sure to add\n * its mock counterpart to goog.testing.fs.\n */\n\ngoog.provide('goog.fs.blob');\n\n\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param {...(string|!Blob|!ArrayBuffer)} var_args The values that will make up\n *     the resulting blob.\n * @return {!Blob} The blob.\n */\ngoog.fs.blob.getBlob = function(var_args) {\n  'use strict';\n  const BlobBuilder = goog.global.BlobBuilder || goog.global.WebKitBlobBuilder;\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < arguments.length; i++) {\n      bb.append(arguments[i]);\n    }\n    return bb.getBlob();\n  } else {\n    return goog.fs.blob.getBlobWithProperties(\n        Array.prototype.slice.call(arguments));\n  }\n};\n\n\n/**\n * Creates a blob with the given properties.\n * See https://developer.mozilla.org/en-US/docs/Web/API/Blob for more details.\n *\n * @param {!Array<string|!Blob|!ArrayBuffer>} parts The values that will make up\n *     the resulting blob (subset supported by both BlobBuilder.append() and\n *     Blob constructor).\n * @param {string=} opt_type The MIME type of the Blob.\n * @param {string=} opt_endings Specifies how strings containing newlines are to\n *     be written out.\n * @return {!Blob} The blob.\n */\ngoog.fs.blob.getBlobWithProperties = function(parts, opt_type, opt_endings) {\n  'use strict';\n  const BlobBuilder = goog.global.BlobBuilder || goog.global.WebKitBlobBuilder;\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < parts.length; i++) {\n      bb.append(parts[i], opt_endings);\n    }\n    return bb.getBlob(opt_type);\n  } else if (goog.global.Blob !== undefined) {\n    const properties = {};\n    if (opt_type) {\n      properties['type'] = opt_type;\n    }\n    if (opt_endings) {\n      properties['endings'] = opt_endings;\n    }\n    return new Blob(parts, properties);\n  } else {\n    throw new Error('This browser doesn\\'t seem to support creating Blobs');\n  }\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The TrustedResourceUrl type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide('goog.html.TrustedResourceUrl');\n\ngoog.require('goog.asserts');\ngoog.require('goog.fs.blob');\ngoog.require('goog.fs.url');\ngoog.require('goog.html.SafeScript');\ngoog.require('goog.html.trustedtypes');\ngoog.require('goog.i18n.bidi.Dir');\ngoog.require('goog.i18n.bidi.DirectionalString');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.TypedString');\n\n\n\n/**\n * A URL which is under application control and from which script, CSS, and\n * other resources that represent executable code, can be fetched.\n *\n * Given that the URL can only be constructed from strings under application\n * control and is used to load resources, bugs resulting in a malformed URL\n * should not have a security impact and are likely to be easily detectable\n * during testing. Given the wide number of non-RFC compliant URLs in use,\n * stricter validation could prevent some applications from being able to use\n * this type.\n *\n * Instances of this type must be created via the factory method,\n * (`fromConstant`, `fromConstants`, `format` or `formatWithParams`), and not by\n * invoking its constructor. The constructor intentionally takes an extra\n * parameter that cannot be constructed outside of this file and the type is\n * immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * Creating TrustedResourceUrl objects HAS SIDE-EFFECTS due to calling\n * Trusted Types Web API.\n *\n * @see goog.html.TrustedResourceUrl#fromConstant\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.TrustedResourceUrl = class {\n  /**\n   * @param {!TrustedScriptURL|string} value\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, token) {\n    /**\n     * The contained value of this TrustedResourceUrl.  The field has a\n     * purposely ugly name to make (non-compiled) code that attempts to directly\n     * access this field stand out.\n     * @const\n     * @private {!TrustedScriptURL|string}\n     */\n    this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ =\n        (token === goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_) ?\n        value :\n        '';\n  }\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Returns this TrustedResourceUrl's value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object's type is\n * indeed `TrustedResourceUrl`, use\n * `goog.html.TrustedResourceUrl.unwrap` instead of this method. If in\n * doubt, assume that it's security relevant. In particular, note that\n * goog.html functions which return a goog.html type do not guarantee that\n * the returned instance is of the right type. For example:\n *\n * <pre>\n * var fakeSafeHtml = new String('fake');\n * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\n * // goog.html.SafeHtml.\n * </pre>\n *\n * @see goog.html.TrustedResourceUrl#unwrap\n * @override\n */\ngoog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {\n  'use strict';\n  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_\n      .toString();\n};\n\n\n/**\n * @override\n * @const\n */\ngoog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString =\n    true;\n\n\n/**\n * Returns this URLs directionality, which is always `LTR`.\n * @override\n * @return {!goog.i18n.bidi.Dir}\n */\ngoog.html.TrustedResourceUrl.prototype.getDirection = function() {\n  'use strict';\n  return goog.i18n.bidi.Dir.LTR;\n};\n\n\n/**\n * Creates a new TrustedResourceUrl with params added to URL. Both search and\n * hash params can be specified.\n *\n * @param {string|?Object<string, *>|undefined} searchParams Search parameters\n *     to add to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for\n *     exact format definition.\n * @param {(string|?Object<string, *>)=} opt_hashParams Hash parameters to add\n *     to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact\n *     format definition.\n * @return {!goog.html.TrustedResourceUrl} New TrustedResourceUrl with params.\n */\ngoog.html.TrustedResourceUrl.prototype.cloneWithParams = function(\n    searchParams, opt_hashParams) {\n  'use strict';\n  var url = goog.html.TrustedResourceUrl.unwrap(this);\n  var parts = goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(url);\n  var urlBase = parts[1];\n  var urlSearch = parts[2] || '';\n  var urlHash = parts[3] || '';\n\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(\n          urlBase +\n          goog.html.TrustedResourceUrl.stringifyParams_(\n              '?', urlSearch, searchParams) +\n          goog.html.TrustedResourceUrl.stringifyParams_(\n              '#', urlHash, opt_hashParams));\n};\n\n\n/**\n * Returns a string-representation of this value.\n *\n * To obtain the actual string value wrapped in a TrustedResourceUrl, use\n * `goog.html.TrustedResourceUrl.unwrap`.\n *\n * @return {string}\n * @see goog.html.TrustedResourceUrl#unwrap\n * @override\n */\ngoog.html.TrustedResourceUrl.prototype.toString = function() {\n  'use strict';\n  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + '';\n};\n\n\n/**\n * Performs a runtime check that the provided object is indeed a\n * TrustedResourceUrl object, and returns its value.\n *\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl The object to\n *     extract from.\n * @return {string} The trustedResourceUrl object's contained string, unless\n *     the run-time type check fails. In that case, `unwrap` returns an\n *     innocuous string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {\n  'use strict';\n  return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(trustedResourceUrl)\n      .toString();\n};\n\n\n/**\n * Unwraps value as TrustedScriptURL if supported or as a string if not.\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\n * @return {!TrustedScriptURL|string}\n * @see goog.html.TrustedResourceUrl.unwrap\n */\ngoog.html.TrustedResourceUrl.unwrapTrustedScriptURL = function(\n    trustedResourceUrl) {\n  'use strict';\n  // Perform additional Run-time type-checking to ensure that\n  // trustedResourceUrl is indeed an instance of the expected type.  This\n  // provides some additional protection against security bugs due to\n  // application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl &&\n      trustedResourceUrl.constructor === goog.html.TrustedResourceUrl) {\n    return trustedResourceUrl\n        .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;\n  } else {\n    goog.asserts.fail('expected object of type TrustedResourceUrl, got \\'' +\n        trustedResourceUrl + '\\' of type ' + goog.typeOf(trustedResourceUrl));\n    return 'type_error:TrustedResourceUrl';\n  }\n};\n\n\n/**\n * Creates a TrustedResourceUrl from a format string and arguments.\n *\n * The arguments for interpolation into the format string map labels to values.\n * Values of type `goog.string.Const` are interpolated without modifcation.\n * Values of other types are cast to string and encoded with\n * encodeURIComponent.\n *\n * `%{<label>}` markers are used in the format string to indicate locations\n * to be interpolated with the valued mapped to the given label. `<label>`\n * must contain only alphanumeric and `_` characters.\n *\n * The format string must match goog.html.TrustedResourceUrl.BASE_URL_.\n *\n * Example usage:\n *\n *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(\n *        'https://www.google.com/search?q=%{query}'), {'query': searchTerm});\n *\n *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(\n *        '//www.youtube.com/v/%{videoId}?hl=en&fs=1%{autoplay}'), {\n *        'videoId': videoId,\n *        'autoplay': opt_autoplay ?\n *            goog.string.Const.from('&autoplay=1') : goog.string.Const.EMPTY\n *    });\n *\n * While this function can be used to create a TrustedResourceUrl from only\n * constants, fromConstant() and fromConstants() are generally preferable for\n * that purpose.\n *\n * @param {!goog.string.Const} format The format string.\n * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping\n *     of labels to values to be interpolated into the format string.\n *     goog.string.Const values are interpolated without encoding.\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error} On an invalid format string or if a label used in the\n *     the format string is not present in args.\n */\ngoog.html.TrustedResourceUrl.format = function(format, args) {\n  'use strict';\n  var formatStr = goog.string.Const.unwrap(format);\n  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {\n    throw new Error('Invalid TrustedResourceUrl format: ' + formatStr);\n  }\n  var result = formatStr.replace(\n      goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {\n        'use strict';\n        if (!Object.prototype.hasOwnProperty.call(args, id)) {\n          throw new Error(\n              'Found marker, \"' + id + '\", in format string, \"' + formatStr +\n              '\", but no valid label mapping found ' +\n              'in args: ' + JSON.stringify(args));\n        }\n        var arg = args[id];\n        if (arg instanceof goog.string.Const) {\n          return goog.string.Const.unwrap(arg);\n        } else {\n          return encodeURIComponent(String(arg));\n        }\n      });\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);\n};\n\n\n/**\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\\w+)}/g;\n\n\n/**\n * The URL must be absolute, scheme-relative or path-absolute. So it must\n * start with:\n * - https:// followed by allowed origin characters.\n * - // followed by allowed origin characters.\n * - Any absolute or relative path.\n *\n * Based on\n * https://url.spec.whatwg.org/commit-snapshots/56b74ce7cca8883eab62e9a12666e2fac665d03d/#url-parsing\n * an initial / which is not followed by another / or \\ will end up in the \"path\n * state\" and from there it can only go to \"fragment state\" and \"query state\".\n *\n * We don't enforce a well-formed domain name. So '.' or '1.2' are valid.\n * That's ok because the origin comes from a compile-time constant.\n *\n * A regular expression is used instead of goog.uri for several reasons:\n * - Strictness. E.g. we don't want any userinfo component and we don't\n *   want '/./, nor \\' in the first path component.\n * - Small trusted base. goog.uri is generic and might need to change,\n *   reasoning about all the ways it can parse a URL now and in the future\n *   is error-prone.\n * - Code size. We expect many calls to .format(), many of which might\n *   not be using goog.uri.\n * - Simplicity. Using goog.uri would likely not result in simpler nor shorter\n *   code.\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.BASE_URL_ = new RegExp(\n    '^((https:)?//[0-9a-z.:[\\\\]-]+/'  // Origin.\n        + '|/[^/\\\\\\\\]'                // Absolute path.\n        + '|[^:/\\\\\\\\%]+/'             // Relative path.\n        + '|[^:/\\\\\\\\%]*[?#]'          // Query string or fragment.\n        + '|about:blank#'             // about:blank with fragment.\n        + ')',\n    'i');\n\n/**\n * RegExp for splitting a URL into the base, search field, and hash field.\n *\n * @private @const {!RegExp}\n */\ngoog.html.TrustedResourceUrl.URL_PARAM_PARSER_ =\n    /^([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/;\n\n\n/**\n * Formats the URL same as TrustedResourceUrl.format and then adds extra URL\n * parameters.\n *\n * Example usage:\n *\n *     // Creates '//www.youtube.com/v/abc?autoplay=1' for videoId='abc' and\n *     // opt_autoplay=1. Creates '//www.youtube.com/v/abc' for videoId='abc'\n *     // and opt_autoplay=undefined.\n *     var url = goog.html.TrustedResourceUrl.formatWithParams(\n *         goog.string.Const.from('//www.youtube.com/v/%{videoId}'),\n *         {'videoId': videoId},\n *         {'autoplay': opt_autoplay});\n *\n * @param {!goog.string.Const} format The format string.\n * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping\n *     of labels to values to be interpolated into the format string.\n *     goog.string.Const values are interpolated without encoding.\n * @param {string|?Object<string, *>|undefined} searchParams Parameters to add\n *     to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact\n *     format definition.\n * @param {(string|?Object<string, *>)=} opt_hashParams Hash parameters to add\n *     to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact\n *     format definition.\n * @return {!goog.html.TrustedResourceUrl}\n * @throws {!Error} On an invalid format string or if a label used in the\n *     the format string is not present in args.\n */\ngoog.html.TrustedResourceUrl.formatWithParams = function(\n    format, args, searchParams, opt_hashParams) {\n  'use strict';\n  var url = goog.html.TrustedResourceUrl.format(format, args);\n  return url.cloneWithParams(searchParams, opt_hashParams);\n};\n\n\n/**\n * Creates a TrustedResourceUrl object from a compile-time constant string.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!goog.string.Const} url A compile-time-constant string from which to\n *     create a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to `url`.\n */\ngoog.html.TrustedResourceUrl.fromConstant = function(url) {\n  'use strict';\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(\n          goog.string.Const.unwrap(url));\n};\n\n\n/**\n * Creates a TrustedResourceUrl object from a compile-time constant strings.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!Array<!goog.string.Const>} parts Compile-time-constant strings from\n *     which to create a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to concatenation of `parts`.\n */\ngoog.html.TrustedResourceUrl.fromConstants = function(parts) {\n  'use strict';\n  var unwrapped = '';\n  for (var i = 0; i < parts.length; i++) {\n    unwrapped += goog.string.Const.unwrap(parts[i]);\n  }\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);\n};\n\n/**\n * Creates a TrustedResourceUrl object by generating a Blob from a SafeScript\n * object and then calling createObjectURL with that blob.\n *\n * SafeScript objects are trusted to contain executable JavaScript code.\n *\n * Caller must call goog.fs.url.revokeObjectUrl() on the unwrapped url to\n * release the underlying blob.\n *\n * Throws if browser doesn't support blob construction.\n *\n * @param {!goog.html.SafeScript} safeScript A script from which to create a\n *     TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object\n *     initialized to a new blob URL.\n */\ngoog.html.TrustedResourceUrl.fromSafeScript = function(safeScript) {\n  'use strict';\n  var blob = goog.fs.blob.getBlobWithProperties(\n      [goog.html.SafeScript.unwrap(safeScript)], 'text/javascript');\n  var url = goog.fs.url.createObjectUrl(blob);\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @private {!Object}\n * @const\n */\ngoog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};\n\n\n/**\n * Package-internal utility method to create TrustedResourceUrl instances.\n *\n * @param {string} url The string to initialize the TrustedResourceUrl object\n *     with.\n * @return {!goog.html.TrustedResourceUrl} The initialized TrustedResourceUrl\n *     object.\n * @package\n */\ngoog.html.TrustedResourceUrl\n    .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {\n  'use strict';\n  const policy = goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();\n  var value = policy ? policy.createScriptURL(url) : url;\n  return new goog.html.TrustedResourceUrl(\n      value, goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_);\n};\n\n\n/**\n * Stringifies the passed params to be used as either a search or hash field of\n * a URL.\n *\n * @param {string} prefix The prefix character for the given field ('?' or '#').\n * @param {string} currentString The existing field value (including the prefix\n *     character, if the field is present).\n * @param {string|?Object<string, *>|undefined} params The params to set or\n *     append to the field.\n * - If `undefined` or `null`, the field remains unchanged.\n * - If a string, then the string will be escaped and the field will be\n *   overwritten with that value.\n * - If an Object, that object is treated as a set of key-value pairs to be\n *   appended to the current field. Note that JavaScript doesn't guarantee the\n *   order of values in an object which might result in non-deterministic order\n *   of the parameters. However, browsers currently preserve the order. The\n *   rules for each entry:\n *   - If an array, it will be processed as if each entry were an additional\n *     parameter with exactly the same key, following the same logic below.\n *   - If `undefined` or `null`, it will be skipped.\n *   - Otherwise, it will be turned into a string, escaped, and appended.\n * @return {string}\n * @private\n */\ngoog.html.TrustedResourceUrl.stringifyParams_ = function(\n    prefix, currentString, params) {\n  'use strict';\n  if (params == null) {\n    // Do not modify the field.\n    return currentString;\n  }\n  if (typeof params === 'string') {\n    // Set field to the passed string.\n    return params ? prefix + encodeURIComponent(params) : '';\n  }\n  // Add on parameters to field from key-value object.\n  for (var key in params) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\n    if (Object.prototype.hasOwnProperty.call(params, key)) {\n      var value = params[key];\n      var outputValues = Array.isArray(value) ? value : [value];\n      for (var i = 0; i < outputValues.length; i++) {\n        var outputValue = outputValues[i];\n        if (outputValue != null) {\n          if (!currentString) {\n            currentString = prefix;\n          }\n          currentString += (currentString.length > prefix.length ? '&' : '') +\n              encodeURIComponent(key) + '=' +\n              encodeURIComponent(String(outputValue));\n        }\n      }\n    }\n  }\n  return currentString;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview String functions called from Closure packages that couldn't\n * depend on each other. Outside Closure, use goog.string function which\n * delegate to these.\n */\n\n\ngoog.provide('goog.string.internal');\n\n\n/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n * @see goog.string.startsWith\n */\ngoog.string.internal.startsWith = function(str, prefix) {\n  'use strict';\n  return str.lastIndexOf(prefix, 0) == 0;\n};\n\n\n/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n * @see goog.string.endsWith\n */\ngoog.string.internal.endsWith = function(str, suffix) {\n  'use strict';\n  const l = str.length - suffix.length;\n  return l >= 0 && str.indexOf(suffix, l) == l;\n};\n\n\n/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n * @see goog.string.caseInsensitiveStartsWith\n */\ngoog.string.internal.caseInsensitiveStartsWith = function(str, prefix) {\n  'use strict';\n  return goog.string.internal.caseInsensitiveCompare(\n             prefix, str.substr(0, prefix.length)) == 0;\n};\n\n\n/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n * @see goog.string.caseInsensitiveEndsWith\n */\ngoog.string.internal.caseInsensitiveEndsWith = function(str, suffix) {\n  'use strict';\n  return (\n      goog.string.internal.caseInsensitiveCompare(\n          suffix, str.substr(str.length - suffix.length, suffix.length)) == 0);\n};\n\n\n/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n * @see goog.string.caseInsensitiveEquals\n */\ngoog.string.internal.caseInsensitiveEquals = function(str1, str2) {\n  'use strict';\n  return str1.toLowerCase() == str2.toLowerCase();\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @see goog.string.isEmptyOrWhitespace\n */\ngoog.string.internal.isEmptyOrWhitespace = function(str) {\n  'use strict';\n  // testing length == 0 first is actually slower in all browsers (about the\n  // same in Opera).\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return /^[\\s\\xa0]*$/.test(str);\n};\n\n\n/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.internal.trim =\n    (goog.TRUSTED_SITE && String.prototype.trim) ? function(str) {\n      'use strict';\n      return str.trim();\n    } : function(str) {\n      'use strict';\n      // Since IE doesn't include non-breaking-space (0xa0) in their \\s\n      // character class (as required by section 7.2 of the ECMAScript spec),\n      // we explicitly include it in the regexp to enforce consistent\n      // cross-browser behavior.\n      // NOTE: We don't use String#replace because it might have side effects\n      // causing this function to not compile to 0 bytes.\n      return /^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(str)[1];\n    };\n\n\n/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n * @see goog.string.caseInsensitiveCompare\n */\ngoog.string.internal.caseInsensitiveCompare = function(str1, str2) {\n  'use strict';\n  const test1 = String(str1).toLowerCase();\n  const test2 = String(str2).toLowerCase();\n\n  if (test1 < test2) {\n    return -1;\n  } else if (test1 == test2) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n\n/**\n * Converts \\n to <br>s or <br />s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n * @see goog.string.newLineToBr\n */\ngoog.string.internal.newLineToBr = function(str, opt_xml) {\n  'use strict';\n  return str.replace(/(\\r\\n|\\r|\\n)/g, opt_xml ? '<br />' : '<br>');\n};\n\n\n/**\n * Escapes double quote '\"' and single quote '\\'' characters in addition to\n * '&', '<', and '>' so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars\n * @return {string} An escaped copy of `str`.\n * @see goog.string.htmlEscape\n */\ngoog.string.internal.htmlEscape = function(\n    str, opt_isLikelyToContainHtmlChars) {\n  'use strict';\n  if (opt_isLikelyToContainHtmlChars) {\n    str = str.replace(goog.string.internal.AMP_RE_, '&amp;')\n              .replace(goog.string.internal.LT_RE_, '&lt;')\n              .replace(goog.string.internal.GT_RE_, '&gt;')\n              .replace(goog.string.internal.QUOT_RE_, '&quot;')\n              .replace(goog.string.internal.SINGLE_QUOTE_RE_, '&#39;')\n              .replace(goog.string.internal.NULL_RE_, '&#0;');\n    return str;\n\n  } else {\n    // quick test helps in the case when there are no chars to replace, in\n    // worst case this makes barely a difference to the time taken\n    if (!goog.string.internal.ALL_RE_.test(str)) return str;\n\n    // str.indexOf is faster than regex.test in this case\n    if (str.indexOf('&') != -1) {\n      str = str.replace(goog.string.internal.AMP_RE_, '&amp;');\n    }\n    if (str.indexOf('<') != -1) {\n      str = str.replace(goog.string.internal.LT_RE_, '&lt;');\n    }\n    if (str.indexOf('>') != -1) {\n      str = str.replace(goog.string.internal.GT_RE_, '&gt;');\n    }\n    if (str.indexOf('\"') != -1) {\n      str = str.replace(goog.string.internal.QUOT_RE_, '&quot;');\n    }\n    if (str.indexOf('\\'') != -1) {\n      str = str.replace(goog.string.internal.SINGLE_QUOTE_RE_, '&#39;');\n    }\n    if (str.indexOf('\\x00') != -1) {\n      str = str.replace(goog.string.internal.NULL_RE_, '&#0;');\n    }\n    return str;\n  }\n};\n\n\n/**\n * Regular expression that matches an ampersand, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.AMP_RE_ = /&/g;\n\n\n/**\n * Regular expression that matches a less than sign, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.LT_RE_ = /</g;\n\n\n/**\n * Regular expression that matches a greater than sign, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.GT_RE_ = />/g;\n\n\n/**\n * Regular expression that matches a double quote, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.QUOT_RE_ = /\"/g;\n\n\n/**\n * Regular expression that matches a single quote, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.SINGLE_QUOTE_RE_ = /'/g;\n\n\n/**\n * Regular expression that matches null character, for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.NULL_RE_ = /\\x00/g;\n\n\n/**\n * Regular expression that matches any character that needs to be escaped.\n * @const {!RegExp}\n * @private\n */\ngoog.string.internal.ALL_RE_ = /[\\x00&<>\"']/;\n\n\n/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n * @see goog.string.whitespaceEscape\n */\ngoog.string.internal.whitespaceEscape = function(str, opt_xml) {\n  'use strict';\n  // This doesn't use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.internal.newLineToBr(\n      str.replace(/  /g, ' &#160;'), opt_xml);\n};\n\n\n/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n * @see goog.string.contains\n */\ngoog.string.internal.contains = function(str, subString) {\n  'use strict';\n  return str.indexOf(subString) != -1;\n};\n\n\n/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n * @see goog.string.caseInsensitiveContains\n */\ngoog.string.internal.caseInsensitiveContains = function(str, subString) {\n  'use strict';\n  return goog.string.internal.contains(\n      str.toLowerCase(), subString.toLowerCase());\n};\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n * @see goog.string.compareVersions\n */\ngoog.string.internal.compareVersions = function(version1, version2) {\n  'use strict';\n  let order = 0;\n  // Trim leading and trailing whitespace and split the versions into\n  // subversions.\n  const v1Subs = goog.string.internal.trim(String(version1)).split('.');\n  const v2Subs = goog.string.internal.trim(String(version2)).split('.');\n  const subCount = Math.max(v1Subs.length, v2Subs.length);\n\n  // Iterate over the subversions, as long as they appear to be equivalent.\n  for (let subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {\n    let v1Sub = v1Subs[subIdx] || '';\n    let v2Sub = v2Subs[subIdx] || '';\n\n    do {\n      // Split the subversions into pairs of numbers and qualifiers (like 'b').\n      // Two different RegExp objects are use to make it clear the code\n      // is side-effect free\n      const v1Comp = /(\\d*)(\\D*)(.*)/.exec(v1Sub) || ['', '', '', ''];\n      const v2Comp = /(\\d*)(\\D*)(.*)/.exec(v2Sub) || ['', '', '', ''];\n      // Break if there are no more matches.\n      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {\n        break;\n      }\n\n      // Parse the numeric part of the subversion. A missing number is\n      // equivalent to 0.\n      const v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);\n      const v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);\n\n      // Compare the subversion components. The number has the highest\n      // precedence. Next, if the numbers are equal, a subversion without any\n      // qualifier is always higher than a subversion with any qualifier. Next,\n      // the qualifiers are compared as strings.\n      order = goog.string.internal.compareElements_(v1CompNum, v2CompNum) ||\n          goog.string.internal.compareElements_(\n              v1Comp[2].length == 0, v2Comp[2].length == 0) ||\n          goog.string.internal.compareElements_(v1Comp[2], v2Comp[2]);\n      // Stop as soon as an inequality is discovered.\n\n      v1Sub = v1Comp[3];\n      v2Sub = v2Comp[3];\n    } while (order == 0);\n  }\n\n  return order;\n};\n\n\n/**\n * Compares elements of a version number.\n *\n * @param {string|number|boolean} left An element from a version number.\n * @param {string|number|boolean} right An element from a version number.\n *\n * @return {number}  1 if `left` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `right` is higher.\n * @private\n */\ngoog.string.internal.compareElements_ = function(left, right) {\n  'use strict';\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  }\n  return 0;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The SafeUrl type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.provide('goog.html.SafeUrl');\n\ngoog.require('goog.asserts');\ngoog.require('goog.fs.url');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.i18n.bidi.Dir');\ngoog.require('goog.i18n.bidi.DirectionalString');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.TypedString');\ngoog.require('goog.string.internal');\n\n\n\n/**\n * A string that is safe to use in URL context in DOM APIs and HTML documents.\n *\n * A SafeUrl is a string-like object that carries the security type contract\n * that its value as a string will not cause untrusted script execution\n * when evaluated as a hyperlink URL in a browser.\n *\n * Values of this type are guaranteed to be safe to use in URL/hyperlink\n * contexts, such as assignment to URL-valued DOM properties, in the sense that\n * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,\n * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,\n * inside a href attribute). However, appropriate HTML-escaping must still be\n * applied.\n *\n * Note that, as documented in `goog.html.SafeUrl.unwrap`, this type's\n * contract does not guarantee that instances are safe to interpolate into HTML\n * without appropriate escaping.\n *\n * Note also that this type's contract does not imply any guarantees regarding\n * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>\n * safe to use in a context where the referred-to resource is interpreted as\n * trusted code, e.g., as the src of a script tag.\n *\n * Instances of this type must be created via the factory methods\n * (`goog.html.SafeUrl.fromConstant`, `goog.html.SafeUrl.sanitize`),\n * etc and not by invoking its constructor. The constructor intentionally takes\n * an extra parameter that cannot be constructed outside of this file and the\n * type is immutable; hence only a default instance corresponding to the empty\n * string can be obtained via constructor invocation.\n *\n * @see goog.html.SafeUrl#fromConstant\n * @see goog.html.SafeUrl#from\n * @see goog.html.SafeUrl#sanitize\n * @final\n * @struct\n * @implements {goog.i18n.bidi.DirectionalString}\n * @implements {goog.string.TypedString}\n */\ngoog.html.SafeUrl = class {\n  /**\n   * @param {string} value\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, token) {\n    /**\n     * The contained value of this SafeUrl.  The field has a purposely ugly\n     * name to make (non-compiled) code that attempts to directly access this\n     * field stand out.\n     * @private {string}\n     */\n    this.privateDoNotAccessOrElseSafeUrlWrappedValue_ =\n        (token === goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_) ? value : '';\n  };\n};\n\n\n/**\n * The innocuous string generated by goog.html.SafeUrl.sanitize when passed\n * an unsafe URL.\n *\n * about:invalid is registered in\n * http://www.w3.org/TR/css3-values/#about-invalid.\n * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to\n * contain a fragment, which is not to be considered when determining if an\n * about URL is well-known.\n *\n * Using about:invalid seems preferable to using a fixed data URL, since\n * browsers might choose to not report CSP violations on it, as legitimate\n * CSS function calls to attr() can result in this URL being produced. It is\n * also a standard URL which matches exactly the semantics we need:\n * \"The about:invalid URI references a non-existent document with a generic\n * error condition. It can be used when a URI is necessary, but the default\n * value shouldn't be resolveable as any type of document\".\n *\n * @const {string}\n */\ngoog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';\n\n\n/**\n * @override\n * @const\n */\ngoog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;\n\n\n/**\n * Returns this SafeUrl's value as a string.\n *\n * IMPORTANT: In code where it is security relevant that an object's type is\n * indeed `SafeUrl`, use `goog.html.SafeUrl.unwrap` instead of this\n * method. If in doubt, assume that it's security relevant. In particular, note\n * that goog.html functions which return a goog.html type do not guarantee that\n * the returned instance is of the right type.\n *\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\n * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST\n * be appropriately escaped before embedding in a HTML document. Note that the\n * required escaping is context-sensitive (e.g. a different escaping is\n * required for embedding a URL in a style property within a style\n * attribute, as opposed to embedding in a href attribute).\n *\n * @see goog.html.SafeUrl#unwrap\n * @override\n */\ngoog.html.SafeUrl.prototype.getTypedStringValue = function() {\n  'use strict';\n  return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();\n};\n\n\n/**\n * @override\n * @const {boolean}\n */\ngoog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;\n\n\n/**\n * Returns this URLs directionality, which is always `LTR`.\n * @override\n * @return {!goog.i18n.bidi.Dir}\n */\ngoog.html.SafeUrl.prototype.getDirection = function() {\n  'use strict';\n  return goog.i18n.bidi.Dir.LTR;\n};\n\n\n/**\n * Returns a string-representation of this value.\n *\n * To obtain the actual string value wrapped in a SafeUrl, use\n * `goog.html.SafeUrl.unwrap`.\n *\n * @return {string}\n * @see goog.html.SafeUrl#unwrap\n * @override\n */\ngoog.html.SafeUrl.prototype.toString = function() {\n  'use strict';\n  return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();\n};\n\n\n\n/**\n * Performs a runtime check that the provided object is indeed a SafeUrl\n * object, and returns its value.\n *\n * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\n * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST\n * be appropriately escaped before embedding in a HTML document. Note that the\n * required escaping is context-sensitive (e.g. a different escaping is\n * required for embedding a URL in a style property within a style\n * attribute, as opposed to embedding in a href attribute).\n *\n * @param {!goog.html.SafeUrl} safeUrl The object to extract from.\n * @return {string} The SafeUrl object's contained string, unless the run-time\n *     type check fails. In that case, `unwrap` returns an innocuous\n *     string, or, if assertions are enabled, throws\n *     `goog.asserts.AssertionError`.\n */\ngoog.html.SafeUrl.unwrap = function(safeUrl) {\n  'use strict';\n  // Perform additional Run-time type-checking to ensure that safeUrl is indeed\n  // an instance of the expected type.  This provides some additional protection\n  // against security bugs due to application code that disables type checks.\n  // Specifically, the following checks are performed:\n  // 1. The object is an instance of the expected type.\n  // 2. The object is not an instance of a subclass.\n  if (safeUrl instanceof goog.html.SafeUrl &&\n      safeUrl.constructor === goog.html.SafeUrl) {\n    return safeUrl.privateDoNotAccessOrElseSafeUrlWrappedValue_;\n  } else {\n    goog.asserts.fail('expected object of type SafeUrl, got \\'' +\n        safeUrl + '\\' of type ' + goog.typeOf(safeUrl));\n    return 'type_error:SafeUrl';\n  }\n};\n\n\n/**\n * Creates a SafeUrl object from a compile-time constant string.\n *\n * Compile-time constant strings are inherently program-controlled and hence\n * trusted.\n *\n * @param {!goog.string.Const} url A compile-time-constant string from which to\n *         create a SafeUrl.\n * @return {!goog.html.SafeUrl} A SafeUrl object initialized to `url`.\n */\ngoog.html.SafeUrl.fromConstant = function(url) {\n  'use strict';\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      goog.string.Const.unwrap(url));\n};\n\n\n/**\n * A pattern that matches Blob or data types that can have SafeUrls created\n * from URL.createObjectURL(blob) or via a data: URI.\n *\n * This has some parameter support (most notably, we haven't implemented the\n * more complex parts like %-encoded characters or non-alphanumerical ones for\n * simplicity's sake). The specs are fairly complex, and they don't\n * always match Chrome's behavior: we settled on a subset where we're confident\n * all parties involved agree.\n *\n * The spec is available at https://mimesniff.spec.whatwg.org/ (and see\n * https://tools.ietf.org/html/rfc2397 for data: urls, which override some of\n * it).\n * @const\n * @private\n */\ngoog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp(\n    // Note: Due to content-sniffing concerns, only add MIME types for\n    // media formats.\n    '^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|' +\n        'font/\\\\w+|' +\n        'image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|' +\n        'video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))' +\n        '(?:;\\\\w+=(?:\\\\w+|\"[\\\\w;,= ]+\"))*$',  // MIME type parameters\n    'i');\n\n\n/**\n * @param {string} mimeType The MIME type to check if safe.\n * @return {boolean} True if the MIME type is safe and creating a Blob via\n *   `SafeUrl.fromBlob()` with that type will not fail due to the type. False\n *   otherwise.\n */\ngoog.html.SafeUrl.isSafeMimeType = function(mimeType) {\n  'use strict';\n  return goog.html.SAFE_MIME_TYPE_PATTERN_.test(mimeType);\n};\n\n\n/**\n * Creates a SafeUrl wrapping a blob URL for the given `blob`.\n *\n * The blob URL is created with `URL.createObjectURL`. If the MIME type\n * for `blob` is not of a known safe audio, image or video MIME type,\n * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.\n *\n * Note: Call {@link revokeObjectUrl} on the URL after it's used\n * to prevent memory leaks.\n *\n * @see http://www.w3.org/TR/FileAPI/#url\n * @param {!Blob} blob\n * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped\n *   as a SafeUrl.\n */\ngoog.html.SafeUrl.fromBlob = function(blob) {\n  'use strict';\n  var url = goog.html.SafeUrl.isSafeMimeType(blob.type) ?\n      goog.fs.url.createObjectUrl(blob) :\n      goog.html.SafeUrl.INNOCUOUS_STRING;\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Revokes an object URL created for a safe URL created {@link fromBlob()}.\n * @param {!goog.html.SafeUrl} safeUrl SafeUrl wrapping a blob object.\n * @return {void}\n */\ngoog.html.SafeUrl.revokeObjectUrl = function(safeUrl) {\n  'use strict';\n  var url = safeUrl.getTypedStringValue();\n  if (url !== goog.html.SafeUrl.INNOCUOUS_STRING) {\n    goog.fs.url.revokeObjectUrl(url);\n  }\n};\n\n\n/**\n * Creates a SafeUrl wrapping a blob URL created for a MediaSource.\n * @param {!MediaSource} mediaSource\n * @return {!goog.html.SafeUrl} The blob URL.\n */\ngoog.html.SafeUrl.fromMediaSource = function(mediaSource) {\n  'use strict';\n  goog.asserts.assert(\n      'MediaSource' in goog.global, 'No support for MediaSource');\n  const url = mediaSource instanceof MediaSource ?\n      goog.fs.url.createObjectUrl(mediaSource) :\n      goog.html.SafeUrl.INNOCUOUS_STRING;\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Matches a base-64 data URL, with the first match group being the MIME type.\n * @const\n * @private\n */\ngoog.html.DATA_URL_PATTERN_ = /^data:(.*);base64,[a-z0-9+\\/]+=*$/i;\n\n\n/**\n * Attempts to create a SafeUrl wrapping a `data:` URL, after validating it\n * matches a known-safe media MIME type. If it doesn't match, return `null`.\n *\n * @param {string} dataUrl A valid base64 data URL with one of the whitelisted\n *     media MIME types.\n * @return {?goog.html.SafeUrl} A matching safe URL, or `null` if it does not\n *     pass.\n */\ngoog.html.SafeUrl.tryFromDataUrl = function(dataUrl) {\n  'use strict';\n  // For defensive purposes, in case users cast around the parameter type.\n  dataUrl = String(dataUrl);\n  // RFC4648 suggest to ignore CRLF in base64 encoding.\n  // See https://tools.ietf.org/html/rfc4648.\n  // Remove the CR (%0D) and LF (%0A) from the dataUrl.\n  var filteredDataUrl = dataUrl.replace(/(%0A|%0D)/g, '');\n  var match = filteredDataUrl.match(goog.html.DATA_URL_PATTERN_);\n  // Note: The only risk of XSS here is if the `data:` URL results in a\n  // same-origin document. In which case content-sniffing might cause the\n  // browser to interpret the contents as html.\n  // All modern browsers consider `data:` URL documents to have unique empty\n  // origins. Only Firefox for versions prior to v57 behaves differently:\n  // https://blog.mozilla.org/security/2017/10/04/treating-data-urls-unique-origins-firefox-57/\n  // Older versions of IE don't understand `data:` urls, so it is not an issue.\n  var valid = match && goog.html.SafeUrl.isSafeMimeType(match[1]);\n  if (valid) {\n    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n        filteredDataUrl);\n  }\n  return null;\n};\n\n\n/**\n * Creates a SafeUrl wrapping a `data:` URL, after validating it matches a\n * known-safe media MIME type. If it doesn't match, return\n * `goog.html.SafeUrl.INNOCUOUS_URL`.\n *\n * @param {string} dataUrl A valid base64 data URL with one of the whitelisted\n *     media MIME types.\n * @return {!goog.html.SafeUrl} A matching safe URL, or\n *     `goog.html.SafeUrl.INNOCUOUS_URL` if it does not pass.\n */\ngoog.html.SafeUrl.fromDataUrl = function(dataUrl) {\n  'use strict';\n  return goog.html.SafeUrl.tryFromDataUrl(dataUrl) ||\n      goog.html.SafeUrl.INNOCUOUS_URL;\n};\n\n\n/**\n * Creates a SafeUrl wrapping a tel: URL.\n *\n * @param {string} telUrl A tel URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromTelUrl = function(telUrl) {\n  'use strict';\n  // There's a risk that a tel: URL could immediately place a call once\n  // clicked, without requiring user confirmation. For that reason it is\n  // handled in this separate function.\n  if (!goog.string.internal.caseInsensitiveStartsWith(telUrl, 'tel:')) {\n    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      telUrl);\n};\n\n\n/**\n * Matches a sip/sips URL. We only allow urls that consist of an email address.\n * The characters '?' and '#' are not allowed in the local part of the email\n * address.\n * @const\n * @private\n */\ngoog.html.SIP_URL_PATTERN_ = new RegExp(\n    '^sip[s]?:[+a-z0-9_.!$%&\\'*\\\\/=^`{|}~-]+@([a-z0-9-]+\\\\.)+[a-z0-9]{2,63}$',\n    'i');\n\n\n/**\n * Creates a SafeUrl wrapping a sip: URL. We only allow urls that consist of an\n * email address. The characters '?' and '#' are not allowed in the local part\n * of the email address.\n *\n * @param {string} sipUrl A sip URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromSipUrl = function(sipUrl) {\n  'use strict';\n  if (!goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(sipUrl))) {\n    sipUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      sipUrl);\n};\n\n\n/**\n * Creates a SafeUrl wrapping a fb-messenger://share URL.\n *\n * @param {string} facebookMessengerUrl A facebook messenger URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromFacebookMessengerUrl = function(facebookMessengerUrl) {\n  'use strict';\n  if (!goog.string.internal.caseInsensitiveStartsWith(\n          facebookMessengerUrl, 'fb-messenger://share')) {\n    facebookMessengerUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      facebookMessengerUrl);\n};\n\n/**\n * Creates a SafeUrl wrapping a whatsapp://send URL.\n *\n * @param {string} whatsAppUrl A WhatsApp URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromWhatsAppUrl = function(whatsAppUrl) {\n  'use strict';\n  if (!goog.string.internal.caseInsensitiveStartsWith(\n          whatsAppUrl, 'whatsapp://send')) {\n    whatsAppUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      whatsAppUrl);\n};\n\n/**\n * Creates a SafeUrl wrapping a sms: URL.\n *\n * @param {string} smsUrl A sms URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromSmsUrl = function(smsUrl) {\n  'use strict';\n  if (!goog.string.internal.caseInsensitiveStartsWith(smsUrl, 'sms:') ||\n      !goog.html.SafeUrl.isSmsUrlBodyValid_(smsUrl)) {\n    smsUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      smsUrl);\n};\n\n\n/**\n * Validates SMS URL `body` parameter, which is optional and should appear at\n * most once and should be percent-encoded if present. Rejects many malformed\n * bodies, but may spuriously reject some URLs and does not reject all malformed\n * sms: URLs.\n *\n * @param {string} smsUrl A sms URL.\n * @return {boolean} Whether SMS URL has a valid `body` parameter if it exists.\n * @private\n */\ngoog.html.SafeUrl.isSmsUrlBodyValid_ = function(smsUrl) {\n  'use strict';\n  var hash = smsUrl.indexOf('#');\n  if (hash > 0) {\n    smsUrl = smsUrl.substring(0, hash);\n  }\n  var bodyParams = smsUrl.match(/[?&]body=/gi);\n  // \"body\" param is optional\n  if (!bodyParams) {\n    return true;\n  }\n  // \"body\" MUST only appear once\n  if (bodyParams.length > 1) {\n    return false;\n  }\n  // Get the encoded `body` parameter value.\n  var bodyValue = smsUrl.match(/[?&]body=([^&]*)/)[1];\n  if (!bodyValue) {\n    return true;\n  }\n  try {\n    decodeURIComponent(bodyValue);\n  } catch (error) {\n    return false;\n  }\n  return /^(?:[a-z0-9\\-_.~]|%[0-9a-f]{2})+$/i.test(bodyValue);\n};\n\n\n/**\n * Creates a SafeUrl wrapping a ssh: URL.\n *\n * @param {string} sshUrl A ssh URL.\n * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}\n *     wrapped as a SafeUrl if it does not pass.\n */\ngoog.html.SafeUrl.fromSshUrl = function(sshUrl) {\n  'use strict';\n  if (!goog.string.internal.caseInsensitiveStartsWith(sshUrl, 'ssh://')) {\n    sshUrl = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      sshUrl);\n};\n\n/**\n * Sanitizes a Chrome extension URL to SafeUrl, given a compile-time-constant\n * extension identifier. Can also be restricted to chrome extensions.\n *\n * @param {string} url The url to sanitize. Should start with the extension\n *     scheme and the extension identifier.\n * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The\n *     extension id to accept, as a compile-time constant or an array of those.\n *\n * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or\n *     `INNOCUOUS_STRING` if it's not.\n */\ngoog.html.SafeUrl.sanitizeChromeExtensionUrl = function(url, extensionId) {\n  'use strict';\n  return goog.html.SafeUrl.sanitizeExtensionUrl_(\n      /^chrome-extension:\\/\\/([^\\/]+)\\//, url, extensionId);\n};\n\n/**\n * Sanitizes a Firefox extension URL to SafeUrl, given a compile-time-constant\n * extension identifier. Can also be restricted to chrome extensions.\n *\n * @param {string} url The url to sanitize. Should start with the extension\n *     scheme and the extension identifier.\n * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The\n *     extension id to accept, as a compile-time constant or an array of those.\n *\n * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or\n *     `INNOCUOUS_STRING` if it's not.\n */\ngoog.html.SafeUrl.sanitizeFirefoxExtensionUrl = function(url, extensionId) {\n  'use strict';\n  return goog.html.SafeUrl.sanitizeExtensionUrl_(\n      /^moz-extension:\\/\\/([^\\/]+)\\//, url, extensionId);\n};\n\n/**\n * Sanitizes a Edge extension URL to SafeUrl, given a compile-time-constant\n * extension identifier. Can also be restricted to chrome extensions.\n *\n * @param {string} url The url to sanitize. Should start with the extension\n *     scheme and the extension identifier.\n * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The\n *     extension id to accept, as a compile-time constant or an array of those.\n *\n * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or\n *     `INNOCUOUS_STRING` if it's not.\n */\ngoog.html.SafeUrl.sanitizeEdgeExtensionUrl = function(url, extensionId) {\n  'use strict';\n  return goog.html.SafeUrl.sanitizeExtensionUrl_(\n      /^ms-browser-extension:\\/\\/([^\\/]+)\\//, url, extensionId);\n};\n\n/**\n * Private helper for converting extension URLs to SafeUrl, given the scheme for\n * that particular extension type. Use the sanitizeFirefoxExtensionUrl,\n * sanitizeChromeExtensionUrl or sanitizeEdgeExtensionUrl unless you're building\n * new helpers.\n *\n * @private\n * @param {!RegExp} scheme The scheme to accept as a RegExp extracting the\n *     extension identifier.\n * @param {string} url The url to sanitize. Should start with the extension\n *     scheme and the extension identifier.\n * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The\n *     extension id to accept, as a compile-time constant or an array of those.\n *\n * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or\n *     `INNOCUOUS_STRING` if it's not.\n */\ngoog.html.SafeUrl.sanitizeExtensionUrl_ = function(scheme, url, extensionId) {\n  'use strict';\n  var matches = scheme.exec(url);\n  if (!matches) {\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\n  } else {\n    var extractedExtensionId = matches[1];\n    var acceptedExtensionIds;\n    if (extensionId instanceof goog.string.Const) {\n      acceptedExtensionIds = [goog.string.Const.unwrap(extensionId)];\n    } else {\n      acceptedExtensionIds = extensionId.map(function unwrap(x) {\n        'use strict';\n        return goog.string.Const.unwrap(x);\n      });\n    }\n    if (acceptedExtensionIds.indexOf(extractedExtensionId) == -1) {\n      url = goog.html.SafeUrl.INNOCUOUS_STRING;\n    }\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Creates a SafeUrl from TrustedResourceUrl. This is safe because\n * TrustedResourceUrl is more tightly restricted than SafeUrl.\n *\n * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl\n * @return {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.fromTrustedResourceUrl = function(trustedResourceUrl) {\n  'use strict';\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n      goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));\n};\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that satisfy\n * the SafeUrl contract.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * @private\n * @const {!RegExp}\n */\ngoog.html.SAFE_URL_PATTERN_ =\n    /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;\n\n/**\n * Public version of goog.html.SAFE_URL_PATTERN_. Updating\n * goog.html.SAFE_URL_PATTERN_ doesn't seem to be backward compatible.\n * Namespace is also changed to goog.html.SafeUrl so it can be imported using\n * goog.require('goog.dom.SafeUrl').\n *\n * TODO(bangert): Remove SAFE_URL_PATTERN_\n * @const {!RegExp}\n */\ngoog.html.SafeUrl.SAFE_URL_PATTERN = goog.html.SAFE_URL_PATTERN_;\n\n/**\n * Attempts to create a SafeUrl object from `url`. The input string is validated\n * to match a pattern of commonly used safe URLs. If validation fails, `null` is\n * returned.\n *\n * `url` may be a URL with the `http:`, `https:`, `mailto:`, `ftp:` or `data`\n * scheme, or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @return {?goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl, or null\n *     if validation fails.\n */\ngoog.html.SafeUrl.trySanitize = function(url) {\n  'use strict';\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  }\n  if (typeof url == 'object' && url.implementsGoogStringTypedString) {\n    url = /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();\n  } else {\n    // For defensive purposes, in case users cast around the parameter type.\n    url = String(url);\n  }\n  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {\n    return goog.html.SafeUrl.tryFromDataUrl(url);\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n/**\n * Creates a SafeUrl object from `url`. If `url` is a\n * `goog.html.SafeUrl` then it is simply returned. Otherwise the input string is\n * validated to match a pattern of commonly used safe URLs. If validation fails,\n * `goog.html.SafeUrl.INNOCUOUS_URL` is returned.\n *\n * `url` may be a URL with the `http:`, `https:`, `mailto:`, `ftp:` or `data`\n * scheme, or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\n */\ngoog.html.SafeUrl.sanitize = function(url) {\n  'use strict';\n  return goog.html.SafeUrl.trySanitize(url) || goog.html.SafeUrl.INNOCUOUS_URL;\n};\n\n/**\n * Creates a SafeUrl object from `url`. If `url` is a\n * `goog.html.SafeUrl` then it is simply returned. Otherwise the input string is\n * validated to match a pattern of commonly used safe URLs.\n *\n * `url` may be a URL with the http, https, mailto or ftp scheme,\n * or a relative URL (i.e., a URL without a scheme; specifically, a\n * scheme-relative, absolute-path-relative, or path-relative URL).\n *\n * This function asserts (using goog.asserts) that the URL matches this pattern.\n * If it does not, in addition to failing the assert, an innocuous URL will be\n * returned.\n *\n * @see http://url.spec.whatwg.org/#concept-relative-url\n * @param {string|!goog.string.TypedString} url The URL to validate.\n * @param {boolean=} opt_allowDataUrl Whether to allow valid data: URLs.\n * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.\n */\ngoog.html.SafeUrl.sanitizeAssertUnchanged = function(url, opt_allowDataUrl) {\n  'use strict';\n  if (url instanceof goog.html.SafeUrl) {\n    return url;\n  } else if (typeof url == 'object' && url.implementsGoogStringTypedString) {\n    url = /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();\n  } else {\n    url = String(url);\n  }\n  if (opt_allowDataUrl && /^data:/i.test(url)) {\n    var safeUrl = goog.html.SafeUrl.fromDataUrl(url);\n    if (safeUrl.getTypedStringValue() == url) {\n      return safeUrl;\n    }\n  }\n  if (!goog.asserts.assert(\n          goog.html.SAFE_URL_PATTERN_.test(url),\n          '%s does not match the safe URL pattern', url)) {\n    url = goog.html.SafeUrl.INNOCUOUS_STRING;\n  }\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @private {!Object}\n * @const\n */\ngoog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};\n\n/**\n * Package-internal utility method to create SafeUrl instances.\n *\n * @param {string} url The string to initialize the SafeUrl object with.\n * @return {!goog.html.SafeUrl} The initialized SafeUrl object.\n * @package\n */\ngoog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(\n    url) {\n  'use strict';\n  return new goog.html.SafeUrl(\n      url, goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_);\n};\n\n\n/**\n * `INNOCUOUS_STRING` wrapped in a `SafeUrl`.\n * @const {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.INNOCUOUS_URL =\n    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n        goog.html.SafeUrl.INNOCUOUS_STRING);\n\n\n/**\n * A SafeUrl corresponding to the special about:blank url.\n * @const {!goog.html.SafeUrl}\n */\ngoog.html.SafeUrl.ABOUT_BLANK =\n    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(\n        'about:blank');\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The SafeStyle type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.module('goog.html.SafeStyle');\ngoog.module.declareLegacyNamespace();\n\nconst Const = goog.require('goog.string.Const');\nconst SafeUrl = goog.require('goog.html.SafeUrl');\nconst TypedString = goog.require('goog.string.TypedString');\nconst {AssertionError, assert, fail} = goog.require('goog.asserts');\nconst {contains, endsWith} = goog.require('goog.string.internal');\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @type {!Object}\n * @const\n */\nconst CONSTRUCTOR_TOKEN_PRIVATE = {};\n\n/**\n * A string-like object which represents a sequence of CSS declarations\n * (`propertyName1: propertyvalue1; propertyName2: propertyValue2; ...`)\n * and that carries the security type contract that its value, as a string,\n * will not cause untrusted script execution (XSS) when evaluated as CSS in a\n * browser.\n *\n * Instances of this type must be created via the factory methods\n * (`SafeStyle.create` or `SafeStyle.fromConstant`)\n * and not by invoking its constructor. The constructor intentionally takes an\n * extra parameter that cannot be constructed outside of this file and the type\n * is immutable; hence only a default instance corresponding to the empty string\n * can be obtained via constructor invocation.\n *\n * SafeStyle's string representation can safely be:\n * <ul>\n *   <li>Interpolated as the content of a *quoted* HTML style attribute.\n *       However, the SafeStyle string *must be HTML-attribute-escaped* before\n *       interpolation.\n *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.\n *       '<' characters in the SafeStyle string *must be CSS-escaped* before\n *       interpolation. The SafeStyle string is also guaranteed not to be able\n *       to introduce new properties or elide existing ones.\n *   <li>Interpolated as the content of a {}-wrapped block within an HTML\n *       &lt;style&gt; element. '<' characters in the SafeStyle string\n *       *must be CSS-escaped* before interpolation.\n *   <li>Assigned to the style property of a DOM node. The SafeStyle string\n *       should not be escaped before being assigned to the property.\n * </ul>\n *\n * A SafeStyle may never contain literal angle brackets. Otherwise, it could\n * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't\n * be HTML escaped). For example, if the SafeStyle containing\n * `font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'` were\n * interpolated within a &lt;style&gt; tag, this would then break out of the\n * style context into HTML.\n *\n * A SafeStyle may contain literal single or double quotes, and as such the\n * entire style string must be escaped when used in a style attribute (if\n * this were not the case, the string could contain a matching quote that\n * would escape from the style attribute).\n *\n * Values of this type must be composable, i.e. for any two values\n * `style1` and `style2` of this type,\n * `SafeStyle.unwrap(style1) +\n * SafeStyle.unwrap(style2)` must itself be a value that satisfies\n * the SafeStyle type constraint. This requirement implies that for any value\n * `style` of this type, `SafeStyle.unwrap(style)` must\n * not end in a \"property value\" or \"property name\" context. For example,\n * a value of `background:url(\"` or `font-` would not satisfy the\n * SafeStyle contract. This is because concatenating such strings with a\n * second value that itself does not contain unsafe CSS can result in an\n * overall string that does. For example, if `javascript:evil())\"` is\n * appended to `background:url(\"}, the resulting string may result in\n * the execution of a malicious script.\n *\n * TODO(mlourenco): Consider whether we should implement UTF-8 interchange\n * validity checks and blacklisting of newlines (including Unicode ones) and\n * other whitespace characters (\\t, \\f). Document here if so and also update\n * SafeStyle.fromConstant().\n *\n * The following example values comply with this type's contract:\n * <ul>\n *   <li><pre>width: 1em;</pre>\n *   <li><pre>height:1em;</pre>\n *   <li><pre>width: 1em;height: 1em;</pre>\n *   <li><pre>background:url('http://url');</pre>\n * </ul>\n * In addition, the empty string is safe for use in a CSS attribute.\n *\n * The following example values do NOT comply with this type's contract:\n * <ul>\n *   <li><pre>background: red</pre> (missing a trailing semi-colon)\n *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)\n *   <li><pre>1em</pre> (missing an attribute name, which provides context for\n *       the value)\n * </ul>\n *\n * @see SafeStyle#create\n * @see SafeStyle#fromConstant\n * @see http://www.w3.org/TR/css3-syntax/\n * @final\n * @struct\n * @implements {TypedString}\n */\nclass SafeStyle {\n  /**\n   * @param {string} value\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, token) {\n    /**\n     * The contained value of this SafeStyle.  The field has a purposely\n     * ugly name to make (non-compiled) code that attempts to directly access\n     * this field stand out.\n     * @private {string}\n     */\n    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ =\n        (token === CONSTRUCTOR_TOKEN_PRIVATE) ? value : '';\n\n    /**\n     * @override\n     * @const {boolean}\n     */\n    this.implementsGoogStringTypedString = true;\n  }\n\n\n  /**\n   * Creates a SafeStyle object from a compile-time constant string.\n   *\n   * `style` should be in the format\n   * `name: value; [name: value; ...]` and must not have any < or >\n   * characters in it. This is so that SafeStyle's contract is preserved,\n   * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n   * declarations and without affecting the syntactic structure of any\n   * surrounding CSS and HTML.\n   *\n   * This method performs basic sanity checks on the format of `style`\n   * but does not constrain the format of `name` and `value`, except\n   * for disallowing tag characters.\n   *\n   * @param {!Const} style A compile-time-constant string from which\n   *     to create a SafeStyle.\n   * @return {!SafeStyle} A SafeStyle object initialized to\n   *     `style`.\n   */\n  static fromConstant(style) {\n    'use strict';\n    const styleString = Const.unwrap(style);\n    if (styleString.length === 0) {\n      return SafeStyle.EMPTY;\n    }\n    assert(\n        endsWith(styleString, ';'),\n        `Last character of style string is not ';': ${styleString}`);\n    assert(\n        contains(styleString, ':'),\n        'Style string must contain at least one \\':\\', to ' +\n            'specify a \"name: value\" pair: ' + styleString);\n    return SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n        styleString);\n  };\n\n\n  /**\n   * Returns this SafeStyle's value as a string.\n   *\n   * IMPORTANT: In code where it is security relevant that an object's type is\n   * indeed `SafeStyle`, use `SafeStyle.unwrap` instead of\n   * this method. If in doubt, assume that it's security relevant. In\n   * particular, note that goog.html functions which return a goog.html type do\n   * not guarantee the returned instance is of the right type. For example:\n   *\n   * <pre>\n   * var fakeSafeHtml = new String('fake');\n   * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n   * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n   * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n   * // instanceof goog.html.SafeHtml.\n   * </pre>\n   *\n   * @return {string}\n   * @see SafeStyle#unwrap\n   * @override\n   */\n  getTypedStringValue() {\n    'use strict';\n    return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n  }\n\n\n  /**\n   * Returns a string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeStyle, use\n   * `SafeStyle.unwrap`.\n   *\n   * @return {string}\n   * @see SafeStyle#unwrap\n   * @override\n   */\n  toString() {\n    'use strict';\n    return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString();\n  }\n\n\n  /**\n   * Performs a runtime check that the provided object is indeed a\n   * SafeStyle object, and returns its value.\n   *\n   * @param {!SafeStyle} safeStyle The object to extract from.\n   * @return {string} The safeStyle object's contained string, unless\n   *     the run-time type check fails. In that case, `unwrap` returns an\n   *     innocuous string, or, if assertions are enabled, throws\n   *     `AssertionError`.\n   */\n  static unwrap(safeStyle) {\n    'use strict';\n    // Perform additional Run-time type-checking to ensure that\n    // safeStyle is indeed an instance of the expected type.  This\n    // provides some additional protection against security bugs due to\n    // application code that disables type checks.\n    // Specifically, the following checks are performed:\n    // 1. The object is an instance of the expected type.\n    // 2. The object is not an instance of a subclass.\n    if (safeStyle instanceof SafeStyle && safeStyle.constructor === SafeStyle) {\n      return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;\n    } else {\n      fail(\n          `expected object of type SafeStyle, got '${safeStyle}` +\n          '\\' of type ' + goog.typeOf(safeStyle));\n      return 'type_error:SafeStyle';\n    }\n  }\n\n\n  /**\n   * Package-internal utility method to create SafeStyle instances.\n   *\n   * @param {string} style The string to initialize the SafeStyle object with.\n   * @return {!SafeStyle} The initialized SafeStyle object.\n   * @package\n   */\n  static createSafeStyleSecurityPrivateDoNotAccessOrElse(style) {\n    'use strict';\n    return new SafeStyle(style, CONSTRUCTOR_TOKEN_PRIVATE);\n  }\n\n  /**\n   * Creates a new SafeStyle object from the properties specified in the map.\n   * @param {!SafeStyle.PropertyMap} map Mapping of property names to\n   *     their values, for example {'margin': '1px'}. Names must consist of\n   *     [-_a-zA-Z0-9]. Values might be strings consisting of\n   *     [-,.'\"%_!# a-zA-Z0-9[\\]], where \", ', and [] must be properly balanced.\n   *     We also allow simple functions like rgb() and url() which sanitizes its\n   *     contents. Other values must be wrapped in Const. URLs might\n   *     be passed as SafeUrl which will be wrapped into url(\"\"). We\n   *     also support array whose elements are joined with ' '. Null value\n   * causes skipping the property.\n   * @return {!SafeStyle}\n   * @throws {!Error} If invalid name is provided.\n   * @throws {!AssertionError} If invalid value is provided. With\n   *     disabled assertions, invalid value is replaced by\n   *     SafeStyle.INNOCUOUS_STRING.\n   */\n  static create(map) {\n    'use strict';\n    let style = '';\n    for (let name in map) {\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\n      if (Object.prototype.hasOwnProperty.call(map, name)) {\n        if (!/^[-_a-zA-Z0-9]+$/.test(name)) {\n          throw new Error(`Name allows only [-_a-zA-Z0-9], got: ${name}`);\n        }\n        let value = map[name];\n        if (value == null) {\n          continue;\n        }\n        if (Array.isArray(value)) {\n          value = value.map(sanitizePropertyValue).join(' ');\n        } else {\n          value = sanitizePropertyValue(value);\n        }\n        style += `${name}:${value};`;\n      }\n    }\n    if (!style) {\n      return SafeStyle.EMPTY;\n    }\n    return SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);\n  };\n\n  /**\n   * Creates a new SafeStyle object by concatenating the values.\n   * @param {...(!SafeStyle|!Array<!SafeStyle>)} var_args\n   *     SafeStyles to concatenate.\n   * @return {!SafeStyle}\n   */\n  static concat(var_args) {\n    'use strict';\n    let style = '';\n\n    /**\n     * @param {!SafeStyle|!Array<!SafeStyle>} argument\n     */\n    const addArgument = argument => {\n      'use strict';\n      if (Array.isArray(argument)) {\n        argument.forEach(addArgument);\n      } else {\n        style += SafeStyle.unwrap(argument);\n      }\n    };\n\n    Array.prototype.forEach.call(arguments, addArgument);\n    if (!style) {\n      return SafeStyle.EMPTY;\n    }\n    return SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);\n  };\n}\n\n/**\n * A SafeStyle instance corresponding to the empty string.\n * @const {!SafeStyle}\n */\nSafeStyle.EMPTY = SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');\n\n\n/**\n * The innocuous string generated by SafeStyle.create when passed\n * an unsafe value.\n * @const {string}\n */\nSafeStyle.INNOCUOUS_STRING = 'zClosurez';\n\n\n/**\n * A single property value.\n * @typedef {string|!Const|!SafeUrl}\n */\nSafeStyle.PropertyValue;\n\n\n/**\n * Mapping of property names to their values.\n * We don't support numbers even though some values might be numbers (e.g.\n * line-height or 0 for any length). The reason is that most numeric values need\n * units (e.g. '1px') and allowing numbers could cause users forgetting about\n * them.\n * @typedef {!Object<string, ?SafeStyle.PropertyValue|\n *     ?Array<!SafeStyle.PropertyValue>>}\n */\nSafeStyle.PropertyMap;\n\n\n\n/**\n * Checks and converts value to string.\n * @param {!SafeStyle.PropertyValue} value\n * @return {string}\n */\nfunction sanitizePropertyValue(value) {\n  'use strict';\n  if (value instanceof SafeUrl) {\n    const url = SafeUrl.unwrap(value);\n    return 'url(\"' + url.replace(/</g, '%3c').replace(/[\\\\\"]/g, '\\\\$&') + '\")';\n  }\n  const result = value instanceof Const ?\n      Const.unwrap(value) :\n      sanitizePropertyValueString(String(value));\n  // These characters can be used to change context and we don't want that even\n  // with const values.\n  if (/[{;}]/.test(result)) {\n    throw new AssertionError('Value does not allow [{;}], got: %s.', [result]);\n  }\n  return result;\n}\n\n\n/**\n * Checks string value.\n * @param {string} value\n * @return {string}\n */\nfunction sanitizePropertyValueString(value) {\n  'use strict';\n  // Some CSS property values permit nested functions. We allow one level of\n  // nesting, and all nested functions must also be in the FUNCTIONS_RE_ list.\n  const valueWithoutFunctions = value.replace(FUNCTIONS_RE, '$1')\n                                    .replace(FUNCTIONS_RE, '$1')\n                                    .replace(URL_RE, 'url');\n  if (!VALUE_RE.test(valueWithoutFunctions)) {\n    fail(\n        `String value allows only ${VALUE_ALLOWED_CHARS}` +\n        ' and simple functions, got: ' + value);\n    return SafeStyle.INNOCUOUS_STRING;\n  } else if (COMMENT_RE.test(value)) {\n    fail(`String value disallows comments, got: ${value}`);\n    return SafeStyle.INNOCUOUS_STRING;\n  } else if (!hasBalancedQuotes(value)) {\n    fail(`String value requires balanced quotes, got: ${value}`);\n    return SafeStyle.INNOCUOUS_STRING;\n  } else if (!hasBalancedSquareBrackets(value)) {\n    fail(\n        'String value requires balanced square brackets and one' +\n        ' identifier per pair of brackets, got: ' + value);\n    return SafeStyle.INNOCUOUS_STRING;\n  }\n  return sanitizeUrl(value);\n}\n\n\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * @param {string} value Untrusted CSS property value.\n * @return {boolean} True if property value is safe with respect to quote\n *     balancedness.\n */\nfunction hasBalancedQuotes(value) {\n  'use strict';\n  let outsideSingle = true;\n  let outsideDouble = true;\n  for (let i = 0; i < value.length; i++) {\n    const c = value.charAt(i);\n    if (c == '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c == '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n\n\n/**\n * Checks that square brackets ([ and ]) are properly balanced inside a string,\n * and that the content in the square brackets is one ident-token;\n * see https://www.w3.org/TR/css-syntax-3/#ident-token-diagram.\n * For practicality, and in line with other restrictions posed on SafeStyle\n * strings, we restrict the character set allowable in the ident-token to\n * [-_a-zA-Z0-9].\n * @param {string} value Untrusted CSS property value.\n * @return {boolean} True if property value is safe with respect to square\n *     bracket balancedness.\n */\nfunction hasBalancedSquareBrackets(value) {\n  'use strict';\n  let outside = true;\n  const tokenRe = /^[-_a-zA-Z0-9]$/;\n  for (let i = 0; i < value.length; i++) {\n    const c = value.charAt(i);\n    if (c == ']') {\n      if (outside) return false;  // Unbalanced ].\n      outside = true;\n    } else if (c == '[') {\n      if (!outside) return false;  // No nesting.\n      outside = false;\n    } else if (!outside && !tokenRe.test(c)) {\n      return false;\n    }\n  }\n  return outside;\n}\n\n\n/**\n * Characters allowed in VALUE_RE.\n * @type {string}\n */\nconst VALUE_ALLOWED_CHARS = '[-,.\"\\'%_!#/ a-zA-Z0-9\\\\[\\\\]]';\n\n\n/**\n * Regular expression for safe values.\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure\n * they're balanced.\n * Square brackets ([ and ]) are allowed, but a check must be done elsewhere\n * to ensure they're balanced. The content inside a pair of square brackets must\n * be one alphanumeric identifier.\n * ',' allows multiple values to be assigned to the same property\n * (e.g. background-attachment or font-family) and hence could allow\n * multiple values to get injected, but that should pose no risk of XSS.\n * The expression checks only for XSS safety, not for CSS validity.\n * @const {!RegExp}\n */\nconst VALUE_RE = new RegExp(`^${VALUE_ALLOWED_CHARS}+\\$`);\n\n\n/**\n * Regular expression for url(). We support URLs allowed by\n * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape\n * sequences. Use percent-encoding if you need to use special characters like\n * backslash.\n * @const {!RegExp}\n */\nconst URL_RE = new RegExp(\n    '\\\\b(url\\\\([ \\t\\n]*)(' +\n        '\\'[ -&(-\\\\[\\\\]-~]*\\'' +  // Printable characters except ' and \\.\n        '|\"[ !#-\\\\[\\\\]-~]*\"' +    // Printable characters except \" and \\.\n        '|[!#-&*-\\\\[\\\\]-~]*' +    // Printable characters except [ \"'()\\\\].\n        ')([ \\t\\n]*\\\\))',\n    'g');\n\n/**\n * Names of functions allowed in FUNCTIONS_RE.\n * @const {!Array<string>}\n */\nconst ALLOWED_FUNCTIONS = [\n  'calc',\n  'cubic-bezier',\n  'fit-content',\n  'hsl',\n  'hsla',\n  'linear-gradient',\n  'matrix',\n  'minmax',\n  'repeat',\n  'rgb',\n  'rgba',\n  '(rotate|scale|translate)(X|Y|Z|3d)?',\n  'var',\n];\n\n\n/**\n * Regular expression for simple functions.\n * @const {!RegExp}\n */\nconst FUNCTIONS_RE = new RegExp(\n    '\\\\b(' + ALLOWED_FUNCTIONS.join('|') + ')' +\n        '\\\\([-+*/0-9a-zA-Z.%#\\\\[\\\\], ]+\\\\)',\n    'g');\n\n\n/**\n * Regular expression for comments. These are disallowed in CSS property values.\n * @const {!RegExp}\n */\nconst COMMENT_RE = /\\/\\*/;\n\n\n/**\n * Sanitize URLs inside url().\n * NOTE: We could also consider using CSS.escape once that's available in the\n * browsers. However, loosely matching URL e.g. with url\\(.*\\) and then escaping\n * the contents would result in a slightly different language than CSS leading\n * to confusion of users. E.g. url(\")\") is valid in CSS but it would be invalid\n * as seen by our parser. On the other hand, url(\\) is invalid in CSS but our\n * parser would be fine with it.\n * @param {string} value Untrusted CSS property value.\n * @return {string}\n */\nfunction sanitizeUrl(value) {\n  'use strict';\n  return value.replace(URL_RE, (match, before, url, after) => {\n    'use strict';\n    let quote = '';\n    url = url.replace(/^(['\"])(.*)\\1$/, (match, start, inside) => {\n      'use strict';\n      quote = start;\n      return inside;\n    });\n    const sanitized = SafeUrl.sanitize(url).getTypedStringValue();\n    return before + quote + sanitized + quote + after;\n  });\n}\n\n\nexports = SafeStyle;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for manipulating objects/maps/hashes.\n */\ngoog.module('goog.object');\ngoog.module.declareLegacyNamespace();\n\n/**\n * Calls a function for each element in an object/map/hash.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):?} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and the return value is ignored.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {void}\n * @template T,K,V\n */\nfunction forEach(obj, f, opt_obj) {\n  for (const key in obj) {\n    f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);\n  }\n}\n\n/**\n * Calls a function for each element in an object/map/hash. If that call returns\n * true, adds the element to a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean. If the return value is true the\n *     element is added to the result object. If it is false the element is not\n *     included.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,V>} a new object in which only elements that passed the\n *     test are present.\n * @template T,K,V\n */\nfunction filter(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {\n      res[key] = obj[key];\n    }\n  }\n  return res;\n}\n\n/**\n * For every element in an object/map/hash calls a function and inserts the\n * result into a new object.\n * @param {?Object<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,?Object<K,V>):R} f The function to call for every\n *     element. This function takes 3 arguments (the value, the key and the\n *     object) and should return something. The result will be inserted into a\n *     new object.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object<K,R>} a new object with the results from f.\n * @template T,K,V,R\n */\nfunction map(obj, f, opt_obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);\n  }\n  return res;\n}\n\n/**\n * Calls a function for each element in an object/map/hash. If any\n * call returns true, returns true (without checking the rest). If\n * all calls return false, returns false.\n * @param {?Object<K,V>} obj The object to check.\n * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for\n *     every element. This function takes 3 arguments (the value, the key and\n *     the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} true if any element passes the test.\n * @template T,K,V\n */\nfunction some(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Calls a function for each element in an object/map/hash. If\n * all calls return true, returns true. If any call returns false, returns\n * false at this point and does not continue to check the remaining elements.\n * @param {?Object<K,V>} obj The object to check.\n * @param {?function(this:T,V,?,?Object<K,V>):boolean} f The function to call\n *     for every element. This function takes 3 arguments (the value, the key\n *     and the object) and should return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} false if any element fails the test.\n * @template T,K,V\n */\nfunction every(obj, f, opt_obj) {\n  for (const key in obj) {\n    if (!f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the number of key-value pairs in the object map.\n * @param {?Object} obj The object for which to get the number of key-value\n *     pairs.\n * @return {number} The number of key-value pairs in the object map.\n */\nfunction getCount(obj) {\n  let rv = 0;\n  for (const key in obj) {\n    rv++;\n  }\n  return rv;\n}\n\n/**\n * Returns one key from the object map, if any exists.\n * For map literals the returned key will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object} obj The object to pick a key from.\n * @return {string|undefined} The key or undefined if the object is empty.\n */\nfunction getAnyKey(obj) {\n  for (const key in obj) {\n    return key;\n  }\n}\n\n/**\n * Returns one value from the object map, if any exists.\n * For map literals the returned value will be the first one in most of the\n * browsers (a know exception is Konqueror).\n * @param {?Object<K,V>} obj The object to pick a value from.\n * @return {V|undefined} The value or undefined if the object is empty.\n * @template K,V\n */\nfunction getAnyValue(obj) {\n  for (const key in obj) {\n    return obj[key];\n  }\n}\n\n/**\n * Whether the object/hash/map contains the given object as a value.\n * An alias for containsValue(obj, val).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The object for which to check.\n * @return {boolean} true if val is present.\n * @template K,V\n */\nfunction contains(obj, val) {\n  return containsValue(obj, val);\n}\n\n/**\n * Returns the values of the object/map/hash.\n * @param {?Object<K,V>} obj The object from which to get the values.\n * @return {!Array<V>} The values in the object/map/hash.\n * @template K,V\n */\nfunction getValues(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n}\n\n/**\n * Returns the keys of the object/map/hash.\n * @param {?Object} obj The object from which to get the keys.\n * @return {!Array<string>} Array of property keys.\n */\nfunction getKeys(obj) {\n  const res = [];\n  let i = 0;\n  for (const key in obj) {\n    res[i++] = key;\n  }\n  return res;\n}\n\n/**\n * Get a value from an object multiple levels deep.  This is useful for\n * pulling values from deeply nested objects, such as JSON responses.\n * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)\n * @param {?Object} obj An object to get the value from. Can be array-like.\n * @param {...(string|number|!IArrayLike<number|string>)} var_args A number of\n *     keys (as strings, or numbers, for array-like objects). Can also be\n *     specified as a single array of keys.\n * @return {*} The resulting value. If, at any point, the value for a key in the\n *     current object is null or undefined, returns undefined.\n */\nfunction getValueByKeys(obj, var_args) {\n  const isArrayLike = goog.isArrayLike(var_args);\n  const keys = isArrayLike ?\n      /** @type {!IArrayLike<number|string>} */ (var_args) :\n      arguments;\n\n  // Start with the 2nd parameter for the variable parameters syntax.\n  for (let i = isArrayLike ? 0 : 1; i < keys.length; i++) {\n    if (obj == null) return undefined;\n    obj = obj[keys[i]];\n  }\n\n  return obj;\n}\n\n/**\n * Whether the object/map/hash contains the given key.\n * @param {?Object} obj The object in which to look for key.\n * @param {?} key The key for which to check.\n * @return {boolean} true If the map contains the key.\n */\nfunction containsKey(obj, key) {\n  return obj !== null && key in obj;\n}\n\n/**\n * Whether the object/map/hash contains the given value. This is O(n).\n * @param {?Object<K,V>} obj The object in which to look for val.\n * @param {V} val The value for which to check.\n * @return {boolean} true If the map contains the value.\n * @template K,V\n */\nfunction containsValue(obj, val) {\n  for (const key in obj) {\n    if (obj[key] == val) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n * @template T,K,V\n */\nfunction findKey(obj, f, thisObj = undefined) {\n  for (const key in obj) {\n    if (f.call(/** @type {?} */ (thisObj), obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Searches an object for an element that satisfies the given condition and\n * returns its value.\n * @param {?Object<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to\n *     call for every element. Takes 3 arguments (the value, the key and the\n *     object) and should return a boolean.\n * @param {T=} thisObj An optional \"this\" context for the function.\n * @return {V} The value of an element for which the function returns true or\n *     undefined if no such element is found.\n * @template T,K,V\n */\nfunction findValue(obj, f, thisObj = undefined) {\n  const key = findKey(obj, f, thisObj);\n  return key && obj[key];\n}\n\n/**\n * Whether the object/map/hash is empty.\n * @param {?Object} obj The object to test.\n * @return {boolean} true if obj is empty.\n */\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Removes all key value pairs from the object/map/hash.\n * @param {?Object} obj The object to clear.\n * @return {void}\n */\nfunction clear(obj) {\n  for (const i in obj) {\n    delete obj[i];\n  }\n}\n\n/**\n * Removes a key-value pair based on the key.\n * @param {?Object} obj The object from which to remove the key.\n * @param {?} key The key to remove.\n * @return {boolean} Whether an element was removed.\n */\nfunction remove(obj, key) {\n  let rv;\n  if (rv = key in /** @type {!Object} */ (obj)) {\n    delete obj[key];\n  }\n  return rv;\n}\n\n/**\n * Adds a key-value pair to the object. Throws an exception if the key is\n * already in use. Use set if you want to change an existing pair.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} val The value to add.\n * @return {void}\n * @template K,V\n */\nfunction add(obj, key, val) {\n  if (obj !== null && key in obj) {\n    throw new Error(`The object already contains the key \"${key}\"`);\n  }\n  set(obj, key, val);\n}\n\n/**\n * Returns the value for the given key.\n * @param {?Object<K,V>} obj The object from which to get the value.\n * @param {string} key The key for which to get the value.\n * @param {R=} val The value to return if no item is found for the given key\n *     (default is undefined).\n * @return {V|R|undefined} The value for the given key.\n * @template K,V,R\n */\nfunction get(obj, key, val = undefined) {\n  if (obj !== null && key in obj) {\n    return obj[key];\n  }\n  return val;\n}\n\n/**\n * Adds a key-value pair to the object/map/hash.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add.\n * @template K,V\n * @return {void}\n */\nfunction set(obj, key, value) {\n  obj[key] = value;\n}\n\n/**\n * Adds a key-value pair to the object/map/hash if it doesn't exist yet.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n */\nfunction setIfUndefined(obj, key, value) {\n  return key in /** @type {!Object} */ (obj) ? obj[key] : (obj[key] = value);\n}\n\n/**\n * Sets a key and value to an object if the key is not set. The value will be\n * the return value of the given function. If the key already exists, the\n * object will not be changed and the function will not be called (the function\n * will be lazily evaluated -- only called if necessary).\n * This function is particularly useful when used with an `Object` which is\n * acting as a cache.\n * @param {?Object<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {function():V} f The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n */\nfunction setWithReturnValueIfNotSet(obj, key, f) {\n  if (key in obj) {\n    return obj[key];\n  }\n\n  const val = f();\n  obj[key] = val;\n  return val;\n}\n\n/**\n * Compares two objects for equality using === on the values.\n * @param {!Object<K,V>} a\n * @param {!Object<K,V>} b\n * @return {boolean}\n * @template K,V\n */\nfunction equals(a, b) {\n  for (const k in a) {\n    if (!(k in b) || a[k] !== b[k]) {\n      return false;\n    }\n  }\n  for (const k in b) {\n    if (!(k in a)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns a shallow clone of the object.\n * @param {?Object<K,V>} obj Object to clone.\n * @return {!Object<K,V>} Clone of the input object.\n * @template K,V\n */\nfunction clone(obj) {\n  const res = {};\n  for (const key in obj) {\n    res[key] = obj[key];\n  }\n  return res;\n}\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n * WARNINGS:\n * <code>unsafeClone</code> does not detect reference loops. Objects\n * that refer to themselves will cause infinite recursion.\n * <code>unsafeClone</code> is unaware of unique identifiers, and\n * copies UIDs created by <code>getUid</code> into cloned results.\n * @param {T} obj The value to clone.\n * @return {T} A clone of the input value.\n * @template T\n */\nfunction unsafeClone(obj) {\n  if (!obj || typeof obj !== 'object') return obj;\n  if (typeof obj.clone === 'function') return obj.clone();\n  if (typeof Map !== 'undefined' && obj instanceof Map) {\n    return new Map(obj);\n  } else if (typeof Set !== 'undefined' && obj instanceof Set) {\n    return new Set(obj);\n  }\n  const clone = Array.isArray(obj) ? [] :\n      typeof ArrayBuffer === 'function' &&\n          typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj) &&\n          !(obj instanceof DataView) ?\n                                     new obj.constructor(obj.length) :\n                                     {};\n  for (const key in obj) {\n    clone[key] = unsafeClone(obj[key]);\n  }\n  return clone;\n}\n\n/**\n * Returns a new object in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n * @param {?Object} obj The object to transpose.\n * @return {!Object} The transposed object.\n */\nfunction transpose(obj) {\n  const transposed = {};\n  for (const key in obj) {\n    transposed[obj[key]] = key;\n  }\n  return transposed;\n}\n\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n */\nconst PROTOTYPE_FIELDS = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf',\n];\n\n/**\n * Extends an object with another object.\n * This operates 'in-place'; it does not create a new Object.\n * Example:\n * var o = {};\n * extend(o, {a: 0, b: 1});\n * o; // {a: 0, b: 1}\n * extend(o, {b: 2, c: 3});\n * o; // {a: 0, b: 2, c: 3}\n * @param {?Object} target The object to modify. Existing properties will be\n *     overwritten if they are also present in one of the objects in `var_args`.\n * @param {...(?Object|undefined)} var_args The objects from which values\n *     will be copied.\n * @return {void}\n * @deprecated Prefer Object.assign\n */\nfunction extend(target, var_args) {\n  let key;\n  let source;\n  for (let i = 1; i < arguments.length; i++) {\n    source = arguments[i];\n    for (key in source) {\n      target[key] = source[key];\n    }\n\n    // For IE the for-in-loop does not contain any properties that are not\n    // enumerable on the prototype object (for example isPrototypeOf from\n    // Object.prototype) and it will also not include 'replace' on objects that\n    // extend String and change 'replace' (not that it is common for anyone to\n    // extend anything except Object).\n\n    for (let j = 0; j < PROTOTYPE_FIELDS.length; j++) {\n      key = PROTOTYPE_FIELDS[j];\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n}\n\n/**\n * Creates a new object built from the key-value pairs provided as arguments.\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise even arguments are used as\n *     the property names and odd arguments are used as the property values.\n * @return {!Object} The new object.\n * @throws {!Error} If there are uneven number of arguments or there is only one\n *     non array argument.\n */\nfunction create(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return create.apply(null, arguments[0]);\n  }\n\n  if (argLength % 2) {\n    throw new Error('Uneven number of arguments');\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i += 2) {\n    rv[arguments[i]] = arguments[i + 1];\n  }\n  return rv;\n}\n\n/**\n * Creates a new object where the property names come from the arguments but\n * the value is always set to true\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments, otherwise the arguments are used as\n *     the property names.\n * @return {!Object} The new object.\n */\nfunction createSet(var_args) {\n  const argLength = arguments.length;\n  if (argLength == 1 && Array.isArray(arguments[0])) {\n    return createSet.apply(null, arguments[0]);\n  }\n\n  const rv = {};\n  for (let i = 0; i < argLength; i++) {\n    rv[arguments[i]] = true;\n  }\n  return rv;\n}\n\n/**\n * Creates an immutable view of the underlying object, if the browser\n * supports immutable objects.\n * In default mode, writes to this view will fail silently. In strict mode,\n * they will throw an error.\n * @param {!Object<K,V>} obj An object.\n * @return {!Object<K,V>} An immutable view of that object, or the original\n *     object if this browser does not support immutables.\n * @template K,V\n */\nfunction createImmutableView(obj) {\n  let result = obj;\n  if (Object.isFrozen && !Object.isFrozen(obj)) {\n    result = Object.create(obj);\n    Object.freeze(result);\n  }\n  return result;\n}\n\n/**\n * @param {!Object} obj An object.\n * @return {boolean} Whether this is an immutable view of the object.\n */\nfunction isImmutableView(obj) {\n  return !!Object.isFrozen && Object.isFrozen(obj);\n}\n\n/**\n * Get all properties names on a given Object regardless of enumerability.\n * <p> If the browser does not support `Object.getOwnPropertyNames` nor\n * `Object.getPrototypeOf` then this is equivalent to using\n * `getKeys`\n * @param {?Object} obj The object to get the properties of.\n * @param {boolean=} includeObjectPrototype Whether properties defined on\n *     `Object.prototype` should be included in the result.\n * @param {boolean=} includeFunctionPrototype Whether properties defined on\n *     `Function.prototype` should be included in the result.\n * @return {!Array<string>}\n * @public\n */\nfunction getAllPropertyNames(\n    obj, includeObjectPrototype = undefined,\n    includeFunctionPrototype = undefined) {\n  if (!obj) {\n    return [];\n  }\n\n  // Naively use a for..in loop to get the property names if the browser doesn't\n  // support any other APIs for getting it.\n  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {\n    return getKeys(obj);\n  }\n\n  const visitedSet = {};\n\n  // Traverse the prototype chain and add all properties to the visited set.\n  let proto = obj;\n  while (proto && (proto !== Object.prototype || !!includeObjectPrototype) &&\n         (proto !== Function.prototype || !!includeFunctionPrototype)) {\n    const names = Object.getOwnPropertyNames(proto);\n    for (let i = 0; i < names.length; i++) {\n      visitedSet[names[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return getKeys(visitedSet);\n}\n\n/**\n * Given a ES5 or ES6 class reference, return its super class / super\n * constructor.\n * This should be used in rare cases where you need to walk up the inheritance\n * tree (this is generally a bad idea). But this work with ES5 and ES6 classes,\n * unlike relying on the superClass_ property.\n * Note: To start walking up the hierarchy from an instance call this with its\n * `constructor` property; e.g. `getSuperClass(instance.constructor)`.\n * @param {function(new: ?)} constructor\n * @return {?Object}\n */\nfunction getSuperClass(constructor) {\n  const proto = Object.getPrototypeOf(constructor.prototype);\n  return proto && proto.constructor;\n}\n\nexports = {\n  add,\n  clear,\n  clone,\n  contains,\n  containsKey,\n  containsValue,\n  create,\n  createImmutableView,\n  createSet,\n  equals,\n  every,\n  extend,\n  filter,\n  findKey,\n  findValue,\n  forEach,\n  get,\n  getAllPropertyNames,\n  getAnyKey,\n  getAnyValue,\n  getCount,\n  getKeys,\n  getSuperClass,\n  getValueByKeys,\n  getValues,\n  isEmpty,\n  isImmutableView,\n  map,\n  remove,\n  set,\n  setIfUndefined,\n  setWithReturnValueIfNotSet,\n  some,\n  transpose,\n  unsafeClone,\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The SafeStyleSheet type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.module('goog.html.SafeStyleSheet');\ngoog.module.declareLegacyNamespace();\n\nconst Const = goog.require('goog.string.Const');\nconst SafeStyle = goog.require('goog.html.SafeStyle');\nconst TypedString = goog.require('goog.string.TypedString');\nconst googObject = goog.require('goog.object');\nconst {assert, fail} = goog.require('goog.asserts');\nconst {contains} = goog.require('goog.string.internal');\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @const {!Object}\n */\nconst CONSTRUCTOR_TOKEN_PRIVATE = {};\n\n/**\n * A string-like object which represents a CSS style sheet and that carries the\n * security type contract that its value, as a string, will not cause untrusted\n * script execution (XSS) when evaluated as CSS in a browser.\n *\n * Instances of this type must be created via the factory method\n * `SafeStyleSheet.fromConstant` and not by invoking its constructor. The\n * constructor intentionally takes an extra parameter that cannot be constructed\n * outside of this file and the type is immutable; hence only a default instance\n * corresponding to the empty string can be obtained via constructor invocation.\n *\n * A SafeStyleSheet's string representation can safely be interpolated as the\n * content of a style element within HTML. The SafeStyleSheet string should\n * not be escaped before interpolation.\n *\n * Values of this type must be composable, i.e. for any two values\n * `styleSheet1` and `styleSheet2` of this type,\n * `SafeStyleSheet.unwrap(styleSheet1) + SafeStyleSheet.unwrap(styleSheet2)`\n * must itself be a value that satisfies the SafeStyleSheet type constraint.\n * This requirement implies that for any value `styleSheet` of this type,\n * `SafeStyleSheet.unwrap(styleSheet1)` must end in\n * \"beginning of rule\" context.\n *\n * A SafeStyleSheet can be constructed via security-reviewed unchecked\n * conversions. In this case producers of SafeStyleSheet must ensure themselves\n * that the SafeStyleSheet does not contain unsafe script. Note in particular\n * that `&lt;` is dangerous, even when inside CSS strings, and so should\n * always be forbidden or CSS-escaped in user controlled input. For example, if\n * `&lt;/style&gt;&lt;script&gt;evil&lt;/script&gt;\"` were interpolated\n * inside a CSS string, it would break out of the context of the original\n * style element and `evil` would execute. Also note that within an HTML\n * style (raw text) element, HTML character references, such as\n * `&amp;lt;`, are not allowed. See\n * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements\n * (similar considerations apply to the style element).\n *\n * @see SafeStyleSheet#fromConstant\n * @final\n * @implements {TypedString}\n */\nclass SafeStyleSheet {\n  /**\n   * @param {string} value\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, token) {\n    /**\n     * The contained value of this SafeStyleSheet.  The field has a purposely\n     * ugly name to make (non-compiled) code that attempts to directly access\n     * this field stand out.\n     * @private {string}\n     */\n    this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ =\n        (token === CONSTRUCTOR_TOKEN_PRIVATE) ? value : '';\n\n    /**\n     * @override\n     * @const\n     */\n    this.implementsGoogStringTypedString = true;\n  }\n\n  /**\n   * Creates a style sheet consisting of one selector and one style definition.\n   * Use {@link SafeStyleSheet.concat} to create longer style sheets.\n   * This function doesn't support @import, @media and similar constructs.\n   * @param {string} selector CSS selector, e.g. '#id' or 'tag .class, #id'. We\n   *     support CSS3 selectors: https://w3.org/TR/css3-selectors/#selectors.\n   * @param {!SafeStyle.PropertyMap|!SafeStyle} style Style\n   *     definition associated with the selector.\n   * @return {!SafeStyleSheet}\n   * @throws {!Error} If invalid selector is provided.\n   */\n  static createRule(selector, style) {\n    if (contains(selector, '<')) {\n      throw new Error(`Selector does not allow '<', got: ${selector}`);\n    }\n\n    // Remove strings.\n    const selectorToCheck =\n        selector.replace(/('|\")((?!\\1)[^\\r\\n\\f\\\\]|\\\\[\\s\\S])*\\1/g, '');\n\n    // Check characters allowed in CSS3 selectors.\n    if (!/^[-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|]+$/.test(selectorToCheck)) {\n      throw new Error(\n          'Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\\\]()=^$|] and ' +\n          'strings, got: ' + selector);\n    }\n\n    // Check balanced () and [].\n    if (!SafeStyleSheet.hasBalancedBrackets_(selectorToCheck)) {\n      throw new Error(\n          '() and [] in selector must be balanced, got: ' + selector);\n    }\n\n    if (!(style instanceof SafeStyle)) {\n      style = SafeStyle.create(style);\n    }\n    const styleSheet =\n        `${selector}{` + SafeStyle.unwrap(style).replace(/</g, '\\\\3C ') + '}';\n    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\n        styleSheet);\n  }\n\n  /**\n   * Checks if a string has balanced () and [] brackets.\n   * @param {string} s String to check.\n   * @return {boolean}\n   * @private\n   */\n  static hasBalancedBrackets_(s) {\n    const brackets = {'(': ')', '[': ']'};\n    const expectedBrackets = [];\n    for (let i = 0; i < s.length; i++) {\n      const ch = s[i];\n      if (brackets[ch]) {\n        expectedBrackets.push(brackets[ch]);\n      } else if (googObject.contains(brackets, ch)) {\n        if (expectedBrackets.pop() != ch) {\n          return false;\n        }\n      }\n    }\n    return expectedBrackets.length == 0;\n  }\n\n  /**\n   * Creates a new SafeStyleSheet object by concatenating values.\n   * @param {...(!SafeStyleSheet|!Array<!SafeStyleSheet>)}\n   *     var_args Values to concatenate.\n   * @return {!SafeStyleSheet}\n   */\n  static concat(var_args) {\n    let result = '';\n\n    /**\n     * @param {!SafeStyleSheet|!Array<!SafeStyleSheet>}\n     *     argument\n     */\n    const addArgument = argument => {\n      if (Array.isArray(argument)) {\n        argument.forEach(addArgument);\n      } else {\n        result += SafeStyleSheet.unwrap(argument);\n      }\n    };\n\n    Array.prototype.forEach.call(arguments, addArgument);\n    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\n        result);\n  }\n\n  /**\n   * Creates a SafeStyleSheet object from a compile-time constant string.\n   *\n   * `styleSheet` must not have any &lt; characters in it, so that\n   * the syntactic structure of the surrounding HTML is not affected.\n   *\n   * @param {!Const} styleSheet A compile-time-constant string from\n   *     which to create a SafeStyleSheet.\n   * @return {!SafeStyleSheet} A SafeStyleSheet object initialized to\n   *     `styleSheet`.\n   */\n  static fromConstant(styleSheet) {\n    const styleSheetString = Const.unwrap(styleSheet);\n    if (styleSheetString.length === 0) {\n      return SafeStyleSheet.EMPTY;\n    }\n    // > is a valid character in CSS selectors and there's no strict need to\n    // block it if we already block <.\n    assert(\n        !contains(styleSheetString, '<'),\n        `Forbidden '<' character in style sheet string: ${styleSheetString}`);\n    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(\n        styleSheetString);\n  }\n\n  /**\n   * Returns this SafeStyleSheet's value as a string.\n   *\n   * IMPORTANT: In code where it is security relevant that an object's type is\n   * indeed `SafeStyleSheet`, use `SafeStyleSheet.unwrap`\n   * instead of this method. If in doubt, assume that it's security relevant. In\n   * particular, note that goog.html functions which return a goog.html type do\n   * not guarantee the returned instance is of the right type. For example:\n   *\n   * <pre>\n   * var fakeSafeHtml = new String('fake');\n   * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;\n   * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n   * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n   * // instanceof goog.html.SafeHtml.\n   * </pre>\n   *\n   * @see SafeStyleSheet#unwrap\n   * @override\n   */\n  getTypedStringValue() {\n    return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;\n  }\n\n  /**\n   * Performs a runtime check that the provided object is indeed a\n   * SafeStyleSheet object, and returns its value.\n   *\n   * @param {!SafeStyleSheet} safeStyleSheet The object to extract from.\n   * @return {string} The safeStyleSheet object's contained string, unless\n   *     the run-time type check fails. In that case, `unwrap` returns an\n   *     innocuous string, or, if assertions are enabled, throws\n   *     `asserts.AssertionError`.\n   */\n  static unwrap(safeStyleSheet) {\n    // Perform additional Run-time type-checking to ensure that\n    // safeStyleSheet is indeed an instance of the expected type.  This\n    // provides some additional protection against security bugs due to\n    // application code that disables type checks.\n    // Specifically, the following checks are performed:\n    // 1. The object is an instance of the expected type.\n    // 2. The object is not an instance of a subclass.\n    if (safeStyleSheet instanceof SafeStyleSheet &&\n        safeStyleSheet.constructor === SafeStyleSheet) {\n      return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;\n    } else {\n      fail(\n          'expected object of type SafeStyleSheet, got \\'' + safeStyleSheet +\n          '\\' of type ' + goog.typeOf(safeStyleSheet));\n      return 'type_error:SafeStyleSheet';\n    }\n  }\n\n  /**\n   * Package-internal utility method to create SafeStyleSheet instances.\n   *\n   * @param {string} styleSheet The string to initialize the SafeStyleSheet\n   *     object with.\n   * @return {!SafeStyleSheet} The initialized SafeStyleSheet object.\n   * @package\n   */\n  static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet) {\n    return new SafeStyleSheet(styleSheet, CONSTRUCTOR_TOKEN_PRIVATE);\n  }\n}\n\n/**\n * Returns a string-representation of this value.\n *\n * To obtain the actual string value wrapped in a SafeStyleSheet, use\n * `SafeStyleSheet.unwrap`.\n *\n * @return {string}\n * @see SafeStyleSheet#unwrap\n * @override\n */\nSafeStyleSheet.prototype.toString = function() {\n  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString();\n};\n\n\n/**\n * A SafeStyleSheet instance corresponding to the empty string.\n * @const {!SafeStyleSheet}\n */\nSafeStyleSheet.EMPTY =\n    SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse('');\n\n\nexports = SafeStyleSheet;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\ngoog.provide('goog.dom.HtmlElement');\n\n\n\n/**\n * This subclass of HTMLElement is used when only a HTMLElement is possible and\n * not any of its subclasses. Normally, a type can refer to an instance of\n * itself or an instance of any subtype. More concretely, if HTMLElement is used\n * then the compiler must assume that it might still be e.g. HTMLScriptElement.\n * With this, the type check knows that it couldn't be any special element.\n *\n * @constructor\n * @extends {HTMLElement}\n */\ngoog.dom.HtmlElement = function() {};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Defines the goog.dom.TagName class. Its constants enumerate\n * all HTML tag names specified in either the W3C HTML 4.01 index of elements\n * or the HTML5.1 specification.\n *\n * References:\n * https://www.w3.org/TR/html401/index/elements.html\n * https://www.w3.org/TR/html51/dom.html#elements\n */\ngoog.provide('goog.dom.TagName');\n\ngoog.require('goog.dom.HtmlElement');\n\n/**\n * A tag name for an HTML element.\n *\n * This type is a lie. All instances are actually strings. Do not implement it.\n *\n * It exists because we need an object type to host the template type parameter,\n * and that's not possible with literal or enum types. It is a record type so\n * that runtime type checks don't try to validate the lie.\n *\n * @template T\n * @record\n */\ngoog.dom.TagName = class {\n  /**\n   * Cast a string into the tagname for the associated constructor.\n   *\n   * @template T\n   * @param {string} name\n   * @param {function(new:T, ...?)} type\n   * @return {!goog.dom.TagName<T>}\n   */\n  static cast(name, type) {\n    return /** @type {?} */ (name);\n  }\n\n  /** @suppress {unusedPrivateMembers} */\n  constructor() {\n    /** @private {null} */\n    this.googDomTagName_doNotImplementThisTypeOrElse_;\n\n    /** @private {T} */\n    this.ensureTypeScriptRemembersTypeT_;\n  }\n\n  /**\n   * Appease the compiler that instances are stringafiable for the\n   * purpose of being a dictionary key.\n   *\n   * Never implemented; always backed by `String::toString`.\n   *\n   * @override\n   * @return {string}\n   */\n  toString() {}\n};\n\n\n\n/** @const {!goog.dom.TagName<!HTMLAnchorElement>} */\ngoog.dom.TagName.A = /** @type {?} */ ('A');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.ABBR = /** @type {?} */ ('ABBR');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.ACRONYM = /** @type {?} */ ('ACRONYM');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.ADDRESS = /** @type {?} */ ('ADDRESS');\n\n/** @const {!goog.dom.TagName<!HTMLAppletElement>} */\ngoog.dom.TagName.APPLET = /** @type {?} */ ('APPLET');\n\n/** @const {!goog.dom.TagName<!HTMLAreaElement>} */\ngoog.dom.TagName.AREA = /** @type {?} */ ('AREA');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.ARTICLE = /** @type {?} */ ('ARTICLE');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.ASIDE = /** @type {?} */ ('ASIDE');\n\n/** @const {!goog.dom.TagName<!HTMLAudioElement>} */\ngoog.dom.TagName.AUDIO = /** @type {?} */ ('AUDIO');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.B = /** @type {?} */ ('B');\n\n/** @const {!goog.dom.TagName<!HTMLBaseElement>} */\ngoog.dom.TagName.BASE = /** @type {?} */ ('BASE');\n\n/** @const {!goog.dom.TagName<!HTMLBaseFontElement>} */\ngoog.dom.TagName.BASEFONT = /** @type {?} */ ('BASEFONT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.BDI = /** @type {?} */ ('BDI');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.BDO = /** @type {?} */ ('BDO');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.BIG = /** @type {?} */ ('BIG');\n\n/** @const {!goog.dom.TagName<!HTMLQuoteElement>} */\ngoog.dom.TagName.BLOCKQUOTE = /** @type {?} */ ('BLOCKQUOTE');\n\n/** @const {!goog.dom.TagName<!HTMLBodyElement>} */\ngoog.dom.TagName.BODY = /** @type {?} */ ('BODY');\n\n/** @const {!goog.dom.TagName<!HTMLBRElement>} */\ngoog.dom.TagName.BR = /** @type {?} */ ('BR');\n\n/** @const {!goog.dom.TagName<!HTMLButtonElement>} */\ngoog.dom.TagName.BUTTON = /** @type {?} */ ('BUTTON');\n\n/** @const {!goog.dom.TagName<!HTMLCanvasElement>} */\ngoog.dom.TagName.CANVAS = /** @type {?} */ ('CANVAS');\n\n/** @const {!goog.dom.TagName<!HTMLTableCaptionElement>} */\ngoog.dom.TagName.CAPTION = /** @type {?} */ ('CAPTION');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.CENTER = /** @type {?} */ ('CENTER');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.CITE = /** @type {?} */ ('CITE');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.CODE = /** @type {?} */ ('CODE');\n\n/** @const {!goog.dom.TagName<!HTMLTableColElement>} */\ngoog.dom.TagName.COL = /** @type {?} */ ('COL');\n\n/** @const {!goog.dom.TagName<!HTMLTableColElement>} */\ngoog.dom.TagName.COLGROUP = /** @type {?} */ ('COLGROUP');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.COMMAND = /** @type {?} */ ('COMMAND');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.DATA = /** @type {?} */ ('DATA');\n\n/** @const {!goog.dom.TagName<!HTMLDataListElement>} */\ngoog.dom.TagName.DATALIST = /** @type {?} */ ('DATALIST');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.DD = /** @type {?} */ ('DD');\n\n/** @const {!goog.dom.TagName<!HTMLModElement>} */\ngoog.dom.TagName.DEL = /** @type {?} */ ('DEL');\n\n/** @const {!goog.dom.TagName<!HTMLDetailsElement>} */\ngoog.dom.TagName.DETAILS = /** @type {?} */ ('DETAILS');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.DFN = /** @type {?} */ ('DFN');\n\n/** @const {!goog.dom.TagName<!HTMLDialogElement>} */\ngoog.dom.TagName.DIALOG = /** @type {?} */ ('DIALOG');\n\n/** @const {!goog.dom.TagName<!HTMLDirectoryElement>} */\ngoog.dom.TagName.DIR = /** @type {?} */ ('DIR');\n\n/** @const {!goog.dom.TagName<!HTMLDivElement>} */\ngoog.dom.TagName.DIV = /** @type {?} */ ('DIV');\n\n/** @const {!goog.dom.TagName<!HTMLDListElement>} */\ngoog.dom.TagName.DL = /** @type {?} */ ('DL');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.DT = /** @type {?} */ ('DT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.EM = /** @type {?} */ ('EM');\n\n/** @const {!goog.dom.TagName<!HTMLEmbedElement>} */\ngoog.dom.TagName.EMBED = /** @type {?} */ ('EMBED');\n\n/** @const {!goog.dom.TagName<!HTMLFieldSetElement>} */\ngoog.dom.TagName.FIELDSET = /** @type {?} */ ('FIELDSET');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.FIGCAPTION = /** @type {?} */ ('FIGCAPTION');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.FIGURE = /** @type {?} */ ('FIGURE');\n\n/** @const {!goog.dom.TagName<!HTMLFontElement>} */\ngoog.dom.TagName.FONT = /** @type {?} */ ('FONT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.FOOTER = /** @type {?} */ ('FOOTER');\n\n/** @const {!goog.dom.TagName<!HTMLFormElement>} */\ngoog.dom.TagName.FORM = /** @type {?} */ ('FORM');\n\n/** @const {!goog.dom.TagName<!HTMLFrameElement>} */\ngoog.dom.TagName.FRAME = /** @type {?} */ ('FRAME');\n\n/** @const {!goog.dom.TagName<!HTMLFrameSetElement>} */\ngoog.dom.TagName.FRAMESET = /** @type {?} */ ('FRAMESET');\n\n/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */\ngoog.dom.TagName.H1 = /** @type {?} */ ('H1');\n\n/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */\ngoog.dom.TagName.H2 = /** @type {?} */ ('H2');\n\n/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */\ngoog.dom.TagName.H3 = /** @type {?} */ ('H3');\n\n/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */\ngoog.dom.TagName.H4 = /** @type {?} */ ('H4');\n\n/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */\ngoog.dom.TagName.H5 = /** @type {?} */ ('H5');\n\n/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */\ngoog.dom.TagName.H6 = /** @type {?} */ ('H6');\n\n/** @const {!goog.dom.TagName<!HTMLHeadElement>} */\ngoog.dom.TagName.HEAD = /** @type {?} */ ('HEAD');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.HEADER = /** @type {?} */ ('HEADER');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.HGROUP = /** @type {?} */ ('HGROUP');\n\n/** @const {!goog.dom.TagName<!HTMLHRElement>} */\ngoog.dom.TagName.HR = /** @type {?} */ ('HR');\n\n/** @const {!goog.dom.TagName<!HTMLHtmlElement>} */\ngoog.dom.TagName.HTML = /** @type {?} */ ('HTML');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.I = /** @type {?} */ ('I');\n\n/** @const {!goog.dom.TagName<!HTMLIFrameElement>} */\ngoog.dom.TagName.IFRAME = /** @type {?} */ ('IFRAME');\n\n/** @const {!goog.dom.TagName<!HTMLImageElement>} */\ngoog.dom.TagName.IMG = /** @type {?} */ ('IMG');\n\n/** @const {!goog.dom.TagName<!HTMLInputElement>} */\ngoog.dom.TagName.INPUT = /** @type {?} */ ('INPUT');\n\n/** @const {!goog.dom.TagName<!HTMLModElement>} */\ngoog.dom.TagName.INS = /** @type {?} */ ('INS');\n\n/** @const {!goog.dom.TagName<!HTMLIsIndexElement>} */\ngoog.dom.TagName.ISINDEX = /** @type {?} */ ('ISINDEX');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.KBD = /** @type {?} */ ('KBD');\n\n// HTMLKeygenElement is deprecated.\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.KEYGEN = /** @type {?} */ ('KEYGEN');\n\n/** @const {!goog.dom.TagName<!HTMLLabelElement>} */\ngoog.dom.TagName.LABEL = /** @type {?} */ ('LABEL');\n\n/** @const {!goog.dom.TagName<!HTMLLegendElement>} */\ngoog.dom.TagName.LEGEND = /** @type {?} */ ('LEGEND');\n\n/** @const {!goog.dom.TagName<!HTMLLIElement>} */\ngoog.dom.TagName.LI = /** @type {?} */ ('LI');\n\n/** @const {!goog.dom.TagName<!HTMLLinkElement>} */\ngoog.dom.TagName.LINK = /** @type {?} */ ('LINK');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.MAIN = /** @type {?} */ ('MAIN');\n\n/** @const {!goog.dom.TagName<!HTMLMapElement>} */\ngoog.dom.TagName.MAP = /** @type {?} */ ('MAP');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.MARK = /** @type {?} */ ('MARK');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.MATH = /** @type {?} */ ('MATH');\n\n/** @const {!goog.dom.TagName<!HTMLMenuElement>} */\ngoog.dom.TagName.MENU = /** @type {?} */ ('MENU');\n\n/** @const {!goog.dom.TagName<!HTMLMenuItemElement>} */\ngoog.dom.TagName.MENUITEM = /** @type {?} */ ('MENUITEM');\n\n/** @const {!goog.dom.TagName<!HTMLMetaElement>} */\ngoog.dom.TagName.META = /** @type {?} */ ('META');\n\n/** @const {!goog.dom.TagName<!HTMLMeterElement>} */\ngoog.dom.TagName.METER = /** @type {?} */ ('METER');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.NAV = /** @type {?} */ ('NAV');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.NOFRAMES = /** @type {?} */ ('NOFRAMES');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.NOSCRIPT = /** @type {?} */ ('NOSCRIPT');\n\n/** @const {!goog.dom.TagName<!HTMLObjectElement>} */\ngoog.dom.TagName.OBJECT = /** @type {?} */ ('OBJECT');\n\n/** @const {!goog.dom.TagName<!HTMLOListElement>} */\ngoog.dom.TagName.OL = /** @type {?} */ ('OL');\n\n/** @const {!goog.dom.TagName<!HTMLOptGroupElement>} */\ngoog.dom.TagName.OPTGROUP = /** @type {?} */ ('OPTGROUP');\n\n/** @const {!goog.dom.TagName<!HTMLOptionElement>} */\ngoog.dom.TagName.OPTION = /** @type {?} */ ('OPTION');\n\n/** @const {!goog.dom.TagName<!HTMLOutputElement>} */\ngoog.dom.TagName.OUTPUT = /** @type {?} */ ('OUTPUT');\n\n/** @const {!goog.dom.TagName<!HTMLParagraphElement>} */\ngoog.dom.TagName.P = /** @type {?} */ ('P');\n\n/** @const {!goog.dom.TagName<!HTMLParamElement>} */\ngoog.dom.TagName.PARAM = /** @type {?} */ ('PARAM');\n\n/** @const {!goog.dom.TagName<!HTMLPictureElement>} */\ngoog.dom.TagName.PICTURE = /** @type {?} */ ('PICTURE');\n\n/** @const {!goog.dom.TagName<!HTMLPreElement>} */\ngoog.dom.TagName.PRE = /** @type {?} */ ('PRE');\n\n/** @const {!goog.dom.TagName<!HTMLProgressElement>} */\ngoog.dom.TagName.PROGRESS = /** @type {?} */ ('PROGRESS');\n\n/** @const {!goog.dom.TagName<!HTMLQuoteElement>} */\ngoog.dom.TagName.Q = /** @type {?} */ ('Q');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.RP = /** @type {?} */ ('RP');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.RT = /** @type {?} */ ('RT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.RTC = /** @type {?} */ ('RTC');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.RUBY = /** @type {?} */ ('RUBY');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.S = /** @type {?} */ ('S');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SAMP = /** @type {?} */ ('SAMP');\n\n/** @const {!goog.dom.TagName<!HTMLScriptElement>} */\ngoog.dom.TagName.SCRIPT = /** @type {?} */ ('SCRIPT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SECTION = /** @type {?} */ ('SECTION');\n\n/** @const {!goog.dom.TagName<!HTMLSelectElement>} */\ngoog.dom.TagName.SELECT = /** @type {?} */ ('SELECT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SMALL = /** @type {?} */ ('SMALL');\n\n/** @const {!goog.dom.TagName<!HTMLSourceElement>} */\ngoog.dom.TagName.SOURCE = /** @type {?} */ ('SOURCE');\n\n/** @const {!goog.dom.TagName<!HTMLSpanElement>} */\ngoog.dom.TagName.SPAN = /** @type {?} */ ('SPAN');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.STRIKE = /** @type {?} */ ('STRIKE');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.STRONG = /** @type {?} */ ('STRONG');\n\n/** @const {!goog.dom.TagName<!HTMLStyleElement>} */\ngoog.dom.TagName.STYLE = /** @type {?} */ ('STYLE');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SUB = /** @type {?} */ ('SUB');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SUMMARY = /** @type {?} */ ('SUMMARY');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SUP = /** @type {?} */ ('SUP');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.SVG = /** @type {?} */ ('SVG');\n\n/** @const {!goog.dom.TagName<!HTMLTableElement>} */\ngoog.dom.TagName.TABLE = /** @type {?} */ ('TABLE');\n\n/** @const {!goog.dom.TagName<!HTMLTableSectionElement>} */\ngoog.dom.TagName.TBODY = /** @type {?} */ ('TBODY');\n\n/** @const {!goog.dom.TagName<!HTMLTableCellElement>} */\ngoog.dom.TagName.TD = /** @type {?} */ ('TD');\n\n/** @const {!goog.dom.TagName<!HTMLTemplateElement>} */\ngoog.dom.TagName.TEMPLATE = /** @type {?} */ ('TEMPLATE');\n\n/** @const {!goog.dom.TagName<!HTMLTextAreaElement>} */\ngoog.dom.TagName.TEXTAREA = /** @type {?} */ ('TEXTAREA');\n\n/** @const {!goog.dom.TagName<!HTMLTableSectionElement>} */\ngoog.dom.TagName.TFOOT = /** @type {?} */ ('TFOOT');\n\n/** @const {!goog.dom.TagName<!HTMLTableCellElement>} */\ngoog.dom.TagName.TH = /** @type {?} */ ('TH');\n\n/** @const {!goog.dom.TagName<!HTMLTableSectionElement>} */\ngoog.dom.TagName.THEAD = /** @type {?} */ ('THEAD');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.TIME = /** @type {?} */ ('TIME');\n\n/** @const {!goog.dom.TagName<!HTMLTitleElement>} */\ngoog.dom.TagName.TITLE = /** @type {?} */ ('TITLE');\n\n/** @const {!goog.dom.TagName<!HTMLTableRowElement>} */\ngoog.dom.TagName.TR = /** @type {?} */ ('TR');\n\n/** @const {!goog.dom.TagName<!HTMLTrackElement>} */\ngoog.dom.TagName.TRACK = /** @type {?} */ ('TRACK');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.TT = /** @type {?} */ ('TT');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.U = /** @type {?} */ ('U');\n\n/** @const {!goog.dom.TagName<!HTMLUListElement>} */\ngoog.dom.TagName.UL = /** @type {?} */ ('UL');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.VAR = /** @type {?} */ ('VAR');\n\n/** @const {!goog.dom.TagName<!HTMLVideoElement>} */\ngoog.dom.TagName.VIDEO = /** @type {?} */ ('VIDEO');\n\n/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */\ngoog.dom.TagName.WBR = /** @type {?} */ ('WBR');\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Defines for goog.labs.userAgent.\n */\n\ngoog.module('goog.labs.userAgent');\n\n/**\n * @define {string} Optional runtime override for the USE_CLIENT_HINTS flag.\n * If this is set (for example, to 'foo.bar') then any value of USE_CLIENT_HINTS\n * will be overridden by `globalThis.foo.bar` if it is non-null.\n * This flag will be removed in December 2021.\n */\nconst USE_CLIENT_HINTS_OVERRIDE =\n    goog.define('goog.labs.userAgent.USE_CLIENT_HINTS_OVERRIDE', '');\n\n/**\n * @define {boolean} If true, use navigator.userAgentData\n * TODO(user) Flip flag in 2021/12.\n */\nconst USE_CLIENT_HINTS =\n    goog.define('goog.labs.userAgent.USE_CLIENT_HINTS', false);\n\n// TODO(user): Replace the IIFE with a simple null-coalescing operator.\n// NOTE: This can't be done with a helper function, or else we risk an inlining\n// back-off causing a huge code size regression if a non-inlined helper function\n// prevents the optimizer from detecting the (possibly large) dead code paths.\n/** @const {boolean} */\nexports.USE_CLIENT_HINTS = (() => {\n  const override = USE_CLIENT_HINTS_OVERRIDE ?\n         goog.getObjectByName(USE_CLIENT_HINTS_OVERRIDE) :\n         null;\n  return override != null ? override : USE_CLIENT_HINTS;\n})();\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities used by goog.labs.userAgent tools. These functions\n * should not be used outside of goog.labs.userAgent.*.\n *\n */\n\ngoog.module('goog.labs.userAgent.util');\ngoog.module.declareLegacyNamespace();\n\nconst {USE_CLIENT_HINTS} = goog.require('goog.labs.userAgent');\nconst {caseInsensitiveContains, contains} = goog.require('goog.string.internal');\n\n/**\n * @const {boolean} If true, use navigator.userAgentData without check.\n * TODO(user): FEATURESET_YEAR >= 2022 if it supports mobile and all the\n * brands we need.  See https://caniuse.com/mdn-api_navigator_useragentdata.\n */\nconst ASSUME_CLIENT_HINTS_SUPPORT = false;\n\n/**\n * Gets the native userAgent string from navigator if it exists.\n * If navigator or navigator.userAgent string is missing, returns an empty\n * string.\n * @return {string}\n */\nfunction getNativeUserAgentString() {\n  const navigator = getNavigator();\n  if (navigator) {\n    const userAgent = navigator.userAgent;\n    if (userAgent) {\n      return userAgent;\n    }\n  }\n  return '';\n}\n\n/**\n * Gets the native userAgentData object from navigator if it exists.\n * If navigator.userAgentData object is missing or USE_CLIENT_HINTS is set to\n * false, returns null.\n * @return {?NavigatorUAData}\n */\nfunction getNativeUserAgentData() {\n  if (!USE_CLIENT_HINTS) {\n    return null;\n  }\n  const navigator = getNavigator();\n  // TODO(user): Use navigator?.userAgent ?? null once it's supported.\n  if (navigator) {\n    return navigator.userAgentData || null;\n  }\n  return null;\n}\n\n/**\n * Getter for the native navigator.\n * @return {!Navigator}\n */\nfunction getNavigator() {\n  return goog.global.navigator;\n}\n\n/**\n * A possible override for applications which wish to not check\n * navigator.userAgent but use a specified value for detection instead.\n * @type {?string}\n */\nlet userAgentInternal = null;\n\n/**\n * A possible override for applications which wish to not check\n * navigator.userAgentData but use a specified value for detection instead.\n * @type {?NavigatorUAData}\n */\nlet userAgentDataInternal = getNativeUserAgentData();\n\n/**\n * Override the user agent string with the given value.\n * This should only be used for testing within the goog.labs.userAgent\n * namespace.\n * Pass `null` to use the native browser object instead.\n * @param {?string=} userAgent The userAgent override.\n * @return {void}\n */\nfunction setUserAgent(userAgent = undefined) {\n  userAgentInternal =\n      typeof userAgent === 'string' ? userAgent : getNativeUserAgentString();\n}\n\n/** @return {string} The user agent string. */\nfunction getUserAgent() {\n  return userAgentInternal == null ? getNativeUserAgentString() :\n                                     userAgentInternal;\n}\n\n/**\n * Override the user agent data object with the given value.\n * This should only be used for testing within the goog.labs.userAgent\n * namespace.\n * Pass `null` to specify the absence of userAgentData. Note that this behavior\n * is different from setUserAgent.\n * @param {?NavigatorUAData} userAgentData The userAgentData override.\n */\nfunction setUserAgentData(userAgentData) {\n  userAgentDataInternal = userAgentData;\n}\n\n/**\n * If the user agent data object was overridden using setUserAgentData,\n * reset it so that it uses the native browser object instead, if it exists.\n */\nfunction resetUserAgentData() {\n  userAgentDataInternal = getNativeUserAgentData();\n}\n\n/** @return {?NavigatorUAData} Navigator.userAgentData if exist */\nfunction getUserAgentData() {\n  return userAgentDataInternal;\n}\n\n/**\n * Checks if any string in userAgentData.brands matches str.\n * Returns false if userAgentData is not supported.\n * @param {string} str\n * @return {boolean} Whether any brand string from userAgentData contains the\n *     given string.\n */\nfunction matchUserAgentDataBrand(str) {\n  const data = getUserAgentData();\n  if (!data) return false;\n  return data.brands.some(({brand}) => brand && contains(brand, str));\n}\n\n/**\n * @param {string} str\n * @return {boolean} Whether the user agent contains the given string.\n */\nfunction matchUserAgent(str) {\n  const userAgent = getUserAgent();\n  return contains(userAgent, str);\n}\n\n/**\n * @param {string} str\n * @return {boolean} Whether the user agent contains the given string, ignoring\n *     case.\n */\nfunction matchUserAgentIgnoreCase(str) {\n  const userAgent = getUserAgent();\n  return caseInsensitiveContains(userAgent, str);\n}\n\n/**\n * Parses the user agent into tuples for each section.\n * @param {string} userAgent\n * @return {!Array<!Array<string>>} Tuples of key, version, and the contents of\n *     the parenthetical.\n */\nfunction extractVersionTuples(userAgent) {\n  // Matches each section of a user agent string.\n  // Example UA:\n  // Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)\n  // AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405\n  // This has three version tuples: Mozilla, AppleWebKit, and Mobile.\n\n  const versionRegExp = new RegExp(\n      // Key. Note that a key may have a space.\n      // (i.e. 'Mobile Safari' in 'Mobile Safari/5.0')\n      '([A-Z][\\\\w ]+)' +\n\n          '/' +                // slash\n          '([^\\\\s]+)' +        // version (i.e. '5.0b')\n          '\\\\s*' +             // whitespace\n          '(?:\\\\((.*?)\\\\))?',  // parenthetical info. parentheses not matched.\n      'g');\n\n  const data = [];\n  let match;\n\n  // Iterate and collect the version tuples.  Each iteration will be the\n  // next regex match.\n  while (match = versionRegExp.exec(userAgent)) {\n    data.push([\n      match[1],  // key\n      match[2],  // value\n      // || undefined as this is not undefined in IE7 and IE8\n      match[3] || undefined  // info\n    ]);\n  }\n\n  return data;\n}\n\nexports = {\n  ASSUME_CLIENT_HINTS_SUPPORT,\n  extractVersionTuples,\n  getNativeUserAgentString,\n  getUserAgent,\n  getUserAgentData,\n  matchUserAgent,\n  matchUserAgentDataBrand,\n  matchUserAgentIgnoreCase,\n  resetUserAgentData,\n  setUserAgent,\n  setUserAgentData,\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Provides helper classes and objects to work with High Entropy\n * user agent values.\n */\n\ngoog.module('goog.labs.userAgent.highEntropy.highEntropyValue');\n\nconst util = goog.require('goog.labs.userAgent.util');\nconst {compareVersions} = goog.require('goog.string.internal');\n\n/**\n * Represents a value that can be asynchronously loaded.\n * @interface\n * @template VALUE_TYPE\n */\nclass AsyncValue {\n  /**\n   * Get the value represented by this AsyncValue instance, if it was\n   * previously requested.\n   * @return {VALUE_TYPE|undefined}\n   */\n  getIfLoaded() {}\n\n  /**\n   * Request the value represented by this AsyncValue instance.\n   * @return {!Promise<VALUE_TYPE>}\n   */\n  load() {}\n}\nexports.AsyncValue = AsyncValue;\n\n/**\n * Represents a high-entropy value.\n * High-entropy values must be specifically requested from the Promise-based\n * Client Hints API.\n * @template VALUE_TYPE The type of the value wrapped by this HighEntropyValue\n *     instance.\n * @implements {AsyncValue<VALUE_TYPE>}\n */\nclass HighEntropyValue {\n  /**\n   * Constructs a new HighEntropyValue instance.\n   * @param {string} key The name of the high-entropy value, used when\n   * requesting it from the browser.\n   */\n  constructor(key) {\n    /**\n     * The key used to request the high-entropy value from the browser.\n     * @const {string}\n     * @private\n     */\n    this.key_ = key;\n\n    /**\n     * The value represented by this HighEntropyValue instance. If it hasn't\n     * been successfully requested yet, its value will be undefined.\n     * @type {VALUE_TYPE|undefined}\n     * @protected\n     */\n    this.value_ = undefined;\n\n    /**\n     * The high-entropy value request. If it hasn't been requested yet, this\n     * value will be undefined.\n     * @type {!Promise<VALUE_TYPE>|undefined}\n     * @private\n     */\n    this.promise_ = undefined;\n\n    this.pending_ = false;\n  }\n\n  /**\n   * @return {VALUE_TYPE|undefined}\n   * @override\n   */\n  getIfLoaded() {\n    const userAgentData = util.getUserAgentData();\n    if (!userAgentData) {\n      return undefined;\n    }\n    return this.value_;\n  }\n\n  /**\n   * @return {!Promise<VALUE_TYPE>}\n   * @override\n   */\n  async load() {\n    const userAgentData = util.getUserAgentData();\n    if (!userAgentData) {\n      return undefined;\n    }\n    if (!this.promise_) {\n      this.pending_ = true;\n      this.promise_ = (async () => {\n        try {\n          const dataValues =\n              await userAgentData.getHighEntropyValues([this.key_]);\n          this.value_ =\n              /** @type {!Object<string, VALUE_TYPE>} */ (\n                  dataValues)[this.key_];\n          return this.value_;\n        } finally {\n          this.pending_ = false;\n        }\n      })();\n    }\n    return await this.promise_;\n  }\n\n  resetForTesting() {\n    if (this.pending_) {\n      // There is a pending request that may set this.value_ at any time.\n      // Therefore, it can't be guaranteed that this object is actually in a\n      // clean state.\n      throw new Error('Unsafe call to resetForTesting');\n    }\n    this.promise_ = undefined;\n    this.value_ = undefined;\n    this.pending_ = false;\n  }\n}\nexports.HighEntropyValue = HighEntropyValue;\n\n/**\n * An object that wraps a version string.\n * This allows for easy version comparisons.\n */\nclass Version {\n  /**\n   * @param {string} versionString The underlying version string.\n   */\n  constructor(versionString) {\n    /**\n     * @const {string}\n     * @private\n     */\n    this.versionString_ = versionString;\n  }\n\n  /**\n   * Returns the underlying version string.\n   * @return {string}\n   */\n  toVersionStringForLogging() {\n    return this.versionString_;\n  }\n\n  /**\n   * Returns true if the underlying version string is equal to or greater than\n   * the given version.\n   * @param {string} version The version to compare against.\n   * @return {boolean}\n   */\n  isAtLeast(version) {\n    return compareVersions(this.versionString_, version) >= 0;\n  }\n}\nexports.Version = Version;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Provides access to high-entropy user agent values.\n */\n\ngoog.module('goog.labs.userAgent.highEntropy.highEntropyData');\n\nconst {HighEntropyValue} = goog.require('goog.labs.userAgent.highEntropy.highEntropyValue');\n\n/**\n * fullVersionList is currently not implemented in Chromium.\n * TODO(user): When fullVersionList is added, remove this value.\n */\nlet fullVersionListAvailable = false;\n\n/**\n * A helper function to check whether fullVersionList is available in the\n * current browser.\n * TODO(user): When fullVersionList is added, move hasFullVersionList()\n * to browser.js, and inline the browser version check. For example, if it is\n * implemented in Chromium 101, have hasFullVersionList simply return\n * `browser.versionOf(CHROMIUM) >= 101`.\n * @return {boolean}\n */\nfunction hasFullVersionList() {\n  return fullVersionListAvailable;\n}\nexports.hasFullVersionList = hasFullVersionList;\n\n/**\n * A test-only function to set whether it should be assumed fullVersionList is\n * available in the browser.\n * TODO(user): When fullVersionList is added, remove this function, as\n * behavior when fullVersionList is either present or absent would be testable\n * by setting the user agent and user agent data accordingly.\n * @param {boolean} value\n */\nfunction setHasFullVersionListForTesting(value) {\n  fullVersionListAvailable = value;\n}\nexports.setHasFullVersionListForTesting = setHasFullVersionListForTesting;\n\n/**\n * @type {!HighEntropyValue<!Array<!NavigatorUABrandVersion>>}\n */\nconst fullVersionList = new HighEntropyValue('fullVersionList');\nexports.fullVersionList = fullVersionList;\n\n/**\n * @type {!HighEntropyValue<string>}\n */\nconst platformVersion = new HighEntropyValue('platformVersion');\nexports.platformVersion = platformVersion;\n\n/**\n * Reset all high-entropy values to their initial state.\n */\nfunction resetAllForTesting() {\n  fullVersionList.resetForTesting();\n  platformVersion.resetForTesting();\n}\nexports.resetAllForTesting = resetAllForTesting;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Closure user agent detection (Browser).\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>\n * For more information on rendering engine, platform, or device see the other\n * sub-namespaces in goog.labs.userAgent, goog.labs.userAgent.platform,\n * goog.labs.userAgent.device respectively.)\n */\n\ngoog.module('goog.labs.userAgent.browser');\ngoog.module.declareLegacyNamespace();\n\nconst googAsserts = goog.require('goog.asserts');\nconst util = goog.require('goog.labs.userAgent.util');\nconst {AsyncValue, Version} = goog.require('goog.labs.userAgent.highEntropy.highEntropyValue');\nconst {compareVersions} = goog.require('goog.string.internal');\nconst {fullVersionList, hasFullVersionList} = goog.require('goog.labs.userAgent.highEntropy.highEntropyData');\n\n// TODO(nnaze): Refactor to remove excessive exclusion logic in matching\n// functions.\n\n/**\n * A browser brand represents an opaque string that is used for making\n * brand-specific version checks in userAgentData.\n * @enum {string}\n */\nconst Brand = {\n  /**\n   * The browser brand for Android Browser.\n   * Do not depend on the value of this string. Because Android Browser has not\n   * implemented userAgentData yet, the value of this string is not guaranteed\n   * to stay the same in future revisions.\n   */\n  ANDROID_BROWSER: 'Android Browser',\n  /**\n   * The browser brand for Chromium, including Chromium-based Edge and Opera.\n   */\n  CHROMIUM: 'Chromium',\n  /**\n   * The browser brand for Edge.\n   * This brand can be used to get the version of both EdgeHTML and\n   * Chromium-based Edge.\n   */\n  EDGE: 'Microsoft Edge',\n  /**\n   * The browser brand for Firefox.\n   * Do not depend on the value of this string. Because Firefox has not\n   * implemented userAgentData yet, the value of this string is not guaranteed\n   * to stay the same in future revisions.\n   */\n  FIREFOX: 'Firefox',\n  /**\n   * The browser brand for Internet Explorer.\n   * Do not depend on the value of this string. Because IE will never support\n   * userAgentData, the value of this string should be treated as opaque (it's\n   * used internally for legacy-userAgent fallback).\n   */\n  IE: 'Internet Explorer',\n  /**\n   * The browser brand for Opera.\n   * This brand can be used to get the version of both Presto- and\n   * Chromium-based Opera.\n   */\n  OPERA: 'Opera',\n  /**\n   * The browser brand for Safari.\n   * Do not depend on the value of this string. Because Safari has not\n   * implemented userAgentData yet, the value of this string is not guaranteed\n   * to stay the same in future revisions.\n   */\n  SAFARI: 'Safari',\n  /**\n   * The browser brand for Silk.\n   * See\n   * https://docs.aws.amazon.com/silk/latest/developerguide/what-is-silk.html\n   * Do not depend on the value of this string. Because Silk does not\n   * identify itself in userAgentData yet, the value of this string is not\n   * guaranteed to stay the same in future revisions.\n   */\n  SILK: 'Silk',\n};\nexports.Brand = Brand;\n\n/**\n * @return {boolean} Whether to use navigator.userAgentData to determine\n * browser's brand.\n */\nfunction useUserAgentDataBrand() {\n  if (util.ASSUME_CLIENT_HINTS_SUPPORT) return true;\n  const userAgentData = util.getUserAgentData();\n  return !!userAgentData && userAgentData.brands.length > 0;\n}\n\n/**\n * @return {boolean} Whether the user's browser is Opera. Note: Chromium based\n *     Opera (Opera 15+) is detected as Chrome to avoid unnecessary special\n *     casing.\n */\nfunction matchOpera() {\n  if (useUserAgentDataBrand()) {\n    // Pre-Chromium Edge doesn't support navigator.userAgentData.\n    return false;\n  }\n  return util.matchUserAgent('Opera');\n}\n\n/** @return {boolean} Whether the user's browser is IE. */\nfunction matchIE() {\n  if (useUserAgentDataBrand()) {\n    // IE doesn't support navigator.userAgentData.\n    return false;\n  }\n  return util.matchUserAgent('Trident') || util.matchUserAgent('MSIE');\n}\n\n/**\n * @return {boolean} Whether the user's browser is Edge. This refers to\n *     EdgeHTML based Edge.\n */\nfunction matchEdgeHtml() {\n  if (useUserAgentDataBrand()) {\n    // Pre-Chromium Edge doesn't support navigator.userAgentData.\n    return false;\n  }\n  return util.matchUserAgent('Edge');\n}\n\n/** @return {boolean} Whether the user's browser is Chromium based Edge. */\nfunction matchEdgeChromium() {\n  if (useUserAgentDataBrand()) {\n    return util.matchUserAgentDataBrand(Brand.EDGE);\n  }\n  return util.matchUserAgent('Edg/');\n}\n\n/** @return {boolean} Whether the user's browser is Chromium based Opera. */\nfunction matchOperaChromium() {\n  if (useUserAgentDataBrand()) {\n    return util.matchUserAgentDataBrand(Brand.OPERA);\n  }\n  return util.matchUserAgent('OPR');\n}\n\n/** @return {boolean} Whether the user's browser is Firefox. */\nfunction matchFirefox() {\n  // Firefox doesn't support navigator.userAgentData yet, so use\n  // navigator.userAgent.\n  return util.matchUserAgent('Firefox') || util.matchUserAgent('FxiOS');\n}\n\n/** @return {boolean} Whether the user's browser is Safari. */\nfunction matchSafari() {\n  // Apple-based browsers don't support navigator.userAgentData yet, so use\n  // navigator.userAgent.\n  return util.matchUserAgent('Safari') &&\n      !(matchChrome() || matchCoast() || matchOpera() || matchEdgeHtml() ||\n        matchEdgeChromium() || matchOperaChromium() || matchFirefox() ||\n        isSilk() || util.matchUserAgent('Android'));\n}\n\n/**\n * @return {boolean} Whether the user's browser is Coast (Opera's Webkit-based\n *     iOS browser).\n */\nfunction matchCoast() {\n  if (useUserAgentDataBrand()) {\n    // Coast doesn't support navigator.userAgentData.\n    return false;\n  }\n  return util.matchUserAgent('Coast');\n}\n\n/** @return {boolean} Whether the user's browser is iOS Webview. */\nfunction matchIosWebview() {\n  // Apple-based browsers don't support navigator.userAgentData yet, so use\n  // navigator.userAgent.\n  // iOS Webview does not show up as Chrome or Safari.\n  return (util.matchUserAgent('iPad') || util.matchUserAgent('iPhone')) &&\n      !matchSafari() && !matchChrome() && !matchCoast() && !matchFirefox() &&\n      util.matchUserAgent('AppleWebKit');\n}\n\n/**\n * @return {boolean} Whether the user's browser is any Chromium browser. This\n *     returns true for Chrome, Opera 15+, and Edge Chromium.\n */\nfunction matchChrome() {\n  if (useUserAgentDataBrand()) {\n    return util.matchUserAgentDataBrand(Brand.CHROMIUM);\n  }\n  return ((util.matchUserAgent('Chrome') || util.matchUserAgent('CriOS')) &&\n          !matchEdgeHtml()) ||\n      isSilk();\n}\n\n/** @return {boolean} Whether the user's browser is the Android browser. */\nfunction matchAndroidBrowser() {\n  // Android can appear in the user agent string for Chrome on Android.\n  // This is not the Android standalone browser if it does.\n  return util.matchUserAgent('Android') &&\n      !(isChrome() || isFirefox() || isOpera() || isSilk());\n}\n\n/** @return {boolean} Whether the user's browser is Opera. */\nconst isOpera = matchOpera;\nexports.isOpera = isOpera;\n\n/** @return {boolean} Whether the user's browser is IE. */\nconst isIE = matchIE;\nexports.isIE = isIE;\n\n/** @return {boolean} Whether the user's browser is EdgeHTML based Edge. */\nconst isEdge = matchEdgeHtml;\nexports.isEdge = isEdge;\n\n/** @return {boolean} Whether the user's browser is Chromium based Edge. */\nconst isEdgeChromium = matchEdgeChromium;\nexports.isEdgeChromium = isEdgeChromium;\n\n/** @return {boolean} Whether the user's browser is Chromium based Opera. */\nconst isOperaChromium = matchOperaChromium;\nexports.isOperaChromium = isOperaChromium;\n\n/** @return {boolean} Whether the user's browser is Firefox. */\nconst isFirefox = matchFirefox;\nexports.isFirefox = isFirefox;\n\n/** @return {boolean} Whether the user's browser is Safari. */\nconst isSafari = matchSafari;\nexports.isSafari = isSafari;\n\n/**\n * @return {boolean} Whether the user's browser is Coast (Opera's Webkit-based\n *     iOS browser).\n */\nconst isCoast = matchCoast;\nexports.isCoast = isCoast;\n\n/** @return {boolean} Whether the user's browser is iOS Webview. */\nconst isIosWebview = matchIosWebview;\nexports.isIosWebview = isIosWebview;\n\n/**\n * @return {boolean} Whether the user's browser is any Chromium based browser (\n *     Chrome, Blink-based Opera (15+) and Edge Chromium).\n */\nconst isChrome = matchChrome;\nexports.isChrome = isChrome;\n\n/** @return {boolean} Whether the user's browser is the Android browser. */\nconst isAndroidBrowser = matchAndroidBrowser;\nexports.isAndroidBrowser = isAndroidBrowser;\n\n/**\n * For more information, see:\n * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html\n * @return {boolean} Whether the user's browser is Silk.\n */\nfunction isSilk() {\n  // As of Silk 93, Silk does not identify itself in userAgentData.brands.\n  // When Silk changes this behavior, update this method to call\n  // matchUserAgentDataBrand (akin to isChrome, etc.)\n  return util.matchUserAgent('Silk');\n}\nexports.isSilk = isSilk;\n\n/**\n * A helper function that returns a function mapping a list of candidate\n * version tuple keys to the first version string present under a key.\n * Ex:\n * <code>\n * // Arg extracted from \"Foo/1.2.3 Bar/0.2021\"\n * const mapVersion = createVersionMap([[\"Foo\", \"1.2.3\"], [\"Bar\", \"0.2021\"]]);\n * mapVersion([\"Bar\", \"Foo\"]); // returns \"0.2021\"\n * mapVersion([\"Baz\", \"Foo\"]); // returns \"1.2.3\"\n * mapVersion([\"Baz\", \"???\"]); // returns \"\"\n * </code>\n * @param {!Array<!Array<string>>} versionTuples Version tuples pre-extracted\n *     from a user agent string.\n * @return {function(!Array<string>): string} The version string, or empty\n * string if it doesn't exist under the given key.\n */\nfunction createVersionMap(versionTuples) {\n  // Construct a map for easy lookup.\n  const versionMap = {};\n  versionTuples.forEach((tuple) => {\n    // Note that the tuple is of length three, but we only care about the\n    // first two.\n    const key = tuple[0];\n    const value = tuple[1];\n    versionMap[key] = value;\n  });\n\n  // Gives the value with the first key it finds, otherwise empty string.\n  return (keys) => versionMap[keys.find((key) => key in versionMap)] || '';\n}\n\n/**\n * Returns the browser version.\n *\n * Note that for browsers with multiple brands, this function assumes a primary\n * brand and returns the version for that brand.\n *\n * Additionally, this function is not userAgentData-aware and will return\n * incorrect values when the User Agent string is frozen. The current status of\n * User Agent string freezing is available here:\n * https://www.chromestatus.com/feature/5704553745874944\n *\n * To mitigate both of these potential issues, use\n * getVersionStringForLogging() or fullVersionOf() instead.\n *\n * @return {string} The browser version or empty string if version cannot be\n *     determined. Note that for Internet Explorer, this returns the version of\n *     the browser, not the version of the rendering engine. (IE 8 in\n *     compatibility mode will return 8.0 rather than 7.0. To determine the\n *     rendering engine version, look at document.documentMode instead. See\n *     http://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx for more\n *     details.)\n */\nfunction getVersion() {\n  const userAgentString = util.getUserAgent();\n\n  // Special case IE since IE's version is inside the parenthesis and\n  // without the '/'.\n  if (isIE()) {\n    return getIEVersion(userAgentString);\n  }\n\n  const versionTuples = util.extractVersionTuples(userAgentString);\n  const lookUpValueWithKeys = createVersionMap(versionTuples);\n\n  // Check Opera before Chrome since Opera 15+ has \"Chrome\" in the string.\n  // See\n  // http://my.opera.com/ODIN/blog/2013/07/15/opera-user-agent-strings-opera-15-and-beyond\n  if (isOpera()) {\n    // Opera 10 has Version/10.0 but Opera/9.8, so look for \"Version\" first.\n    // Opera uses 'OPR' for more recent UAs.\n    return lookUpValueWithKeys(['Version', 'Opera']);\n  }\n\n  // Check Edge before Chrome since it has Chrome in the string.\n  if (isEdge()) {\n    return lookUpValueWithKeys(['Edge']);\n  }\n\n  // Check Chromium Edge before Chrome since it has Chrome in the string.\n  if (isEdgeChromium()) {\n    return lookUpValueWithKeys(['Edg']);\n  }\n\n  // Check Silk before Chrome since it may have Chrome in its string and be\n  // treated as Chrome.\n  if (isSilk()) {\n    return lookUpValueWithKeys(['Silk']);\n  }\n\n  if (isChrome()) {\n    return lookUpValueWithKeys(['Chrome', 'CriOS', 'HeadlessChrome']);\n  }\n\n  // Usually products browser versions are in the third tuple after \"Mozilla\"\n  // and the engine.\n  const tuple = versionTuples[2];\n  return tuple && tuple[1] || '';\n}\nexports.getVersion = getVersion;\n\n/**\n * Returns whether the current browser's version is at least as high as the\n * given one.\n *\n * Note that for browsers with multiple brands, this function assumes a primary\n * brand and checks the version for that brand.\n *\n * Additionally, this function is not userAgentData-aware and will return\n * incorrect values when the User Agent string is frozen. The current status of\n * User Agent string freezing is available here:\n * https://www.chromestatus.com/feature/5704553745874944\n *\n * To mitigate both of these potential issues, use isAtLeast()/isAtMost() or\n * fullVersionOf() instead.\n *\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the browser version is higher or the same as the\n *     given version.\n * @deprecated Use isAtLeast()/isAtMost() instead.\n */\nfunction isVersionOrHigher(version) {\n  return compareVersions(getVersion(), version) >= 0;\n}\nexports.isVersionOrHigher = isVersionOrHigher;\n\n/**\n * A helper function to determine IE version. More information:\n * http://msdn.microsoft.com/en-us/library/ie/bg182625(v=vs.85).aspx#uaString\n * http://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx\n * http://blogs.msdn.com/b/ie/archive/2010/03/23/introducing-ie9-s-user-agent-string.aspx\n * http://blogs.msdn.com/b/ie/archive/2009/01/09/the-internet-explorer-8-user-agent-string-updated-edition.aspx\n * @param {string} userAgent the User-Agent.\n * @return {string}\n */\nfunction getIEVersion(userAgent) {\n  // IE11 may identify itself as MSIE 9.0 or MSIE 10.0 due to an IE 11 upgrade\n  // bug. Example UA:\n  // Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; rv:11.0)\n  // like Gecko.\n  // See http://www.whatismybrowser.com/developers/unknown-user-agent-fragments.\n  const rv = /rv: *([\\d\\.]*)/.exec(userAgent);\n  if (rv && rv[1]) {\n    return rv[1];\n  }\n\n  let version = '';\n  const msie = /MSIE +([\\d\\.]+)/.exec(userAgent);\n  if (msie && msie[1]) {\n    // IE in compatibility mode usually identifies itself as MSIE 7.0; in this\n    // case, use the Trident version to determine the version of IE. For more\n    // details, see the links above.\n    const tridentVersion = /Trident\\/(\\d.\\d)/.exec(userAgent);\n    if (msie[1] == '7.0') {\n      if (tridentVersion && tridentVersion[1]) {\n        switch (tridentVersion[1]) {\n          case '4.0':\n            version = '8.0';\n            break;\n          case '5.0':\n            version = '9.0';\n            break;\n          case '6.0':\n            version = '10.0';\n            break;\n          case '7.0':\n            version = '11.0';\n            break;\n        }\n      } else {\n        version = '7.0';\n      }\n    } else {\n      version = msie[1];\n    }\n  }\n  return version;\n}\n\n/**\n * A helper function to return the navigator.userAgent-supplied full version\n * number of the current browser or an empty string, based on whether the\n * current browser is the one specified.\n * @param {string} browser The brand whose version should be returned.\n * @return {string}\n */\nfunction getFullVersionFromUserAgentString(browser) {\n  const userAgentString = util.getUserAgent();\n  // Special case IE since IE's version is inside the parenthesis and\n  // without the '/'.\n  if (browser === Brand.IE) {\n    return isIE() ? getIEVersion(userAgentString) : '';\n  }\n\n  const versionTuples = util.extractVersionTuples(userAgentString);\n  const lookUpValueWithKeys = createVersionMap(versionTuples);\n  switch (browser) {\n    case Brand.OPERA:\n      // Opera 10 has Version/10.0 but Opera/9.8, so look for \"Version\"\n      // first. Opera uses 'OPR' for more recent UAs.\n      if (isOpera()) {\n        return lookUpValueWithKeys(['Version', 'Opera']);\n      } else if (isOperaChromium()) {\n        return lookUpValueWithKeys(['OPR']);\n      }\n      break;\n    case Brand.EDGE:\n      if (isEdge()) {\n        return lookUpValueWithKeys(['Edge']);\n      } else if (isEdgeChromium()) {\n        return lookUpValueWithKeys(['Edg']);\n      }\n      break;\n    case Brand.CHROMIUM:\n      if (isChrome()) {\n        return lookUpValueWithKeys(['Chrome', 'CriOS', 'HeadlessChrome']);\n      }\n      break;\n  }\n\n  // For the following browsers, the browser version is in the third tuple after\n  // \"Mozilla\" and the engine.\n  if ((browser === Brand.FIREFOX && isFirefox()) ||\n      (browser === Brand.SAFARI && isSafari()) ||\n      (browser === Brand.ANDROID_BROWSER && isAndroidBrowser()) ||\n      (browser === Brand.SILK && isSilk())) {\n    const tuple = versionTuples[2];\n    return tuple && tuple[1] || '';\n  }\n\n  return '';\n}\n\n/**\n * Returns the major version of the given browser brand, or NaN if the current\n * browser is not the given brand.\n * Note that the major version number may be different depending on which\n * browser is specified. The returned value can be used to make browser version\n * comparisons using comparison operators.\n * @deprecated Use isAtLeast or isAtMost instead.\n * @param {!Brand} browser The brand whose version should be returned.\n * @return {number} The major version number associated with the current\n * browser under the given brand, or NaN if the current browser doesn't match\n * the given brand.\n */\nfunction versionOf(browser) {\n  let versionParts;\n  // Silk currently does not identify itself in its userAgentData.brands array,\n  // so if checking its version, always fall back to the user agent string.\n  if (useUserAgentDataBrand() && browser !== Brand.SILK) {\n    const data = util.getUserAgentData();\n    const matchingBrand = data.brands.find(({brand}) => brand === browser);\n    if (!matchingBrand || !matchingBrand.version) {\n      return NaN;\n    }\n    versionParts = matchingBrand.version.split('.');\n  } else {\n    const fullVersion = getFullVersionFromUserAgentString(browser);\n    if (fullVersion === '') {\n      return NaN;\n    }\n    versionParts = fullVersion.split('.');\n  }\n  if (versionParts.length === 0) {\n    return NaN;\n  }\n  const majorVersion = versionParts[0];\n  return Number(majorVersion);  // Returns NaN if it is not parseable.\n}\nexports.versionOf = versionOf;\n\n/**\n * Returns true if the current browser matches the given brand and is at least\n * the given major version. The major version must be a whole number (i.e.\n * decimals should not be used to represent a minor version).\n * @param {!Brand} brand The brand whose version should be returned.\n * @param {number} majorVersion The major version number to compare against.\n *     This must be a whole number.\n * @return {boolean} Whether the current browser both matches the given brand\n *     and is at least the given version.\n */\nfunction isAtLeast(brand, majorVersion) {\n  googAsserts.assert(\n      Math.floor(majorVersion) === majorVersion,\n      'Major version must be an integer');\n  return versionOf(brand) >= majorVersion;\n}\nexports.isAtLeast = isAtLeast;\n\n/**\n * Returns true if the current browser matches the given brand and is at most\n * the given version. The major version must be a whole number (i.e. decimals\n * should not be used to represent a minor version).\n * @param {!Brand} brand The brand whose version should be returned.\n * @param {number} majorVersion The major version number to compare against.\n *     This must be a whole number.\n * @return {boolean} Whether the current browser both matches the given brand\n *     and is at most the given version.\n */\nfunction isAtMost(brand, majorVersion) {\n  googAsserts.assert(\n      Math.floor(majorVersion) === majorVersion,\n      'Major version must be an integer');\n  return versionOf(brand) <= majorVersion;\n}\nexports.isAtMost = isAtMost;\n\n/**\n * Loads the high-entropy browser brand/version data and wraps the correct\n * version string in a Version object.\n * @implements {AsyncValue<!Version>}\n */\nclass HighEntropyBrandVersion {\n  /**\n   * @param {string} brand The brand whose version is retrieved in this\n   *     container.\n   */\n  constructor(brand) {\n    /**\n     * @const {string}\n     * @private\n     */\n    this.brand_ = brand;\n  }\n\n  /**\n   * @return {!Version|undefined}\n   * @override\n   */\n  getIfLoaded() {\n    const loadedVersionList = fullVersionList.getIfLoaded();\n    if (loadedVersionList !== undefined) {\n      const matchingBrand =\n          loadedVersionList.find(({brand}) => this.brand_ === brand);\n      googAsserts.assertExists(matchingBrand);\n      return new Version(matchingBrand.version);\n    }\n    return;\n  }\n\n  /**\n   * @return {!Promise<!Version>}\n   * @override\n   */\n  async load() {\n    const loadedVersionList = await fullVersionList.load();\n    const matchingBrand =\n        loadedVersionList.find(({brand}) => this.brand_ === brand);\n    googAsserts.assertExists(matchingBrand);\n    return new Version(matchingBrand.version);\n  }\n}\n\n/**\n * Wraps a version string in a Version object.\n * @implements {AsyncValue<!Version>}\n */\nclass UserAgentStringFallbackBrandVersion {\n  /**\n   * @param {string} versionString\n   */\n  constructor(versionString) {\n    /**\n     * @const {!Version}\n     * @private\n     */\n    this.version_ = new Version(versionString);\n  }\n\n  /**\n   * @return {!Version|undefined}\n   * @override\n   */\n  getIfLoaded() {\n    return this.version_;\n  }\n\n  /**\n   * @return {!Promise<!Version>}\n   * @override\n   */\n  async load() {\n    return this.version_;\n  }\n}\n\n/**\n * Requests all full browser versions to be cached.  When the returned promise\n * resolves, subsequent calls to `fullVersionOf(...).getIfLoaded()` will return\n * a value.\n *\n * This method should be avoided in favor of directly awaiting\n * `fullVersionOf(...).load()` where it is used.\n *\n * @return {!Promise<void>}\n */\nasync function loadFullVersions() {\n  if (useUserAgentDataBrand() && hasFullVersionList()) {\n    await fullVersionList.load();\n  }\n}\nexports.loadFullVersions = loadFullVersions;\n\n/**\n * Returns an object that provides access to the full version string of the\n * current browser -- or undefined, based on whether the current browser matches\n * the requested browser brand. Note that the full version string is a\n * high-entropy value, and must be asynchronously loaded before it can be\n * accessed synchronously.\n * @param {!Brand} browser The brand whose version should be returned.\n * @return {!AsyncValue<!Version>|undefined} An object that can be used\n *     to get or load the full version string as a high-entropy value, or\n * undefined if the current browser doesn't match the given brand.\n */\nfunction fullVersionOf(browser) {\n  // Silk currently does not identify itself in its userAgentData.brands array,\n  // so if checking its version, always fall back to the user agent string.\n  if (useUserAgentDataBrand() && hasFullVersionList()) {\n    const data = util.getUserAgentData();\n    // Operate under the assumption that the low-entropy and high-entropy lists\n    // of brand/version pairs contain an identical set of brands. Therefore, if\n    // the low-entropy list doesn't contain the given brand, return undefined.\n    if (!data.brands.find(({brand}) => brand === browser)) {\n      return undefined;\n    }\n    return new HighEntropyBrandVersion(browser);\n  } else {\n    const fullVersionFromUserAgentString =\n        getFullVersionFromUserAgentString(browser);\n    if (fullVersionFromUserAgentString === '') {\n      return undefined;\n    }\n    return new UserAgentStringFallbackBrandVersion(\n        fullVersionFromUserAgentString);\n  }\n}\nexports.fullVersionOf = fullVersionOf;\n\n/**\n * Returns a version string for the current browser or undefined, based on\n * whether the current browser is the one specified.\n * This value should ONLY be used for logging/debugging purposes. Do not use it\n * to branch code paths. For comparing versions, use isAtLeast()/isAtMost() or\n * fullVersionOf() instead.\n * @param {!Brand} browser The brand whose version should be returned.\n * @return {string} The version as a string.\n */\nfunction getVersionStringForLogging(browser) {\n  if (useUserAgentDataBrand()) {\n    const fullVersionObj = fullVersionOf(browser);\n    if (fullVersionObj) {\n      const fullVersion = fullVersionObj.getIfLoaded();\n      if (fullVersion) {\n        return fullVersion.toVersionStringForLogging();\n      }\n      // No full version, return the major version instead.\n      const data = util.getUserAgentData();\n      const matchingBrand = data.brands.find(({brand}) => brand === browser);\n      // Checking for the existence of matchingBrand is not necessary because\n      // the existence of fullVersionObj implies that there is already a\n      // matching brand.\n      googAsserts.assertExists(matchingBrand);\n      return matchingBrand.version;\n    }\n    // If fullVersionObj is undefined, this doesn't mean that the full version\n    // is unavailable, but rather that the current browser doesn't match the\n    // input `browser` argument.\n    return '';\n  } else {\n    return getFullVersionFromUserAgentString(browser);\n  }\n}\nexports.getVersionStringForLogging = getVersionStringForLogging;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for HTML element tag names.\n */\ngoog.provide('goog.dom.tags');\n\ngoog.require('goog.object');\n\n\n/**\n * The void elements specified by\n * http://www.w3.org/TR/html-markup/syntax.html#void-elements.\n * @const @private {!Object<string, boolean>}\n */\ngoog.dom.tags.VOID_TAGS_ = goog.object.createSet(\n    'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',\n    'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr');\n\n\n/**\n * Checks whether the tag is void (with no contents allowed and no legal end\n * tag), for example 'br'.\n * @param {string} tagName The tag name in lower case.\n * @return {boolean}\n */\ngoog.dom.tags.isVoidTag = function(tagName) {\n  'use strict';\n  return goog.dom.tags.VOID_TAGS_[tagName] === true;\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n/**\n * @fileoverview The SafeHtml type and its builders.\n *\n * TODO(xtof): Link to document stating type contract.\n */\n\ngoog.module('goog.html.SafeHtml');\ngoog.module.declareLegacyNamespace();\n\nconst Const = goog.require('goog.string.Const');\nconst Dir = goog.require('goog.i18n.bidi.Dir');\nconst DirectionalString = goog.require('goog.i18n.bidi.DirectionalString');\nconst SafeScript = goog.require('goog.html.SafeScript');\nconst SafeStyle = goog.require('goog.html.SafeStyle');\nconst SafeStyleSheet = goog.require('goog.html.SafeStyleSheet');\nconst SafeUrl = goog.require('goog.html.SafeUrl');\nconst TagName = goog.require('goog.dom.TagName');\nconst TrustedResourceUrl = goog.require('goog.html.TrustedResourceUrl');\nconst TypedString = goog.require('goog.string.TypedString');\nconst asserts = goog.require('goog.asserts');\nconst browser = goog.require('goog.labs.userAgent.browser');\nconst googArray = goog.require('goog.array');\nconst googObject = goog.require('goog.object');\nconst internal = goog.require('goog.string.internal');\nconst tags = goog.require('goog.dom.tags');\nconst trustedtypes = goog.require('goog.html.trustedtypes');\n\n\n/**\n * Token used to ensure that object is created only from this file. No code\n * outside of this file can access this token.\n * @type {!Object}\n * @const\n */\nconst CONSTRUCTOR_TOKEN_PRIVATE = {};\n\n/**\n * A string that is safe to use in HTML context in DOM APIs and HTML documents.\n *\n * A SafeHtml is a string-like object that carries the security type contract\n * that its value as a string will not cause untrusted script execution when\n * evaluated as HTML in a browser.\n *\n * Values of this type are guaranteed to be safe to use in HTML contexts,\n * such as, assignment to the innerHTML DOM property, or interpolation into\n * a HTML template in HTML PC_DATA context, in the sense that the use will not\n * result in a Cross-Site-Scripting vulnerability.\n *\n * Instances of this type must be created via the factory methods\n * (`SafeHtml.create`, `SafeHtml.htmlEscape`),\n * etc and not by invoking its constructor. The constructor intentionally takes\n * an extra parameter that cannot be constructed outside of this file and the\n * type is immutable; hence only a default instance corresponding to the empty\n * string can be obtained via constructor invocation.\n *\n * Creating SafeHtml objects HAS SIDE-EFFECTS due to calling Trusted Types Web\n * API.\n *\n * Note that there is no `SafeHtml.fromConstant`. The reason is that\n * the following code would create an unsafe HTML:\n *\n * ```\n * SafeHtml.concat(\n *     SafeHtml.fromConstant(Const.from('<script>')),\n *     SafeHtml.htmlEscape(userInput),\n *     SafeHtml.fromConstant(Const.from('<\\/script>')));\n * ```\n *\n * There's `goog.dom.constHtmlToNode` to create a node from constant strings\n * only.\n *\n * @see SafeHtml.create\n * @see SafeHtml.htmlEscape\n * @final\n * @struct\n * @implements {DirectionalString}\n * @implements {TypedString}\n */\nclass SafeHtml {\n  /**\n   * @param {!TrustedHTML|string} value\n   * @param {?Dir} dir\n   * @param {!Object} token package-internal implementation detail.\n   */\n  constructor(value, dir, token) {\n    /**\n     * The contained value of this SafeHtml.  The field has a purposely ugly\n     * name to make (non-compiled) code that attempts to directly access this\n     * field stand out.\n     * @private {!TrustedHTML|string}\n     */\n    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ =\n        (token === CONSTRUCTOR_TOKEN_PRIVATE) ? value : '';\n\n    /**\n     * This SafeHtml's directionality, or null if unknown.\n     * @private {?Dir}\n     */\n    this.dir_ = dir;\n\n    /**\n     * @override\n     * @const\n     */\n    this.implementsGoogI18nBidiDirectionalString = true;\n\n    /**\n     * @override\n     * @const {boolean}\n     */\n    this.implementsGoogStringTypedString = true;\n  }\n\n  /**\n   * @return {?Dir}\n   * @override\n   */\n  getDirection() {\n    return this.dir_;\n  }\n\n\n  /**\n   * Returns this SafeHtml's value as string.\n   *\n   * IMPORTANT: In code where it is security relevant that an object's type is\n   * indeed `SafeHtml`, use `SafeHtml.unwrap` instead of\n   * this method. If in doubt, assume that it's security relevant. In\n   * particular, note that goog.html functions which return a goog.html type do\n   * not guarantee that the returned instance is of the right type. For example:\n   *\n   * <pre>\n   * var fakeSafeHtml = new String('fake');\n   * fakeSafeHtml.__proto__ = SafeHtml.prototype;\n   * var newSafeHtml = SafeHtml.htmlEscape(fakeSafeHtml);\n   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by\n   * // SafeHtml.htmlEscape() as fakeSafeHtml\n   * // instanceof SafeHtml.\n   * </pre>\n   *\n   * @return {string}\n   * @see SafeHtml.unwrap\n   * @override\n   */\n  getTypedStringValue() {\n    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();\n  }\n\n\n  /**\n   * Returns a string-representation of this value.\n   *\n   * To obtain the actual string value wrapped in a SafeHtml, use\n   * `SafeHtml.unwrap`.\n   *\n   * @return {string}\n   * @see SafeHtml.unwrap\n   * @override\n   */\n  toString() {\n    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();\n  }\n\n  /**\n   * Performs a runtime check that the provided object is indeed a SafeHtml\n   * object, and returns its value.\n   * @param {!SafeHtml} safeHtml The object to extract from.\n   * @return {string} The SafeHtml object's contained string, unless the\n   *     run-time type check fails. In that case, `unwrap` returns an innocuous\n   *     string, or, if assertions are enabled, throws\n   *     `asserts.AssertionError`.\n   */\n  static unwrap(safeHtml) {\n    return SafeHtml.unwrapTrustedHTML(safeHtml).toString();\n  }\n\n\n  /**\n   * Unwraps value as TrustedHTML if supported or as a string if not.\n   * @param {!SafeHtml} safeHtml\n   * @return {!TrustedHTML|string}\n   * @see SafeHtml.unwrap\n   */\n  static unwrapTrustedHTML(safeHtml) {\n    // Perform additional run-time type-checking to ensure that safeHtml is\n    // indeed an instance of the expected type.  This provides some additional\n    // protection against security bugs due to application code that disables\n    // type checks. Specifically, the following checks are performed:\n    // 1. The object is an instance of the expected type.\n    // 2. The object is not an instance of a subclass.\n    if (safeHtml instanceof SafeHtml && safeHtml.constructor === SafeHtml) {\n      return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;\n    } else {\n      asserts.fail(\n          `expected object of type SafeHtml, got '${safeHtml}' of type ` +\n          goog.typeOf(safeHtml));\n      return 'type_error:SafeHtml';\n    }\n  }\n\n  /**\n   * Returns HTML-escaped text as a SafeHtml object.\n   *\n   * If text is of a type that implements\n   * `DirectionalString`, the directionality of the new\n   * `SafeHtml` object is set to `text`'s directionality, if known.\n   * Otherwise, the directionality of the resulting SafeHtml is unknown (i.e.,\n   * `null`).\n   *\n   * @param {!SafeHtml.TextOrHtml_} textOrHtml The text to escape. If\n   *     the parameter is of type SafeHtml it is returned directly (no escaping\n   *     is done).\n   * @return {!SafeHtml} The escaped text, wrapped as a SafeHtml.\n   */\n  static htmlEscape(textOrHtml) {\n    if (textOrHtml instanceof SafeHtml) {\n      return textOrHtml;\n    }\n    const textIsObject = typeof textOrHtml == 'object';\n    let dir = null;\n    if (textIsObject && textOrHtml.implementsGoogI18nBidiDirectionalString) {\n      dir = /** @type {!DirectionalString} */ (textOrHtml).getDirection();\n    }\n    let textAsString;\n    if (textIsObject && textOrHtml.implementsGoogStringTypedString) {\n      textAsString =\n          /** @type {!TypedString} */ (textOrHtml).getTypedStringValue();\n    } else {\n      textAsString = String(textOrHtml);\n    }\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        internal.htmlEscape(textAsString), dir);\n  }\n\n\n  /**\n   * Returns HTML-escaped text as a SafeHtml object, with newlines changed to\n   * &lt;br&gt;.\n   * @param {!SafeHtml.TextOrHtml_} textOrHtml The text to escape. If\n   *     the parameter is of type SafeHtml it is returned directly (no escaping\n   *     is done).\n   * @return {!SafeHtml} The escaped text, wrapped as a SafeHtml.\n   */\n  static htmlEscapePreservingNewlines(textOrHtml) {\n    if (textOrHtml instanceof SafeHtml) {\n      return textOrHtml;\n    }\n    const html = SafeHtml.htmlEscape(textOrHtml);\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        internal.newLineToBr(SafeHtml.unwrap(html)), html.getDirection());\n  }\n\n\n  /**\n   * Returns HTML-escaped text as a SafeHtml object, with newlines changed to\n   * &lt;br&gt; and escaping whitespace to preserve spatial formatting.\n   * Character entity #160 is used to make it safer for XML.\n   * @param {!SafeHtml.TextOrHtml_} textOrHtml The text to escape. If\n   *     the parameter is of type SafeHtml it is returned directly (no escaping\n   *     is done).\n   * @return {!SafeHtml} The escaped text, wrapped as a SafeHtml.\n   */\n  static htmlEscapePreservingNewlinesAndSpaces(textOrHtml) {\n    if (textOrHtml instanceof SafeHtml) {\n      return textOrHtml;\n    }\n    const html = SafeHtml.htmlEscape(textOrHtml);\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        internal.whitespaceEscape(SafeHtml.unwrap(html)), html.getDirection());\n  }\n\n  /**\n   * Converts an arbitrary string into an HTML comment by HTML-escaping the\n   * contents and embedding the result between HTML comment markers.\n   *\n   * Escaping is needed because Internet Explorer supports conditional comments\n   * and so may render HTML markup within comments.\n   *\n   * @param {string} text\n   * @return {!SafeHtml}\n   */\n  static comment(text) {\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        '\u003c!--' + internal.htmlEscape(text) + '--\u003e', null);\n  }\n\n  /**\n   * Creates a SafeHtml content consisting of a tag with optional attributes and\n   * optional content.\n   *\n   * For convenience tag names and attribute names are accepted as regular\n   * strings, instead of Const. Nevertheless, you should not pass\n   * user-controlled values to these parameters. Note that these parameters are\n   * syntactically validated at runtime, and invalid values will result in\n   * an exception.\n   *\n   * Example usage:\n   *\n   * SafeHtml.create('br');\n   * SafeHtml.create('div', {'class': 'a'});\n   * SafeHtml.create('p', {}, 'a');\n   * SafeHtml.create('p', {}, SafeHtml.create('br'));\n   *\n   * SafeHtml.create('span', {\n   *   'style': {'margin': '0'}\n   * });\n   *\n   * To guarantee SafeHtml's type contract is upheld there are restrictions on\n   * attribute values and tag names.\n   *\n   * - For attributes which contain script code (on*), a Const is\n   *   required.\n   * - For attributes which contain style (style), a SafeStyle or a\n   *   SafeStyle.PropertyMap is required.\n   * - For attributes which are interpreted as URLs (e.g. src, href) a\n   *   SafeUrl, Const or string is required. If a string\n   *   is passed, it will be sanitized with SafeUrl.sanitize().\n   * - For tags which can load code or set security relevant page metadata,\n   *   more specific SafeHtml.create*() functions must be used. Tags\n   *   which are not supported by this function are applet, base, embed, iframe,\n   *   link, math, meta, object, script, style, svg, and template.\n   *\n   * @param {!TagName|string} tagName The name of the tag. Only tag names\n   *     consisting of [a-zA-Z0-9-] are allowed. Tag names documented above are\n   *     disallowed.\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping\n   *     from attribute names to their values. Only attribute names consisting\n   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the\n   *     attribute to be omitted.\n   * @param {!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>=} content Content to HTML-escape and put\n   * inside the tag. This must be empty for void tags like <br>. Array elements\n   * are concatenated.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   * @throws {!Error} If invalid tag name, attribute name, or attribute value is\n   *     provided.\n   * @throws {!asserts.AssertionError} If content for void tag is provided.\n   */\n  static create(tagName, attributes = undefined, content = undefined) {\n    SafeHtml.verifyTagName(String(tagName));\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        String(tagName), attributes, content);\n  }\n\n\n  /**\n   * Verifies if the tag name is valid and if it doesn't change the context.\n   * E.g. STRONG is fine but SCRIPT throws because it changes context. See\n   * SafeHtml.create for an explanation of allowed tags.\n   * @param {string} tagName\n   * @return {void}\n   * @throws {!Error} If invalid tag name is provided.\n   * @package\n   */\n  static verifyTagName(tagName) {\n    if (!VALID_NAMES_IN_TAG.test(tagName)) {\n      throw new Error(\n          SafeHtml.ENABLE_ERROR_MESSAGES ? `Invalid tag name <${tagName}>.` :\n                                           '');\n    }\n    if (tagName.toUpperCase() in NOT_ALLOWED_TAG_NAMES) {\n      throw new Error(\n          SafeHtml.ENABLE_ERROR_MESSAGES ?\n\n              `Tag name <${tagName}> is not allowed for SafeHtml.` :\n              '');\n    }\n  }\n\n\n  /**\n   * Creates a SafeHtml representing an iframe tag.\n   *\n   * This by default restricts the iframe as much as possible by setting the\n   * sandbox attribute to the empty string. If the iframe requires less\n   * restrictions, set the sandbox attribute as tight as possible, but do not\n   * rely on the sandbox as a security feature because it is not supported by\n   * older browsers. If a sandbox is essential to security (e.g. for third-party\n   * frames), use createSandboxIframe which checks for browser support.\n   *\n   * @see https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#attr-sandbox\n   *\n   * @param {?TrustedResourceUrl=} src The value of the src\n   *     attribute. If null or undefined src will not be set.\n   * @param {?SafeHtml=} srcdoc The value of the srcdoc attribute.\n   *     If null or undefined srcdoc will not be set.\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping\n   *     from attribute names to their values. Only attribute names consisting\n   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the\n   *     attribute to be omitted.\n   * @param {!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>=} content Content to HTML-escape and put\n   * inside the tag. Array elements are concatenated.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   * @throws {!Error} If invalid tag name, attribute name, or attribute value is\n   *     provided. If attributes\n   * contains the src or srcdoc attributes.\n   */\n  static createIframe(\n      src = undefined, srcdoc = undefined, attributes = undefined,\n      content = undefined) {\n    if (src) {\n      // Check whether this is really TrustedResourceUrl.\n      TrustedResourceUrl.unwrap(src);\n    }\n\n    const fixedAttributes = {};\n    fixedAttributes['src'] = src || null;\n    fixedAttributes['srcdoc'] = srcdoc && SafeHtml.unwrap(srcdoc);\n    const defaultAttributes = {'sandbox': ''};\n    const combinedAttrs = SafeHtml.combineAttributes(\n        fixedAttributes, defaultAttributes, attributes);\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        'iframe', combinedAttrs, content);\n  }\n\n\n  /**\n   * Creates a SafeHtml representing a sandboxed iframe tag.\n   *\n   * The sandbox attribute is enforced in its most restrictive mode, an empty\n   * string. Consequently, the security requirements for the src and srcdoc\n   * attributes are relaxed compared to SafeHtml.createIframe. This function\n   * will throw on browsers that do not support the sandbox attribute, as\n   * determined by SafeHtml.canUseSandboxIframe.\n   *\n   * The SafeHtml returned by this function can trigger downloads with no\n   * user interaction on Chrome (though only a few, further attempts are\n   * blocked). Firefox and IE will block all downloads from the sandbox.\n   *\n   * @see https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#attr-sandbox\n   * @see https://lists.w3.org/Archives/Public/public-whatwg-archive/2013Feb/0112.html\n   *\n   * @param {string|!SafeUrl=} src The value of the src\n   *     attribute. If null or undefined src will not be set.\n   * @param {string=} srcdoc The value of the srcdoc attribute.\n   *     If null or undefined srcdoc will not be set. Will not be sanitized.\n   * @param {!Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping\n   *     from attribute names to their values. Only attribute names consisting\n   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the\n   *     attribute to be omitted.\n   * @param {!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>=} content Content to HTML-escape and put\n   * inside the tag. Array elements are concatenated.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   * @throws {!Error} If invalid tag name, attribute name, or attribute value is\n   *     provided. If attributes\n   * contains the src, srcdoc or sandbox attributes. If browser does not support\n   * the sandbox attribute on iframe.\n   */\n  static createSandboxIframe(\n      src = undefined, srcdoc = undefined, attributes = undefined,\n      content = undefined) {\n    if (!SafeHtml.canUseSandboxIframe()) {\n      throw new Error(\n          SafeHtml.ENABLE_ERROR_MESSAGES ?\n              'The browser does not support sandboxed iframes.' :\n              '');\n    }\n\n    const fixedAttributes = {};\n    if (src) {\n      // Note that sanitize is a no-op on SafeUrl.\n      fixedAttributes['src'] = SafeUrl.unwrap(SafeUrl.sanitize(src));\n    } else {\n      fixedAttributes['src'] = null;\n    }\n    fixedAttributes['srcdoc'] = srcdoc || null;\n    fixedAttributes['sandbox'] = '';\n    const combinedAttrs =\n        SafeHtml.combineAttributes(fixedAttributes, {}, attributes);\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        'iframe', combinedAttrs, content);\n  }\n\n\n  /**\n   * Checks if the user agent supports sandboxed iframes.\n   * @return {boolean}\n   */\n  static canUseSandboxIframe() {\n    return goog.global['HTMLIFrameElement'] &&\n        ('sandbox' in goog.global['HTMLIFrameElement'].prototype);\n  }\n\n\n  /**\n   * Creates a SafeHtml representing a script tag with the src attribute.\n   * @param {!TrustedResourceUrl} src The value of the src\n   * attribute.\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=}\n   * attributes\n   *     Mapping from attribute names to their values. Only attribute names\n   *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined\n   *     causes the attribute to be omitted.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   * @throws {!Error} If invalid attribute name or value is provided. If\n   *     attributes  contains the\n   * src attribute.\n   */\n  static createScriptSrc(src, attributes = undefined) {\n    // TODO(mlourenco): The charset attribute should probably be blocked. If\n    // its value is attacker controlled, the script contains attacker controlled\n    // sub-strings (even if properly escaped) and the server does not set\n    // charset then XSS is likely possible.\n    // https://html.spec.whatwg.org/multipage/scripting.html#dom-script-charset\n\n    // Check whether this is really TrustedResourceUrl.\n    TrustedResourceUrl.unwrap(src);\n\n    const fixedAttributes = {'src': src};\n    const defaultAttributes = {};\n    const combinedAttrs = SafeHtml.combineAttributes(\n        fixedAttributes, defaultAttributes, attributes);\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        'script', combinedAttrs);\n  }\n\n\n  /**\n   * Creates a SafeHtml representing a script tag. Does not allow the language,\n   * src, text or type attributes to be set.\n   * @param {!SafeScript|!Array<!SafeScript>}\n   *     script Content to put inside the tag. Array elements are\n   *     concatenated.\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping\n   *     from attribute names to their values. Only attribute names consisting\n   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the\n   *     attribute to be omitted.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   * @throws {!Error} If invalid attribute name or attribute value is provided.\n   *     If attributes  contains the\n   *     language, src, text or type attribute.\n   */\n  static createScript(script, attributes = undefined) {\n    for (let attr in attributes) {\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        const attrLower = attr.toLowerCase();\n        if (attrLower == 'language' || attrLower == 'src' ||\n            attrLower == 'text' || attrLower == 'type') {\n          throw new Error(\n              SafeHtml.ENABLE_ERROR_MESSAGES ?\n                  `Cannot set \"${attrLower}\" attribute` :\n                  '');\n        }\n      }\n    }\n\n    let content = '';\n    script = googArray.concat(script);\n    for (let i = 0; i < script.length; i++) {\n      content += SafeScript.unwrap(script[i]);\n    }\n    // Convert to SafeHtml so that it's not HTML-escaped. This is safe because\n    // as part of its contract, SafeScript should have no dangerous '<'.\n    const htmlContent = SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        content, Dir.NEUTRAL);\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        'script', attributes, htmlContent);\n  }\n\n\n  /**\n   * Creates a SafeHtml representing a style tag. The type attribute is set\n   * to \"text/css\".\n   * @param {!SafeStyleSheet|!Array<!SafeStyleSheet>}\n   *     styleSheet Content to put inside the tag. Array elements are\n   *     concatenated.\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping\n   *     from attribute names to their values. Only attribute names consisting\n   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the\n   *     attribute to be omitted.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   * @throws {!Error} If invalid attribute name or attribute value is provided.\n   *     If attributes  contains the\n   *     type attribute.\n   */\n  static createStyle(styleSheet, attributes = undefined) {\n    const fixedAttributes = {'type': 'text/css'};\n    const defaultAttributes = {};\n    const combinedAttrs = SafeHtml.combineAttributes(\n        fixedAttributes, defaultAttributes, attributes);\n\n    let content = '';\n    styleSheet = googArray.concat(styleSheet);\n    for (let i = 0; i < styleSheet.length; i++) {\n      content += SafeStyleSheet.unwrap(styleSheet[i]);\n    }\n    // Convert to SafeHtml so that it's not HTML-escaped. This is safe because\n    // as part of its contract, SafeStyleSheet should have no dangerous '<'.\n    const htmlContent = SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        content, Dir.NEUTRAL);\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        'style', combinedAttrs, htmlContent);\n  }\n\n\n  /**\n   * Creates a SafeHtml representing a meta refresh tag.\n   * @param {!SafeUrl|string} url Where to redirect. If a string is\n   *     passed, it will be sanitized with SafeUrl.sanitize().\n   * @param {number=} secs Number of seconds until the page should be\n   *     reloaded. Will be set to 0 if unspecified.\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   */\n  static createMetaRefresh(url, secs = undefined) {\n    // Note that sanitize is a no-op on SafeUrl.\n    let unwrappedUrl = SafeUrl.unwrap(SafeUrl.sanitize(url));\n\n    if (browser.isIE() || browser.isEdge()) {\n      // IE/EDGE can't parse the content attribute if the url contains a\n      // semicolon. We can fix this by adding quotes around the url, but then we\n      // can't parse quotes in the URL correctly. Also, it seems that IE/EDGE\n      // did not unescape semicolons in these URLs at some point in the past. We\n      // take a best-effort approach.\n      //\n      // If the URL has semicolons (which may happen in some cases, see\n      // http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2\n      // for instance), wrap it in single quotes to protect the semicolons.\n      // If the URL has semicolons and single quotes, url-encode the single\n      // quotes as well.\n      //\n      // This is imperfect. Notice that both ' and ; are reserved characters in\n      // URIs, so this could do the wrong thing, but at least it will do the\n      // wrong thing in only rare cases.\n      if (internal.contains(unwrappedUrl, ';')) {\n        unwrappedUrl = '\\'' + unwrappedUrl.replace(/'/g, '%27') + '\\'';\n      }\n    }\n    const attributes = {\n      'http-equiv': 'refresh',\n      'content': (secs || 0) + '; url=' + unwrappedUrl,\n    };\n\n    // This function will handle the HTML escaping for attributes.\n    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n        'meta', attributes);\n  }\n\n  /**\n   * Creates a SafeHtml content with known directionality consisting of a tag\n   * with optional attributes and optional content.\n   * @param {!Dir} dir Directionality.\n   * @param {string} tagName\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes\n   * @param {!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>=} content\n   * @return {!SafeHtml} The SafeHtml content with the tag.\n   */\n  static createWithDir(\n      dir, tagName, attributes = undefined, content = undefined) {\n    const html = SafeHtml.create(tagName, attributes, content);\n    html.dir_ = dir;\n    return html;\n  }\n\n\n  /**\n   * Creates a new SafeHtml object by joining the parts with separator.\n   * @param {!SafeHtml.TextOrHtml_} separator\n   * @param {!Array<!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>>} parts Parts to join. If a part\n   *     contains an array then each member of this array is also joined with\n   * the separator.\n   * @return {!SafeHtml}\n   */\n  static join(separator, parts) {\n    const separatorHtml = SafeHtml.htmlEscape(separator);\n    let dir = separatorHtml.getDirection();\n    const content = [];\n\n    /**\n     * @param {!SafeHtml.TextOrHtml_|\n     *     !Array<!SafeHtml.TextOrHtml_>} argument\n     */\n    const addArgument = (argument) => {\n      if (Array.isArray(argument)) {\n        argument.forEach(addArgument);\n      } else {\n        const html = SafeHtml.htmlEscape(argument);\n        content.push(SafeHtml.unwrap(html));\n        const htmlDir = html.getDirection();\n        if (dir == Dir.NEUTRAL) {\n          dir = htmlDir;\n        } else if (htmlDir != Dir.NEUTRAL && dir != htmlDir) {\n          dir = null;\n        }\n      }\n    };\n\n    parts.forEach(addArgument);\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        content.join(SafeHtml.unwrap(separatorHtml)), dir);\n  }\n\n\n  /**\n   * Creates a new SafeHtml object by concatenating values.\n   * @param {...(!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>)} var_args Values to concatenate.\n   * @return {!SafeHtml}\n   */\n  static concat(var_args) {\n    return SafeHtml.join(SafeHtml.EMPTY, Array.prototype.slice.call(arguments));\n  }\n\n\n  /**\n   * Creates a new SafeHtml object with known directionality by concatenating\n   * the values.\n   * @param {!Dir} dir Directionality.\n   * @param {...(!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>)} var_args Elements of array\n   *     arguments would be processed recursively.\n   * @return {!SafeHtml}\n   */\n  static concatWithDir(dir, var_args) {\n    const html = SafeHtml.concat(Array.prototype.slice.call(arguments, 1));\n    html.dir_ = dir;\n    return html;\n  }\n\n  /**\n   * Package-internal utility method to create SafeHtml instances.\n   *\n   * @param {string} html The string to initialize the SafeHtml object with.\n   * @param {?Dir} dir The directionality of the SafeHtml to be\n   *     constructed, or null if unknown.\n   * @return {!SafeHtml} The initialized SafeHtml object.\n   * @package\n   */\n  static createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, dir) {\n    const policy = trustedtypes.getPolicyPrivateDoNotAccessOrElse();\n    const trustedHtml = policy ? policy.createHTML(html) : html;\n    return new SafeHtml(trustedHtml, dir, CONSTRUCTOR_TOKEN_PRIVATE);\n  }\n\n\n  /**\n   * Like create() but does not restrict which tags can be constructed.\n   *\n   * @param {string} tagName Tag name. Set or validated by caller.\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes\n   * @param {(!SafeHtml.TextOrHtml_|\n   *     !Array<!SafeHtml.TextOrHtml_>)=} content\n   * @return {!SafeHtml}\n   * @throws {!Error} If invalid or unsafe attribute name or value is provided.\n   * @throws {!asserts.AssertionError} If content for void tag is provided.\n   * @package\n   */\n  static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(\n      tagName, attributes = undefined, content = undefined) {\n    let dir = null;\n    let result = `<${tagName}`;\n    result += SafeHtml.stringifyAttributes(tagName, attributes);\n\n    if (content == null) {\n      content = [];\n    } else if (!Array.isArray(content)) {\n      content = [content];\n    }\n\n    if (tags.isVoidTag(tagName.toLowerCase())) {\n      asserts.assert(\n          !content.length, `Void tag <${tagName}> does not allow content.`);\n      result += '>';\n    } else {\n      const html = SafeHtml.concat(content);\n      result += '>' + SafeHtml.unwrap(html) + '</' + tagName + '>';\n      dir = html.getDirection();\n    }\n\n    const dirAttribute = attributes && attributes['dir'];\n    if (dirAttribute) {\n      if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {\n        // If the tag has the \"dir\" attribute specified then its direction is\n        // neutral because it can be safely used in any context.\n        dir = Dir.NEUTRAL;\n      } else {\n        dir = null;\n      }\n    }\n\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);\n  }\n\n\n  /**\n   * Creates a string with attributes to insert after tagName.\n   * @param {string} tagName\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes\n   * @return {string} Returns an empty string if there are no attributes,\n   *     returns a string starting with a space otherwise.\n   * @throws {!Error} If attribute value is unsafe for the given tag and\n   *     attribute.\n   * @package\n   */\n  static stringifyAttributes(tagName, attributes = undefined) {\n    let result = '';\n    if (attributes) {\n      for (let name in attributes) {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\n        if (Object.prototype.hasOwnProperty.call(attributes, name)) {\n          if (!VALID_NAMES_IN_TAG.test(name)) {\n            throw new Error(\n                SafeHtml.ENABLE_ERROR_MESSAGES ?\n                    `Invalid attribute name \"${name}\".` :\n                    '');\n          }\n          const value = attributes[name];\n          if (value == null) {\n            continue;\n          }\n          result += ' ' + getAttrNameAndValue(tagName, name, value);\n        }\n      }\n    }\n    return result;\n  }\n\n\n  /**\n   * @param {!Object<string, ?SafeHtml.AttributeValue>} fixedAttributes\n   * @param {!Object<string, string>} defaultAttributes\n   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Optional\n   *     attributes passed to create*().\n   * @return {!Object<string, ?SafeHtml.AttributeValue>}\n   * @throws {!Error} If attributes contains an attribute with the same name as\n   *     an attribute in fixedAttributes.\n   * @package\n   */\n  static combineAttributes(\n      fixedAttributes, defaultAttributes, attributes = undefined) {\n    const combinedAttributes = {};\n\n    for (const name in fixedAttributes) {\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name\n      if (Object.prototype.hasOwnProperty.call(fixedAttributes, name)) {\n        asserts.assert(name.toLowerCase() == name, 'Must be lower case');\n        combinedAttributes[name] = fixedAttributes[name];\n      }\n    }\n    for (const name in defaultAttributes) {\n      if (Object.prototype.hasOwnProperty.call(defaultAttributes, name)) {\n        asserts.assert(name.toLowerCase() == name, 'Must be lower case');\n        combinedAttributes[name] = defaultAttributes[name];\n      }\n    }\n\n    if (attributes) {\n      for (const name in attributes) {\n        if (Object.prototype.hasOwnProperty.call(attributes, name)) {\n          const nameLower = name.toLowerCase();\n          if (nameLower in fixedAttributes) {\n            throw new Error(\n                SafeHtml.ENABLE_ERROR_MESSAGES ?\n                    `Cannot override \"${nameLower}\" attribute, got \"` + name +\n                        '\" with value \"' + attributes[name] + '\"' :\n                    '');\n          }\n          if (nameLower in defaultAttributes) {\n            delete combinedAttributes[nameLower];\n          }\n          combinedAttributes[name] = attributes[name];\n        }\n      }\n    }\n\n    return combinedAttributes;\n  }\n}\n\n\n/**\n * @define {boolean} Whether to strip out error messages or to leave them in.\n */\nSafeHtml.ENABLE_ERROR_MESSAGES =\n    goog.define('goog.html.SafeHtml.ENABLE_ERROR_MESSAGES', goog.DEBUG);\n\n\n/**\n * Whether the `style` attribute is supported. Set to false to avoid the byte\n * weight of `SafeStyle` where unneeded. An error will be thrown if\n * the `style` attribute is used.\n * @define {boolean}\n */\nSafeHtml.SUPPORT_STYLE_ATTRIBUTE =\n    goog.define('goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE', true);\n\n\n/**\n * Shorthand for union of types that can sensibly be converted to strings\n * or might already be SafeHtml (as SafeHtml is a TypedString).\n * @private\n * @typedef {string|number|boolean|!TypedString|\n *           !DirectionalString}\n */\nSafeHtml.TextOrHtml_;\n\n\n/**\n * Coerces an arbitrary object into a SafeHtml object.\n *\n * If `textOrHtml` is already of type `SafeHtml`, the same\n * object is returned. Otherwise, `textOrHtml` is coerced to string, and\n * HTML-escaped. If `textOrHtml` is of a type that implements\n * `DirectionalString`, its directionality, if known, is\n * preserved.\n *\n * @param {!SafeHtml.TextOrHtml_} textOrHtml The text or SafeHtml to\n *     coerce.\n * @return {!SafeHtml} The resulting SafeHtml object.\n * @deprecated Use SafeHtml.htmlEscape.\n */\nSafeHtml.from = SafeHtml.htmlEscape;\n\n\n/**\n * @const\n */\nconst VALID_NAMES_IN_TAG = /^[a-zA-Z0-9-]+$/;\n\n\n/**\n * Set of attributes containing URL as defined at\n * http://www.w3.org/TR/html5/index.html#attributes-1.\n * @const {!Object<string,boolean>}\n */\nconst URL_ATTRIBUTES = googObject.createSet(\n    'action', 'cite', 'data', 'formaction', 'href', 'manifest', 'poster',\n    'src');\n\n\n/**\n * Tags which are unsupported via create(). They might be supported via a\n * tag-specific create method. These are tags which might require a\n * TrustedResourceUrl in one of their attributes or a restricted type for\n * their content.\n * @const {!Object<string,boolean>}\n */\nconst NOT_ALLOWED_TAG_NAMES = googObject.createSet(\n    TagName.APPLET, TagName.BASE, TagName.EMBED, TagName.IFRAME, TagName.LINK,\n    TagName.MATH, TagName.META, TagName.OBJECT, TagName.SCRIPT, TagName.STYLE,\n    TagName.SVG, TagName.TEMPLATE);\n\n\n/**\n * @typedef {string|number|!TypedString|\n *     !SafeStyle.PropertyMap|undefined|null}\n */\nSafeHtml.AttributeValue;\n\n\n/**\n * @param {string} tagName The tag name.\n * @param {string} name The attribute name.\n * @param {!SafeHtml.AttributeValue} value The attribute value.\n * @return {string} A \"name=value\" string.\n * @throws {!Error} If attribute value is unsafe for the given tag and\n *     attribute.\n * @private\n */\nfunction getAttrNameAndValue(tagName, name, value) {\n  // If it's goog.string.Const, allow any valid attribute name.\n  if (value instanceof Const) {\n    value = Const.unwrap(value);\n  } else if (name.toLowerCase() == 'style') {\n    if (SafeHtml.SUPPORT_STYLE_ATTRIBUTE) {\n      value = getStyleValue(value);\n    } else {\n      throw new Error(\n          SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute \"style\" not supported.' :\n                                           '');\n    }\n  } else if (/^on/i.test(name)) {\n    // TODO(jakubvrana): Disallow more attributes with a special meaning.\n    throw new Error(\n        SafeHtml.ENABLE_ERROR_MESSAGES ? `Attribute \"${name}` +\n                '\" requires goog.string.Const value, \"' + value + '\" given.' :\n                                         '');\n    // URL attributes handled differently according to tag.\n  } else if (name.toLowerCase() in URL_ATTRIBUTES) {\n    if (value instanceof TrustedResourceUrl) {\n      value = TrustedResourceUrl.unwrap(value);\n    } else if (value instanceof SafeUrl) {\n      value = SafeUrl.unwrap(value);\n    } else if (typeof value === 'string') {\n      value = SafeUrl.sanitize(value).getTypedStringValue();\n    } else {\n      throw new Error(\n          SafeHtml.ENABLE_ERROR_MESSAGES ?\n              `Attribute \"${name}\" on tag \"${tagName}` +\n                  '\" requires goog.html.SafeUrl, goog.string.Const, or' +\n                  ' string, value \"' + value + '\" given.' :\n              '');\n    }\n  }\n\n  // Accept SafeUrl, TrustedResourceUrl, etc. for attributes which only require\n  // HTML-escaping.\n  if (value.implementsGoogStringTypedString) {\n    // Ok to call getTypedStringValue() since there's no reliance on the type\n    // contract for security here.\n    value =\n        /** @type {!TypedString} */ (value).getTypedStringValue();\n  }\n\n  asserts.assert(\n      typeof value === 'string' || typeof value === 'number',\n      'String or number value expected, got ' + (typeof value) +\n          ' with value: ' + value);\n  return `${name}=\"` + internal.htmlEscape(String(value)) + '\"';\n}\n\n\n/**\n * Gets value allowed in \"style\" attribute.\n * @param {!SafeHtml.AttributeValue} value It could be SafeStyle or a\n *     map which will be passed to SafeStyle.create.\n * @return {string} Unwrapped value.\n * @throws {!Error} If string value is given.\n * @private\n */\nfunction getStyleValue(value) {\n  if (!goog.isObject(value)) {\n    throw new Error(\n        SafeHtml.ENABLE_ERROR_MESSAGES ?\n            'The \"style\" attribute requires goog.html.SafeStyle or map ' +\n                'of style properties, ' + (typeof value) + ' given: ' + value :\n            '');\n  }\n  if (!(value instanceof SafeStyle)) {\n    // Process the property bag into a style object.\n    value = SafeStyle.create(value);\n  }\n  return SafeStyle.unwrap(value);\n}\n\n\n/**\n * A SafeHtml instance corresponding to the HTML doctype: \"<!DOCTYPE html>\".\n * @const {!SafeHtml}\n */\nSafeHtml.DOCTYPE_HTML = /** @type {!SafeHtml} */ ({\n  // NOTE: this compiles to nothing, but hides the possible side effect of\n  // SafeHtml creation (due to calling trustedTypes.createPolicy) from the\n  // compiler so that the entire call can be removed if the result is not used.\n  valueOf: function() {\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        '<!DOCTYPE html>', Dir.NEUTRAL);\n  },\n}.valueOf());\n\n/**\n * A SafeHtml instance corresponding to the empty string.\n * @const {!SafeHtml}\n */\nSafeHtml.EMPTY = new SafeHtml(\n    (goog.global.trustedTypes && goog.global.trustedTypes.emptyHTML) || '',\n    Dir.NEUTRAL, CONSTRUCTOR_TOKEN_PRIVATE);\n\n/**\n * A SafeHtml instance corresponding to the <br> tag.\n * @const {!SafeHtml}\n */\nSafeHtml.BR = /** @type {!SafeHtml} */ ({\n  // NOTE: this compiles to nothing, but hides the possible side effect of\n  // SafeHtml creation (due to calling trustedTypes.createPolicy) from the\n  // compiler so that the entire call can be removed if the result is not used.\n  valueOf: function() {\n    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n        '<br>', Dir.NEUTRAL);\n  },\n}.valueOf());\n\n\nexports = SafeHtml;\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Unchecked conversions to create values of goog.html types from\n * plain strings.  Use of these functions could potentially result in instances\n * of goog.html types that violate their type contracts, and hence result in\n * security vulnerabilties.\n *\n * Therefore, all uses of the methods herein must be carefully security\n * reviewed.  Avoid use of the methods in this file whenever possible; instead\n * prefer to create instances of goog.html types using inherently safe builders\n * or template systems.\n *\n *\n */\n\n\ngoog.provide('goog.html.uncheckedconversions');\n\ngoog.require('goog.asserts');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeScript');\ngoog.require('goog.html.SafeStyle');\ngoog.require('goog.html.SafeStyleSheet');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\ngoog.requireType('goog.i18n.bidi.Dir');\n\n\n/**\n * Performs an \"unchecked conversion\" to SafeHtml from a plain string that is\n * known to satisfy the SafeHtml type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `html` satisfies the SafeHtml type contract in all\n * possible program states.\n *\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} html A string that is claimed to adhere to the SafeHtml\n *     contract.\n * @param {?goog.i18n.bidi.Dir=} opt_dir The optional directionality of the\n *     SafeHtml to be constructed. A null or undefined value signifies an\n *     unknown directionality.\n * @return {!goog.html.SafeHtml} The value of html, wrapped in a SafeHtml\n *     object.\n */\ngoog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract =\n    function(justification, html, opt_dir) {\n  'use strict';\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), 'must provide justification');\n  goog.asserts.assert(\n      !goog.string.internal.isEmptyOrWhitespace(\n          goog.string.Const.unwrap(justification)),\n      'must provide non-empty justification');\n  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(\n      html, opt_dir || null);\n};\n\n\n/**\n * Performs an \"unchecked conversion\" to SafeScript from a plain string that is\n * known to satisfy the SafeScript type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `script` satisfies the SafeScript type contract in\n * all possible program states.\n *\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} script The string to wrap as a SafeScript.\n * @return {!goog.html.SafeScript} The value of `script`, wrapped in a\n *     SafeScript object.\n */\ngoog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract =\n    function(justification, script) {\n  'use strict';\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), 'must provide justification');\n  goog.asserts.assert(\n      !goog.string.internal.isEmptyOrWhitespace(\n          goog.string.Const.unwrap(justification)),\n      'must provide non-empty justification');\n  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(\n      script);\n};\n\n\n/**\n * Performs an \"unchecked conversion\" to SafeStyle from a plain string that is\n * known to satisfy the SafeStyle type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `style` satisfies the SafeStyle type contract in all\n * possible program states.\n *\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} style The string to wrap as a SafeStyle.\n * @return {!goog.html.SafeStyle} The value of `style`, wrapped in a\n *     SafeStyle object.\n */\ngoog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract =\n    function(justification, style) {\n  'use strict';\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), 'must provide justification');\n  goog.asserts.assert(\n      !goog.string.internal.isEmptyOrWhitespace(\n          goog.string.Const.unwrap(justification)),\n      'must provide non-empty justification');\n  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(\n      style);\n};\n\n\n/**\n * Performs an \"unchecked conversion\" to SafeStyleSheet from a plain string\n * that is known to satisfy the SafeStyleSheet type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `styleSheet` satisfies the SafeStyleSheet type\n * contract in all possible program states.\n *\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} styleSheet The string to wrap as a SafeStyleSheet.\n * @return {!goog.html.SafeStyleSheet} The value of `styleSheet`, wrapped\n *     in a SafeStyleSheet object.\n */\ngoog.html.uncheckedconversions\n    .safeStyleSheetFromStringKnownToSatisfyTypeContract = function(\n    justification, styleSheet) {\n  'use strict';\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), 'must provide justification');\n  goog.asserts.assert(\n      !goog.string.internal.isEmptyOrWhitespace(\n          goog.string.Const.unwrap(justification)),\n      'must provide non-empty justification');\n  return goog.html.SafeStyleSheet\n      .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);\n};\n\n\n/**\n * Performs an \"unchecked conversion\" to SafeUrl from a plain string that is\n * known to satisfy the SafeUrl type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `url` satisfies the SafeUrl type contract in all\n * possible program states.\n *\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} url The string to wrap as a SafeUrl.\n * @return {!goog.html.SafeUrl} The value of `url`, wrapped in a SafeUrl\n *     object.\n */\ngoog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract =\n    function(justification, url) {\n  'use strict';\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), 'must provide justification');\n  goog.asserts.assert(\n      !goog.string.internal.isEmptyOrWhitespace(\n          goog.string.Const.unwrap(justification)),\n      'must provide non-empty justification');\n  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n\n\n/**\n * Performs an \"unchecked conversion\" to TrustedResourceUrl from a plain string\n * that is known to satisfy the TrustedResourceUrl type contract.\n *\n * IMPORTANT: Uses of this method must be carefully security-reviewed to ensure\n * that the value of `url` satisfies the TrustedResourceUrl type contract\n * in all possible program states.\n *\n *\n * @param {!goog.string.Const} justification A constant string explaining why\n *     this use of this method is safe. May include a security review ticket\n *     number.\n * @param {string} url The string to wrap as a TrustedResourceUrl.\n * @return {!goog.html.TrustedResourceUrl} The value of `url`, wrapped in\n *     a TrustedResourceUrl object.\n */\ngoog.html.uncheckedconversions\n    .trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(\n    justification, url) {\n  'use strict';\n  // unwrap() called inside an assert so that justification can be optimized\n  // away in production code.\n  goog.asserts.assertString(\n      goog.string.Const.unwrap(justification), 'must provide justification');\n  goog.asserts.assert(\n      !goog.string.internal.isEmptyOrWhitespace(\n          goog.string.Const.unwrap(justification)),\n      'must provide non-empty justification');\n  return goog.html.TrustedResourceUrl\n      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Type-safe wrappers for unsafe DOM APIs.\n *\n * This file provides type-safe wrappers for DOM APIs that can result in\n * cross-site scripting (XSS) vulnerabilities, if the API is supplied with\n * untrusted (attacker-controlled) input.  Instead of plain strings, the type\n * safe wrappers consume values of types from the goog.html package whose\n * contract promises that values are safe to use in the corresponding context.\n *\n * Hence, a program that exclusively uses the wrappers in this file (i.e., whose\n * only reference to security-sensitive raw DOM APIs are in this file) is\n * guaranteed to be free of XSS due to incorrect use of such DOM APIs (modulo\n * correctness of code that produces values of the respective goog.html types,\n * and absent code that violates type safety).\n *\n * For example, assigning to an element's .innerHTML property a string that is\n * derived (even partially) from untrusted input typically results in an XSS\n * vulnerability. The type-safe wrapper goog.dom.safe.setInnerHtml consumes a\n * value of type goog.html.SafeHtml, whose contract states that using its values\n * in a HTML context will not result in XSS. Hence a program that is free of\n * direct assignments to any element's innerHTML property (with the exception of\n * the assignment to .innerHTML in this file) is guaranteed to be free of XSS\n * due to assignment of untrusted strings to the innerHTML property.\n */\n\ngoog.provide('goog.dom.safe');\ngoog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');\n\ngoog.require('goog.asserts');\ngoog.require('goog.dom.asserts');\ngoog.require('goog.functions');\ngoog.require('goog.html.SafeHtml');\ngoog.require('goog.html.SafeScript');\ngoog.require('goog.html.SafeStyle');\ngoog.require('goog.html.SafeUrl');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\n\n\n/** @enum {string} */\ngoog.dom.safe.InsertAdjacentHtmlPosition = {\n  AFTERBEGIN: 'afterbegin',\n  AFTEREND: 'afterend',\n  BEFOREBEGIN: 'beforebegin',\n  BEFOREEND: 'beforeend'\n};\n\n\n/**\n * Inserts known-safe HTML into a Node, at the specified position.\n * @param {!Node} node The node on which to call insertAdjacentHTML.\n * @param {!goog.dom.safe.InsertAdjacentHtmlPosition} position Position where\n *     to insert the HTML.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to insert.\n */\ngoog.dom.safe.insertAdjacentHtml = function(node, position, html) {\n  'use strict';\n  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n\n\n/**\n * Tags not allowed in goog.dom.safe.setInnerHtml.\n * @private @const {!Object<string, boolean>}\n */\ngoog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {\n  'MATH': true,\n  'SCRIPT': true,\n  'STYLE': true,\n  'SVG': true,\n  'TEMPLATE': true\n};\n\n\n/**\n * Whether assigning to innerHTML results in a non-spec-compliant clean-up. Used\n * to define goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse.\n *\n * <p>As mentioned in https://stackoverflow.com/questions/28741528, re-rendering\n * an element in IE by setting innerHTML causes IE to recursively disconnect all\n * parent/children connections that were in the previous contents of the\n * element. Unfortunately, this can unexpectedly result in confusing cases where\n * a function is run (typically asynchronously) on element that has since\n * disconnected from the DOM but assumes the presence of its children. A simple\n * workaround is to remove all children first. Testing on IE11 via\n * https://jsperf.com/innerhtml-vs-removechild/239, removeChild seems to be\n * ~10x faster than innerHTML='' for a large number of children (perhaps due\n * to the latter's recursive behavior), implying that this workaround would\n * not hurt performance and might actually improve it.\n * @return {boolean}\n * @private\n */\ngoog.dom.safe.isInnerHtmlCleanupRecursive_ =\n    goog.functions.cacheReturnValue(function() {\n      'use strict';\n      // `document` missing in some test frameworks.\n      if (goog.DEBUG && typeof document === 'undefined') {\n        return false;\n      }\n      // Create 3 nested <div>s without using innerHTML.\n      // We're not chaining the appendChilds in one call,  as this breaks\n      // in a DocumentFragment.\n      var div = document.createElement('div');\n      var childDiv = document.createElement('div');\n      childDiv.appendChild(document.createElement('div'));\n      div.appendChild(childDiv);\n      // `firstChild` is null in Google Js Test.\n      if (goog.DEBUG && !div.firstChild) {\n        return false;\n      }\n      var innerChild = div.firstChild.firstChild;\n      div.innerHTML =\n          goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY);\n      return !innerChild.parentElement;\n    });\n\n\n/**\n * Assigns HTML to an element's innerHTML property. Helper to use only here and\n * in soy.js.\n * @param {?Element|?ShadowRoot} elem The element whose innerHTML is to be\n *     assigned to.\n * @param {!goog.html.SafeHtml} html\n */\ngoog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse = function(elem, html) {\n  'use strict';\n  // See comment above goog.dom.safe.isInnerHtmlCleanupRecursive_.\n  if (goog.dom.safe.isInnerHtmlCleanupRecursive_()) {\n    while (elem.lastChild) {\n      elem.removeChild(elem.lastChild);\n    }\n  }\n  elem.innerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\n\n\n/**\n * Assigns known-safe HTML to an element's innerHTML property.\n * @param {!Element|!ShadowRoot} elem The element whose innerHTML is to be\n *     assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n * @throws {Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtml = function(elem, html) {\n  'use strict';\n  if (goog.asserts.ENABLE_ASSERTS && elem.tagName) {\n    var tagName = elem.tagName.toUpperCase();\n    if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {\n      throw new Error(\n          'goog.dom.safe.setInnerHtml cannot be used to set content of ' +\n          elem.tagName + '.');\n    }\n  }\n\n  goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(elem, html);\n};\n\n\n/**\n * Assigns constant HTML to an element's innerHTML property.\n * @param {!Element} element The element whose innerHTML is to be assigned to.\n * @param {!goog.string.Const} constHtml The known-safe HTML to assign.\n * @throws {!Error} If called with one of these tags: math, script, style, svg,\n *     template.\n */\ngoog.dom.safe.setInnerHtmlFromConstant = function(element, constHtml) {\n  'use strict';\n  goog.dom.safe.setInnerHtml(\n      element,\n      goog.html.uncheckedconversions\n          .safeHtmlFromStringKnownToSatisfyTypeContract(\n              goog.string.Const.from('Constant HTML to be immediatelly used.'),\n              goog.string.Const.unwrap(constHtml)));\n};\n\n\n/**\n * Assigns known-safe HTML to an element's outerHTML property.\n * @param {!Element} elem The element whose outerHTML is to be assigned to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n */\ngoog.dom.safe.setOuterHtml = function(elem, html) {\n  'use strict';\n  elem.outerHTML = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\n\n\n/**\n * Safely assigns a URL a form element's action property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * form's action property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setFormElementAction(formEl, url);\n * which is a safe alternative to\n *   formEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} form The form element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setFormElementAction = function(form, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLFormElement(form).action =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a button element's formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * button's formaction property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setButtonFormAction(buttonEl, url);\n * which is a safe alternative to\n *   buttonEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} button The button element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setButtonFormAction = function(button, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLButtonElement(button).formAction =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n/**\n * Safely assigns a URL to an input element's formaction property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * input's formaction property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setInputFormAction(inputEl, url);\n * which is a safe alternative to\n *   inputEl.action = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!Element} input The input element whose action property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setInputFormAction = function(input, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  goog.dom.asserts.assertIsHTMLInputElement(input).formAction =\n      goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Sets the given element's style property to the contents of the provided\n * SafeStyle object.\n * @param {!Element} elem\n * @param {!goog.html.SafeStyle} style\n * @return {void}\n */\ngoog.dom.safe.setStyle = function(elem, style) {\n  'use strict';\n  elem.style.cssText = goog.html.SafeStyle.unwrap(style);\n};\n\n\n/**\n * Writes known-safe HTML to a document.\n * @param {!Document} doc The document to be written to.\n * @param {!goog.html.SafeHtml} html The known-safe HTML to assign.\n * @return {void}\n */\ngoog.dom.safe.documentWrite = function(doc, html) {\n  'use strict';\n  doc.write(goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n\n\n/**\n * Safely assigns a URL to an anchor element's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * anchor's href property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setAnchorHref(anchorEl, url);\n * which is a safe alternative to\n *   anchorEl.href = url;\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {!HTMLAnchorElement} anchor The anchor element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAnchorHref = function(anchor, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLAnchorElement(anchor);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n\n/**\n * Safely assigns a URL to an image element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * image's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLImageElement} imageElement The image element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setImageSrc = function(imageElement, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLImageElement(imageElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:image\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a audio element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * audio's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLAudioElement} audioElement The audio element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setAudioSrc = function(audioElement, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLAudioElement(audioElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:audio\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  audioElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to a video element's src property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * video's src property.  If url is of type string however, it is first\n * sanitized using goog.html.SafeUrl.sanitize.\n *\n * @param {!HTMLVideoElement} videoElement The video element whose src property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setVideoSrc = function(videoElement, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLVideoElement(videoElement);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    var allowDataUrl = /^data:video\\//i.test(url);\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url, allowDataUrl);\n  }\n  videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns a URL to an embed element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setEmbedSrc(embedEl, url);\n * which is a safe alternative to\n *   embedEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLEmbedElement} embed The embed element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n */\ngoog.dom.safe.setEmbedSrc = function(embed, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLEmbedElement(embed);\n  embed.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n};\n\n\n/**\n * Safely assigns a URL to a frame element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setFrameSrc(frameEl, url);\n * which is a safe alternative to\n *   frameEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLFrameElement} frame The frame element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n * @return {void}\n */\ngoog.dom.safe.setFrameSrc = function(frame, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLFrameElement(frame);\n  frame.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns a URL to an iframe element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrc(iframeEl, url);\n * which is a safe alternative to\n *   iframeEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n * @return {void}\n */\ngoog.dom.safe.setIframeSrc = function(iframe, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);\n};\n\n\n/**\n * Safely assigns HTML to an iframe element's srcdoc property.\n *\n * Example usage:\n *   goog.dom.safe.setIframeSrcdoc(iframeEl, safeHtml);\n * which is a safe alternative to\n *   iframeEl.srcdoc = html;\n * The latter can result in loading untrusted code.\n *\n * @param {!HTMLIFrameElement} iframe The iframe element whose srcdoc property\n *     is to be assigned to.\n * @param {!goog.html.SafeHtml} html The HTML to assign.\n * @return {void}\n */\ngoog.dom.safe.setIframeSrcdoc = function(iframe, html) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLIFrameElement(iframe);\n  iframe.srcdoc = goog.html.SafeHtml.unwrapTrustedHTML(html);\n};\n\n\n/**\n * Safely sets a link element's href and rel properties. Whether or not\n * the URL assigned to href has to be a goog.html.TrustedResourceUrl\n * depends on the value of the rel property. If rel contains \"stylesheet\"\n * then a TrustedResourceUrl is required.\n *\n * Example usage:\n *   goog.dom.safe.setLinkHrefAndRel(linkEl, url, 'stylesheet');\n * which is a safe alternative to\n *   linkEl.rel = 'stylesheet';\n *   linkEl.href = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLLinkElement} link The link element whose href property\n *     is to be assigned to.\n * @param {string|!goog.html.SafeUrl|!goog.html.TrustedResourceUrl} url The URL\n *     to assign to the href property. Must be a TrustedResourceUrl if the\n *     value assigned to rel contains \"stylesheet\". A string value is\n *     sanitized with goog.html.SafeUrl.sanitize.\n * @param {string} rel The value to assign to the rel property.\n * @return {void}\n * @throws {Error} if rel contains \"stylesheet\" and url is not a\n *     TrustedResourceUrl\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLLinkElement(link);\n  link.rel = rel;\n  if (goog.string.internal.caseInsensitiveContains(rel, 'stylesheet')) {\n    goog.asserts.assert(\n        url instanceof goog.html.TrustedResourceUrl,\n        'URL must be TrustedResourceUrl because \"rel\" contains \"stylesheet\"');\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n    const win = link.ownerDocument && link.ownerDocument.defaultView;\n    const nonce = goog.dom.safe.getStyleNonce(win);\n    if (nonce) {\n      link.setAttribute('nonce', nonce);\n    }\n  } else if (url instanceof goog.html.TrustedResourceUrl) {\n    link.href = goog.html.TrustedResourceUrl.unwrap(url);\n  } else if (url instanceof goog.html.SafeUrl) {\n    link.href = goog.html.SafeUrl.unwrap(url);\n  } else {  // string\n    // SafeUrl.sanitize must return legitimate SafeUrl when passed a string.\n    link.href = goog.html.SafeUrl.unwrap(\n        goog.html.SafeUrl.sanitizeAssertUnchanged(url));\n  }\n};\n\n\n/**\n * Safely assigns a URL to an object element's data property.\n *\n * Example usage:\n *   goog.dom.safe.setObjectData(objectEl, url);\n * which is a safe alternative to\n *   objectEl.data = url;\n * The latter can result in loading untrusted code unless setit is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLObjectElement} object The object element whose data property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n * @return {void}\n */\ngoog.dom.safe.setObjectData = function(object, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLObjectElement(object);\n  object.data = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n};\n\n\n/**\n * Safely assigns a URL to a script element's src property.\n *\n * Example usage:\n *   goog.dom.safe.setScriptSrc(scriptEl, url);\n * which is a safe alternative to\n *   scriptEl.src = url;\n * The latter can result in loading untrusted code unless it is ensured that\n * the URL refers to a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose src property\n *     is to be assigned to.\n * @param {!goog.html.TrustedResourceUrl} url The URL to assign.\n * @return {void}\n */\ngoog.dom.safe.setScriptSrc = function(script, url) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.src = goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(url);\n  goog.dom.safe.setNonceForScriptElement_(script);\n};\n\n\n/**\n * Safely assigns a value to a script element's content.\n *\n * Example usage:\n *   goog.dom.safe.setScriptContent(scriptEl, content);\n * which is a safe alternative to\n *   scriptEl.text = content;\n * The latter can result in executing untrusted code unless it is ensured that\n * the code is loaded from a trustworthy resource.\n *\n * @param {!HTMLScriptElement} script The script element whose content is being\n *     set.\n * @param {!goog.html.SafeScript} content The content to assign.\n * @return {void}\n */\ngoog.dom.safe.setScriptContent = function(script, content) {\n  'use strict';\n  goog.dom.asserts.assertIsHTMLScriptElement(script);\n  script.textContent = goog.html.SafeScript.unwrapTrustedScript(content);\n  goog.dom.safe.setNonceForScriptElement_(script);\n};\n\n\n/**\n * Set nonce-based CSPs to dynamically created scripts.\n * @param {!HTMLScriptElement} script The script element whose nonce value\n *     is to be calculated\n * @private\n */\ngoog.dom.safe.setNonceForScriptElement_ = function(script) {\n  'use strict';\n  var win = script.ownerDocument && script.ownerDocument.defaultView;\n  const nonce = goog.dom.safe.getScriptNonce(win);\n  if (nonce) {\n    script.setAttribute('nonce', nonce);\n  }\n};\n\n\n/**\n * Safely assigns a URL to a Location object's href property.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and assigned to\n * loc's href property.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.setLocationHref(document.location, redirectUrl);\n * which is a safe alternative to\n *   document.location.href = redirectUrl;\n * The latter can result in XSS vulnerabilities if redirectUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object whose href property is to be\n *     assigned to.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n\n */\ngoog.dom.safe.setLocationHref = function(loc, url) {\n  'use strict';\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.href = goog.html.SafeUrl.unwrap(safeUrl);\n};\n\n/**\n * Safely assigns the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#assign. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.assignLocation(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.assign(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * This has the same behaviour as setLocationHref, however some test\n * mock Location.assign instead of a property assignment.\n *\n * @param {!Location} loc The Location object which is to be assigned.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.assignLocation = function(loc, url) {\n  'use strict';\n  goog.dom.asserts.assertIsLocation(loc);\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.assign(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely replaces the URL of a Location object.\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and\n * passed to Location#replace. If url is of type string however, it is\n * first sanitized using goog.html.SafeUrl.sanitize.\n *\n * Example usage:\n *   goog.dom.safe.replaceLocation(document.location, newUrl);\n * which is a safe alternative to\n *   document.location.replace(newUrl);\n * The latter can result in XSS vulnerabilities if newUrl is a\n * user-/attacker-controlled value.\n *\n * @param {!Location} loc The Location object which is to be replaced.\n * @param {string|!goog.html.SafeUrl} url The URL to assign.\n * @return {void}\n * @see goog.html.SafeUrl#sanitize\n */\ngoog.dom.safe.replaceLocation = function(loc, url) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  loc.replace(goog.html.SafeUrl.unwrap(safeUrl));\n};\n\n\n/**\n * Safely opens a URL in a new window (via window.open).\n *\n * If url is of type goog.html.SafeUrl, its value is unwrapped and passed in to\n * window.open.  If url is of type string however, it is first sanitized\n * using goog.html.SafeUrl.sanitize.\n *\n * Note that this function does not prevent leakages via the referer that is\n * sent by window.open. It is advised to only use this to open 1st party URLs.\n *\n * Example usage:\n *   goog.dom.safe.openInWindow(url);\n * which is a safe alternative to\n *   window.open(url);\n * The latter can result in XSS vulnerabilities if url is a\n * user-/attacker-controlled value.\n *\n * @param {string|!goog.html.SafeUrl} url The URL to open.\n * @param {Window=} opt_openerWin Window of which to call the .open() method.\n *     Defaults to the global window.\n * @param {!goog.string.Const|string=} opt_name Name of the window to open in.\n *     Can be _top, etc as allowed by window.open(). This accepts string for\n *     legacy reasons. Pass goog.string.Const if possible.\n * @param {string=} opt_specs Comma-separated list of specifications, same as\n *     in window.open().\n * @return {Window} Window the url was opened in.\n */\ngoog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs) {\n  'use strict';\n  /** @type {!goog.html.SafeUrl} */\n  var safeUrl;\n  if (url instanceof goog.html.SafeUrl) {\n    safeUrl = url;\n  } else {\n    safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);\n  }\n  var win = opt_openerWin || goog.global;\n  // If opt_name is undefined, simply passing that in to open() causes IE to\n  // reuse the current window instead of opening a new one. Thus we pass '' in\n  // instead, which according to spec opens a new window. See\n  // https://html.spec.whatwg.org/multipage/browsers.html#dom-open .\n  var name = opt_name instanceof goog.string.Const ?\n      goog.string.Const.unwrap(opt_name) :\n      opt_name || '';\n  // Do not pass opt_specs to window.open unless it was provided by the caller.\n  // IE11 will use it as a signal to open a new window rather than a new tab\n  // (even if it is undefined).\n  if (opt_specs !== undefined) {\n    return win.open(goog.html.SafeUrl.unwrap(safeUrl), name, opt_specs);\n  } else {\n    return win.open(goog.html.SafeUrl.unwrap(safeUrl), name);\n  }\n};\n\n\n/**\n * Parses the HTML as 'text/html'.\n * @param {!DOMParser} parser\n * @param {!goog.html.SafeHtml} html The HTML to be parsed.\n * @return {!Document}\n */\ngoog.dom.safe.parseFromStringHtml = function(parser, html) {\n  'use strict';\n  return goog.dom.safe.parseFromString(parser, html, 'text/html');\n};\n\n\n/**\n * Parses the string.\n * @param {!DOMParser} parser\n * @param {!goog.html.SafeHtml} content Note: We don't have a special type for\n *     XML or SVG supported by this function so we use SafeHtml.\n * @param {string} type\n * @return {!Document}\n */\ngoog.dom.safe.parseFromString = function(parser, content, type) {\n  'use strict';\n  return parser.parseFromString(\n      goog.html.SafeHtml.unwrapTrustedHTML(content), type);\n};\n\n\n/**\n * Safely creates an HTMLImageElement from a Blob.\n *\n * Example usage:\n *     goog.dom.safe.createImageFromBlob(blob);\n * which is a safe alternative to\n *     image.src = createObjectUrl(blob)\n * The latter can result in executing malicious same-origin scripts from a bad\n * Blob.\n * @param {!Blob} blob The blob to create the image from.\n * @return {!HTMLImageElement} The image element created from the blob.\n * @throws {!Error} If called with a Blob with a MIME type other than image/.*.\n */\ngoog.dom.safe.createImageFromBlob = function(blob) {\n  'use strict';\n  // Any image/* MIME type is accepted as safe.\n  if (!/^image\\/.*/g.test(blob.type)) {\n    throw new Error(\n        'goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.');\n  }\n  var objectUrl = goog.global.URL.createObjectURL(blob);\n  var image = new goog.global.Image();\n  image.onload = function() {\n    'use strict';\n    goog.global.URL.revokeObjectURL(objectUrl);\n  };\n  goog.dom.safe.setImageSrc(\n      image,\n      goog.html.uncheckedconversions\n          .safeUrlFromStringKnownToSatisfyTypeContract(\n              goog.string.Const.from('Image blob URL.'), objectUrl));\n  return image;\n};\n\n/**\n * Creates a DocumentFragment by parsing html in the context of a Range.\n * @param {!Range} range The Range object starting from the context node to\n * create a fragment in.\n * @param {!goog.html.SafeHtml} html HTML to create a fragment from.\n * @return {?DocumentFragment}\n */\ngoog.dom.safe.createContextualFragment = function(range, html) {\n  'use strict';\n  return range.createContextualFragment(\n      goog.html.SafeHtml.unwrapTrustedHTML(html));\n};\n\n/**\n * Returns CSP script nonce, if set for any <script> tag.\n * @param {?Window=} opt_window The window context used to retrieve the nonce.\n *     Defaults to global context.\n * @return {string} CSP nonce or empty string if no nonce is present.\n */\ngoog.dom.safe.getScriptNonce = function(opt_window) {\n  return goog.dom.safe.getNonce_('script[nonce]', opt_window);\n};\n\n/**\n * Returns CSP style nonce, if set for any <style> or <link rel=\"stylesheet\">\n * tag.\n * @param {?Window=} opt_window The window context used to retrieve the nonce.\n *     Defaults to global context.\n * @return {string} CSP nonce or empty string if no nonce is present.\n */\ngoog.dom.safe.getStyleNonce = function(opt_window) {\n  return goog.dom.safe.getNonce_(\n      'style[nonce],link[rel=\"stylesheet\"][nonce]', opt_window);\n};\n\n/**\n * According to the CSP3 spec a nonce must be a valid base64 string.\n * @see https://www.w3.org/TR/CSP3/#grammardef-base64-value\n * @private @const\n */\ngoog.dom.safe.NONCE_PATTERN_ = /^[\\w+/_-]+[=]{0,2}$/;\n\n/**\n * Returns CSP nonce, if set for any tag of given type.\n * @param {string} selector Selector for locating the element with nonce.\n * @param {?Window=} win The window context used to retrieve the nonce.\n * @return {string} CSP nonce or empty string if no nonce is present.\n * @private\n */\ngoog.dom.safe.getNonce_ = function(selector, win) {\n  const doc = (win || goog.global).document;\n  if (!doc.querySelector) {\n    return '';\n  }\n  let el = doc.querySelector(selector);\n  if (el) {\n    // Try to get the nonce from the IDL property first, because browsers that\n    // implement additional nonce protection features (currently only Chrome) to\n    // prevent nonce stealing via CSS do not expose the nonce via attributes.\n    // See https://github.com/whatwg/html/issues/2369\n    const nonce = el['nonce'] || el.getAttribute('nonce');\n    if (nonce && goog.dom.safe.NONCE_PATTERN_.test(nonce)) {\n      return nonce;\n    }\n  }\n  return '';\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for string manipulation.\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string');\ngoog.provide('goog.string.Unicode');\n\ngoog.require('goog.dom.safe');\ngoog.require('goog.html.uncheckedconversions');\ngoog.require('goog.string.Const');\ngoog.require('goog.string.internal');\n\n\n/**\n * @define {boolean} Enables HTML escaping of lowercase letter \"e\" which helps\n * with detection of double-escaping as this letter is frequently used.\n */\ngoog.string.DETECT_DOUBLE_ESCAPING =\n    goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);\n\n\n/**\n * @define {boolean} Whether to force non-dom html unescaping.\n */\ngoog.string.FORCE_NON_DOM_HTML_UNESCAPING =\n    goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);\n\n\n/**\n * Common Unicode string characters.\n * @enum {string}\n */\ngoog.string.Unicode = {\n  NBSP: '\\xa0'\n};\n\n\n/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of `str`.\n * @return {boolean} True if `str` begins with `prefix`.\n */\ngoog.string.startsWith = goog.string.internal.startsWith;\n\n\n/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix`.\n */\ngoog.string.endsWith = goog.string.internal.endsWith;\n\n\n/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of `str`.\n * @return {boolean} True if `str` begins with `prefix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveStartsWith =\n    goog.string.internal.caseInsensitiveStartsWith;\n\n\n/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of `str`.\n * @return {boolean} True if `str` ends with `suffix` (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveEndsWith =\n    goog.string.internal.caseInsensitiveEndsWith;\n\n\n/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if `str1` and `str2` are the same string,\n *     ignoring case.\n */\ngoog.string.caseInsensitiveEquals = goog.string.internal.caseInsensitiveEquals;\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\"foo%s hot%s\", \"bar\", \"dog\") becomes \"foobar hotdog\".\n * @param {string} str The string containing the pattern.\n * @param {...*} var_args The items to substitute into the pattern.\n * @return {string} A copy of `str` in which each occurrence of\n *     {@code %s} has been replaced an argument from `var_args`.\n */\ngoog.string.subs = function(str, var_args) {\n  'use strict';\n  const splitParts = str.split('%s');\n  let returnString = '';\n\n  const subsArguments = Array.prototype.slice.call(arguments, 1);\n  while (subsArguments.length &&\n         // Replace up to the last split part. We are inserting in the\n         // positions between split parts.\n         splitParts.length > 1) {\n    returnString += splitParts.shift() + subsArguments.shift();\n  }\n\n  return returnString + splitParts.join('%s');  // Join unused '%s'\n};\n\n\n/**\n * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\n * and tabs) to a single space, and strips leading and trailing whitespace.\n * @param {string} str Input string.\n * @return {string} A copy of `str` with collapsed whitespace.\n */\ngoog.string.collapseWhitespace = function(str) {\n  'use strict';\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n */\ngoog.string.isEmptyOrWhitespace = goog.string.internal.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is empty.\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty.\n */\ngoog.string.isEmptyString = function(str) {\n  'use strict';\n  return str.length == 0;\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n *\n * @param {string} str The string to check.\n * @return {boolean} Whether `str` is empty or whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmpty = goog.string.isEmptyOrWhitespace;\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))\n *     instead.\n */\ngoog.string.isEmptyOrWhitespaceSafe = function(str) {\n  'use strict';\n  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));\n};\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n *\n * @param {*} str The string to check.\n * @return {boolean} Whether `str` is null, undefined, empty, or\n *     whitespace only.\n * @deprecated Use goog.string.isEmptyOrWhitespace instead.\n */\ngoog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;\n\n\n/**\n * Checks if a string is all breaking whitespace.\n * @param {string} str The string to check.\n * @return {boolean} Whether the string is all breaking whitespace.\n */\ngoog.string.isBreakingWhitespace = function(str) {\n  'use strict';\n  return !/[^\\t\\n\\r ]/.test(str);\n};\n\n\n/**\n * Checks if a string contains all letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` consists entirely of letters.\n */\ngoog.string.isAlpha = function(str) {\n  'use strict';\n  return !/[^a-zA-Z]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers.\n * @param {*} str string to check. If not a string, it will be\n *     casted to one.\n * @return {boolean} True if `str` is numeric.\n */\ngoog.string.isNumeric = function(str) {\n  'use strict';\n  return !/[^0-9]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers or letters.\n * @param {string} str string to check.\n * @return {boolean} True if `str` is alphanumeric.\n */\ngoog.string.isAlphaNumeric = function(str) {\n  'use strict';\n  return !/[^a-zA-Z0-9]/.test(str);\n};\n\n\n/**\n * Checks if a character is a space character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a space.\n */\ngoog.string.isSpace = function(ch) {\n  'use strict';\n  return ch == ' ';\n};\n\n\n/**\n * Checks if a character is a valid unicode character.\n * @param {string} ch Character to check.\n * @return {boolean} True if `ch` is a valid unicode character.\n */\ngoog.string.isUnicodeChar = function(ch) {\n  'use strict';\n  return ch.length == 1 && ch >= ' ' && ch <= '~' ||\n      ch >= '\\u0080' && ch <= '\\uFFFD';\n};\n\n\n/**\n * Takes a string and replaces newlines with a space. Multiple lines are\n * replaced with a single space.\n * @param {string} str The string from which to strip newlines.\n * @return {string} A copy of `str` stripped of newlines.\n */\ngoog.string.stripNewlines = function(str) {\n  'use strict';\n  return str.replace(/(\\r\\n|\\r|\\n)+/g, ' ');\n};\n\n\n/**\n * Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.\n * @param {string} str The string to in which to canonicalize newlines.\n * @return {string} `str` A copy of {@code} with canonicalized newlines.\n */\ngoog.string.canonicalizeNewlines = function(str) {\n  'use strict';\n  return str.replace(/(\\r\\n|\\r|\\n)/g, '\\n');\n};\n\n\n/**\n * Normalizes whitespace in a string, replacing all whitespace chars with\n * a space.\n * @param {string} str The string in which to normalize whitespace.\n * @return {string} A copy of `str` with all whitespace normalized.\n */\ngoog.string.normalizeWhitespace = function(str) {\n  'use strict';\n  return str.replace(/\\xa0|\\s/g, ' ');\n};\n\n\n/**\n * Normalizes spaces in a string, replacing all consecutive spaces and tabs\n * with a single space. Replaces non-breaking space with a space.\n * @param {string} str The string in which to normalize spaces.\n * @return {string} A copy of `str` with all consecutive spaces and tabs\n *    replaced with a single space.\n */\ngoog.string.normalizeSpaces = function(str) {\n  'use strict';\n  return str.replace(/\\xa0|[ \\t]+/g, ' ');\n};\n\n\n/**\n * Removes the breaking spaces from the left and right of the string and\n * collapses the sequences of breaking spaces in the middle into single spaces.\n * The original and the result strings render the same way in HTML.\n * @param {string} str A string in which to collapse spaces.\n * @return {string} Copy of the string with normalized breaking spaces.\n */\ngoog.string.collapseBreakingSpaces = function(str) {\n  'use strict';\n  return str.replace(/[\\t\\r\\n ]+/g, ' ')\n      .replace(/^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n};\n\n\n/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trim = goog.string.internal.trim;\n\n\n/**\n * Trims whitespaces at the left end of a string.\n * @param {string} str The string to left trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimLeft = function(str) {\n  'use strict';\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/^[\\s\\xa0]+/, '');\n};\n\n\n/**\n * Trims whitespaces at the right end of a string.\n * @param {string} str The string to right trim.\n * @return {string} A trimmed copy of `str`.\n */\ngoog.string.trimRight = function(str) {\n  'use strict';\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+$/, '');\n};\n\n\n/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} The comparator result, as described above.\n */\ngoog.string.caseInsensitiveCompare =\n    goog.string.internal.caseInsensitiveCompare;\n\n\n/**\n * Compares two strings interpreting their numeric substrings as numbers.\n *\n * @param {string} str1 First string.\n * @param {string} str2 Second string.\n * @param {!RegExp} tokenizerRegExp Splits a string into substrings of\n *     non-negative integers, non-numeric characters and optionally fractional\n *     numbers starting with a decimal point.\n * @return {number} Negative if str1 < str2, 0 is str1 == str2, positive if\n *     str1 > str2.\n * @private\n */\ngoog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {\n  'use strict';\n  if (str1 == str2) {\n    return 0;\n  }\n  if (!str1) {\n    return -1;\n  }\n  if (!str2) {\n    return 1;\n  }\n\n  // Using match to split the entire string ahead of time turns out to be faster\n  // for most inputs than using RegExp.exec or iterating over each character.\n  const tokens1 = str1.toLowerCase().match(tokenizerRegExp);\n  const tokens2 = str2.toLowerCase().match(tokenizerRegExp);\n\n  const count = Math.min(tokens1.length, tokens2.length);\n\n  for (let i = 0; i < count; i++) {\n    const a = tokens1[i];\n    const b = tokens2[i];\n\n    // Compare pairs of tokens, returning if one token sorts before the other.\n    if (a != b) {\n      // Only if both tokens are integers is a special comparison required.\n      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').\n      const num1 = parseInt(a, 10);\n      if (!isNaN(num1)) {\n        const num2 = parseInt(b, 10);\n        if (!isNaN(num2) && num1 - num2) {\n          return num1 - num2;\n        }\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  // If one string is a substring of the other, the shorter string sorts first.\n  if (tokens1.length != tokens2.length) {\n    return tokens1.length - tokens2.length;\n  }\n\n  // The two strings must be equivalent except for case (perfect equality is\n  // tested at the head of the function.) Revert to default ASCII string\n  // comparison to stabilize the sort.\n  return str1 < str2 ? -1 : 1;\n};\n\n\n/**\n * String comparison function that handles non-negative integer numbers in a\n * way humans might expect. Using this function, the string 'File 2.jpg' sorts\n * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison\n * is mostly case-insensitive, though strings that are identical except for case\n * are sorted with the upper-case strings before lower-case.\n *\n * This comparison function is up to 50x slower than either the default or the\n * case-insensitive compare. It should not be used in time-critical code, but\n * should be fast enough to sort several hundred short strings (like filenames)\n * with a reasonable delay.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.intAwareCompare = function(str1, str2) {\n  'use strict';\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\D+/g);\n};\n\n\n/**\n * String comparison function that handles non-negative integer and fractional\n * numbers in a way humans might expect. Using this function, the string\n * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent\n * to {@link goog.string.intAwareCompare} apart from the way how it interprets\n * dots.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare `str1` to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.floatAwareCompare = function(str1, str2) {\n  'use strict';\n  return goog.string.numberAwareCompare_(str1, str2, /\\d+|\\.\\d+|\\D+/g);\n};\n\n\n/**\n * Alias for {@link goog.string.floatAwareCompare}.\n *\n * @param {string} str1\n * @param {string} str2\n * @return {number}\n */\ngoog.string.numerateCompare = goog.string.floatAwareCompare;\n\n\n/**\n * URL-encodes a string\n * @param {*} str The string to url-encode.\n * @return {string} An encoded copy of `str` that is safe for urls.\n *     Note that '#', ':', and other characters used to delimit portions\n *     of URLs *will* be encoded.\n */\ngoog.string.urlEncode = function(str) {\n  'use strict';\n  return encodeURIComponent(String(str));\n};\n\n\n/**\n * URL-decodes the string. We need to specially handle '+'s because\n * the javascript library doesn't convert them to spaces.\n * @param {string} str The string to url decode.\n * @return {string} The decoded `str`.\n */\ngoog.string.urlDecode = function(str) {\n  'use strict';\n  return decodeURIComponent(str.replace(/\\+/g, ' '));\n};\n\n\n/**\n * Converts \\n to <br>s or <br />s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of `str` with converted newlines.\n */\ngoog.string.newLineToBr = goog.string.internal.newLineToBr;\n\n\n/**\n * Escapes double quote '\"' and single quote '\\'' characters in addition to\n * '&', '<', and '>' so that a string can be included in an HTML tag attribute\n * value within double or single quotes.\n *\n * It should be noted that > doesn't need to be escaped for the HTML or XML to\n * be valid, but it has been decided to escape it for consistency with other\n * implementations.\n *\n * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the\n * lowercase letter \"e\".\n *\n * NOTE(user):\n * HtmlEscape is often called during the generation of large blocks of HTML.\n * Using statics for the regular expressions and strings is an optimization\n * that can more than half the amount of time IE spends in this function for\n * large apps, since strings and regexes both contribute to GC allocations.\n *\n * Testing for the presence of a character before escaping increases the number\n * of function calls, but actually provides a speed increase for the average\n * case -- since the average case often doesn't require the escaping of all 4\n * characters and indexOf() is much cheaper than replace().\n * The worst case does suffer slightly from the additional calls, therefore the\n * opt_isLikelyToContainHtmlChars option has been included for situations\n * where all 4 HTML entities are very likely to be present and need escaping.\n *\n * Some benchmarks (times tended to fluctuate +-0.05ms):\n *                                     FireFox                     IE6\n * (no chars / average (mix of cases) / all 4 chars)\n * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80\n * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84\n * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85\n *\n * An additional advantage of checking if replace actually needs to be called\n * is a reduction in the number of object allocations, so as the size of the\n * application grows the difference between the various methods would increase.\n *\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see\n *     if the character needs replacing - use this option if you expect each of\n *     the characters to appear often. Leave false if you expect few html\n *     characters to occur in your strings, such as if you are escaping HTML.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {\n  'use strict';\n  str = goog.string.internal.htmlEscape(str, opt_isLikelyToContainHtmlChars);\n  if (goog.string.DETECT_DOUBLE_ESCAPING) {\n    str = str.replace(goog.string.E_RE_, '&#101;');\n  }\n  return str;\n};\n\n\n/**\n * Regular expression that matches a lowercase letter \"e\", for use in escaping.\n * @const {!RegExp}\n * @private\n */\ngoog.string.E_RE_ = /e/g;\n\n\n/**\n * Unescapes an HTML string.\n *\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntities = function(str) {\n  'use strict';\n  if (goog.string.contains(str, '&')) {\n    // We are careful not to use a DOM if we do not have one or we explicitly\n    // requested non-DOM html unescaping.\n    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&\n        'document' in goog.global) {\n      return goog.string.unescapeEntitiesUsingDom_(str);\n    } else {\n      // Fall back on pure XML entities\n      return goog.string.unescapePureXmlEntities_(str);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Unescapes a HTML string using the provided document.\n *\n * @param {string} str The string to unescape.\n * @param {!Document} document A document to use in escaping the string.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapeEntitiesWithDocument = function(str, document) {\n  'use strict';\n  if (goog.string.contains(str, '&')) {\n    return goog.string.unescapeEntitiesUsingDom_(str, document);\n  }\n  return str;\n};\n\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @param {Document=} opt_document An optional document to use for creating\n *     elements. If this is not specified then the default window.document\n *     will be used.\n * @return {string} The unescaped `str` string.\n */\ngoog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {\n  'use strict';\n  /** @type {!Object<string, string>} */\n  const seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n  /** @type {!Element} */\n  let div;\n  if (opt_document) {\n    div = opt_document.createElement('div');\n  } else {\n    div = goog.global.document.createElement('div');\n  }\n  // Match as many valid entity characters as possible. If the actual entity\n  // happens to be shorter, it will still work as innerHTML will return the\n  // trailing characters unchanged. Since the entity characters do not include\n  // open angle bracket, there is no chance of XSS from the innerHTML use.\n  // Since no whitespace is passed to innerHTML, whitespace is preserved.\n  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {\n    'use strict';\n    // Check for cached entity.\n    let value = seen[s];\n    if (value) {\n      return value;\n    }\n    // Check for numeric entity.\n    if (entity.charAt(0) == '#') {\n      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n      const n = Number('0' + entity.substr(1));\n      if (!isNaN(n)) {\n        value = String.fromCharCode(n);\n      }\n    }\n    // Fall back to innerHTML otherwise.\n    if (!value) {\n      // Append a non-entity character to avoid a bug in Webkit that parses\n      // an invalid entity at the end of innerHTML text as the empty string.\n      goog.dom.safe.setInnerHtml(\n          div,\n          goog.html.uncheckedconversions\n              .safeHtmlFromStringKnownToSatisfyTypeContract(\n                  goog.string.Const.from('Single HTML entity.'), s + ' '));\n      // Then remove the trailing character from the result.\n      value = div.firstChild.nodeValue.slice(0, -1);\n    }\n    // Cache and return.\n    return seen[s] = value;\n  });\n};\n\n\n/**\n * Unescapes XML entities.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of `str`.\n */\ngoog.string.unescapePureXmlEntities_ = function(str) {\n  'use strict';\n  return str.replace(/&([^;]+);/g, function(s, entity) {\n    'use strict';\n    switch (entity) {\n      case 'amp':\n        return '&';\n      case 'lt':\n        return '<';\n      case 'gt':\n        return '>';\n      case 'quot':\n        return '\"';\n      default:\n        if (entity.charAt(0) == '#') {\n          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.\n          const n = Number('0' + entity.substr(1));\n          if (!isNaN(n)) {\n            return String.fromCharCode(n);\n          }\n        }\n        // For invalid entities we just return the entity\n        return s;\n    }\n  });\n};\n\n\n/**\n * Regular expression that matches an HTML entity.\n * See also HTML5: Tokenization / Tokenizing character references.\n * @private\n * @type {!RegExp}\n */\ngoog.string.HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\n\n\n/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of `str`.\n */\ngoog.string.whitespaceEscape = function(str, opt_xml) {\n  'use strict';\n  // This doesn't use goog.string.preserveSpaces for backwards compatibility.\n  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);\n};\n\n\n/**\n * Preserve spaces that would be otherwise collapsed in HTML by replacing them\n * with non-breaking space Unicode characters.\n * @param {string} str The string in which to preserve whitespace.\n * @return {string} A copy of `str` with preserved whitespace.\n */\ngoog.string.preserveSpaces = function(str) {\n  'use strict';\n  return str.replace(/(^|[\\n ]) /g, '$1' + goog.string.Unicode.NBSP);\n};\n\n\n/**\n * Strip quote characters around a string.  The second argument is a string of\n * characters to treat as quotes.  This can be a single character or a string of\n * multiple character and in that case each of those are treated as possible\n * quote characters. For example:\n *\n * <pre>\n * goog.string.stripQuotes('\"abc\"', '\"`') --\u003e 'abc'\n * goog.string.stripQuotes('`abc`', '\"`') --\u003e 'abc'\n * </pre>\n *\n * @param {string} str The string to strip.\n * @param {string} quoteChars The quote characters to strip.\n * @return {string} A copy of `str` without the quotes.\n */\ngoog.string.stripQuotes = function(str, quoteChars) {\n  'use strict';\n  const length = quoteChars.length;\n  for (let i = 0; i < length; i++) {\n    const quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);\n    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {\n      return str.substring(1, str.length - 1);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Truncates a string to a certain length and adds '...' if necessary.  The\n * length also accounts for the ellipsis, so a maximum length of 10 and a string\n * 'Hello World!' produces 'Hello W...'.\n * @param {string} str The string to truncate.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cut off in the middle.\n * @return {string} The truncated `str` string.\n */\ngoog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {\n  'use strict';\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (str.length > chars) {\n    str = str.substring(0, chars - 3) + '...';\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Truncate a string in the middle, adding \"...\" if necessary,\n * and favoring the beginning of the string.\n * @param {string} str The string to truncate the middle of.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cutoff in the middle.\n * @param {number=} opt_trailingChars Optional number of trailing characters to\n *     leave at the end of the string, instead of truncating as close to the\n *     middle as possible.\n * @return {string} A truncated copy of `str`.\n */\ngoog.string.truncateMiddle = function(\n    str, chars, opt_protectEscapedCharacters, opt_trailingChars) {\n  'use strict';\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (opt_trailingChars && str.length > chars) {\n    if (opt_trailingChars > chars) {\n      opt_trailingChars = chars;\n    }\n    const endPoint = str.length - opt_trailingChars;\n    const startPoint = chars - opt_trailingChars;\n    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);\n  } else if (str.length > chars) {\n    // Favor the beginning of the string:\n    let half = Math.floor(chars / 2);\n    const endPos = str.length - half;\n    half += chars % 2;\n    str = str.substring(0, half) + '...' + str.substring(endPos);\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Special chars that need to be escaped for goog.string.quote.\n * @private {!Object<string, string>}\n */\ngoog.string.specialEscapeChars_ = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\x0B': '\\\\x0B',  // '\\v' is not supported in JScript\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  // To support the use case of embedding quoted strings inside of script\n  // tags, we have to make sure HTML comments and opening/closing script tags do\n  // not appear in the resulting string. The specific strings that must be\n  // escaped are documented at:\n  // https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements\n  '<': '\\\\u003C'  // NOTE: JSON.parse crashes on '\\\\x3c'.\n};\n\n\n/**\n * Character mappings used internally for goog.string.escapeChar.\n * @private {!Object<string, string>}\n */\ngoog.string.jsEscapeCache_ = {\n  '\\'': '\\\\\\''\n};\n\n\n/**\n * Encloses a string in double quotes and escapes characters so that the\n * string is a valid JS string. The resulting string is safe to embed in\n * `<script>` tags as \"<\" is escaped.\n * @param {string} s The string to quote.\n * @return {string} A copy of `s` surrounded by double quotes.\n */\ngoog.string.quote = function(s) {\n  'use strict';\n  s = String(s);\n  const sb = ['\"'];\n  for (let i = 0; i < s.length; i++) {\n    const ch = s.charAt(i);\n    const cc = ch.charCodeAt(0);\n    sb[i + 1] = goog.string.specialEscapeChars_[ch] ||\n        ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));\n  }\n  sb.push('\"');\n  return sb.join('');\n};\n\n\n/**\n * Takes a string and returns the escaped string for that input string.\n * @param {string} str The string to escape.\n * @return {string} An escaped string representing `str`.\n */\ngoog.string.escapeString = function(str) {\n  'use strict';\n  const sb = [];\n  for (let i = 0; i < str.length; i++) {\n    sb[i] = goog.string.escapeChar(str.charAt(i));\n  }\n  return sb.join('');\n};\n\n\n/**\n * Takes a character and returns the escaped string for that character. For\n * example escapeChar(String.fromCharCode(15)) -> \"\\\\x0E\".\n * @param {string} c The character to escape.\n * @return {string} An escaped string representing `c`.\n */\ngoog.string.escapeChar = function(c) {\n  'use strict';\n  if (c in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[c];\n  }\n\n  if (c in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];\n  }\n\n  let rv = c;\n  const cc = c.charCodeAt(0);\n  if (cc > 31 && cc < 127) {\n    rv = c;\n  } else {\n    // tab is 9 but handled above\n    if (cc < 256) {\n      rv = '\\\\x';\n      if (cc < 16 || cc > 256) {\n        rv += '0';\n      }\n    } else {\n      rv = '\\\\u';\n      if (cc < 4096) {  // \\u1000\n        rv += '0';\n      }\n    }\n    rv += cc.toString(16).toUpperCase();\n  }\n\n  return goog.string.jsEscapeCache_[c] = rv;\n};\n\n\n/**\n * Determines whether a string contains a substring.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.contains = goog.string.internal.contains;\n\n\n/**\n * Determines whether a string contains a substring, ignoring case.\n * @param {string} str The string to search.\n * @param {string} subString The substring to search for.\n * @return {boolean} Whether `str` contains `subString`.\n */\ngoog.string.caseInsensitiveContains =\n    goog.string.internal.caseInsensitiveContains;\n\n\n/**\n * Returns the non-overlapping occurrences of ss in s.\n * If either s or ss evalutes to false, then returns zero.\n * @param {string} s The string to look in.\n * @param {string} ss The string to look for.\n * @return {number} Number of occurrences of ss in s.\n */\ngoog.string.countOf = function(s, ss) {\n  'use strict';\n  return s && ss ? s.split(ss).length - 1 : 0;\n};\n\n\n/**\n * Removes a substring of a specified length at a specific\n * index in a string.\n * @param {string} s The base string from which to remove.\n * @param {number} index The index at which to remove the substring.\n * @param {number} stringLength The length of the substring to remove.\n * @return {string} A copy of `s` with the substring removed or the full\n *     string if nothing is removed or the input is invalid.\n */\ngoog.string.removeAt = function(s, index, stringLength) {\n  'use strict';\n  let resultStr = s;\n  // If the index is greater or equal to 0 then remove substring\n  if (index >= 0 && index < s.length && stringLength > 0) {\n    resultStr = s.substr(0, index) +\n        s.substr(index + stringLength, s.length - index - stringLength);\n  }\n  return resultStr;\n};\n\n\n/**\n * Removes the first occurrence of a substring from a string.\n * @param {string} str The base string from which to remove.\n * @param {string} substr The string to remove.\n * @return {string} A copy of `str` with `substr` removed or the\n *     full string if nothing is removed.\n */\ngoog.string.remove = function(str, substr) {\n  'use strict';\n  return str.replace(substr, '');\n};\n\n\n/**\n *  Removes all occurrences of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of `s` with `ss` removed or the full\n *      string if nothing is removed.\n */\ngoog.string.removeAll = function(s, ss) {\n  'use strict';\n  const re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, '');\n};\n\n\n/**\n *  Replaces all occurrences of a substring of a string with a new substring.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to replace.\n *  @param {string} replacement The replacement string.\n *  @return {string} A copy of `s` with `ss` replaced by\n *      `replacement` or the original string if nothing is replaced.\n */\ngoog.string.replaceAll = function(s, ss, replacement) {\n  'use strict';\n  const re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, replacement.replace(/\\$/g, '$$$$'));\n};\n\n\n/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of `s`.\n */\ngoog.string.regExpEscape = function(s) {\n  'use strict';\n  return String(s)\n      .replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1')\n      .replace(/\\x08/g, '\\\\x08');\n};\n\n\n/**\n * Repeats a string n times.\n * @param {string} string The string to repeat.\n * @param {number} length The number of times to repeat.\n * @return {string} A string containing `length` repetitions of\n *     `string`.\n */\ngoog.string.repeat = (String.prototype.repeat) ? function(string, length) {\n  'use strict';\n  // The native method is over 100 times faster than the alternative.\n  return string.repeat(length);\n} : function(string, length) {\n  'use strict';\n  return new Array(length + 1).join(string);\n};\n\n\n/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * <pre>padNumber(1.25, 2, 3) -> '01.250'\n * padNumber(1.25, 2) -> '01.25'\n * padNumber(1.25, 2, 1) -> '01.3'\n * padNumber(1.25, 0) -> '1.25'</pre>\n *\n * @param {number} num The number to pad.\n * @param {number} length The desired length.\n * @param {number=} opt_precision The desired precision.\n * @return {string} `num` as a string with the given options.\n */\ngoog.string.padNumber = function(num, length, opt_precision) {\n  'use strict';\n  if (!Number.isFinite(num)) return String(num);\n  let s =\n      (opt_precision !== undefined) ? num.toFixed(opt_precision) : String(num);\n  let index = s.indexOf('.');\n  if (index === -1) {\n    index = s.length;\n  }\n  const sign = s[0] === '-' ? '-' : '';\n  if (sign) {\n    s = s.substring(1);\n  }\n  return sign + goog.string.repeat('0', Math.max(0, length - index)) + s;\n};\n\n\n/**\n * Returns a string representation of the given object, with\n * null and undefined being returned as the empty string.\n *\n * @param {*} obj The object to convert.\n * @return {string} A string representation of the `obj`.\n */\ngoog.string.makeSafe = function(obj) {\n  'use strict';\n  return obj == null ? '' : String(obj);\n};\n\n/**\n * Returns a string with at least 64-bits of randomness.\n *\n * Doesn't trust JavaScript's random function entirely. Uses a combination of\n * random and current timestamp, and then encodes the string in base-36 to\n * make it shorter.\n *\n * @return {string} A random string, e.g. sn1s7vb4gcic.\n */\ngoog.string.getRandomString = function() {\n  'use strict';\n  const x = 2147483648;\n  return Math.floor(Math.random() * x).toString(36) +\n      Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);\n};\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if `version1` is higher.\n *                   0 if arguments are equal.\n *                  -1 if `version2` is higher.\n */\ngoog.string.compareVersions = goog.string.internal.compareVersions;\n\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32\n * (exclusive).\n * @param {string} str A string.\n * @return {number} Hash value for `str`, between 0 (inclusive) and 2^32\n *  (exclusive). The empty string returns 0.\n */\ngoog.string.hashCode = function(str) {\n  'use strict';\n  let result = 0;\n  for (let i = 0; i < str.length; ++i) {\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result = (31 * result + str.charCodeAt(i)) >>> 0;\n  }\n  return result;\n};\n\n\n/**\n * The most recent unique ID. |0 is equivalent to Math.floor in this case.\n * @type {number}\n * @private\n */\ngoog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;\n\n\n/**\n * Generates and returns a string which is unique in the current document.\n * This is useful, for example, to create unique IDs for DOM elements.\n * @return {string} A unique id.\n */\ngoog.string.createUniqueString = function() {\n  'use strict';\n  return 'goog_' + goog.string.uniqueStringCounter_++;\n};\n\n\n/**\n * Converts the supplied string to a number, which may be Infinity or NaN.\n * This function strips whitespace: (toNumber(' 123') === 123)\n * This function accepts scientific notation: (toNumber('1e1') === 10)\n *\n * This is better than JavaScript's built-in conversions because, sadly:\n *     (Number(' ') === 0) and (parseFloat('123a') === 123)\n *\n * @param {string} str The string to convert.\n * @return {number} The number the supplied string represents, or NaN.\n */\ngoog.string.toNumber = function(str) {\n  'use strict';\n  const num = Number(str);\n  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {\n    return NaN;\n  }\n  return num;\n};\n\n\n/**\n * Returns whether the given string is lower camel case (e.g. \"isFooBar\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is lower camel case.\n */\ngoog.string.isLowerCamelCase = function(str) {\n  'use strict';\n  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);\n};\n\n\n/**\n * Returns whether the given string is upper camel case (e.g. \"FooBarBaz\").\n *\n * Note that this assumes the string is entirely letters.\n * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\n *\n * @param {string} str String to test.\n * @return {boolean} Whether the string is upper camel case.\n */\ngoog.string.isUpperCamelCase = function(str) {\n  'use strict';\n  return /^([A-Z][a-z]*)+$/.test(str);\n};\n\n\n/**\n * Converts a string from selector-case to camelCase (e.g. from\n * \"multi-part-string\" to \"multiPartString\"), useful for converting\n * CSS selectors and HTML dataset keys to their equivalent JS properties.\n * @param {string} str The string in selector-case form.\n * @return {string} The string in camelCase form.\n */\ngoog.string.toCamelCase = function(str) {\n  'use strict';\n  return String(str).replace(/\\-([a-z])/g, function(all, match) {\n    'use strict';\n    return match.toUpperCase();\n  });\n};\n\n\n/**\n * Converts a string from camelCase to selector-case (e.g. from\n * \"multiPartString\" to \"multi-part-string\"), useful for converting JS\n * style and dataset properties to equivalent CSS selectors and HTML keys.\n * @param {string} str The string in camelCase form.\n * @return {string} The string in selector-case form.\n */\ngoog.string.toSelectorCase = function(str) {\n  'use strict';\n  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n\n\n/**\n * Converts a string into TitleCase. First character of the string is always\n * capitalized in addition to the first letter of every subsequent word.\n * Words are delimited by one or more whitespaces by default. Custom delimiters\n * can optionally be specified to replace the default, which doesn't preserve\n * whitespace delimiters and instead must be explicitly included if needed.\n *\n * Default delimiter => \" \":\n *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three')  => 'One Two Three'\n *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '\n *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'\n *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'\n *\n * Custom delimiter => \"_-.\":\n *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'\n *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '\n *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'\n *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'\n *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'\n *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'\n *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'\n *\n * @param {string} str String value in camelCase form.\n * @param {string=} opt_delimiters Custom delimiter character set used to\n *      distinguish words in the string value. Each character represents a\n *      single delimiter. When provided, default whitespace delimiter is\n *      overridden and must be explicitly included if needed.\n * @return {string} String value in TitleCase form.\n */\ngoog.string.toTitleCase = function(str, opt_delimiters) {\n  'use strict';\n  let delimiters = (typeof opt_delimiters === 'string') ?\n      goog.string.regExpEscape(opt_delimiters) :\n      '\\\\s';\n\n  // For IE8, we need to prevent using an empty character set. Otherwise,\n  // incorrect matching will occur.\n  delimiters = delimiters ? '|[' + delimiters + ']+' : '';\n\n  const regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');\n  return str.replace(regexp, function(all, p1, p2) {\n    'use strict';\n    return p1 + p2.toUpperCase();\n  });\n};\n\n\n/**\n * Capitalizes a string, i.e. converts the first letter to uppercase\n * and all other letters to lowercase, e.g.:\n *\n * goog.string.capitalize('one')     => 'One'\n * goog.string.capitalize('ONE')     => 'One'\n * goog.string.capitalize('one two') => 'One two'\n *\n * Note that this function does not trim initial whitespace.\n *\n * @param {string} str String value to capitalize.\n * @return {string} String value with first letter in uppercase.\n */\ngoog.string.capitalize = function(str) {\n  'use strict';\n  return String(str.charAt(0)).toUpperCase() +\n      String(str.substr(1)).toLowerCase();\n};\n\n\n/**\n * Parse a string in decimal or hexidecimal ('0xFFFF') form.\n *\n * To parse a particular radix, please use parseInt(string, radix) directly. See\n * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\n *\n * This is a wrapper for the built-in parseInt function that will only parse\n * numbers as base 10 or base 16.  Some JS implementations assume strings\n * starting with \"0\" are intended to be octal. ES3 allowed but discouraged\n * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.\n *\n * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj\n *\n * @param {string|number|null|undefined} value The value to be parsed.\n * @return {number} The number, parsed. If the string failed to parse, this\n *     will be NaN.\n */\ngoog.string.parseInt = function(value) {\n  'use strict';\n  // Force finite numbers to strings.\n  if (isFinite(value)) {\n    value = String(value);\n  }\n\n  if (typeof value === 'string') {\n    // If the string starts with '0x' or '-0x', parse as hex.\n    return /^\\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);\n  }\n\n  return NaN;\n};\n\n\n/**\n * Splits a string on a separator a limited number of times.\n *\n * This implementation is more similar to Python or Java, where the limit\n * parameter specifies the maximum number of splits rather than truncating\n * the number of results.\n *\n * See http://docs.python.org/2/library/stdtypes.html#str.split\n * See JavaDoc: http://goo.gl/F2AsY\n * See Mozilla reference: http://goo.gl/dZdZs\n *\n * @param {string} str String to split.\n * @param {string} separator The separator.\n * @param {number} limit The limit to the number of splits. The resulting array\n *     will have a maximum length of limit+1.  Negative numbers are the same\n *     as zero.\n * @return {!Array<string>} The string, split.\n */\ngoog.string.splitLimit = function(str, separator, limit) {\n  'use strict';\n  const parts = str.split(separator);\n  const returnVal = [];\n\n  // Only continue doing this while we haven't hit the limit and we have\n  // parts left.\n  while (limit > 0 && parts.length) {\n    returnVal.push(parts.shift());\n    limit--;\n  }\n\n  // If there are remaining parts, append them to the end.\n  if (parts.length) {\n    returnVal.push(parts.join(separator));\n  }\n\n  return returnVal;\n};\n\n\n/**\n * Finds the characters to the right of the last instance of any separator\n *\n * This function is similar to goog.string.path.baseName, except it can take a\n * list of characters to split the string on. It will return the rightmost\n * grouping of characters to the right of any separator as a left-to-right\n * oriented string.\n *\n * @see goog.string.path.baseName\n * @param {string} str The string\n * @param {string|!Array<string>} separators A list of separator characters\n * @return {string} The last part of the string with respect to the separators\n */\ngoog.string.lastComponent = function(str, separators) {\n  'use strict';\n  if (!separators) {\n    return str;\n  } else if (typeof separators == 'string') {\n    separators = [separators];\n  }\n\n  let lastSeparatorIndex = -1;\n  for (let i = 0; i < separators.length; i++) {\n    if (separators[i] == '') {\n      continue;\n    }\n    const currentSeparatorIndex = str.lastIndexOf(separators[i]);\n    if (currentSeparatorIndex > lastSeparatorIndex) {\n      lastSeparatorIndex = currentSeparatorIndex;\n    }\n  }\n  if (lastSeparatorIndex == -1) {\n    return str;\n  }\n  return str.slice(lastSeparatorIndex + 1);\n};\n\n\n/**\n * Computes the Levenshtein edit distance between two strings.\n * @param {string} a\n * @param {string} b\n * @return {number} The edit distance between the two strings.\n */\ngoog.string.editDistance = function(a, b) {\n  'use strict';\n  const v0 = [];\n  const v1 = [];\n\n  if (a == b) {\n    return 0;\n  }\n\n  if (!a.length || !b.length) {\n    return Math.max(a.length, b.length);\n  }\n\n  for (let i = 0; i < b.length + 1; i++) {\n    v0[i] = i;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    v1[0] = i + 1;\n\n    for (let j = 0; j < b.length; j++) {\n      const cost = Number(a[i] != b[j]);\n      // Cost for the substring is the minimum of adding one character, removing\n      // one character, or a swap.\n      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);\n    }\n\n    for (let j = 0; j < v0.length; j++) {\n      v0[j] = v1[j];\n    }\n  }\n\n  return v1[b.length];\n};\n","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for dealing with POSIX path strings. Based on\n * Python's os.path and posixpath.\n */\n\ngoog.provide('goog.string.path');\n\ngoog.require('goog.array');\ngoog.require('goog.string');\n\n\n/**\n * Returns the final component of a pathname.\n * See http://docs.python.org/library/os.path.html#os.path.basename\n * @param {string} path A pathname.\n * @return {string} path The final component of a pathname, i.e. everything\n *     after the final slash.\n */\ngoog.string.path.baseName = function(path) {\n  'use strict';\n  const i = path.lastIndexOf('/') + 1;\n  return path.slice(i);\n};\n\n\n/**\n * Alias to goog.string.path.baseName.\n * @param {string} path A pathname.\n * @return {string} path The final component of a pathname.\n * @deprecated Use goog.string.path.baseName.\n */\ngoog.string.path.basename = goog.string.path.baseName;\n\n\n/**\n * Returns the directory component of a pathname.\n * See http://docs.python.org/library/os.path.html#os.path.dirname\n * @param {string} path A pathname.\n * @return {string} The directory component of a pathname, i.e. everything\n *     leading up to the final slash.\n */\ngoog.string.path.dirname = function(path) {\n  'use strict';\n  const i = path.lastIndexOf('/') + 1;\n  let head = path.slice(0, i);\n  // If the path isn't all forward slashes, trim the trailing slashes.\n  if (!/^\\/+$/.test(head)) {\n    head = head.replace(/\\/+$/, '');\n  }\n  return head;\n};\n\n\n/**\n * Extracts the extension part of a pathname.\n * @param {string} path The path name to process.\n * @return {string} The extension if any, otherwise the empty string.\n */\ngoog.string.path.extension = function(path) {\n  'use strict';\n  const separator = '.';\n  // Combining all adjacent periods in the basename to a single period.\n  const baseName = goog.string.path.baseName(path).replace(/\\.+/g, separator);\n  const separatorIndex = baseName.lastIndexOf(separator);\n  return separatorIndex <= 0 ? '' : baseName.substr(separatorIndex + 1);\n};\n\n\n// TODO(johnlenz): goog.string.path.join should not accept undefined\n/**\n * Joins one or more path components (e.g. 'foo/' and 'bar' make 'foo/bar').\n * An absolute component will discard all previous component.\n * See http://docs.python.org/library/os.path.html#os.path.join\n * @param {...(string|undefined)} var_args One of more path components.\n * @return {string} The path components joined.\n */\ngoog.string.path.join = function(var_args) {\n  'use strict';\n  let path = arguments[0];\n\n  for (let i = 1; i < arguments.length; i++) {\n    const arg = arguments[i];\n    if (goog.string.startsWith(arg, '/')) {\n      path = arg;\n    } else if (path == '' || goog.string.endsWith(path, '/')) {\n      path += arg;\n    } else {\n      path += '/' + arg;\n    }\n  }\n\n  return path;\n};\n\n\n/**\n * Normalizes a pathname by collapsing duplicate separators, parent directory\n * references ('..'), and current directory references ('.').\n * See http://docs.python.org/library/os.path.html#os.path.normpath\n * @param {string} path One or more path components.\n * @return {string} The path after normalization.\n */\ngoog.string.path.normalizePath = function(path) {\n  'use strict';\n  if (path == '') {\n    return '.';\n  }\n\n  let initialSlashes = '';\n  // POSIX will keep two slashes, but three or more will be collapsed to one.\n  if (goog.string.startsWith(path, '/')) {\n    initialSlashes = '/';\n    if (goog.string.startsWith(path, '//') &&\n        !goog.string.startsWith(path, '///')) {\n      initialSlashes = '//';\n    }\n  }\n\n  const parts = path.split('/');\n  const newParts = [];\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n\n    // '' and '.' don't change the directory, ignore.\n    if (part == '' || part == '.') {\n      continue;\n    }\n\n    // A '..' should pop a directory unless this is not an absolute path and\n    // we're at the root, or we've travelled upwards relatively in the last\n    // iteration.\n    if (part != '..' || (!initialSlashes && !newParts.length) ||\n        goog.array.peek(newParts) == '..') {\n      newParts.push(part);\n    } else {\n      newParts.pop();\n    }\n  }\n\n  const returnPath = initialSlashes + newParts.join('/');\n  return returnPath || '.';\n};\n\n\n/**\n * Splits a pathname into \"dirname\" and \"baseName\" components, where \"baseName\"\n * is everything after the final slash. Either part may return an empty string.\n * See http://docs.python.org/library/os.path.html#os.path.split\n * @param {string} path A pathname.\n * @return {!Array<string>} An array of [dirname, basename].\n */\ngoog.string.path.split = function(path) {\n  'use strict';\n  const head = goog.string.path.dirname(path);\n  const tail = goog.string.path.baseName(path);\n  return [head, tail];\n};\n\n// TODO(nnaze): Implement other useful functions from os.path\n","import { encoder, decoder } from \"../utils/text-encoders.js\";\nimport * as constants from \"./constants.js\";\n\nconst { normalizePath } = goog.require(\"goog.string.path\");\n\n/** @define {boolean} */\nconst DEBUG_WASI = goog.define(\"DEBUG_WASI\", false);\n\nfunction assertLeadingSlash(path) {\n  return /^\\//g.test(path) ? path : `/${path}`;\n}\n\nfunction removeLeadingSlash(path) {\n  return path.replace(/^\\//g, \"\");\n}\n\nfunction shouldOpenReader(rights) {\n  return (\n    (rights & (constants.WASI_RIGHT_FD_READ | constants.WASI_RIGHT_FD_READDIR)) !==\n    goog.global.BigInt(0)\n  );\n}\n\nfunction performanceNowPoly() {\n  if (typeof performance === \"undefined\" || typeof performance.now === \"undefined\") {\n    const nowOffset = Date.now();\n    return Date.now() - nowOffset;\n  } else {\n    return performance.now();\n  }\n}\n\nfunction concatUint8Arrays(arrays) {\n  // sum of individual array lengths\n  const totalLength = arrays.reduce((accumulator, value) => accumulator + value.length, 0);\n\n  if (arrays.length === 0) return;\n\n  const result = new Uint8Array(totalLength);\n\n  // for each array - copy it over result\n  // next array is copied right after the previous one\n  let length = 0;\n  for (const array of arrays) {\n    result.set(array, length);\n    length += array.length;\n  }\n\n  return result;\n}\n\nexport const WASI = function ({ preopens }) {\n  this.fd = Array.from({ length: 4 });\n\n  this.fd[0] = { fd: 0, path: \"/dev/stdin\", seekPos: goog.global.BigInt(0), buffers: [] };\n  this.fd[1] = { fd: 1, path: \"/dev/stdout\", seekPos: goog.global.BigInt(0), buffers: [] };\n  this.fd[2] = { fd: 2, path: \"/dev/stderr\", seekPos: goog.global.BigInt(0), buffers: [] };\n  this.fd[3] = { fd: 3, path: \"/\", seekPos: goog.global.BigInt(0), buffers: [] };\n\n  this.getMemory = this.getMemory.bind(this);\n  this.CPUTIME_START = 0;\n};\n\n/**\n * @function\n * @param {!WebAssembly.Instance} instance\n */\nWASI.prototype.start = function (instance) {\n  this.CPUTIME_START = performanceNowPoly();\n  const exports = instance.exports;\n  exports._start();\n};\n\n/**\n * @function\n * @param {!WebAssembly.Module} instance\n */\nWASI.prototype.getImports = function (module) {\n  const options = {};\n  const neededImports = WebAssembly.Module.imports(module);\n\n  for (const neededImport of neededImports) {\n    if (neededImport.kind === \"function\" && neededImport.module.startsWith(\"wasi_\")) {\n      if (typeof options[neededImport.module] !== \"object\") {\n        options[neededImport.module] = {};\n      }\n      options[neededImport.module][neededImport.name] = this[neededImport.name].bind(this);\n    }\n  }\n\n  return options;\n};\n\n/**\n * @function\n * @param {!WebAssembly.Memory} memory\n */\nWASI.prototype.setMemory = function (memory) {\n  this.memory = memory;\n};\n\n/**\n * @function\n * @return {DataView}\n */\nWASI.prototype.getMemory = function () {\n  if (!this.view || !this.view.buffer || !this.view.buffer.byteLength) {\n    this.view = new DataView(this.memory.buffer);\n  }\n  return this.view;\n};\n\nWASI.prototype.msToNs = function (ms) {\n  const msInt = Math.trunc(ms);\n  const decimal = goog.global.BigInt(Math.round((ms - msInt) * 1000000));\n  const ns = goog.global.BigInt(msInt) * goog.global.BigInt(1000000);\n  return ns + decimal;\n};\n\nWASI.prototype.now = function (clockId) {\n  switch (clockId) {\n    case constants.WASI_CLOCK_MONOTONIC:\n      // case constants.WASI_CLOCK_REALTIME:\n      return Math.floor(performanceNowPoly());\n    case constants.WASI_CLOCK_REALTIME:\n      return this.msToNs(Date.now());\n    case constants.WASI_CLOCK_PROCESS_CPUTIME_ID:\n    case constants.WASI_CLOCK_THREAD_CPUTIME_ID:\n      // return bindings.hrtime(CPUTIME_START)\n      return Math.floor(performanceNowPoly() - this.CPUTIME_START);\n    default:\n      return 0;\n  }\n};\n\nWASI.prototype.args_get = function (argv, argvBuf) {\n  if (DEBUG_WASI) {\n    console.log(\"args_get\", argv, argvBuf, constants);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.args_sizes_get = function (argc, argvBufSize) {\n  if (DEBUG_WASI) {\n    console.log(\"args_sizes_get\", argc, argvBufSize, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.clock_res_get = function (clockId, resolution) {\n  if (DEBUG_WASI) {\n    console.log(\"args_get\", clockId, resolution, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.clock_time_get = function (clockId, precision, time) {\n  if (DEBUG_WASI) {\n    console.log(\"clock_time_get\", clockId, precision, time, arguments);\n  }\n  const memory = this.getMemory();\n  const nextTime = this.now(clockId);\n  memory.setBigUint64(time, goog.global.BigInt(nextTime), true);\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.environ_get = function (environ, environBuf) {\n  if (DEBUG_WASI) {\n    console.log(\"environ_get\", environ, environBuf, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.environ_sizes_get = function (environCount, environBufSize) {\n  if (DEBUG_WASI) {\n    console.log(\"environ_sizes_get\", environCount, environBufSize, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.fd_advise = function (fd, offset, length_, advice) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_advise\", fd, offset, length_, advice, arguments);\n  }\n  return constants.WASI_ENOSYS;\n};\nWASI.prototype.fd_allocate = function (fd, offset, length_) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_allocate\", fd, offset, length_, arguments);\n  }\n  return constants.WASI_ENOSYS;\n};\nWASI.prototype.fd_close = function (fd) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_close\", fd, arguments);\n  }\n\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.fd_datasync = function (fd) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_datasync\", fd, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\n// always write access in browser scope\nWASI.prototype.fd_fdstat_get = function (fd, bufPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_fdstat_get\", fd, bufPtr, arguments);\n  }\n\n  const memory = this.getMemory();\n\n  memory.setUint8(bufPtr + 4, constants.WASI_FILETYPE_REGULAR_FILE);\n  memory.setUint16(bufPtr + 2, 0, true);\n  memory.setUint16(bufPtr + 4, 0, true);\n  memory.setBigUint64(bufPtr + 8, goog.global.BigInt(constants.RIGHTS_REGULAR_FILE_BASE), true);\n  memory.setBigUint64(\n    bufPtr + 8 + 8,\n    goog.global.BigInt(constants.RIGHTS_REGULAR_FILE_INHERITING),\n    true,\n  );\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_fdstat_set_flags = function (fd, flags) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_fdstat_set_flags\", fd, flags, arguments);\n  }\n  return constants.WASI_ENOSYS;\n};\nWASI.prototype.fd_fdstat_set_rights = function (fd, fsRightsBase, fsRightsInheriting) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_fdstat_set_rights\", fd, fsRightsBase, fsRightsInheriting, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_filestat_get = function (fd, bufPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_filestat_get\", fd, bufPtr, arguments);\n  }\n  let filesize = 0;\n\n  if (this.fd[fd]) {\n    filesize = this.fd[fd].buffers.reduce(function (accumulator, uintArray) {\n      return accumulator + uintArray?.byteLength ? uintArray?.byteLength : 0;\n    }, 0);\n  }\n\n  const memory = this.getMemory();\n  memory.setBigUint64(bufPtr, goog.global.BigInt(fd), true);\n  bufPtr += 8;\n  memory.setBigUint64(bufPtr, goog.global.BigInt(fd), true);\n  bufPtr += 8;\n  memory.setUint8(bufPtr, constants.WASI_FILETYPE_REGULAR_FILE);\n  bufPtr += 8;\n  memory.setBigUint64(bufPtr, goog.global.BigInt(1), true);\n  bufPtr += 8;\n  memory.setBigUint64(bufPtr, goog.global.BigInt(filesize), true);\n  bufPtr += 8;\n  memory.setBigUint64(bufPtr, this.msToNs(this.CPUTIME_START), true);\n  bufPtr += 8;\n  memory.setBigUint64(bufPtr, this.msToNs(this.CPUTIME_START), true);\n  bufPtr += 8;\n  memory.setBigUint64(bufPtr, this.msToNs(this.CPUTIME_START), true);\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_filestat_set_size = function (fd, newSize) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_filestat_set_size\", fd, newSize, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_filestat_set_times = function (fd, stAtim, stMtim, filestatFags) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_filestat_set_times\", fd, stAtim, stMtim, filestatFags, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_pread = function (fd, iovs, iovsLength, offset, nread) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_pread\", fd, iovs, iovsLength, offset, nread, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_prestat_dir_name = function (fd, pathPtr, pathLength) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_prestat_dir_name\", fd, pathPtr, pathLength, this.fd[fd]);\n  }\n  if (!this.fd[fd] && !this.fd[fd - 1]) {\n    return constants.WASI_EBADF;\n  }\n\n  const { path: directoryName } = this.fd[fd];\n\n  const memory = this.getMemory();\n\n  const directoryNameBuffer = encoder.encode(directoryName);\n  new Uint8Array(memory.buffer).set(directoryNameBuffer, pathPtr);\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_prestat_get = function (fd, bufPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_prestat_get\", fd, bufPtr, this.fd[fd]);\n  }\n  if (!this.fd[fd]) {\n    return constants.WASI_EBADF;\n  }\n  const { path: directoryName } = this.fd[fd];\n  const memory = this.getMemory();\n\n  const directoryNameBuffer = encoder.encode(directoryName);\n  memory.setUint8(bufPtr, constants.WASI_PREOPENTYPE_DIR);\n  memory.setUint32(bufPtr + 4, directoryNameBuffer.byteLength, true);\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_pwrite = function (fd, iovs, iovsLength, offset, nwritten) {\n  console.log(\"fd_pwrite\", fd, iovs, iovsLength, offset, nwritten, arguments);\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_read = function (fd, iovs, iovsLength, nread) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_read\", fd, iovs, iovsLength, nread, arguments);\n  }\n  const buffers = this.fd[fd] && this.fd[fd].buffers;\n  const totalBuffersLength = buffers.reduce((accumulator, b) => accumulator + b.length, 0);\n  const memory = this.getMemory();\n\n  if (!buffers || buffers.length === 0) {\n    console.error(\"Reading non existent file\", fd, this.fd[fd]);\n    return;\n  }\n\n  let read = Number(this.fd[fd].seekPos);\n\n  let thisRead = 0;\n  let reduced = false;\n\n  if (read >= totalBuffersLength) {\n    return -1; // EOF\n  }\n\n  for (let index = 0; index < iovsLength; index++) {\n    const ptr = iovs + index * 8;\n    const buf = memory.getUint32(ptr, true);\n    const bufLength = memory.getUint32(ptr + 4, true);\n\n    if (!reduced) {\n      thisRead += bufLength;\n      Array.from({ length: bufLength }, (_, index) => index).reduce(\n        (accumulator, currentRead) => {\n          if (reduced) {\n            return accumulator;\n          }\n          const [chunkIndex, chunkOffset] = accumulator;\n          let currentChunkIndex = 0;\n          let currentChunkOffset = 0;\n\n          let found = false;\n          let leadup = 0;\n\n          let currentBufferChunkLength = buffers[currentChunkIndex]\n            ? buffers[currentChunkIndex].byteLength\n            : 0;\n\n          if (currentRead === 0) {\n            while (!found) {\n              currentBufferChunkLength = buffers[currentChunkIndex]\n                ? buffers[currentChunkIndex].byteLength\n                : 0;\n              if (leadup <= read && currentBufferChunkLength + leadup > read) {\n                found = true;\n                currentChunkOffset = read - leadup;\n              } else {\n                leadup += currentBufferChunkLength;\n                currentChunkIndex += 1;\n              }\n            }\n          } else {\n            currentChunkIndex = chunkIndex;\n            currentChunkOffset = chunkOffset;\n          }\n\n          if (buffers[currentChunkIndex]) {\n            memory.setUint8(buf + currentRead, buffers[currentChunkIndex][currentChunkOffset]);\n\n            if (currentChunkOffset + 1 >= buffers[currentChunkIndex].byteLength) {\n              currentChunkIndex = chunkIndex + 1;\n              currentChunkOffset = 0;\n            } else {\n              currentChunkOffset += 1;\n            }\n          } else {\n            memory.setUint8(buf + currentRead, \"\\0\");\n            read += currentRead;\n            reduced = true;\n          }\n\n          return [currentChunkIndex, currentChunkOffset];\n        },\n        [0, 0],\n      );\n      if (!reduced) {\n        read += bufLength;\n      }\n    }\n  }\n\n  this.fd[fd].seekPos = goog.global.BigInt(read);\n  memory.setUint32(nread, thisRead, true);\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_readdir = function (fd, bufPtr, bufLength, cookie, bufusedPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_readdir\", fd, bufPtr, bufLength, cookie, bufusedPtr, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_renumber = function (from, to) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_renumber\", from, to, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.fd_seek = function (fd, offset, whence, newOffsetPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_seek\", fd, offset, whence, newOffsetPtr, arguments);\n  }\n  const memory = this.getMemory();\n\n  switch (whence) {\n    case constants.WASI_WHENCE_CUR: {\n      this.fd[fd].seekPos =\n        (this.fd[fd].seekPos ? this.fd[fd].seekPos : goog.global.BigInt(0)) +\n        goog.global.BigInt(offset);\n      break;\n    }\n    case constants.WASI_WHENCE_END: {\n      const currentLength = this.fd[fd].writer\n        ? goog.global.BigInt(this.fd[fd].writer.length)\n        : goog.global.BigInt(0);\n      this.fd[fd].seekPos = currentLength + BigInt(offset);\n      break;\n    }\n\n    case constants.WASI_WHENCE_SET: {\n      this.fd[fd].seekPos = BigInt(offset);\n      break;\n    }\n  }\n\n  memory.setBigUint64(newOffsetPtr, this.fd[fd].seekPos, true);\n\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.fd_sync = function (fd) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_sync\", fd, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.fd_tell = function (fd, offsetPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_tell\", fd, offsetPtr, arguments);\n  }\n  const memory = this.getMemory();\n\n  if (!this.fd[fd].seekPos) {\n    this.fd[fd].seekPos = goog.global.BigInt(0);\n  }\n\n  memory.setBigUint64(offsetPtr, this.fd[fd].seekPos, true);\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.fd_write = function (fd, iovs, iovsLength, nwritten) {\n  if (DEBUG_WASI) {\n    console.log(\"fd_write\", { fd, iovs, iovsLength, nwritten });\n  }\n\n  let append = false;\n  const memory = this.getMemory();\n  this.fd[fd].buffers = this.fd[fd].buffers || [];\n\n  // append-only, if starting new write from beginning\n  if (this.fd[fd].seekPos === goog.global.BigInt(0) && this.fd[fd].buffers.length > 0) {\n    append = true;\n  }\n  let written = 0;\n\n  for (let index = 0; index < iovsLength; index++) {\n    const ptr = iovs + index * 8;\n    const buf = memory.getUint32(ptr, true);\n    const bufLength = memory.getUint32(ptr + 4, true);\n    written += bufLength;\n    const chunk = new Uint8Array(memory.buffer, buf, bufLength);\n    if (append) {\n      this.fd[fd].buffers.unshift(chunk.slice(0, bufLength));\n    } else {\n      this.fd[fd].buffers.push(chunk.slice(0, bufLength));\n    }\n  }\n\n  this.fd[fd].seekPos += goog.global.BigInt(written);\n\n  memory.setUint32(nwritten, written, true);\n\n  if ([1, 2].includes(fd)) {\n    console.log(decoder.decode(concatUint8Arrays(this.fd[fd].buffers)));\n  }\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.path_create_directory = function (fd, pathPtr, pathLength) {\n  if (DEBUG_WASI) {\n    console.log(\"path_create_directory\", fd, pathPtr, pathLength, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.path_filestat_get = function (fd, flags, pathPtr, pathLength, bufPtr) {\n  if (DEBUG_WASI) {\n    console.log(\"path_filestat_get\", fd, flags, pathPtr, pathLength, bufPtr, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.path_filestat_set_times = function (\n  fd,\n  dirflags,\n  pathPtr,\n  pathLength,\n  stAtim,\n  stMtim,\n  fstflags,\n) {\n  if (DEBUG_WASI) {\n    console.log(\n      \"path_filestat_set_times\",\n      fd,\n      dirflags,\n      pathPtr,\n      pathLength,\n      stAtim,\n      stMtim,\n      fstflags,\n      arguments,\n    );\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.path_link = function (\n  oldFd,\n  oldFlags,\n  oldPath,\n  oldPathLength,\n  newFd,\n  newPath,\n  newPathLength,\n) {\n  if (DEBUG_WASI) {\n    console.log(\n      \"path_link\",\n      oldFd,\n      oldFlags,\n      oldPath,\n      oldPathLength,\n      newFd,\n      newPath,\n      newPathLength,\n      arguments,\n    );\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.path_open = function (\n  dirfd,\n  dirflags,\n  pathPtr,\n  pathLength,\n  oflags,\n  fsRightsBase,\n  fsRightsInheriting,\n  fsFlags,\n  fd,\n) {\n  if (DEBUG_WASI) {\n    console.log(\n      \"path_open\",\n      dirfd,\n      dirflags,\n      pathPtr,\n      pathLength,\n      oflags,\n      fsRightsBase,\n      fsRightsInheriting,\n      fsFlags,\n      fd,\n      arguments,\n    );\n  }\n  const memory = this.getMemory();\n  const directoryPath = (this.fd[dirfd] || { path: \"/\" }).path;\n  const pathOpenBytes = new Uint8Array(memory.buffer, pathPtr, pathLength);\n  const pathOpenString = decoder.decode(pathOpenBytes);\n  const pathOpen = assertLeadingSlash(\n    goog.string.path.normalizePath(\n      goog.string.path.join(dirfd === 3 ? \"\" : directoryPath, pathOpenString),\n    ),\n  );\n\n  if (DEBUG_WASI) {\n    console.log(\";; opening path\", pathOpen, \"withREader\", shouldOpenReader(fsRightsBase));\n  }\n\n  if (pathOpen.startsWith(\"/..\") || pathOpen === \"/._\" || pathOpen === \"/.AppleDouble\") {\n    return constants.WASI_EBADF;\n  }\n\n  const alreadyExists = Object.values(this.fd).find(\n    (entry) => entry.path === pathOpen && Array.isArray(entry.buffers),\n  );\n  let actualFd;\n\n  if (alreadyExists) {\n    actualFd = alreadyExists.fd;\n  } else {\n    actualFd = this.fd.length;\n    this.fd[actualFd] = { fd: actualFd };\n  }\n\n  let fileType = \"file\";\n\n  this.fd[actualFd] = {\n    ...this.fd[actualFd],\n    path: pathOpen,\n    type: fileType,\n    seekPos: goog.global.BigInt(0),\n    buffers: alreadyExists ? this.fd[actualFd].buffers : [],\n  };\n\n  if ((oflags & constants.WASI_O_DIRECTORY) !== 0) {\n    fileType = \"dir\";\n  }\n\n  if (shouldOpenReader(fsRightsBase) && DEBUG_WASI) {\n    console.log(\"should open a read handle for\", pathOpen);\n  }\n\n  memory.setUint32(fd, actualFd, true);\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.path_readlink = function (fd, pathPtr, pathLength, buf, bufLength, bufused) {\n  if (DEBUG_WASI) {\n    console.log(\"path_readlink\", fd, pathPtr, pathLength, buf, bufLength, bufused, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.path_remove_directory = function (fd, pathPtr, pathLength) {\n  if (DEBUG_WASI) {\n    console.log(\"path_remove_directory\", fd, pathPtr, pathLength);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.path_rename = function (\n  oldFd,\n  oldPath,\n  oldPathLength,\n  newFd,\n  newPath,\n  newPathLength,\n) {\n  if (DEBUG_WASI) {\n    console.log(\n      \"path_rename\",\n      oldFd,\n      oldPath,\n      oldPathLength,\n      newFd,\n      newPath,\n      newPathLength,\n      arguments,\n    );\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.path_symlink = function (oldPath, oldPathLength, fd, newPath, newPathLength) {\n  if (DEBUG_WASI) {\n    console.log(\"path_symlink\", oldPath, oldPathLength, fd, newPath, newPathLength, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.path_unlink_file = function (fd, pathPtr, pathLength) {\n  if (fd > 3 && DEBUG_WASI) {\n    console.log(\"path_unlink_file\", fd, pathPtr, pathLength, arguments);\n  }\n  // actual file removal goes here\n\n  return constants.WASI_ESUCCESS;\n};\n\nWASI.prototype.poll_oneoff = function (sin, sout, nsubscriptions, nevents) {\n  if (DEBUG_WASI) {\n    console.log(\"poll_oneoff\", sin, sout, nsubscriptions, nevents, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.proc_exit = function (rval) {\n  if (DEBUG_WASI) {\n    console.log(\"proc_exit\", rval, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.proc_raise = function (sig) {\n  if (DEBUG_WASI) {\n    console.log(\"proc_raise\", sig, arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.random_get = function (bufPtr, bufLength) {\n  if (DEBUG_WASI) {\n    console.log(\"random_get\", bufPtr, bufLength);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.sched_yield = function () {\n  if (DEBUG_WASI) {\n    console.log(\"sched_yield\", arguments);\n  }\n  return constants.WASI_ESUCCESS;\n};\nWASI.prototype.sock_recv = function () {\n  if (DEBUG_WASI) {\n    console.log(\"sock_recv\", arguments);\n  }\n  return constants.WASI_ENOSYS;\n};\nWASI.prototype.sock_send = function () {\n  if (DEBUG_WASI) {\n    console.log(\"sock_send\", arguments);\n  }\n  return constants.WASI_ENOSYS;\n};\nWASI.prototype.sock_shutdown = function () {\n  if (DEBUG_WASI) {\n    console.log(\"sock_shutdown\", arguments);\n  }\n  return constants.WASI_ENOSYS;\n};\n\n// helpers\n\nWASI.prototype.findBuffers = function (filePath /* string */) {\n  const maybeFd = Object.values(this.fd).find(({ path }) => path === filePath);\n  return maybeFd && maybeFd.buffers;\n};\n\n// fs api\n\nWASI.prototype.readdir = function (dirname /* string */) {\n  const prefixPath = (assertLeadingSlash(normalizePath(dirname)) + \"/\").replace(\"//\", \"/\");\n  const files = [];\n  Object.values(this.fd).forEach(({ path }) => {\n    // console.log({\n    //   path,\n    //   prefixPath,\n    //   replaced: path.replace(prefixPath, \"\"),\n    //   isTrue: !/\\//g.test(path.replace(prefixPath, \"\")),\n    // });\n    return !/\\//g.test(path.replace(prefixPath, \"\")) && files.push(path);\n  });\n  return files.map((p) => removeLeadingSlash(p.replace(prefixPath, \"\"))).filter((p) => !!p);\n};\n\nWASI.prototype.writeFile = function (fname /* string */, data /* Uint8Array */) {\n  const filePath = assertLeadingSlash(normalizePath(fname));\n\n  const nextFd = Object.keys(this.fd).length;\n  const maybeOldFd = Object.values(this.fd).find(({ path }) => path === filePath);\n\n  this.fd[nextFd] = {\n    fd: nextFd,\n    path: filePath,\n    seekPos: goog.global.BigInt(0),\n    buffers: [data],\n  };\n\n  if (maybeOldFd) {\n    delete this.fd[maybeOldFd];\n  }\n};\n\nWASI.prototype.appendFile = function (fname /* string */, data /* Uint8Array */) {\n  const filePath = assertLeadingSlash(normalizePath(fname));\n\n  const buffers = this.findBuffers(filePath);\n\n  if (!buffers) {\n    console.error(`Can't append to non-existing file ${fname}`);\n  } else {\n    buffers.push(data);\n  }\n};\n\nWASI.prototype.readFile = function (fname /* string */) {\n  const filePath = assertLeadingSlash(normalizePath(fname));\n\n  const buffers = this.findBuffers(filePath);\n\n  if (buffers) {\n    return concatUint8Arrays(buffers);\n  }\n};\n\nWASI.prototype.readStdOut = function () {\n  const maybeFd = Object.values(this.fd[0]);\n  const buffers = (maybeFd && maybeFd.buffers) || [];\n  return concatUint8Arrays(buffers);\n};\n\nWASI.prototype.unlink = function (fname /* string */) {\n  const filePath = assertLeadingSlash(normalizePath(fname));\n  const maybeFd = Object.values(this.fd).find(({ path }) => path === filePath);\n\n  if (maybeFd) {\n    delete this.fd[maybeFd];\n  } else {\n    console.error(`While trying to unlink ${filePath}, path not found`);\n  }\n};\n\nWASI.prototype.mkdir = function (dirname /* string */) {\n  const cleanPath = assertLeadingSlash(normalizePath(dirname));\n  const files = [];\n  Object.values(this.fd).forEach(({ path }) => {\n    return path.startsWith(cleanPath) && files.push(path);\n  });\n\n  const alreadyExist = files.length > 0;\n  if (alreadyExist) {\n    console.warn(`mkdir: path ${dirname} already exists`);\n  } else {\n    const nextFd = Object.keys(this.fd).length;\n    this.fd[nextFd] = {\n      fd: nextFd,\n      path: cleanPath,\n    };\n  }\n};\n","/**\n * @fileoverview Zlib namespace. Zlib \u306e\u4ed5\u69d8\u306b\u6e96\u62e0\u3057\u305f\u5727\u7e2e\u306f Zlib.Deflate \u3067\u5b9f\u88c5\n * \u3055\u308c\u3066\u3044\u308b. \u3053\u308c\u306f Inflate \u3068\u306e\u5171\u5b58\u3092\u8003\u616e\u3057\u3066\u3044\u308b\u70ba.\n */\n\ngoog.provide(\"Zlib\");\n\n// -----------------------------------------------------------------------------\n\ngoog.scope(function () {\n  /**\n   * Compression Method\n   * @enum {number}\n   */\n  Zlib.CompressionMethod = {\n    DEFLATE: 8,\n    RESERVED: 15,\n  };\n\n  // end of scope\n});\n","/**\n * @fileoverview \u96d1\u591a\u306a\u95a2\u6570\u7fa4\u3092\u307e\u3068\u3081\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u5b9f\u88c5.\n */\ngoog.provide(\"Zlib.Util\");\n\ngoog.scope(function () {\n  /**\n   * Byte String \u304b\u3089 Byte Array \u306b\u5909\u63db.\n   * @param {!string} string_\n   * @return {Uint8Array} byte array.\n   */\n  Zlib.Util.stringToByteArray = function (string_) {\n    /** @type {!Array.<(string|number)>} */\n    const temporary = [...string_];\n    /** @type {number} */\n    let index;\n    /** @type {number} */\n    let il;\n\n    for (index = 0, il = temporary.length; index < il; index++) {\n      temporary[index] = (temporary[index].charPointAt(0) & 0xff) >>> 0;\n    }\n\n    return new Uint8Array([temporary]);\n  };\n\n  // end of scope\n});\n","/* eslint-disable unicorn/numeric-separators-style,camelcase,no-unused-expressions */\n/**\n * @fileoverview Adler32 checksum \u5b9f\u88c5.\n */\ngoog.provide(\"Zlib.Adler32\");\n\ngoog.require(\"Zlib.Util\");\n\ngoog.scope(function () {\n  /**\n   * Adler32 \u30cf\u30c3\u30b7\u30e5\u5024\u306e\u4f5c\u6210\n   * @param {Uint8Array|string} array\n   * @return {number} Adler32\n   */\n  Zlib.Adler32 = function (array) {\n    if (typeof array === \"string\") {\n      array = Zlib.Util.stringToByteArray(array);\n    }\n    return Zlib.Adler32.update(1, array);\n  };\n\n  /**\n   * Adler32 \u30cf\u30c3\u30b7\u30e5\u5024\u306e\u66f4\u65b0\n   * @param {number} adler\n   * @param {Uint8Array} array\n   * @return {number} Adler32\n   */\n  Zlib.Adler32.update = function (adler, array) {\n    /** @type {number} */\n    let s1 = adler & 0xffff;\n    /** @type {number} */\n    let s2 = (adler >>> 16) & 0xffff;\n    /** @type {number} array length */\n    let length_ = array.length;\n    /** @type {number} loop length (don't overflow) */\n    let tlen;\n    /** @type {number} array index */\n    let index = 0;\n\n    while (length_ > 0) {\n      tlen =\n        length_ > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : length_;\n      length_ -= tlen;\n      do {\n        s1 += array[index++];\n        s2 += s1;\n      } while (--tlen);\n\n      s1 %= 65521;\n      s2 %= 65521;\n    }\n\n    return ((s2 << 16) | s1) >>> 0;\n  };\n\n  /**\n   * Adler32 \u6700\u9069\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\n   * \u73fe\u72b6\u3067\u306f 1024 \u7a0b\u5ea6\u304c\u6700\u9069.\n   * @see http://jsperf.com/adler-32-simple-vs-optimized/3\n   * @define {number}\n   */\n  Zlib.Adler32.OptimizationParameter = 1024;\n\n  // end of scope\n});\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\n/* eslint-disable unicorn/numeric-separators-style,camelcase,no-unused-expressions */\ngoog.provide(\"Zlib.Huffman\");\n\ngoog.scope(function () {\n  /**\n   * build huffman table from length list.\n   * @param {Uint8Array} lengths length list.\n   * @return {Array.<number,number,number>} huffman table.\n   */\n  Zlib.Huffman.buildHuffmanTable = function (lengths) {\n    /** @type {number} length list size. */\n    const listSize = lengths.length;\n    /** @type {number} max code length for table size. */\n    let maxCodeLength = 0;\n    /** @type {number} min code length for table size. */\n    let minCodeLength = Number.POSITIVE_INFINITY;\n    /** @type {number} bit length. */\n    let bitLength;\n    /** @type {number} huffman code. */\n    let code;\n    /**\n     * @type {number} skip length for table filling.\n     */\n    let skip;\n    /** @type {number} reversed code. */\n    let reversed;\n    /** @type {number} reverse temp. */\n    let rtemp;\n    /** @type {number} loop counter. */\n    let index;\n    /** @type {number} loop limit. */\n    let il;\n    /** @type {number} loop counter. */\n    let index_;\n    /** @type {number} table value. */\n    let value;\n\n    // Math.max \u306f\u9045\u3044\u306e\u3067\u6700\u9577\u306e\u5024\u306f for-loop \u3067\u53d6\u5f97\u3059\u308b\n    for (index = 0, il = listSize; index < il; ++index) {\n      if (lengths[index] > maxCodeLength) {\n        maxCodeLength = lengths[index];\n      }\n      if (lengths[index] < minCodeLength) {\n        minCodeLength = lengths[index];\n      }\n    }\n\n    /** @type {number} table size. */\n    const size = 1 << maxCodeLength;\n    /** @type {Uint8Array|Uint16Array|Uint32Array} huffman code table. */\n    const table = new Uint32Array(size);\n\n    // \u30d3\u30c3\u30c8\u9577\u306e\u77ed\u3044\u9806\u304b\u3089\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u3092\u5272\u308a\u5f53\u3066\u308b\n    for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength; ) {\n      for (index = 0; index < listSize; ++index) {\n        if (lengths[index] === bitLength) {\n          // \u30d3\u30c3\u30c8\u30aa\u30fc\u30c0\u30fc\u304c\u9006\u306b\u306a\u308b\u305f\u3081\u30d3\u30c3\u30c8\u9577\u5206\u4e26\u3073\u3092\u53cd\u8ee2\u3059\u308b\n          for (reversed = 0, rtemp = code, index_ = 0; index_ < bitLength; ++index_) {\n            reversed = (reversed << 1) | (rtemp & 1);\n            rtemp >>= 1;\n          }\n\n          // \u6700\u5927\u30d3\u30c3\u30c8\u9577\u3092\u3082\u3068\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u305f\u3081\u3001\n          // \u6700\u5927\u30d3\u30c3\u30c8\u9577\u4ee5\u5916\u3067\u306f 0 / 1 \u3069\u3061\u3089\u3067\u3082\u826f\u3044\u7b87\u6240\u304c\u3067\u304d\u308b\n          // \u305d\u306e\u3069\u3061\u3089\u3067\u3082\u826f\u3044\u5834\u6240\u306f\u540c\u3058\u5024\u3067\u57cb\u3081\u308b\u3053\u3068\u3067\n          // \u672c\u6765\u306e\u30d3\u30c3\u30c8\u9577\u4ee5\u4e0a\u306e\u30d3\u30c3\u30c8\u6570\u53d6\u5f97\u3057\u3066\u3082\u554f\u984c\u304c\u8d77\u3053\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n          value = (bitLength << 16) | index;\n          for (index_ = reversed; index_ < size; index_ += skip) {\n            table[index_] = value;\n          }\n\n          ++code;\n        }\n      }\n\n      // \u6b21\u306e\u30d3\u30c3\u30c8\u9577\u3078\n      ++bitLength;\n      code <<= 1;\n      skip <<= 1;\n    }\n\n    return [table, maxCodeLength, minCodeLength];\n  };\n\n  // end of scope\n});\n","/* eslint-disable unicorn/numeric-separators-style,camelcase,no-unused-expressions */\ngoog.provide(\"Zlib.RawInflate\");\n\ngoog.require(\"Zlib.Huffman\");\n\n// -----------------------------------------------------------------------------\n\n/** @define {number} buffer block size. */\nconst ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]\n\n// -----------------------------------------------------------------------------\n\ngoog.scope(function () {\n  const buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;\n\n  /**\n   * @constructor\n   * @param {!(Uint8Array)} input\n   * @param {Object} [opt_parameters]\n   *\n   * opt_params \u306f\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n   *   - index: input buffer \u306e deflate \u30b3\u30f3\u30c6\u30ca\u306e\u958b\u59cb\u4f4d\u7f6e.\n   *   - blockSize: \u30d0\u30c3\u30d5\u30a1\u306e\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba.\n   *   - bufferType: Zlib.RawInflate.BufferType \u306e\u5024\u306b\u3088\u3063\u3066\u30d0\u30c3\u30d5\u30a1\u306e\u7ba1\u7406\u65b9\u6cd5\u3092\u6307\u5b9a\u3059\u308b.\n   *   - resize: \u78ba\u4fdd\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u304c\u5b9f\u969b\u306e\u5927\u304d\u3055\u3088\u308a\u5927\u304d\u304b\u3063\u305f\u5834\u5408\u306b\u5207\u308a\u8a70\u3081\u308b.\n   */\n  Zlib.RawInflate = function (input, opt_parameters) {\n    /** @type {!(Uint8Array)} inflated buffer */\n    this.buffer;\n    /** @type {!Array.<(Uint8Array)>} */\n    this.blocks = [];\n    /** @type {number} block size. */\n    this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;\n    /** @type {!number} total output buffer pointer. */\n    this.totalpos = 0;\n    /** @type {!number} input buffer pointer. */\n    this.ip = 0;\n    /** @type {!number} bit stream reader buffer. */\n    this.bitsbuf = 0;\n    /** @type {!number} bit stream reader buffer size. */\n    this.bitsbuflen = 0;\n    /** @type {!(Uint8Array)} input buffer. */\n    this.input = new Uint8Array(input);\n    /** @type {!(Uint8Array)} output buffer. */\n    this.output;\n    /** @type {!number} output buffer pointer. */\n    this.op;\n    /** @type {boolean} is final block flag. */\n    this.bfinal = false;\n    /** @type {Zlib.RawInflate.BufferType} buffer management. */\n    this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;\n    /** @type {boolean} resize flag for memory size optimization. */\n    this.resize = false;\n\n    // option parameters\n    if (opt_parameters || !(opt_parameters = {})) {\n      if (opt_parameters.index) {\n        this.ip = opt_parameters.index;\n      }\n      if (opt_parameters.bufferSize) {\n        this.bufferSize = opt_parameters.bufferSize;\n      }\n      if (opt_parameters.bufferType) {\n        this.bufferType = opt_parameters.bufferType;\n      }\n      if (opt_parameters.resize) {\n        this.resize = opt_parameters.resize;\n      }\n    }\n\n    // initialize\n    switch (this.bufferType) {\n      case Zlib.RawInflate.BufferType.BLOCK:\n        this.op = Zlib.RawInflate.MaxBackwardLength;\n        this.output = new Uint8Array(\n          Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength,\n        );\n        break;\n      case Zlib.RawInflate.BufferType.ADAPTIVE:\n        this.op = 0;\n        this.output = new Uint8Array(this.bufferSize);\n        break;\n      default:\n        throw new Error(\"invalid inflate mode\");\n    }\n  };\n\n  /**\n   * @enum {number}\n   */\n  Zlib.RawInflate.BufferType = {\n    BLOCK: 0,\n    ADAPTIVE: 1,\n  };\n\n  /**\n   * decompress.\n   * @return {!(Uint8Array)} inflated buffer.\n   */\n  Zlib.RawInflate.prototype.decompress = function () {\n    while (!this.bfinal) {\n      this.parseBlock();\n    }\n\n    switch (this.bufferType) {\n      case Zlib.RawInflate.BufferType.BLOCK:\n        return this.concatBufferBlock();\n      case Zlib.RawInflate.BufferType.ADAPTIVE:\n        return this.concatBufferDynamic();\n      default:\n        throw new Error(\"invalid inflate mode\");\n    }\n  };\n\n  /**\n   * @const\n   * @type {number} max backward length for LZ77.\n   */\n  Zlib.RawInflate.MaxBackwardLength = 32768;\n\n  /**\n   * @const\n   * @type {number} max copy length for LZ77.\n   */\n  Zlib.RawInflate.MaxCopyLength = 258;\n\n  /**\n   * huffman order\n   * @const\n   * @type {!(Uint8Array)}\n   */\n  Zlib.RawInflate.Order = (function (table) {\n    return new Uint16Array(table);\n  })([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n\n  /**\n   * huffman length code table.\n   * @const\n   * @type {!(Uint16Array)}\n   */\n  Zlib.RawInflate.LengthCodeTable = (function (table) {\n    return new Uint16Array(table);\n  })([\n    0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011,\n    0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073,\n    0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102,\n  ]);\n\n  /**\n   * huffman length extra-bits table.\n   * @const\n   * @type {!(Uint8Array)}\n   */\n  Zlib.RawInflate.LengthExtraTable = (function (table) {\n    return new Uint8Array(table);\n  })([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);\n\n  /**\n   * huffman dist code table.\n   * @const\n   * @type {!(Uint16Array)}\n   */\n  Zlib.RawInflate.DistCodeTable = (function (table) {\n    return new Uint16Array(table);\n  })([\n    0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031,\n    0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01,\n    0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001,\n  ]);\n\n  /**\n   * huffman dist extra-bits table.\n   * @const\n   * @type {!(Uint8Array)}\n   */\n  Zlib.RawInflate.DistExtraTable = (function (table) {\n    return new Uint8Array(table);\n  })([\n    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,\n    13,\n  ]);\n\n  /**\n   * fixed huffman length code table\n   * @const\n   * @type {!Array}\n   */\n  Zlib.RawInflate.FixedLiteralLengthTable = (function (table) {\n    return table;\n  })(\n    (function () {\n      const lengths = new Uint8Array(288);\n      let index, il;\n\n      for (index = 0, il = lengths.length; index < il; ++index) {\n        lengths[index] = index <= 143 ? 8 : index <= 255 ? 9 : index <= 279 ? 7 : 8;\n      }\n\n      return buildHuffmanTable(lengths);\n    })(),\n  );\n\n  /**\n   * fixed huffman distance code table\n   * @const\n   * @type {!Array}\n   */\n  Zlib.RawInflate.FixedDistanceTable = (function (table) {\n    return table;\n  })(\n    (function () {\n      const lengths = new Uint8Array(30);\n      let index, il;\n\n      for (index = 0, il = lengths.length; index < il; ++index) {\n        lengths[index] = 5;\n      }\n\n      return buildHuffmanTable(lengths);\n    })(),\n  );\n\n  /**\n   * parse deflated block.\n   */\n  Zlib.RawInflate.prototype.parseBlock = function () {\n    /** @type {number} header */\n    let hdr = this.readBits(3);\n\n    // BFINAL\n    if (hdr & 0x1) {\n      this.bfinal = true;\n    }\n\n    // BTYPE\n    hdr >>>= 1;\n    switch (hdr) {\n      // uncompressed\n      case 0:\n        this.parseUncompressedBlock();\n        break;\n      // fixed huffman\n      case 1:\n        this.parseFixedHuffmanBlock();\n        break;\n      // dynamic huffman\n      case 2:\n        this.parseDynamicHuffmanBlock();\n        break;\n      // reserved or other\n      default:\n        throw new Error(\"unknown BTYPE: \" + hdr);\n    }\n  };\n\n  /**\n   * read inflate bits\n   * @param {number} length bits length.\n   * @return {number} read bits.\n   */\n  Zlib.RawInflate.prototype.readBits = function (length) {\n    let bitsbuf = this.bitsbuf;\n    let bitsbuflen = this.bitsbuflen;\n    const input = this.input;\n    let ip = this.ip;\n\n    /** @type {number} */\n    const inputLength = input.length;\n\n    if (ip + ((length - bitsbuflen + 7) >> 3) >= inputLength) {\n      throw new Error(\"input buffer is broken\");\n    }\n\n    // not enough buffer\n    while (bitsbuflen < length) {\n      bitsbuf |= input[ip++] << bitsbuflen;\n      bitsbuflen += 8;\n    }\n\n    /** @type {number} input and output byte. */\n    const octet = bitsbuf & /* MASK */ ((1 << length) - 1);\n    bitsbuf >>>= length;\n    bitsbuflen -= length;\n\n    this.bitsbuf = bitsbuf;\n    this.bitsbuflen = bitsbuflen;\n    this.ip = ip;\n\n    return octet;\n  };\n\n  /**\n   * read huffman code using table\n   * @param {Array.<number>|Uint8Array|Uint16Array|null} table huffman code table.\n   * @return {number} huffman code.\n   */\n  Zlib.RawInflate.prototype.readCodeByTable = function (table) {\n    let bitsbuf = this.bitsbuf;\n    let bitsbuflen = this.bitsbuflen;\n    const input = this.input;\n    let ip = this.ip;\n\n    /** @type {number} */\n    const inputLength = input.length;\n    /** @type {!(Uint8Array)} huffman code table */\n    const codeTable = table[0];\n    /** @type {number} */\n    const maxCodeLength = table[1];\n\n    // not enough buffer\n    while (bitsbuflen < maxCodeLength) {\n      if (ip >= inputLength) {\n        break;\n      }\n      bitsbuf |= input[ip++] << bitsbuflen;\n      bitsbuflen += 8;\n    }\n\n    // read max length\n    /** @type {number} code length & code (16bit, 16bit) */\n    const codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)];\n    /** @type {number} code bits length */\n    const codeLength = codeWithLength >>> 16;\n\n    if (codeLength > bitsbuflen) {\n      throw new Error(\"invalid code length: \" + codeLength);\n    }\n\n    this.bitsbuf = bitsbuf >> codeLength;\n    this.bitsbuflen = bitsbuflen - codeLength;\n    this.ip = ip;\n\n    return codeWithLength & 0xffff;\n  };\n\n  /**\n   * parse uncompressed block.\n   */\n  Zlib.RawInflate.prototype.parseUncompressedBlock = function () {\n    const input = this.input;\n    let ip = this.ip;\n    let output = this.output;\n    let op = this.op;\n\n    /** @type {number} */\n    const inputLength = input.length;\n    /** @type {number} block length */\n    let length_;\n    /** @type {number} output buffer length */\n    const olength = output.length;\n    /** @type {number} copy counter */\n    let preCopy;\n\n    // skip buffered header bits\n    this.bitsbuf = 0;\n    this.bitsbuflen = 0;\n\n    // len\n    if (ip + 1 >= inputLength) {\n      throw new Error(\"invalid uncompressed block header: LEN\");\n    }\n    length_ = input[ip++] | (input[ip++] << 8);\n\n    // nlen\n    if (ip + 1 >= inputLength) {\n      throw new Error(\"invalid uncompressed block header: NLEN\");\n    }\n\n    /** @type {number} number for check block length */\n    const nlen = input[ip++] | (input[ip++] << 8);\n\n    // check len & nlen\n    if (length_ === ~nlen) {\n      throw new Error(\"invalid uncompressed block header: length verify\");\n    }\n\n    // check size\n    if (ip + length_ > input.length) {\n      throw new Error(\"input buffer is broken\");\n    }\n\n    // expand buffer\n    switch (this.bufferType) {\n      case Zlib.RawInflate.BufferType.BLOCK:\n        // pre copy\n        while (op + length_ > output.length) {\n          preCopy = olength - op;\n          length_ -= preCopy;\n          output.set(input.subarray(ip, ip + preCopy), op);\n          op += preCopy;\n          ip += preCopy;\n\n          this.op = op;\n          output = this.expandBufferBlock();\n          op = this.op;\n        }\n        break;\n      case Zlib.RawInflate.BufferType.ADAPTIVE:\n        while (op + length_ > output.length) {\n          output = this.expandBufferAdaptive({ fixRatio: 2 });\n        }\n        break;\n      default:\n        throw new Error(\"invalid inflate mode\");\n    }\n\n    // copy\n    output.set(input.subarray(ip, ip + length_), op);\n    op += length_;\n    ip += length_;\n\n    this.ip = ip;\n    this.op = op;\n    this.output = output;\n  };\n\n  /**\n   * parse fixed huffman block.\n   */\n  Zlib.RawInflate.prototype.parseFixedHuffmanBlock = function () {\n    switch (this.bufferType) {\n      case Zlib.RawInflate.BufferType.ADAPTIVE:\n        this.decodeHuffmanAdaptive(\n          Zlib.RawInflate.FixedLiteralLengthTable,\n          Zlib.RawInflate.FixedDistanceTable,\n        );\n        break;\n      case Zlib.RawInflate.BufferType.BLOCK:\n        this.decodeHuffmanBlock(\n          Zlib.RawInflate.FixedLiteralLengthTable,\n          Zlib.RawInflate.FixedDistanceTable,\n        );\n        break;\n      default:\n        throw new Error(\"invalid inflate mode\");\n    }\n  };\n\n  /**\n   * parse dynamic huffman block.\n   */\n  Zlib.RawInflate.prototype.parseDynamicHuffmanBlock = function () {\n    /** @type {number} number of literal and length codes. */\n    const hlit = this.readBits(5) + 257;\n    /** @type {number} number of distance codes. */\n    const hdist = this.readBits(5) + 1;\n    /** @type {number} number of code lengths. */\n    const hclen = this.readBits(4) + 4;\n    /** @type {Uint8Array} code lengths. */\n    const codeLengths = new Uint8Array(Zlib.RawInflate.Order.length);\n    /** @type {number} */\n    let code;\n    /** @type {number} */\n    let previous;\n    /** @type {number} */\n    let repeat;\n    /** @type {number} loop counter. */\n    let index;\n    /** @type {number} loop limit. */\n    let il;\n\n    // decode code lengths\n    for (index = 0; index < hclen; ++index) {\n      codeLengths[Zlib.RawInflate.Order[index]] = this.readBits(3);\n    }\n\n    // decode length table\n    /** @type {Array.<number,number,number>} code lengths table. */\n    const codeLengthsTable = buildHuffmanTable(codeLengths);\n    /** @type {Uint8Array} code length table. */\n    const lengthTable = new Uint8Array(hlit + hdist);\n    for (index = 0, il = hlit + hdist; index < il; ) {\n      code = this.readCodeByTable(codeLengthsTable);\n      switch (code) {\n        case 16:\n          repeat = 3 + this.readBits(2);\n          while (repeat--) {\n            lengthTable[index++] = previous;\n          }\n          break;\n        case 17:\n          repeat = 3 + this.readBits(3);\n          while (repeat--) {\n            lengthTable[index++] = 0;\n          }\n          previous = 0;\n          break;\n        case 18:\n          repeat = 11 + this.readBits(7);\n          while (repeat--) {\n            lengthTable[index++] = 0;\n          }\n          previous = 0;\n          break;\n        default:\n          lengthTable[index++] = code;\n          previous = code;\n          break;\n      }\n    }\n\n    /** @type {Array.<number>|Uint8Array|null} literal and length code table. */\n    const litlenTable = buildHuffmanTable(lengthTable.subarray(0, hlit));\n    /** @type {Array.<number>|Uint8Array} distance code table. */\n    const distTable = buildHuffmanTable(lengthTable.subarray(hlit));\n\n    switch (this.bufferType) {\n      case Zlib.RawInflate.BufferType.ADAPTIVE:\n        this.decodeHuffmanAdaptive(litlenTable, distTable);\n        break;\n      case Zlib.RawInflate.BufferType.BLOCK:\n        this.decodeHuffmanBlock(litlenTable, distTable);\n        break;\n      default:\n        throw new Error(\"invalid inflate mode\");\n    }\n  };\n\n  /**\n   * decode huffman code\n   * @param {Array.<number>|Uint8Array|Uint16Array} litlen literal and length code table.\n   * @param {Array.<number>|Uint8Array} dist distination code table.\n   */\n  Zlib.RawInflate.prototype.decodeHuffmanBlock = function (litlen, dist) {\n    let output = this.output;\n    let op = this.op;\n\n    this.currentLitlenTable = litlen;\n\n    /** @type {number} output position limit. */\n    const olength = output.length - Zlib.RawInflate.MaxCopyLength;\n    /** @type {number} huffman code. */\n    let code;\n    /** @type {number} table index. */\n    let ti;\n    /** @type {number} huffman code distination. */\n    let codeDist;\n    /** @type {number} huffman code length. */\n    let codeLength;\n\n    const lengthCodeTable = Zlib.RawInflate.LengthCodeTable;\n    const lengthExtraTable = Zlib.RawInflate.LengthExtraTable;\n    const distCodeTable = Zlib.RawInflate.DistCodeTable;\n    const distExtraTable = Zlib.RawInflate.DistExtraTable;\n\n    while ((code = this.readCodeByTable(litlen)) !== 256) {\n      // literal\n      if (code < 256) {\n        if (op >= olength) {\n          this.op = op;\n          output = this.expandBufferBlock();\n          op = this.op;\n        }\n        output[op++] = code;\n\n        continue;\n      }\n\n      // length code\n      ti = code - 257;\n      codeLength = lengthCodeTable[ti];\n      if (lengthExtraTable[ti] > 0) {\n        codeLength += this.readBits(lengthExtraTable[ti]);\n      }\n\n      // dist code\n      code = this.readCodeByTable(dist);\n      codeDist = distCodeTable[code];\n      if (distExtraTable[code] > 0) {\n        codeDist += this.readBits(distExtraTable[code]);\n      }\n\n      // lz77 decode\n      if (op >= olength) {\n        this.op = op;\n        output = this.expandBufferBlock();\n        op = this.op;\n      }\n      while (codeLength--) {\n        output[op] = output[op++ - codeDist];\n      }\n    }\n\n    while (this.bitsbuflen >= 8) {\n      this.bitsbuflen -= 8;\n      this.ip--;\n    }\n    this.op = op;\n  };\n\n  /**\n   * decode huffman code (adaptive)\n   * @param {Array.<number>|Uint8Array|Uint16Array} litlen literal and length code table.\n   * @param {Array.<number>|Uint8Array} dist distination code table.\n   */\n  Zlib.RawInflate.prototype.decodeHuffmanAdaptive = function (litlen, dist) {\n    let output = this.output;\n    let op = this.op;\n\n    this.currentLitlenTable = litlen;\n\n    /** @type {number} output position limit. */\n    let olength = output.length;\n    /** @type {number} huffman code. */\n    let code;\n    /** @type {number} table index. */\n    let ti;\n    /** @type {number} huffman code distination. */\n    let codeDist;\n    /** @type {number} huffman code length. */\n    let codeLength;\n\n    const lengthCodeTable = Zlib.RawInflate.LengthCodeTable;\n    const lengthExtraTable = Zlib.RawInflate.LengthExtraTable;\n    const distCodeTable = Zlib.RawInflate.DistCodeTable;\n    const distExtraTable = Zlib.RawInflate.DistExtraTable;\n\n    while ((code = this.readCodeByTable(litlen)) !== 256) {\n      // literal\n      if (code < 256) {\n        if (op >= olength) {\n          output = this.expandBufferAdaptive();\n          olength = output.length;\n        }\n        output[op++] = code;\n\n        continue;\n      }\n\n      // length code\n      ti = code - 257;\n      codeLength = lengthCodeTable[ti];\n      if (lengthExtraTable[ti] > 0) {\n        codeLength += this.readBits(lengthExtraTable[ti]);\n      }\n\n      // dist code\n      code = this.readCodeByTable(dist);\n      codeDist = distCodeTable[code];\n      if (distExtraTable[code] > 0) {\n        codeDist += this.readBits(distExtraTable[code]);\n      }\n\n      // lz77 decode\n      if (op + codeLength > olength) {\n        output = this.expandBufferAdaptive();\n        olength = output.length;\n      }\n      while (codeLength--) {\n        output[op] = output[op++ - codeDist];\n      }\n    }\n\n    while (this.bitsbuflen >= 8) {\n      this.bitsbuflen -= 8;\n      this.ip--;\n    }\n    this.op = op;\n  };\n\n  /**\n   * expand output buffer.\n   * @param {Object} [opt_parameter]\n   * @return {!(Uint8Array)} output buffer.\n   */\n  Zlib.RawInflate.prototype.expandBufferBlock = function (opt_parameter) {\n    /** @type {!(Uint8Array)} store buffer. */\n    const buffer = new Uint8Array(this.op - Zlib.RawInflate.MaxBackwardLength);\n    /** @type {number} backward base point */\n    const backward = this.op - Zlib.RawInflate.MaxBackwardLength;\n\n    const output = this.output;\n\n    // copy to output buffer\n    buffer.set(output.subarray(Zlib.RawInflate.MaxBackwardLength, buffer.length));\n\n    this.blocks.push(buffer);\n    this.totalpos += buffer.length;\n\n    // copy to backward buffer\n    output.set(output.subarray(backward, backward + Zlib.RawInflate.MaxBackwardLength));\n\n    this.op = Zlib.RawInflate.MaxBackwardLength;\n\n    return output;\n  };\n\n  /**\n   * expand output buffer. (adaptive)\n   * @param {Object=} opt_parameter\n   * @return {!(Uint8Array)} output buffer pointer.\n   */\n  Zlib.RawInflate.prototype.expandBufferAdaptive = function (opt_parameter) {\n    /** @type {number} expantion ratio. */\n    let ratio = Math.trunc(this.input.length / this.ip + 1);\n    /** @type {number} maximum number of huffman code. */\n    let maxHuffCode;\n    /** @type {number} new output buffer size. */\n    let newSize;\n    /** @type {number} max inflate size. */\n    let maxInflateSize;\n\n    const input = this.input;\n    const output = this.output;\n\n    if (opt_parameter) {\n      if (typeof opt_parameter.fixRatio === \"number\") {\n        ratio = opt_parameter.fixRatio;\n      }\n      if (typeof opt_parameter.addRatio === \"number\") {\n        ratio += opt_parameter.addRatio;\n      }\n    }\n\n    // calculate new buffer size\n    if (ratio < 2) {\n      maxHuffCode = (input.length - this.ip) / this.currentLitlenTable[2];\n      maxInflateSize = Math.trunc((maxHuffCode / 2) * 258);\n      newSize =\n        maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;\n    } else {\n      newSize = output.length * ratio;\n    }\n\n    // buffer expantion\n    /** @type {!(Uint8Array)} store buffer. */\n    const buffer = new Uint8Array(newSize);\n    buffer.set(output);\n\n    this.output = buffer;\n\n    return this.output;\n  };\n\n  /**\n   * concat output buffer.\n   * @return {!(Uint8Array)} output buffer.\n   */\n  Zlib.RawInflate.prototype.concatBufferBlock = function () {\n    /** @type {number} buffer pointer. */\n    let pos = 0;\n    /** @type {number} buffer pointer. */\n    const limit = this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength);\n    /** @type {!(Uint8Array)} output block array. */\n    const output = this.output;\n    /** @type {!Array} blocks array. */\n    const blocks = this.blocks;\n    /** @type {!(Uint8Array)} output block array. */\n    let block;\n    /** @type {!(Uint8Array)} output buffer. */\n    const buffer = new Uint8Array(limit);\n    /** @type {number} loop counter. */\n    let index;\n    /** @type {number} loop limiter. */\n    let il;\n    /** @type {number} loop counter. */\n    let index_;\n    /** @type {number} loop limiter. */\n    let jl;\n\n    // single buffer\n    if (blocks.length === 0) {\n      return this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op);\n    }\n\n    // copy to buffer\n    for (index = 0, il = blocks.length; index < il; ++index) {\n      block = blocks[index];\n      for (index_ = 0, jl = block.length; index_ < jl; ++index_) {\n        buffer[pos++] = block[index_];\n      }\n    }\n\n    // current buffer\n    for (index = Zlib.RawInflate.MaxBackwardLength, il = this.op; index < il; ++index) {\n      buffer[pos++] = output[index];\n    }\n\n    this.blocks = [];\n    this.buffer = buffer;\n\n    return this.buffer;\n  };\n\n  /**\n   * concat output buffer. (dynamic)\n   * @return {!(Uint8Array)} output buffer.\n   */\n  Zlib.RawInflate.prototype.concatBufferDynamic = function () {\n    /** @type {Uint8Array} output buffer. */\n    let buffer;\n    const op = this.op;\n    if (this.resize) {\n      buffer = new Uint8Array(op);\n      buffer.set(this.output.subarray(0, op));\n    } else {\n      buffer = this.output.subarray(0, op);\n    }\n\n    this.buffer = buffer;\n\n    return this.buffer;\n  };\n\n  // end of scope\n});\n","/* eslint-disable unicorn/numeric-separators-style,camelcase,no-unused-expressions */\ngoog.provide(\"Zlib.Inflate\");\n\ngoog.require(\"Zlib.Adler32\");\ngoog.require(\"Zlib.RawInflate\");\n\ngoog.scope(function () {\n  /**\n   * @constructor\n   * @param {Uint8Array} input\n   * @param {Object} [opt_parameters]\n   *\n   * opt_params \u306f\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n   *   - index: input buffer \u306e deflate \u30b3\u30f3\u30c6\u30ca\u306e\u958b\u59cb\u4f4d\u7f6e.\n   *   - blockSize: \u30d0\u30c3\u30d5\u30a1\u306e\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba.\n   *   - verify: \u4f38\u5f35\u304c\u7d42\u308f\u3063\u305f\u5f8c adler-32 checksum \u306e\u691c\u8a3c\u3092\u884c\u3046\u304b.\n   *   - bufferType: Zlib.Inflate.BufferType \u306e\u5024\u306b\u3088\u3063\u3066\u30d0\u30c3\u30d5\u30a1\u306e\u7ba1\u7406\u65b9\u6cd5\u3092\u6307\u5b9a\u3059\u308b.\n   *       Zlib.Inflate.BufferType \u306f Zlib.RawInflate.BufferType \u306e\u30a8\u30a4\u30ea\u30a2\u30b9.\n   */\n  Zlib.Inflate = function (input, opt_parameters) {\n    /** @type {Uint8Array} */\n    this.input = input;\n    /** @type {number} */\n    this.ip = 0;\n    /** @type {Zlib.RawInflate} */\n    this.rawinflate;\n    /** @type {(boolean|undefined)} verify flag. */\n    this.verify;\n\n    // option parameters\n    if (opt_parameters || !(opt_parameters = {})) {\n      if (opt_parameters.index) {\n        this.ip = opt_parameters.index;\n      }\n      if (opt_parameters.verify) {\n        this.verify = opt_parameters.verify;\n      }\n    }\n\n    // Compression Method and Flags\n    /** @type {number} */\n    const cmf = input[this.ip++];\n    /** @type {number} */\n    const flg = input[this.ip++];\n\n    // compression method\n    switch (cmf & 0x0f) {\n      case Zlib.CompressionMethod.DEFLATE:\n        this.method = Zlib.CompressionMethod.DEFLATE;\n        break;\n      default:\n        throw new Error(\"unsupported compression method\");\n    }\n\n    // fcheck\n    if (((cmf << 8) + flg) % 31 !== 0) {\n      throw new Error(\"invalid fcheck flag:\" + (((cmf << 8) + flg) % 31));\n    }\n\n    // fdict (not supported)\n    if (flg & 0x20) {\n      throw new Error(\"fdict flag is not supported\");\n    }\n\n    // RawInflate\n    this.rawinflate = new Zlib.RawInflate(input, {\n      index: this.ip,\n      bufferSize: opt_parameters.bufferSize,\n      bufferType: opt_parameters.bufferType,\n      resize: opt_parameters.resize,\n    });\n  };\n\n  /**\n   * @enum {number}\n   */\n  Zlib.Inflate.BufferType = Zlib.RawInflate.BufferType;\n\n  /**\n   * decompress.\n   * @return {Uint8Array} inflated buffer.\n   */\n  Zlib.Inflate.prototype.decompress = function () {\n    /** @type {Uint8Array} input buffer. */\n    const input = this.input;\n    /** @type {number} adler-32 checksum */\n    let adler32;\n    /** @type {Uint8Array} inflated buffer. */\n    const buffer = this.rawinflate.decompress();\n    this.ip = this.rawinflate.ip;\n\n    // verify adler-32\n    if (this.verify) {\n      adler32 =\n        ((input[this.ip++] << 24) |\n          (input[this.ip++] << 16) |\n          (input[this.ip++] << 8) |\n          input[this.ip++]) >>>\n        0;\n\n      if (adler32 !== Zlib.Adler32(buffer)) {\n        throw new Error(\"invalid adler-32 checksum\");\n      }\n    }\n\n    return buffer;\n  };\n\n  // end of scope\n});\n","import { dlinit } from \"./dlinit\";\nimport { WASI } from \"./filesystem/wasi\";\nimport { clearArray } from \"./utils/clear-array\";\nimport { uint2String } from \"./utils/text-encoders.js\";\nimport { logWasmModule as log } from \"./logger\";\n\ngoog.require(\"Zlib\");\ngoog.require(\"Zlib.Inflate\");\n\nconst { assert } = goog.require(\"goog.asserts\");\n\nconst PAGE_SIZE = 65536;\nconst PAGES_PER_MB = 16; // 1048576 bytes per MB / PAGE_SIZE\n\nexport const csoundWasiJsMessageCallback = ({ memory, messagePort, streamBuffer, wasi }) => {\n  return function (csound_, attribute, length_, offset) {\n    if (!memory) {\n      return;\n    }\n    const buf = new Uint8Array(memory.buffer, offset, length_);\n    const string = uint2String(buf);\n    const endsWithNewline = /\\n$/g.test(string);\n    const startsWithNewline = /^\\n/g.test(string);\n    const chunks = string.split(\"\\n\").filter((item) => item.length > 0);\n    const printableChunks = [];\n    if ((chunks.length === 0 && endsWithNewline) || startsWithNewline) {\n      printableChunks.push(streamBuffer.join(\"\"));\n      clearArray(streamBuffer);\n    }\n    chunks.forEach((chunk, index) => {\n      // if it's last chunk\n      if (index + 1 === chunks.length) {\n        if (endsWithNewline) {\n          if (index === 0) {\n            printableChunks.push(streamBuffer.join(\"\") + chunk);\n            clearArray(streamBuffer);\n          } else {\n            printableChunks.push(chunk);\n          }\n        } else {\n          streamBuffer.push(chunk);\n        }\n      } else if (index === 0) {\n        printableChunks.push(streamBuffer.join(\"\") + chunk);\n        clearArray(streamBuffer);\n      } else {\n        printableChunks.push(chunk);\n      }\n    });\n    printableChunks.forEach((chunk) => {\n      const maybePrintable = chunk.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n      if (maybePrintable) {\n        messagePort.post({ log: chunk });\n      }\n    });\n  };\n};\n\nconst assertPluginExports = (pluginInstance) => {\n  if (\n    !pluginInstance ||\n    typeof pluginInstance !== \"object\" ||\n    typeof pluginInstance.exports !== \"object\"\n  ) {\n    console.error(\"Error instantiating a csound plugin, instance and/or export is missing!\");\n    return false;\n  } else if (!pluginInstance.exports.__wasm_call_ctors) {\n    console.error(\n      \"A csound plugin didn't export __wasm_call_ctors.\\n\" +\n        \"Please re-run wasm-ld with either --export-all or include --export=__wasm_call_ctors\",\n    );\n    return false;\n  } else if (\n    !pluginInstance.exports.csoundModuleCreate &&\n    !pluginInstance.exports.csound_opcode_init &&\n    !pluginInstance.exports.csound_fgen_init\n  ) {\n    console.error(\n      pluginInstance.exports,\n      \"A csound plugin turns out to be neither a plugin, opcode or module.\\n\" +\n        \"Perhaps csdl.h or module.h wasn't imported correctly?\",\n    );\n    return false;\n  } else {\n    return true;\n  }\n};\n\nconst getBinaryHeaderData = (wasmBytes) => {\n  const magicBytes = new Uint32Array(new Uint8Array(wasmBytes.subarray(0, 24)).buffer);\n  // eslint-disable-next-line unicorn/number-literal-case\n  if (magicBytes[0] !== 0x6d736100) {\n    console.error(\"Wasm magic number is missing!\");\n  }\n  if (wasmBytes[8] !== 0) {\n    log(\"Dylink section wasn't found in wasm binary, assuming static wasm.\");\n    return \"static\";\n  }\n\n  let next = 9;\n  function getLEB() {\n    let returnValue = 0;\n    let mul = 1;\n    while (1) {\n      const byte = wasmBytes[next++];\n      // eslint-disable-next-line unicorn/number-literal-case\n      returnValue += (byte & 0x7f) * mul;\n      mul *= 0x80;\n      if (!(byte & 0x80)) break;\n    }\n    return returnValue;\n  }\n\n  const sectionSize = getLEB();\n  next++; // size of \"dylink\" string\n  assert(wasmBytes[next] === \"d\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \"y\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \"l\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \"i\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \"n\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \"k\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \".\".codePointAt(0));\n  next++;\n  assert(wasmBytes[next] === \"0\".codePointAt(0));\n  next += 3;\n\n  const memorySize = getLEB();\n  const memoryAlign = getLEB();\n  const tableSize = getLEB();\n  const tableAlign = getLEB();\n  const neededDynlibsCount = getLEB();\n\n  return { sectionSize, memorySize, memoryAlign, neededDynlibsCount, tableSize, tableAlign };\n};\n\n// currently dl is default, static is good for low level debugging\nconst loadStaticWasm = async ({ wasmBytes, wasmFs, wasi, messagePort }) => {\n  const module = await WebAssembly.compile(wasmBytes);\n  const memory = new WebAssembly.Memory({ initial: 65536 / 4 });\n  const streamBuffer = [];\n  const options = wasi.getImports(module);\n  options.env = options.env || {};\n  options.env.csoundLoadModules = () => 0;\n  options.env.memory = memory;\n  options.env.csoundWasiJsMessageCallback = csoundWasiJsMessageCallback({\n    memory: options.env.memory,\n    streamBuffer,\n    messagePort,\n  });\n\n  const instance = await WebAssembly.instantiate(module, options);\n\n  wasi.setMemory(memory);\n  wasi.start(instance);\n  instance.exports.__wasi_js_csoundSetMessageStringCallback();\n  return [instance, wasi];\n};\n\nexport default async function ({ wasmDataURI, withPlugins = [], messagePort }) {\n  const wasmFs = {};\n\n  const wasi = new WASI({ preopens: { \"/\": \"/\" } });\n\n  const wasmCompressed = new Uint8Array(wasmDataURI);\n  const wasmZlib = new Zlib.Inflate(wasmCompressed);\n\n  const wasmBytes = wasmZlib.decompress();\n\n  const magicData = getBinaryHeaderData(wasmBytes);\n  if (magicData === \"static\") {\n    return await loadStaticWasm({ messagePort, wasmBytes, wasmFs, wasi });\n  }\n  const { memorySize, memoryAlign, tableSize } = magicData;\n\n  // get the header data from plugins which we need before\n  // initializing the main module\n  withPlugins = await withPlugins.reduce(async (accumulator, wasmPlugin) => {\n    const accumulator_ = await accumulator;\n\n    let wasmPluginBytes;\n    let pluginHeaderData;\n    try {\n      wasmPluginBytes = new Uint8Array(wasmPlugin);\n      pluginHeaderData = getBinaryHeaderData(wasmPluginBytes);\n    } catch (error) {\n      console.error(\"Error in plugin\", error);\n    }\n    if (pluginHeaderData) {\n      accumulator_.push({ headerData: pluginHeaderData, wasmPluginBytes });\n    }\n    return accumulator_;\n  }, []);\n\n  // The `fixedMemoryBase` is equivalent to the stack size. Note that the stack size grows down towards the code\n  // section. This means that if the stack overflows then it will write over the Csound and plugin code which will\n  // cause all kinds of strange behavior including errors that make no sense, no output of sound, or sound output will\n  // be horrendously loud static and garbage sounds.\n  //\n  // TODO: Investigate using the --stack-first linker flag to move the stack to the beginning of memory so it doesn't\n  // write over anything if it overflows.\n  //\n  const fixedMemoryBase = 128 * PAGES_PER_MB;\n  const initialMemory = Math.ceil((memorySize + memoryAlign) / PAGE_SIZE);\n  const pluginsMemory = Math.ceil(\n    withPlugins.reduce(\n      (accumulator, { headerData }) =>\n        headerData === \"static\" ? 0 : accumulator + (headerData.memorySize + memoryAlign),\n      0,\n    ) / PAGE_SIZE,\n  );\n\n  const totalInitialMemory = initialMemory + pluginsMemory + fixedMemoryBase;\n\n  // Request a max of 1gb of memory so devices use less CPU when growing memory. This has a noticeable effect on low-\n  // powered devices like the Oculus Quest 2.\n  const memory = new WebAssembly.Memory({\n    initial: totalInitialMemory,\n    maximum: 1024 * PAGES_PER_MB,\n  });\n\n  const table = new WebAssembly.Table({ initial: tableSize + 1, element: \"anyfunc\" });\n\n  wasi.setMemory(memory);\n\n  const stackPointer = new WebAssembly.Global(\n    { value: \"i32\", mutable: true },\n    totalInitialMemory * PAGE_SIZE,\n  );\n  const heapBase = new WebAssembly.Global(\n    { value: \"i32\", mutable: true },\n    totalInitialMemory * PAGE_SIZE,\n  );\n  const memoryBase = new WebAssembly.Global({ value: \"i32\", mutable: false }, fixedMemoryBase);\n  const tableBase = new WebAssembly.Global({ value: \"i32\", mutable: false }, 1);\n  const __dummy = new WebAssembly.Global({ value: \"i32\", mutable: true }, 0);\n\n  const module = await WebAssembly.compile(wasmBytes);\n  const options = wasi.getImports(module);\n  let withPlugins_ = [];\n\n  let currentMemorySegment = initialMemory;\n\n  const csoundLoadModules = (csoundInstance) => {\n    withPlugins_.forEach((pluginInstance) => {\n      if (typeof instance !== \"undefined\") {\n        dlinit(instance, pluginInstance, table, csoundInstance);\n      } else {\n        console.error(\"csound-wasm internal: timing problem detected!\");\n      }\n    });\n    return 0;\n  };\n\n  options.env = options.env || {};\n  options.env.memory = memory;\n  options.env.__indirect_function_table = table;\n  options.env.__stack_pointer = stackPointer;\n  options.env.__memory_base = memoryBase;\n  options.env.__table_base = tableBase;\n  options.env.csoundLoadModules = csoundLoadModules;\n\n  // TODO find out what's leaking this thread-local errno (cpp?)\n  options.env._ZTH5errno = function () {};\n\n  const streamBuffer = [];\n  options.env.csoundWasiJsMessageCallback = csoundWasiJsMessageCallback({\n    memory,\n    messagePort,\n    streamBuffer,\n  });\n\n  options.env.printDebugCallback = (offset, length) => {\n    const buf = new Uint8Array(memory.buffer, offset, length);\n    const string = uint2String(buf);\n    console.log(string);\n  };\n\n  options[\"GOT.mem\"] = options[\"GOT.mem\"] || {};\n  options[\"GOT.mem\"].__heap_base = heapBase;\n\n  options[\"GOT.func\"] = options[\"GOT.func\"] || {};\n\n  const instance = await WebAssembly.instantiate(module, options);\n  const moduleExports = Object.assign({}, instance.exports);\n  const instance_ = {};\n  instance_.exports = Object.assign(moduleExports, {\n    memory,\n  });\n\n  withPlugins_ = await withPlugins.reduce(async (accumulator, { headerData, wasmPluginBytes }) => {\n    accumulator = await accumulator;\n    try {\n      const {\n        memorySize: pluginMemorySize,\n        memoryAlign: pluginMemoryAlign,\n        tableSize: pluginTableSize,\n      } = headerData;\n\n      const plugin = await WebAssembly.compile(wasmPluginBytes);\n      const pluginOptions = wasi.getImports(plugin);\n\n      const pluginMemoryBase = new WebAssembly.Global(\n        { value: \"i32\", mutable: false },\n        currentMemorySegment * PAGE_SIZE,\n      );\n\n      table.grow(pluginTableSize);\n\n      pluginOptions.env = Object.assign({}, pluginOptions.env);\n      pluginOptions.env.memory = memory;\n      pluginOptions.env.__indirect_function_table = table;\n      pluginOptions.env.__memory_base = pluginMemoryBase;\n      pluginOptions.env.__stack_pointer = stackPointer;\n      pluginOptions.env.__table_base = tableBase;\n      pluginOptions.env.csoundLoadModules = __dummy;\n      delete pluginOptions.env.csoundWasiJsMessageCallback;\n\n      currentMemorySegment += Math.ceil((pluginMemorySize + pluginMemoryAlign) / PAGE_SIZE);\n\n      const pluginInstance = await WebAssembly.instantiate(plugin, pluginOptions);\n\n      if (assertPluginExports(pluginInstance)) {\n        pluginInstance.exports.__wasm_call_ctors();\n        accumulator.push(pluginInstance);\n      }\n    } catch (error) {\n      console.error(\"Error while compiling csound-plugin\", error);\n    }\n    return accumulator;\n  }, []);\n\n  wasi.start(instance_);\n\n  instance_.exports.__wasi_js_csoundSetMessageStringCallback();\n  return [instance_, wasi];\n}\n","export const dlinit = (hostInstance, pluginInstance, table, csoundInstance) => {\n  if (pluginInstance.exports.csoundModuleInit) {\n    const csoundModuleCreate = new WebAssembly.Global({ value: \"i32\", mutable: true }, 0);\n    const csoundModuleInit = new WebAssembly.Global({ value: \"i32\", mutable: true }, 0);\n    const csoundModuleDestroy = new WebAssembly.Global({ value: \"i32\", mutable: true }, 0);\n    const csoundModuleErrorCodeToString = new WebAssembly.Global(\n      { value: \"i32\", mutable: true },\n      0,\n    );\n\n    let tableEnd = table.length;\n\n    if (typeof pluginInstance.exports.csoundModuleCreate === \"function\") {\n      table.grow(1);\n      csoundModuleCreate.value = tableEnd;\n      table.set(tableEnd, pluginInstance.exports.csoundModuleCreate);\n      tableEnd += 1;\n    }\n\n    if (typeof pluginInstance.exports.csoundModuleInit === \"function\") {\n      table.grow(1);\n      csoundModuleInit.value = tableEnd;\n      table.set(tableEnd, pluginInstance.exports.csoundModuleInit);\n      tableEnd += 1;\n    }\n\n    if (typeof pluginInstance.exports.csoundModuleDestroy === \"function\") {\n      table.grow(1);\n      csoundModuleDestroy.value = tableEnd;\n      table.set(tableEnd, pluginInstance.exports.csoundModuleDestroy);\n      tableEnd += 1;\n    }\n\n    if (typeof pluginInstance.exports.csoundModuleErrorCodeToString === \"function\") {\n      table.grow(1);\n      csoundModuleErrorCodeToString.value = tableEnd;\n      table.set(tableEnd, pluginInstance.exports.csoundModuleErrorCodeToString);\n      tableEnd += 1;\n    }\n\n    hostInstance.exports.csoundWasiLoadPlugin(\n      csoundInstance,\n      csoundModuleCreate,\n      csoundModuleInit,\n      csoundModuleDestroy,\n      csoundModuleErrorCodeToString,\n    );\n  } else if (pluginInstance.exports.csound_opcode_init || pluginInstance.exports.csound_fgen_init) {\n    const csoundOpcodeInit = new WebAssembly.Global({ value: \"i32\", mutable: true }, 0);\n    const csoundFgenInit = new WebAssembly.Global({ value: \"i32\", mutable: true }, 0);\n\n    let tableEnd = table.length;\n\n    if (typeof pluginInstance.exports.csound_opcode_init === \"function\") {\n      csoundOpcodeInit.value = tableEnd;\n      table.grow(1);\n      table.set(tableEnd, pluginInstance.exports.csound_opcode_init);\n      tableEnd += 1;\n    }\n\n    if (typeof pluginInstance.exports.csound_fgen_init === \"function\") {\n      csoundFgenInit.value = tableEnd;\n      table.grow(1);\n      table.set(tableEnd, pluginInstance.exports.csound_fgen_init);\n      tableEnd += 1;\n    }\n\n    hostInstance.exports.csoundWasiLoadOpcodeLibrary(\n      csoundInstance,\n      csoundFgenInit,\n      csoundOpcodeInit,\n    );\n  } else {\n    console.error(\"Plugin doesn't export nececcary functions to quality as csound plugin.\");\n  }\n};\n","/**\n * @constructor\n */\nexport function MessagePortState() {}\n\n/**\n * @type {boolean}\n */\nMessagePortState.prototype.ready = false;\n\n/**\n * @type {Function|undefined}\n */\nMessagePortState.prototype.port = undefined;\n\n/**\n * @type {Function}\n */\nMessagePortState.prototype.post = () => {};\n/**\n * @type {Function}\n */\nMessagePortState.prototype.broadcastPlayState = () => {};\n/**\n * @type {string|undefined}\n */\nMessagePortState.prototype.workerState = undefined;\n/**\n * @type {string|undefined}\n */\nMessagePortState.prototype.vanillaWorkerState = undefined;\n\nexport default MessagePortState;\n","/*\n    CsoundScriptProcessor.js\n\n    Copyright (C) 2018 Steven Yi, Victor Lazzarini\n\n    This file is part of Csound.\n\n    The Csound Library is free software; you can redistribute it\n    and/or modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    Csound is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with Csound; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n    02110-1301 USA\n*/\n\nimport libcsoundFactory from \"../libcsound\";\nimport loadWasm from \"../module\";\nimport MessagePortState from \"../utils/message-port-state\";\nimport { isEmpty } from \"rambda/dist/rambda.esm.js\";\nimport { csoundApiRename, fetchPlugins, makeSingleThreadCallback } from \"../utils\";\nimport { messageEventHandler } from \"./messages.main\";\nimport { PublicEventAPI } from \"../events\";\nimport { EventPromises } from \"../utils/event-promises\";\nimport { requestMidi } from \"../utils/request-midi\";\n\nclass ScriptProcessorNodeSingleThread {\n  constructor({ audioContext, inputChannelCount = 1, outputChannelCount = 2 }) {\n    this.publicEvents = new PublicEventAPI(this);\n    this.eventPromises = new EventPromises();\n    this.audioContext = audioContext;\n    this.onaudioprocess = this.onaudioprocess.bind(this);\n    this.currentPlayState = undefined;\n    this.onPlayStateChange = this.onPlayStateChange.bind(this);\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.pause = this.pause.bind(this);\n    this.resume = this.resume.bind(this);\n    this.wasm = undefined;\n    this.csoundInstance = undefined;\n    this.csoundApi = undefined;\n    this.exportApi = {};\n    this.spn = audioContext.createScriptProcessor(0, inputChannelCount, outputChannelCount);\n    this.spn.audioContext = audioContext;\n    this.spn.inputChannelCount = inputChannelCount;\n    this.spn.outputChannelCount = outputChannelCount;\n    this.spn.onaudioprocess = this.onaudioprocess;\n    this.node = this.spn;\n    this.exportApi.getNode = async () => this.spn;\n    this.sampleRate = audioContext.sampleRate;\n    // this is the only actual single-thread usecase\n    // so we get away with just forwarding it as if it's form\n    // a message port\n    this.messagePort = new MessagePortState();\n    this.messagePort.post = (log) => messageEventHandler(this)({ data: { log } });\n    this.messagePort.ready = true;\n\n    // imports from original csound-wasm\n    this.running = false;\n    this.started = false;\n  }\n\n  async terminateInstance() {\n    if (this.spn) {\n      this.spn.disconnect();\n      delete this.spn;\n    }\n    if (this.audioContext) {\n      if (this.audioContext.state !== \"closed\") {\n        await this.audioContext.close();\n      }\n      delete this.audioContext;\n    }\n    if (this.publicEvents) {\n      this.publicEvents.terminateInstance();\n      delete this.publicEvents;\n    }\n    Object.keys(this.exportApi).forEach((key) => delete this.exportApi[key]);\n    Object.keys(this).forEach((key) => delete this[key]);\n  }\n\n  async onPlayStateChange(newPlayState) {\n    if (this.currentPlayState === newPlayState) {\n      return;\n    }\n    this.currentPlayState = newPlayState;\n    switch (newPlayState) {\n      case \"realtimePerformanceStarted\": {\n        this.publicEvents.triggerRealtimePerformanceStarted(this);\n        break;\n      }\n\n      case \"realtimePerformanceEnded\": {\n        this.publicEvents.triggerRealtimePerformanceEnded(this);\n        break;\n      }\n      case \"realtimePerformancePaused\": {\n        this.publicEvents.triggerRealtimePerformancePaused(this);\n        break;\n      }\n      case \"realtimePerformanceResumed\": {\n        this.publicEvents.triggerRealtimePerformanceResumed(this);\n        break;\n      }\n      case \"renderStarted\": {\n        this.publicEvents.triggerRenderStarted(this);\n        break;\n      }\n      case \"renderEnded\": {\n        this.publicEvents.triggerRenderEnded(this);\n\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  async pause() {\n    if (this.started && this.running) {\n      this.running = false;\n      this.onPlayStateChange(\"realtimePerformancePaused\");\n    }\n  }\n\n  async resume() {\n    if (this.started && !this.running) {\n      this.running = true;\n      this.onPlayStateChange(\"realtimePerformanceResumed\");\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      this.eventPromises.createStopPromise();\n      const stopResult = this.csoundApi.csoundStop(this.csoundInstance);\n      await this.eventPromises.waitForStop();\n      if (this.watcherStdOut) {\n        this.watcherStdOut.close();\n        delete this.watcherStdOut;\n      }\n\n      if (this.watcherStdErr) {\n        this.watcherStdErr.close();\n        delete this.watcherStdErr;\n      }\n\n      delete this.csoundInputBuffer;\n      delete this.csoundOutputBuffer;\n      delete this.currentPlayState;\n      return stopResult;\n    }\n  }\n\n  async start() {\n    if (!this.csoundApi) {\n      console.error(\"starting csound failed because csound instance wasn't created\");\n      return;\n    }\n\n    if (this.currentPlayState !== \"realtimePerformanceStarted\") {\n      this.result = 0;\n      this.csoundApi.csoundSetOption(this.csoundInstance, \"-odac\");\n      this.csoundApi.csoundSetOption(this.csoundInstance, \"-iadc\");\n      this.csoundApi.csoundSetOption(this.csoundInstance, \"--sample-rate=\" + this.sampleRate);\n      this.nchnls = -1;\n      this.nchnls_i = -1;\n\n      const ksmps = this.csoundApi.csoundGetKsmps(this.csoundInstance);\n      this.ksmps = ksmps;\n      this.cnt = ksmps;\n\n      this.nchnls = this.csoundApi.csoundGetNchnls(this.csoundInstance);\n      this.nchnls_i = this.csoundApi.csoundGetNchnlsInput(this.csoundInstance);\n\n      const outputPointer = this.csoundApi.csoundGetSpout(this.csoundInstance);\n      this.csoundOutputBuffer = new Float64Array(\n        this.wasm.wasi.memory.buffer,\n        outputPointer,\n        ksmps * this.nchnls,\n      );\n\n      const inputPointer = this.csoundApi.csoundGetSpin(this.csoundInstance);\n      this.csoundInputBuffer = new Float64Array(\n        this.wasm.wasi.memory.buffer,\n        inputPointer,\n        ksmps * this.nchnls_i,\n      );\n      this.zerodBFS = this.csoundApi.csoundGet0dBFS(this.csoundInstance);\n\n      this.publicEvents.triggerOnAudioNodeCreated(this.spn);\n      this.eventPromises.createStartPromise();\n\n      const startResult = this.csoundApi.csoundStart(this.csoundInstance);\n      if (this.csoundApi._isRequestingRtMidiInput(this.csoundInstance)) {\n        requestMidi({\n          onMidiMessage: ({ data: event }) =>\n            this.csoundApi.csoundPushMidiMessage(this.csoundInstance, event[0], event[1], event[2]),\n        });\n      }\n      this.running = true;\n      await this.eventPromises.waitForStart();\n      return startResult;\n    }\n  }\n\n  async initialize({ wasmDataURI, withPlugins, autoConnect }) {\n    if (!this.plugins && withPlugins && !isEmpty(withPlugins)) {\n      withPlugins = await fetchPlugins(withPlugins);\n    }\n\n    if (!this.wasm) {\n      const [wasm, wasi] = await loadWasm({\n        wasmDataURI: wasmDataURI(),\n        withPlugins,\n        messagePort: this.messagePort,\n      });\n      this.wasm = wasm;\n      this.wasi = wasi;\n      wasm.wasi = wasi;\n    }\n\n    // libcsound\n    const csoundApi = libcsoundFactory(this.wasm);\n    this.csoundApi = csoundApi;\n    const csoundInstance = await csoundApi.csoundCreate(0);\n    this.csoundInstance = csoundInstance;\n\n    if (autoConnect) {\n      this.spn.connect(this.audioContext.destination);\n    }\n\n    this.resetCsound(false);\n\n    // csoundObj\n    Object.keys(csoundApi).reduce((accumulator, apiName) => {\n      if ([\"mkdir\", \"readdir\", \"writeFile\"].includes(apiName)) {\n        accumulator.fs = accumulator.fs || {};\n        const reference = csoundApi[apiName];\n        const callback = async (...arguments_) =>\n          makeSingleThreadCallback(this.wasm, csoundApi[apiName]).apply({}, arguments_);\n        callback.toString = reference.toString;\n        accumulator.fs[apiName] = callback;\n      } else {\n        const renamedApiName = csoundApiRename(apiName);\n        accumulator[renamedApiName] = (...arguments_) => {\n          return makeSingleThreadCallback(csoundInstance, csoundApi[apiName]).apply({}, arguments_);\n        };\n        accumulator[renamedApiName].toString = csoundApi[apiName].toString;\n      }\n\n      return accumulator;\n    }, this.exportApi);\n\n    this.exportApi.pause = this.pause.bind(this);\n    this.exportApi.resume = this.resume.bind(this);\n    this.exportApi.start = this.start.bind(this);\n    this.exportApi.stop = this.stop.bind(this);\n    this.exportApi.terminateInstance = this.terminateInstance.bind(this);\n    this.exportApi.getAudioContext = async () => this.audioContext;\n    this.exportApi.name = \"Csound: ScriptProcessor Node, Single-threaded\";\n    // this.exportApi.fs = persistentFilesystem;\n\n    this.exportApi = this.publicEvents.decorateAPI(this.exportApi);\n\n    this.exportApi.reset = () => this.resetCsound(true);\n    // the default message listener\n    this.exportApi.addListener(\"message\", console.log);\n    return this.exportApi;\n  }\n\n  async resetCsound(callReset) {\n    if (\n      callReset &&\n      this.currentPlayState !== \"realtimePerformanceEnded\" &&\n      this.currentPlayState !== \"realtimePerformanceStarted\"\n    ) {\n      // reset can't be called until performance has started or ended!\n      return -1;\n    }\n    if (this.currentPlayState === \"realtimePerformanceStarted\") {\n      this.onPlayStateChange(\"realtimePerformanceEnded\");\n    }\n\n    this.running = false;\n    this.started = false;\n    this.result = 0;\n\n    const cs = this.csoundInstance;\n    const libraryCsound = this.csoundApi;\n\n    if (callReset) {\n      libraryCsound.csoundReset(cs);\n    }\n\n    // FIXME:\n    // libraryCsound.csoundSetMidiCallbacks(cs);\n\n    libraryCsound.csoundSetOption(cs, \"-odac\");\n    libraryCsound.csoundSetOption(cs, \"-iadc\");\n    libraryCsound.csoundSetOption(cs, \"--sample-rate=\" + this.sampleRate);\n    this.nchnls = -1;\n    this.nchnls_i = -1;\n    delete this.csoundOutputBuffer;\n    delete this.csoundInputBuffer;\n  }\n\n  onaudioprocess(event) {\n    if (this.csoundOutputBuffer === null || this.running === false) {\n      const output = event.outputBuffer;\n      const channelData = output.getChannelData(0);\n\n      if (channelData) {\n        const bufferLength = channelData.length;\n\n        for (let index = 0; index < bufferLength; index++) {\n          for (let channel = 0; channel < output.numberOfChannels; channel++) {\n            const outputChannel = output.getChannelData(channel);\n            outputChannel[index] = 0;\n          }\n        }\n      }\n    }\n\n    if (this.running && !this.started) {\n      this.started = true;\n      this.onPlayStateChange(\"realtimePerformanceStarted\");\n      this.eventPromises && this.eventPromises.releaseStartPromise();\n    }\n\n    const input = event.inputBuffer;\n    const output = event.outputBuffer;\n\n    const bufferLength = output.getChannelData(0).length;\n\n    let csOut = this.csoundOutputBuffer;\n    let csIn = this.csoundInputBuffer;\n\n    const ksmps = this.ksmps;\n    const zerodBFS = this.zerodBFS;\n\n    const nchnls = this.nchnls;\n    const nchnlsIn = this.nchnls_i;\n\n    let cnt = this.cnt || 0;\n    let result = this.result || 0;\n\n    for (let index = 0; index < bufferLength; index++, cnt++) {\n      if (cnt === ksmps && result === 0) {\n        // if we need more samples from Csound\n        result = this.csoundApi.csoundPerformKsmps(this.csoundInstance);\n        cnt = 0;\n        if (result !== 0) {\n          this.running = false;\n          this.started = false;\n          this.onPlayStateChange(\"realtimePerformanceEnded\");\n          this.eventPromises && this.eventPromises.releaseStopPromise();\n        }\n      }\n\n      /* Check if MEMGROWTH occured from csoundPerformKsmps or otherwise. If so,\n      rest output ant input buffers to new pointer locations. */\n      if (!csOut || csOut.length === 0) {\n        csOut = this.csoundOutputBuffer = new Float64Array(\n          this.wasm.wasi.memory.buffer,\n          this.csoundApi.csoundGetSpout(this.csoundInstance),\n          ksmps * nchnls,\n        );\n      }\n\n      if (!csIn || csIn.length === 0) {\n        csIn = this.csoundInputBuffer = new Float64Array(\n          this.wasm.wasi.memory.buffer,\n          this.csoundApi.csoundGetSpin(this.csoundInstance),\n          ksmps * nchnlsIn,\n        );\n      }\n\n      // handle 1->1, 1->2, 2->1, 2->2 input channel count mixing and nchnls_i\n      const inputChanMax = Math.min(this.nchnls_i, input.numberOfChannels);\n      for (let channel = 0; channel < inputChanMax; channel++) {\n        const inputChannel = input.getChannelData(channel);\n        csIn[cnt * nchnlsIn + channel] = inputChannel[index] * zerodBFS;\n      }\n\n      // Output Channel mixing matches behavior of:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Basic_concepts_behind_Web_Audio_API#Up-mixing_and_down-mixing\n\n      // handle 1->1, 1->2, 2->1, 2->2 output channel count mixing and nchnls\n      if (this.nchnls === output.numberOfChannels) {\n        for (let channel = 0; channel < output.numberOfChannels; channel++) {\n          const outputChannel = output.getChannelData(channel);\n          if (result === 0) outputChannel[index] = csOut[cnt * nchnls + channel] / zerodBFS;\n          else outputChannel[index] = 0;\n        }\n      } else if (this.nchnls === 2 && output.numberOfChannels === 1) {\n        const outputChannel = output.getChannelData(0);\n        if (result === 0) {\n          const left = csOut[cnt * nchnls] / zerodBFS;\n          const right = csOut[cnt * nchnls + 1] / zerodBFS;\n          outputChannel[index] = 0.5 * (left + right);\n        } else {\n          outputChannel[index] = 0;\n        }\n      } else if (this.nchnls === 1 && output.numberOfChannels === 2) {\n        const outChan0 = output.getChannelData(0);\n        const outChan1 = output.getChannelData(1);\n\n        if (result === 0) {\n          const value = csOut[cnt * nchnls] / zerodBFS;\n          outChan0[index] = value;\n          outChan1[index] = value;\n        } else {\n          outChan0[index] = 0;\n          outChan1[index] = 0;\n        }\n      } else {\n        // FIXME: we do not support other cases at this time\n      }\n\n      // for (let channel = 0; channel < input.numberOfChannels; channel++) {\n      //   const inputChannel = input.getChannelData(channel);\n      //   csIn[cnt * nchnls_i + channel] = inputChannel[i] * zerodBFS;\n      // }\n      // for (let channel = 0; channel < output.numberOfChannels; channel++) {\n      //   const outputChannel = output.getChannelData(channel);\n      //   if (result == 0) outputChannel[i] = csOut[cnt * nchnls + channel] / zerodBFS;\n      //   else outputChannel[i] = 0;\n      // }\n    }\n\n    this.cnt = cnt;\n    this.result = result;\n  }\n}\n\nexport default ScriptProcessorNodeSingleThread;\n","goog.provide(\"worklet.singlethread.worker\");\n         goog.scope(function () {\n             worklet.singlethread.worker = () => \"data:application/javascript;base64,\";\n          })\n            ","/*\n    worklet.singlethread.js\n\n    Copyright (C) 2018 Steven Yi, Victor Lazzarini\n\n    This file is part of Csound.\n\n    The Csound Library is free software; you can redistribute it\n    and/or modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    Csound is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with Csound; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n    02110-1301 USA\n*/\n\nimport * as Comlink from \"comlink/dist/esm/comlink.mjs\";\nimport { logSinglethreadWorkletMain as log } from \"../logger.js\";\nimport { csoundApiRename, fetchPlugins, makeProxyCallback } from \"../utils.js\";\nimport { messageEventHandler, IPCMessagePorts } from \"./messages.main.js\";\nimport { api as API } from \"../libcsound.js\";\nimport { PublicEventAPI } from \"../events.js\";\nimport { enableAudioInput } from \"./io.utils.js\";\nimport { requestMidi } from \"../utils/request-midi.js\";\nimport { EventPromises } from \"../utils/event-promises.js\";\n\nconst WorkletWorker = goog.require(\"worklet.singlethread.worker\");\n\nconst initializeModule = async (audioContext) => {\n  log(\"Initialize Module\")();\n  try {\n    await audioContext.audioWorklet.addModule(WorkletWorker());\n  } catch (error) {\n    console.error(\"Error calling audioWorklet.addModule\", error);\n    return false;\n  }\n  return true;\n};\n\nclass SingleThreadAudioWorkletMainThread {\n  constructor({ audioContext, inputChannelCount = 1, outputChannelCount = 2 }) {\n    this.exportApi = {};\n    this.ipcMessagePorts = new IPCMessagePorts();\n    this.publicEvents = new PublicEventAPI(this);\n    this.eventPromises = new EventPromises();\n\n    this.audioContext = audioContext;\n    this.inputChannelCount = inputChannelCount;\n    this.outputChannelCount = outputChannelCount;\n\n    this.messageCallbacks = [];\n    this.onPlayStateChange = this.onPlayStateChange.bind(this);\n    this.currentPlayState = undefined;\n  }\n\n  async terminateInstance() {\n    if (this.node) {\n      this.node.disconnect();\n      delete this.node;\n    }\n    if (this.audioContext) {\n      if (this.audioContext.state !== \"closed\") {\n        await this.audioContext.close();\n      }\n      delete this.audioContext;\n    }\n    if (this.workletProxy) {\n      this.workletProxy[Comlink.releaseProxy]();\n      delete this.workletProxy;\n    }\n    if (this.publicEvents) {\n      this.publicEvents.terminateInstance();\n      delete this.publicEvents;\n    }\n    Object.keys(this.exportApi).forEach((key) => delete this.exportApi[key]);\n    Object.keys(this).forEach((key) => delete this[key]);\n  }\n\n  async onPlayStateChange(newPlayState) {\n    if (this.currentPlayState === newPlayState || !this.publicEvents) {\n      return;\n    }\n\n    this.currentPlayState = newPlayState;\n\n    switch (newPlayState) {\n      case \"realtimePerformanceStarted\": {\n        if (this.eventPromises.isWaitingToStart()) {\n          log(\"Start promise resolved\")();\n          this.eventPromises.releaseStartPromise();\n        }\n        this.publicEvents.triggerRealtimePerformanceStarted(this);\n        break;\n      }\n\n      case \"realtimePerformanceEnded\": {\n        this.midiPortStarted = false;\n        this.currentPlayState = undefined;\n        this.publicEvents && this.publicEvents.triggerRealtimePerformanceEnded(this);\n        this.eventPromises &&\n          this.eventPromises.isWaitingToStop() &&\n          this.eventPromises.releaseStopPromise();\n        // just to be double sure that there's no hanging promise\n        this.eventPromises && this.eventPromises.releaseStartPromise();\n        break;\n      }\n      case \"realtimePerformancePaused\": {\n        this.publicEvents.triggerRealtimePerformancePaused(this);\n        break;\n      }\n      case \"realtimePerformanceResumed\": {\n        this.publicEvents.triggerRealtimePerformanceResumed(this);\n        break;\n      }\n      case \"renderStarted\": {\n        if (this.eventPromises.isWaitingToStart()) {\n          log(\"Start promise resolved\")();\n          this.eventPromises.releaseStartPromise();\n        }\n        this.publicEvents.triggerRenderStarted(this);\n        break;\n      }\n      case \"renderEnded\": {\n        this.publicEvents.triggerRenderEnded(this);\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  async csoundPause() {\n    if (typeof this.workletProxy !== \"undefined\") {\n      await this.workletProxy.pause();\n    }\n  }\n\n  async csoundResume() {\n    if (typeof this.workletProxy !== \"undefined\") {\n      await this.workletProxy.resume();\n    }\n  }\n\n  handleMidiInput({ data: payload }) {\n    this.ipcMessagePorts.csoundMainRtMidiPort.postMessage &&\n      this.ipcMessagePorts.csoundMainRtMidiPort.postMessage(payload);\n  }\n\n  async initialize({ wasmDataURI, withPlugins, autoConnect }) {\n    if (withPlugins && withPlugins.length > 0) {\n      withPlugins = await fetchPlugins(withPlugins);\n    }\n\n    await initializeModule(this.audioContext);\n\n    this.node = new AudioWorkletNode(this.audioContext, \"csound-singlethread-worklet-processor\", {\n      inputChannelCount: this.inputChannelCount ? [this.inputChannelCount] : 0,\n      outputChannelCount: [this.outputChannelCount || 2],\n    });\n\n    if (autoConnect) {\n      this.node.connect(this.audioContext.destination);\n    }\n\n    try {\n      log(\"wrapping Comlink proxy endpoint on the audioWorkletNode.port\")();\n      this.workletProxy = Comlink.wrap(this.node.port);\n    } catch (error) {\n      console.error(\"COMLINK ERROR\", error);\n    }\n\n    await this.workletProxy.initializeMessagePort(\n      Comlink.transfer(\n        {\n          messagePort: this.ipcMessagePorts.workerMessagePort,\n          rtmidiPort: this.ipcMessagePorts.csoundWorkerRtMidiPort,\n        },\n        [this.ipcMessagePorts.workerMessagePort, this.ipcMessagePorts.csoundWorkerRtMidiPort],\n      ),\n    );\n    this.ipcMessagePorts.mainMessagePort.addEventListener(\"message\", messageEventHandler(this));\n    this.ipcMessagePorts.mainMessagePort.start();\n\n    await this.workletProxy.initialize(wasmDataURI(), withPlugins);\n    const csoundInstance = await makeProxyCallback(\n      this.workletProxy,\n      undefined,\n      \"csoundCreate\",\n      this.currentPlayState,\n    )();\n    this.csoundInstance = csoundInstance;\n    await makeProxyCallback(\n      this.workletProxy,\n      csoundInstance,\n      \"csoundInitialize\",\n      this.currentPlayState,\n    )(0);\n\n    this.exportApi.pause = this.csoundPause.bind(this);\n    this.exportApi.resume = this.csoundResume.bind(this);\n    this.exportApi.terminateInstance = this.terminateInstance.bind(this);\n\n    this.exportApi.getAudioContext = async () => this.audioContext;\n    this.exportApi.getNode = async () => this.node;\n    this.exportApi.enableAudioInput = enableAudioInput.bind(this.exportApi);\n\n    this.exportApi.name = \"Csound: Audio Worklet, Single-threaded\";\n    this.exportApi = this.publicEvents.decorateAPI(this.exportApi);\n    // the default message listener\n    this.exportApi.addListener(\"message\", console.log);\n\n    for (const apiK of Object.keys(API)) {\n      const reference = API[apiK];\n      const proxyCallback = makeProxyCallback(\n        this.workletProxy,\n        csoundInstance,\n        apiK,\n        this.currentPlayState,\n      );\n      switch (apiK) {\n        case \"csoundCreate\": {\n          break;\n        }\n\n        case \"csoundStart\": {\n          const csoundStart = async function () {\n            this.eventPromises.createStartPromise();\n            const startResult = await proxyCallback({ csound: csoundInstance });\n            const isRequestingMidi = await this.exportApi._isRequestingRtMidiInput(csoundInstance);\n            if (isRequestingMidi) {\n              requestMidi({\n                onMidiMessage: this.handleMidiInput.bind(this),\n              });\n            }\n            this.publicEvents.triggerOnAudioNodeCreated(this.node);\n            await this.eventPromises.waitForStart();\n            return startResult;\n          };\n\n          csoundStart.toString = () => reference.toString();\n          this.exportApi.start = csoundStart.bind(this);\n          break;\n        }\n        case \"csoundStop\": {\n          const csoundStop = async () => {\n            if (this.eventPromises.isWaitingToStop()) {\n              log(\"already waiting to stop, doing nothing\")();\n              return -1;\n            } else {\n              this.eventPromises.createStopPromise();\n              const stopResult = await proxyCallback();\n              await this.eventPromises.waitForStop();\n              return stopResult;\n            }\n          };\n          csoundStop.toString = () => reference.toString();\n          this.exportApi.stop = csoundStop.bind(this);\n          break;\n        }\n\n        case \"fs\": {\n          this.exportApi.fs = {};\n          Object.keys(reference).forEach((method) => {\n            const proxyFsCallback = makeProxyCallback(\n              this.workletProxy,\n              csoundInstance,\n              method,\n              this.currentPlayState,\n            );\n            proxyFsCallback.toString = () => reference[method].toString();\n            this.exportApi.fs[method] = proxyFsCallback;\n          });\n          break;\n        }\n\n        default: {\n          proxyCallback.toString = () => reference.toString();\n          this.exportApi[csoundApiRename(apiK)] = proxyCallback;\n          break;\n        }\n      }\n    }\n\n    return this.exportApi;\n  }\n}\n\nexport default SingleThreadAudioWorkletMainThread;\n","goog.provide(\"binary.wasm\");\n     goog.scope(function () {\n          function atobPolyfill(input) {\n            var chars =\n              \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n            var str = String(input).replace(/[=]+$/, \"\");\n            if (str.length % 4 === 1) {\n              console.error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\"\n              );\n            }\n            for (\n              var bc = 0, bs, buffer, idx = 0, output = \"\";\n              (buffer = str.charAt(idx++));\n              ~buffer &&\n              ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n              bc++ % 4)\n                && (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n            ) {\n              buffer = chars.indexOf(buffer);\n            }\n            return output;\n          }\n          function bufferFromBrowser(base64Data) {\n            if (typeof AudioWorkletGlobalScope != \"undefined\") {\n              return atobPolyfill(base64Data);\n            } else {\n              return window.atob(base64Data);\n            }\n          }\n\n          function __toArrayBuffer(base64Data) {\n            var binary = bufferFromBrowser(base64Data);\n            var bytes = new Uint8Array(binary.length);\n            for (var i = 0; i < binary.length; ++i) {\n              bytes[i] = binary.charCodeAt(i);\n            }\n            return bytes.buffer;\n          }\n\n\n        binary.wasm = () => __toArrayBuffer(\"\");\n          })\n            ","/* eslint-disable no-unused-vars */\nimport VanillaWorkerMainThread from \"./mains/vanilla.main\";\nimport unmuteIosAudio from \"unmute-ios-audio/index.js\";\nimport SharedArrayBufferMainThread from \"./mains/sab.main\";\nimport AudioWorkletMainThread from \"./mains/worklet.main\";\nimport ScriptProcessorNodeMainThread from \"./mains/old-spn.main\";\nimport ScriptProcessorNodeSingleThread from \"./mains/spn.main\";\nimport SingleThreadAudioWorkletMainThread from \"./mains/worklet.singlethread.main\";\nimport { logIndex as log } from \"./logger\";\nimport {\n  areWorkletsSupported,\n  isSafari,\n  isSabSupported,\n  isScriptProcessorNodeSupported,\n  WebkitAudioContext,\n} from \"./utils\";\n\nunmuteIosAudio();\n\nconst wasmDataURI = goog.require(\"binary.wasm\");\n\n/**\n * CsoundObj API.\n * @async\n * @export\n * @return {Promise.<CsoundObj|undefined>}\n * @suppress {misplacedTypeAnnotation}\n */\nconst Csound = async function ({\n  audioContext,\n  inputChannelCount,\n  outputChannelCount,\n  autoConnect = true,\n  withPlugins = [],\n  useWorker = false,\n  useSAB = true,\n  useSPN = false,\n} = {}) {\n  const audioContextIsProvided =\n    audioContext && WebkitAudioContext() && audioContext instanceof WebkitAudioContext();\n\n  if (!audioContextIsProvided) {\n    // default to creating an audio context for SingleThread\n    audioContext = audioContext || new (WebkitAudioContext())({ latencyHint: \"interactive\" });\n  }\n\n  if (isSafari()) {\n    audioContext.resume();\n  }\n\n  const workletSupport = areWorkletsSupported();\n  const spnSupport = isScriptProcessorNodeSupported();\n\n  // SingleThread implementations\n  if (!useWorker) {\n    if (workletSupport && !useSPN) {\n      log(\"Single Thread AudioWorklet\")();\n      const instance = new SingleThreadAudioWorkletMainThread({\n        audioContext,\n        inputChannelCount: inputChannelCount || 2,\n        outputChannelCount: outputChannelCount || 2,\n      });\n      return instance.initialize({ wasmDataURI, withPlugins, autoConnect });\n    } else if (spnSupport) {\n      log(\"Single Thread ScriptProcessorNode\")();\n      const instance = new ScriptProcessorNodeSingleThread({\n        audioContext,\n        inputChannelCount: inputChannelCount || 2,\n        outputChannelCount: outputChannelCount || 2,\n      });\n      return await instance.initialize({\n        wasmDataURI,\n        withPlugins,\n        autoConnect,\n      });\n    } else {\n      console.error(\"No detectable WebAudioAPI in current environment\");\n      return;\n    }\n  }\n\n  if (workletSupport) {\n    // closure-compiler keepme\n    log(`worklet support detected`)();\n  } else if (spnSupport) {\n    // closure-compiler keepme\n    log(`scriptProcessorNode support detected`)();\n  } else {\n    console.error(`No WebAudio Support detected`);\n  }\n\n  let audioWorker;\n  let csoundWasmApi;\n\n  if (!useSPN && workletSupport) {\n    audioWorker = new AudioWorkletMainThread({ audioContext, audioContextIsProvided, autoConnect });\n  } else if (spnSupport) {\n    audioWorker = new ScriptProcessorNodeMainThread({\n      audioContext,\n      audioContextIsProvided,\n      autoConnect,\n    });\n  }\n\n  if (!audioWorker) {\n    console.error(\"No detectable WebAudioAPI in current environment\");\n    return;\n  }\n\n  const hasSABSupport = isSabSupported();\n\n  if (!hasSABSupport) {\n    log(`SharedArrayBuffers not found, falling back to Vanilla concurrency`)();\n  } else {\n    useSAB && log(`using SharedArrayBuffers`)();\n  }\n\n  const worker =\n    hasSABSupport && workletSupport && useSAB\n      ? new SharedArrayBufferMainThread({\n          audioWorker,\n          audioContext,\n          audioContextIsProvided,\n          inputChannelCount,\n          outputChannelCount,\n        })\n      : new VanillaWorkerMainThread({\n          audioWorker,\n          audioContextIsProvided,\n        });\n\n  if (worker) {\n    log(`starting Csound thread initialization via WebWorker`)();\n    await worker.initialize({ wasmDataURI, withPlugins });\n    csoundWasmApi = worker.api;\n  } else {\n    console.error(\"No detectable WebAssembly support in current environment\");\n    return;\n  }\n\n  return csoundWasmApi;\n};\n"],
"names":["goog","global","self","exportPath_","goog.exportPath_","name","object","overwriteImplicit","objectToExportTo","parts","split","cur","execScript","part","length","shift","undefined","Object","prototype","isObject","prop","hasOwnProperty","define","goog.define","defaultValue","FEATURESET_YEAR","DEBUG","LOCALE","getLocale","goog.getLocale","TRUSTED_SITE","DISALLOW_TEST_ONLY_CODE","ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING","provide","goog.provide","isInModuleLoader_","Error","constructNamespace_","goog.constructNamespace_","NONCE_PATTERN_","getScriptNonce_","goog.getScriptNonce_","opt_window","doc","document","script","querySelector","nonce","getAttribute","test","VALID_MODULE_RE_","module","goog.module","search","isInGoogModuleLoader_","moduleLoaderState_","moduleName","get","goog.module.get","getInternal_","goog.module.getInternal_","ModuleType","ES6","GOOG","goog.isInModuleLoader_","isInEs6ModuleLoader_","goog.isInGoogModuleLoader_","type","goog.isInEs6ModuleLoader_","jscomp","getCurrentModulePath","declareLegacyNamespace","goog.module.declareLegacyNamespace","declareModuleId","goog.declareModuleId","namespace","exports","require","loadedModules_","moduleId","setTestOnly","goog.setTestOnly","opt_message","forwardDeclare","goog.forwardDeclare","getObjectByName","goog.getObjectByName","opt_obj","i","addDependency","goog.addDependency","ENABLE_DEBUG_LOADER","logToConsole_","goog.logToConsole_","msg","console","goog.require","requireType","goog.requireType","basePath","nullFunction","goog.nullFunction","abstractMethod","goog.abstractMethod","addSingletonGetter","goog.addSingletonGetter","ctor","instance_","getInstance","ctor.getInstance","instantiatedSingletons_","LOAD_MODULE_USING_EVAL","SEAL_MODULE_EXPORTS","DEPENDENCIES_ENABLED","TRANSPILE","ASSUME_ES_MODULES_TRANSPILED","TRANSPILE_TO_LANGUAGE","TRANSPILER","TRUSTED_TYPES_POLICY_NAME","hasBadLetScoping","loadModule","goog.loadModule","moduleDef","previousState","origExports","call","loadModuleFromSource_","seal","data","eval","CLOSURE_EVAL_PREFILTER_","createScript","normalizePath_","goog.normalizePath_","path","components","splice","join","loadFileSync_","goog.loadFileSync_","src","CLOSURE_LOAD_FILE_SYNC","xhr","open","send","status","responseText","err","transpile_","goog.transpile_","code","target","transpile","transpilerPath","transpilerCode","JSON","stringify","jscomp.transpile","suffix","typeOf","goog.typeOf","value","s","Array","isArray","isArrayLike","goog.isArrayLike","val","isDateLike","goog.isDateLike","getFullYear","goog.isObject","getUid","goog.getUid","obj","UID_PROPERTY_","uidCounter_","hasUid","goog.hasUid","removeUid","goog.removeUid","removeAttribute","ex","Math","random","cloneObject","goog.cloneObject","clone","Map","Set","key","bindNative_","goog.bindNative_","fn","selfObj","var_args","apply","bind","arguments","bindJs_","goog.bindJs_","boundArgs","slice","newArgs","unshift","goog.bind","Function","toString","indexOf","partial","goog.partial","args","push","mixin","goog.mixin","source","x","now","goog.now","Date","globalEval","goog.globalEval","getCssName","goog.getCssName","className","opt_modifier","renameByParts","cssName","mapped","getMapping","cssNameMapping_","String","charAt","rename","cssNameMappingStyle_","a","result","CLOSURE_CSS_NAME_MAP_FN","setCssNameMapping","goog.setCssNameMapping","mapping","opt_style","getMsg","goog.getMsg","str","opt_values","opt_options","html","replace","unescapeHtmlEntities","match","getMsgWithFallback","goog.getMsgWithFallback","exportSymbol","goog.exportSymbol","publicPath","exportProperty","goog.exportProperty","publicName","symbol","inherits","goog.inherits","childCtor","parentCtor","tempCtor","superClass_","constructor","base","childCtor.base","me","methodName","scope","goog.scope","defineClass","goog.defineClass","superClass","def","statics","cls","createSealingConstructor_","applyProperties_","SEAL_CLASS_INSTANCES","goog.defineClass.createSealingConstructor_","ctr","wrappedCtr","instance","OBJECT_PROTOTYPE_FIELDS_","goog.defineClass.applyProperties_","identity_","goog.identity_","createTrustedTypesPolicy","goog.createTrustedTypesPolicy","policy","policyFactory","trustedTypes","createPolicy","createHTML","createScriptURL","e","message","proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","transferHandlers","proxyTransferHandler","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","throwTransferHandler","serialized","isError","stack","assign","ep","addEventListener","callback","ev","id","argumentList","map","fromWireValue","parent","reduce","rawValue","returnValue","transfer","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","close","createProxy","throwIfProxyReleased","isReleased","isProxyReleased","proxy","Proxy","_target","requestResponseMessage","p","r","set","_thisArg","rawArgumentList","last","processArguments","construct","processed","v","concat","arr","transferCache","WeakMap","transfers","windowEndpoint","w","context","targetOrigin","handler","serializedValue","generateUUID","l","fill","floor","Number","MAX_SAFE_INTEGER","module$node_modules$lines_logger$lib$index.default.LoggerFactory","LoggerFactory","module$node_modules$lines_logger$lib$index.default.logLevels","logLevels","log_raise_error","log_with_warnings","trace","debug","info","warn","error","disable","logLevel","mockConsole","dummy","LoggerFactory.prototype.dummy","setLogWarnings","LoggerFactory.prototype.setLogWarnings","logWarnings","getLogWarnings","LoggerFactory.prototype.getLogWarnings","getSingleLoggerColor","LoggerFactory.prototype.getSingleLoggerColor","color","getSingleLoggerStyle","getColorStyle","getSingleLogger","LoggerFactory.prototype.getSingleLogger","getRandomColor","LoggerFactory.prototype.getSingleLoggerStyle","style","minLevel","_this","args1","_i","params","getLoggerColor","LoggerFactory.prototype.getLoggerColor","getLoggerStyle","LoggerFactory.prototype.getColorStyle","getHash","LoggerFactory.getHash","seed","h1","h2","ch","charCodeAt","imul","LoggerFactory.prototype.getRandomColor","hash","substr","getLogger","LoggerFactory.prototype.getLogger","LoggerFactory.prototype.getLoggerStyle","log","logWorkletMain","logSABMain","logVANMain","logOldSpnMain","logIndex","logSinglethreadWorkletMain","logWasmModule","logMidiRequest","csoundCreate","wasm","csoundCreateWasi","csoundCreate.toString","csoundDestroy","csound","csoundDestroy.toString","csoundGetAPIVersion","csoundGetAPIVersion.toString","csoundGetVersion","csoundGetVersion.toString","csoundInitialize","_","flags","csoundInitialize.toString","decoder","TextDecoder","encoder","TextEncoder","trimNull","c","string2ptr","string","stringBuf","encode","offset","allocStringMem","buffer","wasi","memory","outBuf","Uint8Array","csoundParseOrc","orc","csoundParseOrc.toString","csoundCompileTree","tree","csoundCompileTree.toString","csoundCompileOrc","stringPtr","freeStringMem","csoundCompileOrc.toString","csoundEvalCode","csoundEvalCode.toString","csoundStart","csoundStartWasi","csoundStart.toString","csoundCompileCsd","csoundCompileCsd.toString","csoundCompileCsdText","csoundCompileCsdText.toString","csoundPerform","csoundPerform.toString","csoundPerformKsmps","csoundPerformKsmpsWasi","csoundPerformKsmps.toString","csoundPerformBuffer","csoundPerformBuffer.toString","csoundStop","csoundStop.toString","csoundCleanup","csoundCleanup.toString","csoundReset","csoundResetWasi","csoundReset.toString","sizeOfPrimitive","int","MYFLT","char","sizeofStruct","jsStruct","total","primitive","rest","structBufferToObject","parameters","parameterName","currentSize","currentValue","decode","subarray","uint","CSOUND_PARAMS","CS_MIDIDEVICE","csoundGetSr","csoundGetSr.toString","csoundGetKr","csoundGetKr.toString","csoundGetKsmps","csoundGetKsmps.toString","csoundGetNchnls","csoundGetNchnls.toString","csoundGetNchnlsInput","csoundGetNchnlsInput.toString","csoundGet0dBFS","csoundGet0dBFS.toString","csoundGetA4","csoundGetA4.toString","csoundGetCurrentTimeSamples","csoundGetCurrentTimeSamples.toString","csoundGetSizeOfMYFLT","csoundGetSizeOfMYFLT.toString","csoundSetOption","option","csoundSetOption.toString","csoundSetParams","csoundParameters","csoundSetParams.toString","csoundGetParams","structLength","structOffset","allocCsoundParamsStruct","structBuffer","currentCsoundParameters","freeCsoundParams","csoundGetParams.toString","csoundGetDebug","csoundGetDebug.toString","csoundSetDebug","csoundSetDebug.toString","csoundGetInputBufferSize","csoundGetInputBufferSize.toString","csoundGetOutputBufferSize","csoundGetOutputBufferSize.toString","csoundGetInputBuffer","csoundGetInputBuffer.toString","csoundGetOutputBuffer","csoundGetOutputBuffer.toString","csoundGetSpin","csoundGetSpin.toString","csoundGetSpout","csoundGetSpout.toString","curry","_args","adjustFn","index","replaceFn","list","actualIndex","always","_isArray","assoc","assocFn","newValue","_isInteger","n","assocPathFn","input","pathArrValue","nextinput","clampFn","min","max","_keys","keys","mapArray","isIndexed","willReturn","mapObject","len","iterable","_iterable","reduceFn","reducer","acc","TypeError","defaultTo","defaultArgument","_input","isNaN","typeResult","_arrayFromIterator","iter","next","done","_equalsSets","b","size","aList","values","bList","filter","filtered","aInstance","typeOfValue","includes","foundIndex","equals","parseError","maybeError","typeofError","__proto__","_b","aType","is","aClone","from","bClone","loopArrayFlag","forEach","aCloneInstance","aCloneIndex","aRegex","RegExp","bRegex","aDate","toDateString","getTime","bDate","aError","bError","aKeys","loopObjectFlag","aKeyInstance","aValue","bValue","dissoc","_obj","propToFind","eqPropsFn","property","objA","objB","filterObject","predicate","filterArray","indexed","predicateResult","pathInput","counter","ifElseFn","condition","onTrue","onFalse","conditionResult","baseSlice","array","end","targetPrototype","_x","isEmpty","inputType","updateFn","maxByFn","compareFn","y","merge","newProps","_newProps","mergeAll","minByFn","moveFn","fromIndex","toIndex","multiply","_y","Identity","over","overFn","lens","pathEqFn","pathToSearch","pathOrFn","propEqFn","valueToMatch","propIsFn","propOrFn","range","_end","reject","_list","pattern","replacer","setFn","sliceFn","to","take","howMany","listOrString","_listOrString","whenFn","whenTrueFn","zipWithFn","xInstance","csoundGetMIDIDevList","isOutput","numberOfDevices","allocCsMidiDeviceStruct","out","freeCsMidiDeviceStruct","csoundGetMIDIDevList.toString","csoundGetRtMidiName","ptr","getRtMidiName","stringBuffer","csoundGetRtMidiName.toString","csoundPushMidiMessage","data1","data2","pushMidiMessage","csoundPushMidiMessage.toString","csoundInputMessage","scoEvent","csoundInputMessage.toString","csoundInputMessageAsync","csoundInputMessageAsync.toString","csoundGetControlChannel","channelName","csoundGetControlChannelWasi","csoundGetControlChannel.toString","csoundSetControlChannel","csoundSetControlChannel.toString","csoundGetStringChannel","pointerToResult","csoundGetStringChannelWasi","intArray","csoundGetStringChannel.toString","csoundSetStringChannel","stringPtr2","csoundSetStringChannel.toString","csoundGetOutputName","csoundGetOutputName.toString","csoundGetInputName","csoundGetInputName.toString","csoundAppendEnv","variable","varStringPtr","valueStringPtr","res","csoundAppendEnv.toString","csoundIsScorePending","csoundIsScorePending.toString","csoundSetScorePending","pending","csoundSetScorePending.toString","csoundReadScore","score","csoundReadScore.toString","csoundGetScoreTime","csoundGetScoreTime.toString","csoundGetScoreOffsetSeconds","csoundGetScoreOffsetSeconds.toString","csoundSetScoreOffsetSeconds","time","csoundSetScoreOffsetSeconds.toString","csoundRewindScore","csoundRewindScore.toString","csoundTableLength","tableNumber","csoundTableLength.toString","csoundTableGet","tableIndex","csoundTableGet.toString","csoundTableSet","csoundTableSet.toString","csoundTableCopyIn","arrayPtr","allocFloatArray","Float64Array","freeFloatArrayMem","csoundTableCopyIn.toString","csoundTableCopyOut","tableLength","jsArray","csoundTableCopyOut.toString","csoundGetTable","csoundGetTableArgs","csoundGetTableArgs.toString","csoundIsNamedGEN","csoundIsNamedGEN.toString","csoundGetNamedGEN","stringLength","csoundGetNamedGEN.toString","writeFile","data_","writeFile.toString","appendFile","appendFile.toString","readFile","readFile.toString","unlink","unlink.toString","readdir","readdir.toString","mkdir","mkdir.toString","$jscomp$tmp$exports$module$name","api","csoundSetParameters","csoundGetParameters","csoundGetMIDIDevelopmentList","csoundSetMidiCallbacks","csoundGetMidiOutFileName","getMidiOutFileName","_isRequestingRtMidiInput","isRequestingRtMidiInput","csoundAppendEnvironment","csoundShouldDaemonize","csoundGetTableArguments","fs","accumulator","k","WebkitAudioContext","window","webkitAudioContext","AudioContext","csoundApiRename","apiName","minusCsound","toLowerCase","stopableStates","makeProxyCallback","proxyPort","csoundInstance","apiK","playState","arguments_","has","modifiedFs","callUncloned","makeSingleThreadCallback","apiCallback","fetchPlugins","withPlugins","all","url","arrayBuffer","response","fetch","messageEventHandler","worker","event","publicEvents","triggerMessage","playStateChange","onPlayStateChange","iterableMessageChannel","safelyClosePorts","p1","p2","IPCMessagePorts","mainMessagePort","workerMessagePort","mainMessagePortAudio","workerMessagePortAudio","csoundWorkerFrameRequestPort","audioWorkerFrameRequestPort","csoundWorkerAudioInputPort","audioWorkerAudioInputPort","csoundWorkerRtMidiPort","csoundMainRtMidiPort","sabWorkerCallbackReply","sabMainCallbackReply","mainMessagePort2","workerMessagePort2","restartAudioWorkerPorts","clearArray","pop","EventPromises","timeoutTimers","resumeResolver","resumePromise","pauseResolver","pausePromise","stopResolver","stopPromise","startResolver","startPromise","createStartPromise","releaseStartPromise","createStopPromise","releaseStopPromise","createPausePromise","releasePausePromise","createResumePromise","releaseResumePromise","waitForStart","waitForStop","isWaitingToStart","isWaitingToStop","isWaiting","eventAsking","waitForPause","waitForResume","timer","setTimeout","clearTimeout","module$node_modules$eventemitter3$umd$eventemitter3_min.default","f","u","t","o","once","_events","_eventsCount","create","eventNames","s.prototype.eventNames","getOwnPropertySymbols","listeners","s.prototype.listeners","listenerCount","s.prototype.listenerCount","emit","s.prototype.emit","removeListener","on","s.prototype.on","s.prototype.once","s.prototype.removeListener","removeAllListeners","s.prototype.removeAllListeners","off","addListener","prefixed","EventEmitter","PublicEventAPI","eventEmitter","currentDerivedPlayState","decorateAPI","triggerRealtimePerformanceStarted","triggerRealtimePerformancePaused","triggerRealtimePerformanceResumed","triggerRealtimePerformanceEnded","triggerRenderStarted","triggerRenderEnded","triggerOnAudioNodeCreated","terminateInstance","audioNode","exportApi","worker.vanilla","createObjectURL","URL","webkitURL","Blob","VanillaWorkerMainThread","audioContext","audioWorker","audioContextIsProvided","inputChannelCount","outputChannelCount","ipcMessagePorts","eventPromises","csoundWorkerMain","sampleRate","currentPlayState","midiPortStarted","csoundWorker","terminate","handleMidiInput","payload","prepareRealtimePerformance","getSr","inputName","getInputName","isRequestingInput","isRequestingMidi","outputsCount","getNchnls","inputsCount","newPlayState","csoundPause","workletProxy","pause","csoundResume","resume","initialize","wasmDataURI","wasmBytes","initIframe","Worker","VanillaWorker","messagePort","requestPort","audioInputPort","rtmidiPort","getAudioContext","this.exportApi.getAudioContext","getNode","this.exportApi.getNode","maybeNode","audioWorkletNode","node","enableAudioInput","this.exportApi.enableAudioInput","API","reference","proxyCallback","startResult","stop","resetResult","reset","method","proxyFsCallback","$jscompDefaultExport","USER_ACTIVATION_EVENTS","initialSharedState","DEFAULT_BUFFER_LEN","AUDIO_STATE","CSOUND_LOCK","FRAMES_REQUESTED","IS_PERFORMING","IS_RENDERING","IS_PAUSED","STOP","SAMPLE_RATE","KSMPS","NCHNLS","NCHNLS_I","IS_REQUESTING_MIC","BUFFER_LEN","OUTPUT_READ_INDEX","OUTPUT_WRITE_INDEX","AVAIL_IN_BUFS","AVAIL_OUT_BUFS","IS_REQUESTING_RTMIDI","RTMIDI_INDEX","AVAIL_RTMIDI_EVENTS","HAS_PENDING_CALLBACKS","sab","worker.sab","SharedArrayBufferMainThread","hasSharedArrayBuffer","callbackId","callbackBuffer","audioStateBuffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","audioStatePointer","Atomics","store","audioStreamIn","audioStreamOut","midiBufferSAB","midiBuffer","currentQueueLength","load","rtmidiBufferIndex","nextIndex","MIDI_BUFFER_PAYLOAD_SIZE","MIDI_BUFFER_SIZE","add","notify","argumentz","apiKey","resolveCallback","inputCount","ksmps","SABWorker","answer","wasmTransformerDataURI","callbackPort","unlock","compareExchange","midiMessage","midiMessage.toString","proxyFsCallback.toString","bufferWrappedCallback","returnPromise","timeout","bufferWrappedCallback.toString","requestMidi","onMidiMessage","navigator","requestMIDIAccess","midiDevices","inputs","midiInputs","onmidimessage","worklet","worker.worklet","UID","AudioWorkletMainThread","autoConnect","softwareBufferSize","hardwareBufferSize","createWorkletNode","disconnect","state","contextUid","AudioWorkletNode","processorOptions","maybeSharedArrayBuffer","maybeSharedArrayBufferAudioIn","maybeSharedArrayBufferAudioOut","workletWorkerUrl","revokeObjectURL","WorkletWorker","audioWorklet","addModule","resolveMicrophonePromise","microphonePromise","getUserMedia","mediaDevices","webkitGetUserMedia","mozGetUserMedia","microphoneCallback","stream","liveInput","createMediaStreamSource","channelCount","newNode","connect","destination","audio","echoCancellation","sampleSize","optional","inputPort","requestMicrophoneNode","old_spn","worker.old_spn","spnWorker","ScriptProcessorNodeMainThread","scriptProcessorNode","iFrameElement","remove","setPlayState","parentScope","iFrameHtml","ScriptProcessorNodeWorker","iFrameBlob","createElement","sandbox","cssText","iFrameOnLoad","onload","this.iFrameElement.onload","body","append","contentWindow","initialPlayState","BigInt","WASI_RIGHT_FD_DATASYNC","WASI_RIGHT_FD_READ","WASI_RIGHT_FD_SEEK","WASI_RIGHT_FD_FDSTAT_SET_FLAGS","WASI_RIGHT_FD_SYNC","WASI_RIGHT_FD_TELL","WASI_RIGHT_FD_WRITE","WASI_RIGHT_FD_ADVISE","WASI_RIGHT_FD_ALLOCATE","WASI_RIGHT_FD_FILESTAT_GET","WASI_RIGHT_FD_FILESTAT_SET_SIZE","WASI_RIGHT_FD_FILESTAT_SET_TIMES","WASI_RIGHT_POLL_FD_READWRITE","RIGHTS_REGULAR_FILE_BASE","RIGHTS_REGULAR_FILE_INHERITING","DebugError","cause","captureStackTrace","reportErrorToServer","dom","NodeType","ELEMENT","ATTRIBUTE","TEXT","CDATA_SECTION","ENTITY_REFERENCE","ENTITY","PROCESSING_INSTRUCTION","COMMENT","DOCUMENT","DOCUMENT_TYPE","DOCUMENT_FRAGMENT","NOTATION","asserts","ENABLE_ASSERTS","AssertionError","goog.asserts.AssertionError","messagePattern","messageArgs","subs_","DEFAULT_ERROR_HANDLER","goog.asserts.DEFAULT_ERROR_HANDLER","errorHandler_","goog.asserts.subs_","subs","splitParts","returnString","subLast","sub","doAssertFailure_","goog.asserts.doAssertFailure_","defaultMessage","defaultArgs","givenMessage","givenArgs","setErrorHandler","goog.asserts.setErrorHandler","errorHandler","assert","goog.asserts.assert","assertExists","goog.asserts.assertExists","fail","goog.asserts.fail","assertNumber","goog.asserts.assertNumber","assertString","goog.asserts.assertString","assertFunction","goog.asserts.assertFunction","assertObject","goog.asserts.assertObject","assertArray","goog.asserts.assertArray","assertBoolean","goog.asserts.assertBoolean","assertElement","goog.asserts.assertElement","nodeType","assertInstanceof","goog.asserts.assertInstanceof","getType_","assertFinite","goog.asserts.assertFinite","isFinite","goog.asserts.getType_","displayName","NATIVE_ARRAY_PROTOTYPES","ASSUME_NATIVE_FUNCTIONS","peek","opt_fromIndex","lastIndexOf","arr2","forEachRight","resLength","rval","reduceRight","some","every","count","element","find","findIndex","findRight","findIndexRight","contains","clear","insert","insertAt","opt_i","insertArrayAt","elementsToAdd","insertBefore","opt_obj2","rv","removeAt","removeLast","removeIf","removeAllIf","removedCount","toArray","extend","arr1","len1","len2","j","opt_end","removeDuplicates","opt_rv","opt_hashFn","defaultHashFn","item","returnArray","hashFn","cursorInsert","cursorRead","seen","current","binarySearch","opt_compareFn","binarySearch_","defaultCompare","binarySelect","evaluator","isEvaluator","opt_target","opt_selfObj","left","right","found","middle","compareResult","sort","stableSort","compArr","valueCompareFn","stableCompareFn","obj1","obj2","sortByKey","keyFn","keyCompareFn","sortObjectsByKey","isSorted","opt_strict","compare","opt_equalsFn","equalsFn","defaultCompareEquality","compare3","inverseDefaultCompare","binaryInsert","binaryRemove","bucket","sorter","buckets","bucketToMap","toObject","keyFunc","ret","toMap","startOrEnd","opt_step","step","repeat","flatten","CHUNK_SIZE","chunk","recurseResult","rotate","moveItem","removedItems","zip","minLen","shuffle","opt_randFn","randFn","tmp","copyByIndex","index_arr","concatMap","assertIsLocation","goog.dom.asserts.assertIsLocation","win","getWindow_","Location","Element","debugStringForType_","assertIsElementType_","goog.dom.asserts.assertIsElementType_","typename","assertIsHTMLAnchorElement","goog.dom.asserts.assertIsHTMLAnchorElement","assertIsHTMLButtonElement","goog.dom.asserts.assertIsHTMLButtonElement","assertIsHTMLLinkElement","goog.dom.asserts.assertIsHTMLLinkElement","assertIsHTMLImageElement","goog.dom.asserts.assertIsHTMLImageElement","assertIsHTMLAudioElement","goog.dom.asserts.assertIsHTMLAudioElement","assertIsHTMLVideoElement","goog.dom.asserts.assertIsHTMLVideoElement","assertIsHTMLInputElement","goog.dom.asserts.assertIsHTMLInputElement","assertIsHTMLTextAreaElement","goog.dom.asserts.assertIsHTMLTextAreaElement","assertIsHTMLCanvasElement","goog.dom.asserts.assertIsHTMLCanvasElement","assertIsHTMLEmbedElement","goog.dom.asserts.assertIsHTMLEmbedElement","assertIsHTMLFormElement","goog.dom.asserts.assertIsHTMLFormElement","assertIsHTMLFrameElement","goog.dom.asserts.assertIsHTMLFrameElement","assertIsHTMLIFrameElement","goog.dom.asserts.assertIsHTMLIFrameElement","assertIsHTMLObjectElement","goog.dom.asserts.assertIsHTMLObjectElement","assertIsHTMLScriptElement","goog.dom.asserts.assertIsHTMLScriptElement","goog.dom.asserts.debugStringForType_","goog.dom.asserts.getWindow_","ownerDocument","defaultView","parentWindow","functions","constant","goog.functions.constant","retValue","FALSE","goog.functions.FALSE","TRUE","goog.functions.TRUE","NULL","goog.functions.NULL","UNDEFINED","goog.functions.UNDEFINED","EMPTY","identity","goog.functions.identity","opt_returnValue","goog.functions.error","goog.functions.fail","lock","goog.functions.lock","opt_numArgs","nth","goog.functions.nth","partialRight","goog.functions.partialRight","rightArgs","withReturnValue","goog.functions.withReturnValue","sequence","equalTo","goog.functions.equalTo","opt_useLooseComparison","other","compose","goog.functions.compose","goog.functions.sequence","and","goog.functions.and","or","goog.functions.or","not","goog.functions.not","goog.functions.create","temp","CACHE_RETURN_VALUE","cacheReturnValue","goog.functions.cacheReturnValue","called","goog.functions.once","inner","debounce","goog.functions.debounce","interval","opt_scope","throttle","goog.functions.throttle","fire","handleTimeout","storedArgs","shouldFire","rateLimit","goog.functions.rateLimit","isFunction","goog.functions.isFunction","TypedString","goog.string.TypedString","Const","goog.string.Const","opt_token","opt_content","stringConstValueWithSecurityContract__googStringSecurityPrivate_","GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_","STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_","TYPE_MARKER_","implementsGoogStringTypedString","getTypedStringValue","goog.string.Const.prototype.getTypedStringValue","goog.string.Const.prototype.toString","unwrap","goog.string.Const.unwrap","stringConst","goog.string.Const.from","i18n","bidi","FORCE_RTL","IS_RTL","substring","Format","LRE","RLE","PDF","LRM","RLM","Dir","LTR","RTL","NEUTRAL","RIGHT","LEFT","I18N_RIGHT","I18N_LEFT","toDir","goog.i18n.bidi.toDir","givenDir","opt_noNeutral","ltrChars_","rtlChars_","htmlSkipReg_","stripHtmlIfNeeded_","goog.i18n.bidi.stripHtmlIfNeeded_","opt_isStripNeeded","rtlCharReg_","ltrCharReg_","hasAnyRtl","goog.i18n.bidi.hasAnyRtl","opt_isHtml","hasRtlChar","hasAnyLtr","goog.i18n.bidi.hasAnyLtr","ltrRe_","rtlRe_","isRtlChar","goog.i18n.bidi.isRtlChar","isLtrChar","goog.i18n.bidi.isLtrChar","isNeutralChar","goog.i18n.bidi.isNeutralChar","ltrDirCheckRe_","rtlDirCheckRe_","startsWithRtl","goog.i18n.bidi.startsWithRtl","isRtlText","startsWithLtr","goog.i18n.bidi.startsWithLtr","isLtrText","isRequiredLtrRe_","isNeutralText","goog.i18n.bidi.isNeutralText","ltrExitDirCheckRe_","rtlExitDirCheckRe_","endsWithLtr","goog.i18n.bidi.endsWithLtr","isLtrExitText","endsWithRtl","goog.i18n.bidi.endsWithRtl","isRtlExitText","rtlLocalesRe_","isRtlLanguage","goog.i18n.bidi.isRtlLanguage","lang","bracketGuardTextRe_","guardBracketInText","goog.i18n.bidi.guardBracketInText","opt_isRtlContext","mark","useRtl","enforceRtlInHtml","goog.i18n.bidi.enforceRtlInHtml","enforceRtlInText","goog.i18n.bidi.enforceRtlInText","text","enforceLtrInHtml","goog.i18n.bidi.enforceLtrInHtml","enforceLtrInText","goog.i18n.bidi.enforceLtrInText","dimensionsRe_","leftRe_","rightRe_","tempRe_","mirrorCSS","goog.i18n.bidi.mirrorCSS","cssStr","doubleQuoteSubstituteRe_","singleQuoteSubstituteRe_","normalizeHebrewQuote","goog.i18n.bidi.normalizeHebrewQuote","wordSeparatorRe_","hasNumeralsRe_","rtlDetectionThreshold_","estimateDirection","goog.i18n.bidi.estimateDirection","rtlCount","totalCount","hasWeaklyLtr","tokens","token","detectRtlDirectionality","goog.i18n.bidi.detectRtlDirectionality","setElementDirAndAlign","goog.i18n.bidi.setElementDirAndAlign","dir","textAlign","setElementDirByTextDirectionality","goog.i18n.bidi.setElementDirByTextDirectionality","DirectionalString","goog.i18n.bidi.DirectionalString","trustedtypes","getPolicyPrivateDoNotAccessOrElse","goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse","cachedPolicy_","CONSTRUCTOR_TOKEN_PRIVATE","SafeScript","privateDoNotAccessOrElseSafeScriptWrappedValue_","fromConstant","scriptString","createSafeScriptSecurityPrivateDoNotAccessOrElse","fromJson","stringify_","safeScript","unwrapTrustedScript","json","trustedScript","SafeScript.prototype.toString","createObjectUrl","goog.fs.url.createObjectUrl","getUrlObject_","revokeObjectUrl","goog.fs.url.revokeObjectUrl","UrlObject_","goog.fs.url.UrlObject_","goog.fs.url.UrlObject_.prototype.createObjectURL","goog.fs.url.UrlObject_.prototype.revokeObjectURL","goog.fs.url.getUrlObject_","urlObject","findUrlObject_","goog.fs.url.findUrlObject_","browserSupportsObjectUrls","goog.fs.url.browserSupportsObjectUrls","blob","getBlob","goog.fs.blob.getBlob","BlobBuilder","WebKitBlobBuilder","bb","getBlobWithProperties","goog.fs.blob.getBlobWithProperties","opt_type","opt_endings","properties","TrustedResourceUrl","privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_","CONSTRUCTOR_TOKEN_PRIVATE_","goog.html.TrustedResourceUrl.prototype.getTypedStringValue","implementsGoogI18nBidiDirectionalString","getDirection","goog.html.TrustedResourceUrl.prototype.getDirection","cloneWithParams","goog.html.TrustedResourceUrl.prototype.cloneWithParams","searchParams","opt_hashParams","URL_PARAM_PARSER_","exec","urlHash","createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse","urlBase","stringifyParams_","goog.html.TrustedResourceUrl.prototype.toString","goog.html.TrustedResourceUrl.unwrap","trustedResourceUrl","unwrapTrustedScriptURL","goog.html.TrustedResourceUrl.unwrapTrustedScriptURL","format","goog.html.TrustedResourceUrl.format","formatStr","BASE_URL_","FORMAT_MARKER_","arg","encodeURIComponent","formatWithParams","goog.html.TrustedResourceUrl.formatWithParams","goog.html.TrustedResourceUrl.fromConstant","fromConstants","goog.html.TrustedResourceUrl.fromConstants","unwrapped","fromSafeScript","goog.html.TrustedResourceUrl.fromSafeScript","goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse","goog.html.TrustedResourceUrl.stringifyParams_","prefix","currentString","outputValues","outputValue","internal","startsWith","goog.string.internal.startsWith","endsWith","goog.string.internal.endsWith","caseInsensitiveStartsWith","goog.string.internal.caseInsensitiveStartsWith","caseInsensitiveCompare","caseInsensitiveEndsWith","goog.string.internal.caseInsensitiveEndsWith","caseInsensitiveEquals","goog.string.internal.caseInsensitiveEquals","str1","str2","isEmptyOrWhitespace","goog.string.internal.isEmptyOrWhitespace","trim","goog.string.internal.caseInsensitiveCompare","test1","test2","newLineToBr","goog.string.internal.newLineToBr","opt_xml","htmlEscape","goog.string.internal.htmlEscape","opt_isLikelyToContainHtmlChars","AMP_RE_","LT_RE_","GT_RE_","QUOT_RE_","SINGLE_QUOTE_RE_","NULL_RE_","ALL_RE_","whitespaceEscape","goog.string.internal.whitespaceEscape","goog.string.internal.contains","subString","caseInsensitiveContains","goog.string.internal.caseInsensitiveContains","compareVersions","goog.string.internal.compareVersions","version1","version2","order","v1Subs","v2Subs","subCount","subIdx","v1Sub","v2Sub","v1Comp","v2Comp","v1CompNum","parseInt","v2CompNum","compareElements_","goog.string.internal.compareElements_","SafeUrl","privateDoNotAccessOrElseSafeUrlWrappedValue_","INNOCUOUS_STRING","goog.html.SafeUrl.prototype.getTypedStringValue","goog.html.SafeUrl.prototype.getDirection","goog.html.SafeUrl.prototype.toString","goog.html.SafeUrl.unwrap","safeUrl","goog.html.SafeUrl.fromConstant","createSafeUrlSecurityPrivateDoNotAccessOrElse","SAFE_MIME_TYPE_PATTERN_","isSafeMimeType","goog.html.SafeUrl.isSafeMimeType","mimeType","fromBlob","goog.html.SafeUrl.fromBlob","goog.html.SafeUrl.revokeObjectUrl","fromMediaSource","goog.html.SafeUrl.fromMediaSource","mediaSource","MediaSource","DATA_URL_PATTERN_","tryFromDataUrl","goog.html.SafeUrl.tryFromDataUrl","dataUrl","filteredDataUrl","fromDataUrl","goog.html.SafeUrl.fromDataUrl","INNOCUOUS_URL","fromTelUrl","goog.html.SafeUrl.fromTelUrl","telUrl","SIP_URL_PATTERN_","fromSipUrl","goog.html.SafeUrl.fromSipUrl","sipUrl","decodeURIComponent","fromFacebookMessengerUrl","goog.html.SafeUrl.fromFacebookMessengerUrl","facebookMessengerUrl","fromWhatsAppUrl","goog.html.SafeUrl.fromWhatsAppUrl","whatsAppUrl","fromSmsUrl","goog.html.SafeUrl.fromSmsUrl","smsUrl","isSmsUrlBodyValid_","goog.html.SafeUrl.isSmsUrlBodyValid_","bodyParams","bodyValue","fromSshUrl","goog.html.SafeUrl.fromSshUrl","sshUrl","sanitizeChromeExtensionUrl","goog.html.SafeUrl.sanitizeChromeExtensionUrl","extensionId","sanitizeExtensionUrl_","sanitizeFirefoxExtensionUrl","goog.html.SafeUrl.sanitizeFirefoxExtensionUrl","sanitizeEdgeExtensionUrl","goog.html.SafeUrl.sanitizeEdgeExtensionUrl","goog.html.SafeUrl.sanitizeExtensionUrl_","scheme","matches","extractedExtensionId","acceptedExtensionIds","fromTrustedResourceUrl","goog.html.SafeUrl.fromTrustedResourceUrl","SAFE_URL_PATTERN_","SAFE_URL_PATTERN","trySanitize","goog.html.SafeUrl.trySanitize","sanitize","goog.html.SafeUrl.sanitize","sanitizeAssertUnchanged","goog.html.SafeUrl.sanitizeAssertUnchanged","opt_allowDataUrl","goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse","ABOUT_BLANK","SafeStyle","privateDoNotAccessOrElseSafeStyleWrappedValue_","styleString","createSafeStyleSecurityPrivateDoNotAccessOrElse","safeStyle","sanitizePropertyValue","addArgument","argument","sanitizePropertyValueString","valueWithoutFunctions","FUNCTIONS_RE","URL_RE","VALUE_RE","COMMENT_RE","outsideDouble","outsideSingle","hasBalancedSquareBrackets","sanitizeUrl","outside","tokenRe","before","after","quote","inside","sanitized","getKeys","containsValue","findKey","thisObj","unsafeClone","ArrayBuffer","isView","DataView","PROTOTYPE_FIELDS","argLength","createSet","containsKey","createImmutableView","isFrozen","freeze","findValue","getAllPropertyNames","includeObjectPrototype","includeFunctionPrototype","getOwnPropertyNames","getPrototypeOf","visitedSet","proto","names","getAnyKey","getAnyValue","getCount","getSuperClass","getValueByKeys","getValues","isImmutableView","setIfUndefined","setWithReturnValueIfNotSet","transpose","transposed","SafeStyleSheet","privateDoNotAccessOrElseSafeStyleSheetWrappedValue_","createRule","selector","selectorToCheck","hasBalancedBrackets_","styleSheet","createSafeStyleSheetSecurityPrivateDoNotAccessOrElse","brackets","expectedBrackets","styleSheetString","safeStyleSheet","SafeStyleSheet.prototype.toString","HtmlElement","goog.dom.HtmlElement","TagName","cast","A","ABBR","ACRONYM","ADDRESS","APPLET","AREA","ARTICLE","ASIDE","AUDIO","B","BASE","BASEFONT","BDI","BDO","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CANVAS","CAPTION","CENTER","CITE","CODE","COL","COLGROUP","COMMAND","DATA","DATALIST","DD","DEL","DETAILS","DFN","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IFRAME","IMG","INPUT","INS","ISINDEX","KBD","KEYGEN","LABEL","LEGEND","LI","LINK","MAIN","MAP","MARK","MATH","MENU","MENUITEM","META","METER","NAV","NOFRAMES","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","OUTPUT","P","PARAM","PICTURE","PRE","PROGRESS","Q","RP","RT","RTC","RUBY","S","SAMP","SCRIPT","SECTION","SELECT","SMALL","SOURCE","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","SVG","TABLE","TBODY","TD","TEMPLATE","TEXTAREA","TFOOT","TH","THEAD","TIME","TITLE","TR","TRACK","TT","U","UL","VAR","VIDEO","WBR","USE_CLIENT_HINTS","getNativeUserAgentString","userAgent","getNativeUserAgentData","userAgentData","userAgentInternal","userAgentDataInternal","getUserAgent","matchUserAgentDataBrand","brands","brand","matchUserAgent","extractVersionTuples","versionRegExp","ASSUME_CLIENT_HINTS_SUPPORT","getUserAgentData","matchUserAgentIgnoreCase","resetUserAgentData","setUserAgent","setUserAgentData","getIfLoaded","key_","promise_","value_","pending_","dataValues","getHighEntropyValues","resetForTesting","versionString","versionString_","toVersionStringForLogging","isAtLeast","version","fullVersionListAvailable","hasFullVersionList","setHasFullVersionListForTesting","fullVersionList","HighEntropyValue","platformVersion","resetAllForTesting","Brand","ANDROID_BROWSER","CHROMIUM","EDGE","FIREFOX","IE","OPERA","SAFARI","SILK","useUserAgentDataBrand","matchOpera","matchIE","matchEdgeHtml","matchEdgeChromium","matchOperaChromium","matchFirefox","matchSafari","matchChrome","matchCoast","isSilk","matchAndroidBrowser","isChrome","isFirefox","isOpera","isIE","isEdge","isEdgeChromium","isOperaChromium","isSafari","isCoast","isIosWebview","matchIosWebview","isAndroidBrowser","createVersionMap","versionTuples","versionMap","tuple","getVersion","userAgentString","getIEVersion","lookUpValueWithKeys","isVersionOrHigher","msie","tridentVersion","getFullVersionFromUserAgentString","browser","versionOf","matchingBrand","NaN","versionParts","fullVersion","majorVersion","googAsserts","isAtMost","HighEntropyBrandVersion","brand_","loadedVersionList","Version","UserAgentStringFallbackBrandVersion","version_","loadFullVersions","fullVersionOf","fullVersionFromUserAgentString","getVersionStringForLogging","fullVersionObj","tags","VOID_TAGS_","isVoidTag","goog.dom.tags.isVoidTag","tagName","SafeHtml","privateDoNotAccessOrElseSafeHtmlWrappedValue_","dir_","safeHtml","unwrapTrustedHTML","textOrHtml","textIsObject","textAsString","createSafeHtmlSecurityPrivateDoNotAccessOrElse","htmlEscapePreservingNewlines","htmlEscapePreservingNewlinesAndSpaces","comment","attributes","content","verifyTagName","createSafeHtmlTagSecurityPrivateDoNotAccessOrElse","VALID_NAMES_IN_TAG","ENABLE_ERROR_MESSAGES","toUpperCase","NOT_ALLOWED_TAG_NAMES","createIframe","srcdoc","fixedAttributes","combinedAttrs","combineAttributes","defaultAttributes","createSandboxIframe","canUseSandboxIframe","createScriptSrc","attr","attrLower","htmlContent","createStyle","createMetaRefresh","secs","unwrappedUrl","createWithDir","separator","separatorHtml","htmlDir","concatWithDir","trustedHtml","stringifyAttributes","dirAttribute","SUPPORT_STYLE_ATTRIBUTE","URL_ATTRIBUTES","combinedAttributes","nameLower","DOCTYPE_HTML","emptyHTML","uncheckedconversions","safeHtmlFromStringKnownToSatisfyTypeContract","goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract","justification","opt_dir","safeScriptFromStringKnownToSatisfyTypeContract","goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract","safeStyleFromStringKnownToSatisfyTypeContract","goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract","safeStyleSheetFromStringKnownToSatisfyTypeContract","goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract","safeUrlFromStringKnownToSatisfyTypeContract","goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract","trustedResourceUrlFromStringKnownToSatisfyTypeContract","goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract","safe","InsertAdjacentHtmlPosition","AFTERBEGIN","AFTEREND","BEFOREBEGIN","BEFOREEND","insertAdjacentHtml","goog.dom.safe.insertAdjacentHtml","position","insertAdjacentHTML","SET_INNER_HTML_DISALLOWED_TAGS_","isInnerHtmlCleanupRecursive_","div","childDiv","appendChild","firstChild","innerChild","innerHTML","parentElement","unsafeSetInnerHtmlDoNotUseOrElse","goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse","elem","lastChild","removeChild","setInnerHtml","goog.dom.safe.setInnerHtml","setInnerHtmlFromConstant","goog.dom.safe.setInnerHtmlFromConstant","constHtml","setOuterHtml","goog.dom.safe.setOuterHtml","outerHTML","setFormElementAction","goog.dom.safe.setFormElementAction","form","action","setButtonFormAction","goog.dom.safe.setButtonFormAction","button","formAction","setInputFormAction","goog.dom.safe.setInputFormAction","setStyle","goog.dom.safe.setStyle","documentWrite","goog.dom.safe.documentWrite","write","setAnchorHref","goog.dom.safe.setAnchorHref","anchor","href","setImageSrc","goog.dom.safe.setImageSrc","imageElement","allowDataUrl","setAudioSrc","goog.dom.safe.setAudioSrc","audioElement","setVideoSrc","goog.dom.safe.setVideoSrc","videoElement","setEmbedSrc","goog.dom.safe.setEmbedSrc","embed","setFrameSrc","goog.dom.safe.setFrameSrc","frame","setIframeSrc","goog.dom.safe.setIframeSrc","iframe","setIframeSrcdoc","goog.dom.safe.setIframeSrcdoc","setLinkHrefAndRel","goog.dom.safe.setLinkHrefAndRel","link","rel","getStyleNonce","setAttribute","setObjectData","goog.dom.safe.setObjectData","setScriptSrc","goog.dom.safe.setScriptSrc","setNonceForScriptElement_","setScriptContent","goog.dom.safe.setScriptContent","textContent","goog.dom.safe.setNonceForScriptElement_","getScriptNonce","setLocationHref","goog.dom.safe.setLocationHref","loc","assignLocation","goog.dom.safe.assignLocation","replaceLocation","goog.dom.safe.replaceLocation","openInWindow","goog.dom.safe.openInWindow","opt_openerWin","opt_name","opt_specs","parseFromStringHtml","goog.dom.safe.parseFromStringHtml","parser","parseFromString","goog.dom.safe.parseFromString","createImageFromBlob","goog.dom.safe.createImageFromBlob","objectUrl","image","Image","image.onload","createContextualFragment","goog.dom.safe.createContextualFragment","goog.dom.safe.getScriptNonce","getNonce_","goog.dom.safe.getStyleNonce","goog.dom.safe.getNonce_","el","DETECT_DOUBLE_ESCAPING","FORCE_NON_DOM_HTML_UNESCAPING","Unicode","NBSP","goog.string.subs","subsArguments","collapseWhitespace","goog.string.collapseWhitespace","isEmptyString","goog.string.isEmptyString","isEmptyOrWhitespaceSafe","goog.string.isEmptyOrWhitespaceSafe","makeSafe","isEmptySafe","isBreakingWhitespace","goog.string.isBreakingWhitespace","isAlpha","goog.string.isAlpha","isNumeric","goog.string.isNumeric","isAlphaNumeric","goog.string.isAlphaNumeric","isSpace","goog.string.isSpace","isUnicodeChar","goog.string.isUnicodeChar","stripNewlines","goog.string.stripNewlines","canonicalizeNewlines","goog.string.canonicalizeNewlines","normalizeWhitespace","goog.string.normalizeWhitespace","normalizeSpaces","goog.string.normalizeSpaces","collapseBreakingSpaces","goog.string.collapseBreakingSpaces","trimLeft","goog.string.trimLeft","trimRight","goog.string.trimRight","numberAwareCompare_","goog.string.numberAwareCompare_","tokenizerRegExp","tokens1","tokens2","num1","num2","intAwareCompare","goog.string.intAwareCompare","floatAwareCompare","goog.string.floatAwareCompare","numerateCompare","urlEncode","goog.string.urlEncode","urlDecode","goog.string.urlDecode","goog.string.htmlEscape","E_RE_","unescapeEntities","goog.string.unescapeEntities","unescapeEntitiesUsingDom_","unescapePureXmlEntities_","unescapeEntitiesWithDocument","goog.string.unescapeEntitiesWithDocument","goog.string.unescapeEntitiesUsingDom_","opt_document","HTML_ENTITY_PATTERN_","entity","fromCharCode","nodeValue","goog.string.unescapePureXmlEntities_","goog.string.whitespaceEscape","preserveSpaces","goog.string.preserveSpaces","stripQuotes","goog.string.stripQuotes","quoteChars","quoteChar","truncate","goog.string.truncate","chars","opt_protectEscapedCharacters","truncateMiddle","goog.string.truncateMiddle","opt_trailingChars","endPoint","half","endPos","specialEscapeChars_","jsEscapeCache_","goog.string.quote","sb","cc","escapeChar","escapeString","goog.string.escapeString","goog.string.escapeChar","countOf","goog.string.countOf","ss","goog.string.removeAt","resultStr","goog.string.remove","removeAll","goog.string.removeAll","re","regExpEscape","replaceAll","goog.string.replaceAll","replacement","goog.string.regExpEscape","padNumber","goog.string.padNumber","num","opt_precision","toFixed","sign","goog.string.makeSafe","getRandomString","goog.string.getRandomString","abs","hashCode","goog.string.hashCode","uniqueStringCounter_","createUniqueString","goog.string.createUniqueString","toNumber","goog.string.toNumber","isLowerCamelCase","goog.string.isLowerCamelCase","isUpperCamelCase","goog.string.isUpperCamelCase","toCamelCase","goog.string.toCamelCase","toSelectorCase","goog.string.toSelectorCase","toTitleCase","goog.string.toTitleCase","opt_delimiters","delimiters","regexp","capitalize","goog.string.capitalize","goog.string.parseInt","splitLimit","goog.string.splitLimit","limit","returnVal","lastComponent","goog.string.lastComponent","separators","lastSeparatorIndex","currentSeparatorIndex","editDistance","goog.string.editDistance","v0","v1","cost","baseName","goog.string.path.baseName","basename","dirname","goog.string.path.dirname","head","extension","goog.string.path.extension","separatorIndex","goog.string.path.join","normalizePath","goog.string.path.normalizePath","initialSlashes","newParts","goog.string.path.split","tail","assertLeadingSlash","performanceNowPoly","performance","nowOffset","concatUint8Arrays","arrays","totalLength","WASI","fd","seekPos","buffers","getMemory","CPUTIME_START","WASI.prototype.start","_start","getImports","WASI.prototype.getImports","options","neededImports","WebAssembly","Module","imports","neededImport","kind","setMemory","WASI.prototype.setMemory","WASI.prototype.getMemory","view","byteLength","msToNs","WASI.prototype.msToNs","ms","msInt","trunc","decimal","round","WASI.prototype.now","clockId","WASI_CLOCK_MONOTONIC","WASI_CLOCK_REALTIME","WASI_CLOCK_PROCESS_CPUTIME_ID","WASI_CLOCK_THREAD_CPUTIME_ID","args_get","WASI.prototype.args_get","WASI_ESUCCESS","args_sizes_get","WASI.prototype.args_sizes_get","clock_res_get","WASI.prototype.clock_res_get","clock_time_get","WASI.prototype.clock_time_get","precision","nextTime","setBigUint64","environ_get","WASI.prototype.environ_get","environ_sizes_get","WASI.prototype.environ_sizes_get","fd_advise","WASI.prototype.fd_advise","WASI_ENOSYS","fd_allocate","WASI.prototype.fd_allocate","fd_close","WASI.prototype.fd_close","fd_datasync","WASI.prototype.fd_datasync","fd_fdstat_get","WASI.prototype.fd_fdstat_get","bufPtr","setUint8","WASI_FILETYPE_REGULAR_FILE","setUint16","fd_fdstat_set_flags","WASI.prototype.fd_fdstat_set_flags","fd_fdstat_set_rights","WASI.prototype.fd_fdstat_set_rights","fd_filestat_get","WASI.prototype.fd_filestat_get","filesize","uintArray","fd_filestat_set_size","WASI.prototype.fd_filestat_set_size","fd_filestat_set_times","WASI.prototype.fd_filestat_set_times","fd_pread","WASI.prototype.fd_pread","fd_prestat_dir_name","WASI.prototype.fd_prestat_dir_name","pathPtr","WASI_EBADF","directoryName","directoryNameBuffer","fd_prestat_get","WASI.prototype.fd_prestat_get","WASI_PREOPENTYPE_DIR","setUint32","fd_pwrite","WASI.prototype.fd_pwrite","iovs","iovsLength","nwritten","fd_read","WASI.prototype.fd_read","nread","totalBuffersLength","read","thisRead","reduced","buf","getUint32","bufLength","currentRead","chunkIndex","chunkOffset","currentChunkOffset","currentChunkIndex","leadup","currentBufferChunkLength","fd_readdir","WASI.prototype.fd_readdir","fd_renumber","WASI.prototype.fd_renumber","fd_seek","WASI.prototype.fd_seek","whence","newOffsetPtr","WASI_WHENCE_CUR","WASI_WHENCE_END","currentLength","writer","WASI_WHENCE_SET","fd_sync","WASI.prototype.fd_sync","fd_tell","WASI.prototype.fd_tell","offsetPtr","fd_write","WASI.prototype.fd_write","written","path_create_directory","WASI.prototype.path_create_directory","path_filestat_get","WASI.prototype.path_filestat_get","path_filestat_set_times","WASI.prototype.path_filestat_set_times","path_link","WASI.prototype.path_link","path_open","WASI.prototype.path_open","dirfd","dirflags","pathLength","oflags","fsRightsBase","fsRightsInheriting","fsFlags","directoryPath","pathOpenBytes","pathOpenString","pathOpen","alreadyExists","entry","actualFd","fileType","path_readlink","WASI.prototype.path_readlink","path_remove_directory","WASI.prototype.path_remove_directory","path_rename","WASI.prototype.path_rename","path_symlink","WASI.prototype.path_symlink","path_unlink_file","WASI.prototype.path_unlink_file","poll_oneoff","WASI.prototype.poll_oneoff","proc_exit","WASI.prototype.proc_exit","proc_raise","WASI.prototype.proc_raise","random_get","WASI.prototype.random_get","sched_yield","WASI.prototype.sched_yield","sock_recv","WASI.prototype.sock_recv","sock_send","WASI.prototype.sock_send","sock_shutdown","WASI.prototype.sock_shutdown","findBuffers","WASI.prototype.findBuffers","filePath","maybeFd","WASI.prototype.readdir","prefixPath","files","WASI.prototype.writeFile","fname","nextFd","maybeOldFd","WASI.prototype.appendFile","WASI.prototype.readFile","readStdOut","WASI.prototype.readStdOut","WASI.prototype.unlink","WASI.prototype.mkdir","cleanPath","DEFLATE","RESERVED","Zlib","Util","stringToByteArray","Zlib.Util.stringToByteArray","string_","temporary","il","charPointAt","Adler32","Zlib.Adler32","update","Zlib.Adler32.update","adler","s1","s2","length_","tlen","OptimizationParameter","Huffman","buildHuffmanTable","Zlib.Huffman.buildHuffmanTable","lengths","listSize","maxCodeLength","minCodeLength","POSITIVE_INFINITY","bitLength","skip","reversed","index_","table","Uint32Array","rtemp","RawInflate","Zlib.RawInflate","opt_parameters","blocks","bufferSize","ZLIB_RAW_INFLATE_BUFFER_SIZE","bitsbuflen","bitsbuf","ip","totalpos","bfinal","bufferType","BufferType","ADAPTIVE","resize","BLOCK","op","MaxBackwardLength","output","MaxCopyLength","decompress","Zlib.RawInflate.prototype.decompress","parseBlock","concatBufferBlock","concatBufferDynamic","Order","Uint16Array","LengthCodeTable","LengthExtraTable","DistCodeTable","DistExtraTable","FixedLiteralLengthTable","FixedDistanceTable","Zlib.RawInflate.prototype.parseBlock","hdr","readBits","parseUncompressedBlock","parseFixedHuffmanBlock","parseDynamicHuffmanBlock","Zlib.RawInflate.prototype.readBits","readCodeByTable","Zlib.RawInflate.prototype.readCodeByTable","inputLength","codeTable","codeWithLength","codeLength","Zlib.RawInflate.prototype.parseUncompressedBlock","olength","nlen","preCopy","expandBufferBlock","expandBufferAdaptive","fixRatio","Zlib.RawInflate.prototype.parseFixedHuffmanBlock","decodeHuffmanAdaptive","decodeHuffmanBlock","Zlib.RawInflate.prototype.parseDynamicHuffmanBlock","hlit","hdist","hclen","codeLengths","codeLengthsTable","lengthTable","previous","litlenTable","distTable","Zlib.RawInflate.prototype.decodeHuffmanBlock","litlen","dist","currentLitlenTable","codeDist","lengthCodeTable","lengthExtraTable","distCodeTable","distExtraTable","ti","Zlib.RawInflate.prototype.decodeHuffmanAdaptive","Zlib.RawInflate.prototype.expandBufferBlock","backward","Zlib.RawInflate.prototype.expandBufferAdaptive","opt_parameter","ratio","addRatio","maxHuffCode","maxInflateSize","newSize","Zlib.RawInflate.prototype.concatBufferBlock","pos","block","jl","Zlib.RawInflate.prototype.concatBufferDynamic","Inflate","Zlib.Inflate","verify","cmf","flg","CompressionMethod","rawinflate","Zlib.Inflate.prototype.decompress","adler32","csoundWasiJsMessageCallback","streamBuffer","csound_","attribute","endsWithNewline","startsWithNewline","chunks","printableChunks","maybePrintable","post","assertPluginExports","pluginInstance","__wasm_call_ctors","csoundModuleCreate","csound_opcode_init","csound_fgen_init","getBinaryHeaderData","getLEB","mul","byte","magicBytes","sectionSize","codePointAt","memorySize","memoryAlign","tableSize","tableAlign","neededDynlibsCount","loadStaticWasm","compile","Memory","initial","env","csoundLoadModules","options.env.csoundLoadModules","instantiate","__wasi_js_csoundSetMessageStringCallback","wasmFs","preopens","wasmCompressed","wasmZlib","magicData","wasmPlugin","accumulator_","wasmPluginBytes","pluginHeaderData","headerData","initialMemory","ceil","PAGE_SIZE","pluginsMemory","totalInitialMemory","fixedMemoryBase","maximum","Table","stackPointer","Global","mutable","heapBase","memoryBase","tableBase","__dummy","withPlugins_","currentMemorySegment","__indirect_function_table","__stack_pointer","__memory_base","__table_base","csoundModuleInit","csoundModuleDestroy","csoundModuleErrorCodeToString","tableEnd","grow","hostInstance","csoundWasiLoadPlugin","csoundOpcodeInit","csoundFgenInit","csoundWasiLoadOpcodeLibrary","_ZTH5errno","options.env._ZTH5errno","printDebugCallback","options.env.printDebugCallback","__heap_base","moduleExports","pluginMemorySize","pluginMemoryAlign","pluginTableSize","plugin","pluginOptions","pluginMemoryBase","MessagePortState","ready","MessagePortState.prototype.post","broadcastPlayState","MessagePortState.prototype.broadcastPlayState","workerState","vanillaWorkerState","ScriptProcessorNodeSingleThread","onaudioprocess","csoundApi","spn","createScriptProcessor","this.messagePort.post","started","running","stopResult","watcherStdOut","watcherStdErr","csoundInputBuffer","csoundOutputBuffer","nchnls_i","nchnls","cnt","outputPointer","inputPointer","zerodBFS","plugins","loadWasm","libcsoundFactory","resetCsound","renamedApiName","this.exportApi.reset","callReset","cs","libraryCsound","outputBuffer","channelData","getChannelData","bufferLength","channel","numberOfChannels","outputChannel","inputBuffer","csOut","csIn","nchnlsIn","inputChanMax","inputChannel","outChan0","outChan1","singlethread","worklet.singlethread.worker","initializeModule","SingleThreadAudioWorkletMainThread","messageCallbacks","initializeMessagePort","proxyCallback.toString","__toArrayBuffer","base64Data","binary","bufferFromBrowser","bytes","AudioWorkletGlobalScope","atobPolyfill","atob","bc","bs","idx","binary.wasm","unmuteIosAudio","handleUserActivation","htmlAudioState","createHtmlAudio","webAudioState","createBufferSource","createBuffer","maybeCleanup","preload","loop","silentAudioFile","play","eventName","capture","passive","maxTouchPoints","createSilentAudioFile","dataView","btoa","missingCharacters","Csound$$module$src$index","Csound","useWorker","useSAB","useSPN","latencyHint","vendor","workletSupport","AudioNode","spnSupport","hasSABSupport","csoundWasmApi"]
}
